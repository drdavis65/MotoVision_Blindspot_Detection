
MotoVision_Senior_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000427c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800440c  0800440c  0001440c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004508  08004508  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004508  08004508  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004508  08004508  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004508  08004508  00014508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800450c  0800450c  0001450c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000154  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001c4  200001c4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d806  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e02  00000000  00000000  0002d8a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa8  00000000  00000000  0002f6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009e0  00000000  00000000  00030150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b7ce  00000000  00000000  00030b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e90d  00000000  00000000  0004c2fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d3f5  00000000  00000000  0005ac0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f8000  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003300  00000000  00000000  000f8050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080043f4 	.word	0x080043f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080043f4 	.word	0x080043f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fb3d 	bl	80008f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f823 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 f8ff 	bl	8000480 <MX_GPIO_Init>
  MX_DMA_Init();
 8000282:	f000 f8df 	bl	8000444 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000286:	f000 f8ad 	bl	80003e4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800028a:	f000 f86d 	bl	8000368 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint16_t devAddr1 = 0x0062 << 1;
 800028e:	23c4      	movs	r3, #196	; 0xc4
 8000290:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, devAddr1, 1, 100);
 8000292:	88f9      	ldrh	r1, [r7, #6]
 8000294:	2364      	movs	r3, #100	; 0x64
 8000296:	2201      	movs	r2, #1
 8000298:	4807      	ldr	r0, [pc, #28]	; (80002b8 <main+0x48>)
 800029a:	f000 ffae 	bl	80011fa <HAL_I2C_IsDeviceReady>
 800029e:	4603      	mov	r3, r0
 80002a0:	717b      	strb	r3, [r7, #5]
  if(ret == HAL_OK)
 80002a2:	797b      	ldrb	r3, [r7, #5]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d103      	bne.n	80002b0 <main+0x40>
  {
	  printf("Device is ready.");
 80002a8:	4804      	ldr	r0, [pc, #16]	; (80002bc <main+0x4c>)
 80002aa:	f003 f915 	bl	80034d8 <iprintf>
 80002ae:	e002      	b.n	80002b6 <main+0x46>
  }
  else
  {
	  printf("Device not connected.");
 80002b0:	4803      	ldr	r0, [pc, #12]	; (80002c0 <main+0x50>)
 80002b2:	f003 f911 	bl	80034d8 <iprintf>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b6:	e7fe      	b.n	80002b6 <main+0x46>
 80002b8:	2000008c 	.word	0x2000008c
 80002bc:	0800440c 	.word	0x0800440c
 80002c0:	08004420 	.word	0x08004420

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b096      	sub	sp, #88	; 0x58
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002ce:	2228      	movs	r2, #40	; 0x28
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f003 f8f8 	bl	80034c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	f107 031c 	add.w	r3, r7, #28
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]
 80002f6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f8:	2302      	movs	r3, #2
 80002fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fc:	2301      	movs	r3, #1
 80002fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000300:	2310      	movs	r3, #16
 8000302:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000304:	2300      	movs	r3, #0
 8000306:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000308:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800030c:	4618      	mov	r0, r3
 800030e:	f001 f97d 	bl	800160c <HAL_RCC_OscConfig>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000318:	f000 f8e2 	bl	80004e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031c:	230f      	movs	r3, #15
 800031e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000320:	2300      	movs	r3, #0
 8000322:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000330:	f107 031c 	add.w	r3, r7, #28
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f002 f9a6 	bl	8002688 <HAL_RCC_ClockConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000342:	f000 f8cd 	bl	80004e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000346:	2320      	movs	r3, #32
 8000348:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800034a:	2300      	movs	r3, #0
 800034c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	4618      	mov	r0, r3
 8000352:	f002 fbcf 	bl	8002af4 <HAL_RCCEx_PeriphCLKConfig>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800035c:	f000 f8c0 	bl	80004e0 <Error_Handler>
  }
}
 8000360:	bf00      	nop
 8000362:	3758      	adds	r7, #88	; 0x58
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}

08000368 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <MX_I2C1_Init+0x74>)
 800036e:	4a1c      	ldr	r2, [pc, #112]	; (80003e0 <MX_I2C1_Init+0x78>)
 8000370:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <MX_I2C1_Init+0x74>)
 8000374:	f240 220b 	movw	r2, #523	; 0x20b
 8000378:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800037a:	4b18      	ldr	r3, [pc, #96]	; (80003dc <MX_I2C1_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000380:	4b16      	ldr	r3, [pc, #88]	; (80003dc <MX_I2C1_Init+0x74>)
 8000382:	2201      	movs	r2, #1
 8000384:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000386:	4b15      	ldr	r3, [pc, #84]	; (80003dc <MX_I2C1_Init+0x74>)
 8000388:	2200      	movs	r2, #0
 800038a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800038c:	4b13      	ldr	r3, [pc, #76]	; (80003dc <MX_I2C1_Init+0x74>)
 800038e:	2200      	movs	r2, #0
 8000390:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000392:	4b12      	ldr	r3, [pc, #72]	; (80003dc <MX_I2C1_Init+0x74>)
 8000394:	2200      	movs	r2, #0
 8000396:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000398:	4b10      	ldr	r3, [pc, #64]	; (80003dc <MX_I2C1_Init+0x74>)
 800039a:	2200      	movs	r2, #0
 800039c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800039e:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <MX_I2C1_Init+0x74>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003a4:	480d      	ldr	r0, [pc, #52]	; (80003dc <MX_I2C1_Init+0x74>)
 80003a6:	f000 fe99 	bl	80010dc <HAL_I2C_Init>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003b0:	f000 f896 	bl	80004e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003b4:	2100      	movs	r1, #0
 80003b6:	4809      	ldr	r0, [pc, #36]	; (80003dc <MX_I2C1_Init+0x74>)
 80003b8:	f001 f891 	bl	80014de <HAL_I2CEx_ConfigAnalogFilter>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80003c2:	f000 f88d 	bl	80004e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003c6:	2100      	movs	r1, #0
 80003c8:	4804      	ldr	r0, [pc, #16]	; (80003dc <MX_I2C1_Init+0x74>)
 80003ca:	f001 f8d3 	bl	8001574 <HAL_I2CEx_ConfigDigitalFilter>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80003d4:	f000 f884 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003d8:	bf00      	nop
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	2000008c 	.word	0x2000008c
 80003e0:	40005400 	.word	0x40005400

080003e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003e8:	4b14      	ldr	r3, [pc, #80]	; (800043c <MX_USART2_UART_Init+0x58>)
 80003ea:	4a15      	ldr	r2, [pc, #84]	; (8000440 <MX_USART2_UART_Init+0x5c>)
 80003ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003ee:	4b13      	ldr	r3, [pc, #76]	; (800043c <MX_USART2_UART_Init+0x58>)
 80003f0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003f6:	4b11      	ldr	r3, [pc, #68]	; (800043c <MX_USART2_UART_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003fc:	4b0f      	ldr	r3, [pc, #60]	; (800043c <MX_USART2_UART_Init+0x58>)
 80003fe:	2200      	movs	r2, #0
 8000400:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <MX_USART2_UART_Init+0x58>)
 8000404:	2200      	movs	r2, #0
 8000406:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000408:	4b0c      	ldr	r3, [pc, #48]	; (800043c <MX_USART2_UART_Init+0x58>)
 800040a:	220c      	movs	r2, #12
 800040c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <MX_USART2_UART_Init+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000414:	4b09      	ldr	r3, [pc, #36]	; (800043c <MX_USART2_UART_Init+0x58>)
 8000416:	2200      	movs	r2, #0
 8000418:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800041a:	4b08      	ldr	r3, [pc, #32]	; (800043c <MX_USART2_UART_Init+0x58>)
 800041c:	2200      	movs	r2, #0
 800041e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000420:	4b06      	ldr	r3, [pc, #24]	; (800043c <MX_USART2_UART_Init+0x58>)
 8000422:	2200      	movs	r2, #0
 8000424:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000426:	4805      	ldr	r0, [pc, #20]	; (800043c <MX_USART2_UART_Init+0x58>)
 8000428:	f002 fc8a 	bl	8002d40 <HAL_UART_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000432:	f000 f855 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000124 	.word	0x20000124
 8000440:	40004400 	.word	0x40004400

08000444 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800044a:	4b0c      	ldr	r3, [pc, #48]	; (800047c <MX_DMA_Init+0x38>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a0b      	ldr	r2, [pc, #44]	; (800047c <MX_DMA_Init+0x38>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b09      	ldr	r3, [pc, #36]	; (800047c <MX_DMA_Init+0x38>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f003 0301 	and.w	r3, r3, #1
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000462:	2200      	movs	r2, #0
 8000464:	2100      	movs	r1, #0
 8000466:	200d      	movs	r0, #13
 8000468:	f000 fb85 	bl	8000b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800046c:	200d      	movs	r0, #13
 800046e:	f000 fb9e 	bl	8000bae <HAL_NVIC_EnableIRQ>

}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000

08000480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000486:	4b15      	ldr	r3, [pc, #84]	; (80004dc <MX_GPIO_Init+0x5c>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	4a14      	ldr	r2, [pc, #80]	; (80004dc <MX_GPIO_Init+0x5c>)
 800048c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000490:	6153      	str	r3, [r2, #20]
 8000492:	4b12      	ldr	r3, [pc, #72]	; (80004dc <MX_GPIO_Init+0x5c>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049e:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <MX_GPIO_Init+0x5c>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	4a0e      	ldr	r2, [pc, #56]	; (80004dc <MX_GPIO_Init+0x5c>)
 80004a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004a8:	6153      	str	r3, [r2, #20]
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <MX_GPIO_Init+0x5c>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004b2:	60bb      	str	r3, [r7, #8]
 80004b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b6:	4b09      	ldr	r3, [pc, #36]	; (80004dc <MX_GPIO_Init+0x5c>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a08      	ldr	r2, [pc, #32]	; (80004dc <MX_GPIO_Init+0x5c>)
 80004bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004c0:	6153      	str	r3, [r2, #20]
 80004c2:	4b06      	ldr	r3, [pc, #24]	; (80004dc <MX_GPIO_Init+0x5c>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ce:	bf00      	nop
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40021000 	.word	0x40021000

080004e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e4:	b672      	cpsid	i
}
 80004e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <Error_Handler+0x8>
	...

080004ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f2:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <HAL_MspInit+0x44>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <HAL_MspInit+0x44>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6193      	str	r3, [r2, #24]
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <HAL_MspInit+0x44>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050a:	4b09      	ldr	r3, [pc, #36]	; (8000530 <HAL_MspInit+0x44>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	4a08      	ldr	r2, [pc, #32]	; (8000530 <HAL_MspInit+0x44>)
 8000510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000514:	61d3      	str	r3, [r2, #28]
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <HAL_MspInit+0x44>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40021000 	.word	0x40021000

08000534 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b08a      	sub	sp, #40	; 0x28
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053c:	f107 0314 	add.w	r3, r7, #20
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a31      	ldr	r2, [pc, #196]	; (8000618 <HAL_I2C_MspInit+0xe4>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d15c      	bne.n	8000610 <HAL_I2C_MspInit+0xdc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000556:	4b31      	ldr	r3, [pc, #196]	; (800061c <HAL_I2C_MspInit+0xe8>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a30      	ldr	r2, [pc, #192]	; (800061c <HAL_I2C_MspInit+0xe8>)
 800055c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	4b2e      	ldr	r3, [pc, #184]	; (800061c <HAL_I2C_MspInit+0xe8>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800056a:	613b      	str	r3, [r7, #16]
 800056c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800056e:	23c0      	movs	r3, #192	; 0xc0
 8000570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000572:	2312      	movs	r3, #18
 8000574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800057a:	2303      	movs	r3, #3
 800057c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800057e:	2304      	movs	r3, #4
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4619      	mov	r1, r3
 8000588:	4825      	ldr	r0, [pc, #148]	; (8000620 <HAL_I2C_MspInit+0xec>)
 800058a:	f000 fc35 	bl	8000df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800058e:	4b23      	ldr	r3, [pc, #140]	; (800061c <HAL_I2C_MspInit+0xe8>)
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	4a22      	ldr	r2, [pc, #136]	; (800061c <HAL_I2C_MspInit+0xe8>)
 8000594:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000598:	61d3      	str	r3, [r2, #28]
 800059a:	4b20      	ldr	r3, [pc, #128]	; (800061c <HAL_I2C_MspInit+0xe8>)
 800059c:	69db      	ldr	r3, [r3, #28]
 800059e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 80005a6:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <HAL_I2C_MspInit+0xf0>)
 80005a8:	4a1f      	ldr	r2, [pc, #124]	; (8000628 <HAL_I2C_MspInit+0xf4>)
 80005aa:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <HAL_I2C_MspInit+0xf0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005b2:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <HAL_I2C_MspInit+0xf0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005b8:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <HAL_I2C_MspInit+0xf0>)
 80005ba:	2280      	movs	r2, #128	; 0x80
 80005bc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005be:	4b19      	ldr	r3, [pc, #100]	; (8000624 <HAL_I2C_MspInit+0xf0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <HAL_I2C_MspInit+0xf0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80005ca:	4b16      	ldr	r3, [pc, #88]	; (8000624 <HAL_I2C_MspInit+0xf0>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <HAL_I2C_MspInit+0xf0>)
 80005d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80005d8:	4812      	ldr	r0, [pc, #72]	; (8000624 <HAL_I2C_MspInit+0xf0>)
 80005da:	f000 fb02 	bl	8000be2 <HAL_DMA_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <HAL_I2C_MspInit+0xb4>
    {
      Error_Handler();
 80005e4:	f7ff ff7c 	bl	80004e0 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_I2C1_RX_DMA1_CH3);
 80005e8:	4b10      	ldr	r3, [pc, #64]	; (800062c <HAL_I2C_MspInit+0xf8>)
 80005ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80005ec:	4a0f      	ldr	r2, [pc, #60]	; (800062c <HAL_I2C_MspInit+0xf8>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6513      	str	r3, [r2, #80]	; 0x50

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a0b      	ldr	r2, [pc, #44]	; (8000624 <HAL_I2C_MspInit+0xf0>)
 80005f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80005fa:	4a0a      	ldr	r2, [pc, #40]	; (8000624 <HAL_I2C_MspInit+0xf0>)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000600:	2200      	movs	r2, #0
 8000602:	2100      	movs	r1, #0
 8000604:	201f      	movs	r0, #31
 8000606:	f000 fab6 	bl	8000b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800060a:	201f      	movs	r0, #31
 800060c:	f000 facf 	bl	8000bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000610:	bf00      	nop
 8000612:	3728      	adds	r7, #40	; 0x28
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40005400 	.word	0x40005400
 800061c:	40021000 	.word	0x40021000
 8000620:	48000400 	.word	0x48000400
 8000624:	200000e0 	.word	0x200000e0
 8000628:	40020030 	.word	0x40020030
 800062c:	40010000 	.word	0x40010000

08000630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a18      	ldr	r2, [pc, #96]	; (80006b0 <HAL_UART_MspInit+0x80>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d129      	bne.n	80006a6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <HAL_UART_MspInit+0x84>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <HAL_UART_MspInit+0x84>)
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	61d3      	str	r3, [r2, #28]
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <HAL_UART_MspInit+0x84>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <HAL_UART_MspInit+0x84>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4a11      	ldr	r2, [pc, #68]	; (80006b4 <HAL_UART_MspInit+0x84>)
 8000670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000674:	6153      	str	r3, [r2, #20]
 8000676:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <HAL_UART_MspInit+0x84>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000682:	f248 0304 	movw	r3, #32772	; 0x8004
 8000686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000688:	2302      	movs	r3, #2
 800068a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000690:	2303      	movs	r3, #3
 8000692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000694:	2307      	movs	r3, #7
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4619      	mov	r1, r3
 800069e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a2:	f000 fba9 	bl	8000df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006a6:	bf00      	nop
 80006a8:	3728      	adds	r7, #40	; 0x28
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40004400 	.word	0x40004400
 80006b4:	40021000 	.word	0x40021000

080006b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <NMI_Handler+0x4>

080006be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <HardFault_Handler+0x4>

080006c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <MemManage_Handler+0x4>

080006ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <BusFault_Handler+0x4>

080006d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <UsageFault_Handler+0x4>

080006d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000704:	f000 f93c 	bl	8000980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <DMA1_Channel3_IRQHandler+0x10>)
 8000712:	f000 faad 	bl	8000c70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200000e0 	.word	0x200000e0

08000720 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <I2C1_EV_IRQHandler+0x10>)
 8000726:	f000 fe71 	bl	800140c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000008c 	.word	0x2000008c

08000734 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	e00a      	b.n	800075c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000746:	f3af 8000 	nop.w
 800074a:	4601      	mov	r1, r0
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	1c5a      	adds	r2, r3, #1
 8000750:	60ba      	str	r2, [r7, #8]
 8000752:	b2ca      	uxtb	r2, r1
 8000754:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	3301      	adds	r3, #1
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	697a      	ldr	r2, [r7, #20]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	429a      	cmp	r2, r3
 8000762:	dbf0      	blt.n	8000746 <_read+0x12>
  }

  return len;
 8000764:	687b      	ldr	r3, [r7, #4]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3718      	adds	r7, #24
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b086      	sub	sp, #24
 8000772:	af00      	add	r7, sp, #0
 8000774:	60f8      	str	r0, [r7, #12]
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
 800077e:	e009      	b.n	8000794 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	1c5a      	adds	r2, r3, #1
 8000784:	60ba      	str	r2, [r7, #8]
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4618      	mov	r0, r3
 800078a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	3301      	adds	r3, #1
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	697a      	ldr	r2, [r7, #20]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	429a      	cmp	r2, r3
 800079a:	dbf1      	blt.n	8000780 <_write+0x12>
  }
  return len;
 800079c:	687b      	ldr	r3, [r7, #4]
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <_close>:

int _close(int file)
{
 80007a6:	b480      	push	{r7}
 80007a8:	b083      	sub	sp, #12
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007be:	b480      	push	{r7}
 80007c0:	b083      	sub	sp, #12
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007ce:	605a      	str	r2, [r3, #4]
  return 0;
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <_isatty>:

int _isatty(int file)
{
 80007de:	b480      	push	{r7}
 80007e0:	b083      	sub	sp, #12
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007e6:	2301      	movs	r3, #1
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	3714      	adds	r7, #20
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
	...

08000810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000818:	4a14      	ldr	r2, [pc, #80]	; (800086c <_sbrk+0x5c>)
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <_sbrk+0x60>)
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <_sbrk+0x64>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d102      	bne.n	8000832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <_sbrk+0x64>)
 800082e:	4a12      	ldr	r2, [pc, #72]	; (8000878 <_sbrk+0x68>)
 8000830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <_sbrk+0x64>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4413      	add	r3, r2
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	429a      	cmp	r2, r3
 800083e:	d207      	bcs.n	8000850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000840:	f002 fe18 	bl	8003474 <__errno>
 8000844:	4603      	mov	r3, r0
 8000846:	220c      	movs	r2, #12
 8000848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800084a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800084e:	e009      	b.n	8000864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <_sbrk+0x64>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000856:	4b07      	ldr	r3, [pc, #28]	; (8000874 <_sbrk+0x64>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4413      	add	r3, r2
 800085e:	4a05      	ldr	r2, [pc, #20]	; (8000874 <_sbrk+0x64>)
 8000860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000862:	68fb      	ldr	r3, [r7, #12]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20003000 	.word	0x20003000
 8000870:	00000400 	.word	0x00000400
 8000874:	200001ac 	.word	0x200001ac
 8000878:	200001c8 	.word	0x200001c8

0800087c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <SystemInit+0x20>)
 8000882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000886:	4a05      	ldr	r2, [pc, #20]	; (800089c <SystemInit+0x20>)
 8000888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800088c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008d8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008a4:	f7ff ffea 	bl	800087c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a8:	480c      	ldr	r0, [pc, #48]	; (80008dc <LoopForever+0x6>)
  ldr r1, =_edata
 80008aa:	490d      	ldr	r1, [pc, #52]	; (80008e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <LoopForever+0xe>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c0:	4c0a      	ldr	r4, [pc, #40]	; (80008ec <LoopForever+0x16>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ce:	f002 fdd7 	bl	8003480 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008d2:	f7ff fccd 	bl	8000270 <main>

080008d6 <LoopForever>:

LoopForever:
    b LoopForever
 80008d6:	e7fe      	b.n	80008d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008d8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008e4:	08004510 	.word	0x08004510
  ldr r2, =_sbss
 80008e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008ec:	200001c4 	.word	0x200001c4

080008f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC1_2_IRQHandler>
	...

080008f4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <HAL_Init+0x28>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a07      	ldr	r2, [pc, #28]	; (800091c <HAL_Init+0x28>)
 80008fe:	f043 0310 	orr.w	r3, r3, #16
 8000902:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000904:	2003      	movs	r0, #3
 8000906:	f000 f92b 	bl	8000b60 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800090a:	2000      	movs	r0, #0
 800090c:	f000 f808 	bl	8000920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000910:	f7ff fdec 	bl	80004ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40022000 	.word	0x40022000

08000920 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <HAL_InitTick+0x54>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_InitTick+0x58>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	4619      	mov	r1, r3
 8000932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000936:	fbb3 f3f1 	udiv	r3, r3, r1
 800093a:	fbb2 f3f3 	udiv	r3, r2, r3
 800093e:	4618      	mov	r0, r3
 8000940:	f000 f943 	bl	8000bca <HAL_SYSTICK_Config>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e00e      	b.n	800096c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b0f      	cmp	r3, #15
 8000952:	d80a      	bhi.n	800096a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000954:	2200      	movs	r2, #0
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800095c:	f000 f90b 	bl	8000b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000960:	4a06      	ldr	r2, [pc, #24]	; (800097c <HAL_InitTick+0x5c>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000966:	2300      	movs	r3, #0
 8000968:	e000      	b.n	800096c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
}
 800096c:	4618      	mov	r0, r3
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000000 	.word	0x20000000
 8000978:	20000008 	.word	0x20000008
 800097c:	20000004 	.word	0x20000004

08000980 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_IncTick+0x20>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_IncTick+0x24>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4413      	add	r3, r2
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <HAL_IncTick+0x24>)
 8000992:	6013      	str	r3, [r2, #0]
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	20000008 	.word	0x20000008
 80009a4:	200001b0 	.word	0x200001b0

080009a8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return uwTick;  
 80009ac:	4b03      	ldr	r3, [pc, #12]	; (80009bc <HAL_GetTick+0x14>)
 80009ae:	681b      	ldr	r3, [r3, #0]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	200001b0 	.word	0x200001b0

080009c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <__NVIC_SetPriorityGrouping+0x44>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009dc:	4013      	ands	r3, r2
 80009de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009f2:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <__NVIC_SetPriorityGrouping+0x44>)
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	60d3      	str	r3, [r2, #12]
}
 80009f8:	bf00      	nop
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <__NVIC_GetPriorityGrouping+0x18>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	0a1b      	lsrs	r3, r3, #8
 8000a12:	f003 0307 	and.w	r3, r3, #7
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	db0b      	blt.n	8000a4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	f003 021f 	and.w	r2, r3, #31
 8000a3c:	4907      	ldr	r1, [pc, #28]	; (8000a5c <__NVIC_EnableIRQ+0x38>)
 8000a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a42:	095b      	lsrs	r3, r3, #5
 8000a44:	2001      	movs	r0, #1
 8000a46:	fa00 f202 	lsl.w	r2, r0, r2
 8000a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000e100 	.word	0xe000e100

08000a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	db0a      	blt.n	8000a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	490c      	ldr	r1, [pc, #48]	; (8000aac <__NVIC_SetPriority+0x4c>)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	0112      	lsls	r2, r2, #4
 8000a80:	b2d2      	uxtb	r2, r2
 8000a82:	440b      	add	r3, r1
 8000a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a88:	e00a      	b.n	8000aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4908      	ldr	r1, [pc, #32]	; (8000ab0 <__NVIC_SetPriority+0x50>)
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	f003 030f 	and.w	r3, r3, #15
 8000a96:	3b04      	subs	r3, #4
 8000a98:	0112      	lsls	r2, r2, #4
 8000a9a:	b2d2      	uxtb	r2, r2
 8000a9c:	440b      	add	r3, r1
 8000a9e:	761a      	strb	r2, [r3, #24]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000e100 	.word	0xe000e100
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b089      	sub	sp, #36	; 0x24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	f1c3 0307 	rsb	r3, r3, #7
 8000ace:	2b04      	cmp	r3, #4
 8000ad0:	bf28      	it	cs
 8000ad2:	2304      	movcs	r3, #4
 8000ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	2b06      	cmp	r3, #6
 8000adc:	d902      	bls.n	8000ae4 <NVIC_EncodePriority+0x30>
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3b03      	subs	r3, #3
 8000ae2:	e000      	b.n	8000ae6 <NVIC_EncodePriority+0x32>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43da      	mvns	r2, r3
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	401a      	ands	r2, r3
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000afc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa01 f303 	lsl.w	r3, r1, r3
 8000b06:	43d9      	mvns	r1, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	4313      	orrs	r3, r2
         );
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3724      	adds	r7, #36	; 0x24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b2c:	d301      	bcc.n	8000b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e00f      	b.n	8000b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b32:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <SysTick_Config+0x40>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b3a:	210f      	movs	r1, #15
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b40:	f7ff ff8e 	bl	8000a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <SysTick_Config+0x40>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4a:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <SysTick_Config+0x40>)
 8000b4c:	2207      	movs	r2, #7
 8000b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	e000e010 	.word	0xe000e010

08000b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff ff29 	bl	80009c0 <__NVIC_SetPriorityGrouping>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b086      	sub	sp, #24
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b88:	f7ff ff3e 	bl	8000a08 <__NVIC_GetPriorityGrouping>
 8000b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	68b9      	ldr	r1, [r7, #8]
 8000b92:	6978      	ldr	r0, [r7, #20]
 8000b94:	f7ff ff8e 	bl	8000ab4 <NVIC_EncodePriority>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff5d 	bl	8000a60 <__NVIC_SetPriority>
}
 8000ba6:	bf00      	nop
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff31 	bl	8000a24 <__NVIC_EnableIRQ>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff ffa2 	bl	8000b1c <SysTick_Config>
 8000bd8:	4603      	mov	r3, r0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b084      	sub	sp, #16
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d101      	bne.n	8000bf8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e037      	b.n	8000c68 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c0e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f000 f8b4 	bl	8000db8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000c66:	2300      	movs	r3, #0
}  
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	2204      	movs	r2, #4
 8000c8e:	409a      	lsls	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4013      	ands	r3, r2
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d024      	beq.n	8000ce2 <HAL_DMA_IRQHandler+0x72>
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d01f      	beq.n	8000ce2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 0320 	and.w	r3, r3, #32
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d107      	bne.n	8000cc0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f022 0204 	bic.w	r2, r2, #4
 8000cbe:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cc8:	2104      	movs	r1, #4
 8000cca:	fa01 f202 	lsl.w	r2, r1, r2
 8000cce:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d06a      	beq.n	8000dae <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ce0:	e065      	b.n	8000dae <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	409a      	lsls	r2, r3
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4013      	ands	r3, r2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d02c      	beq.n	8000d4c <HAL_DMA_IRQHandler+0xdc>
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d027      	beq.n	8000d4c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 0320 	and.w	r3, r3, #32
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d10b      	bne.n	8000d22 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f022 020a 	bic.w	r2, r2, #10
 8000d18:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d2a:	2102      	movs	r1, #2
 8000d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d30:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d035      	beq.n	8000dae <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000d4a:	e030      	b.n	8000dae <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d50:	2208      	movs	r2, #8
 8000d52:	409a      	lsls	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	4013      	ands	r3, r2
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d028      	beq.n	8000dae <HAL_DMA_IRQHandler+0x13e>
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	f003 0308 	and.w	r3, r3, #8
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d023      	beq.n	8000dae <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f022 020e 	bic.w	r2, r2, #14
 8000d74:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d7e:	2101      	movs	r1, #1
 8000d80:	fa01 f202 	lsl.w	r2, r1, r2
 8000d84:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2201      	movs	r2, #1
 8000d90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d004      	beq.n	8000dae <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	4798      	blx	r3
    }
  }
}  
 8000dac:	e7ff      	b.n	8000dae <HAL_DMA_IRQHandler+0x13e>
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <DMA_CalcBaseAndBitshift+0x34>)
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a09      	ldr	r2, [pc, #36]	; (8000df0 <DMA_CalcBaseAndBitshift+0x38>)
 8000dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd0:	091b      	lsrs	r3, r3, #4
 8000dd2:	009a      	lsls	r2, r3, #2
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a06      	ldr	r2, [pc, #24]	; (8000df4 <DMA_CalcBaseAndBitshift+0x3c>)
 8000ddc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	bffdfff8 	.word	0xbffdfff8
 8000df0:	cccccccd 	.word	0xcccccccd
 8000df4:	40020000 	.word	0x40020000

08000df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e06:	e14e      	b.n	80010a6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	fa01 f303 	lsl.w	r3, r1, r3
 8000e14:	4013      	ands	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 8140 	beq.w	80010a0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d005      	beq.n	8000e38 <HAL_GPIO_Init+0x40>
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d130      	bne.n	8000e9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	68da      	ldr	r2, [r3, #12]
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e6e:	2201      	movs	r2, #1
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	091b      	lsrs	r3, r3, #4
 8000e84:	f003 0201 	and.w	r2, r3, #1
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d017      	beq.n	8000ed6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d123      	bne.n	8000f2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	08da      	lsrs	r2, r3, #3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3208      	adds	r2, #8
 8000eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	220f      	movs	r2, #15
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	691a      	ldr	r2, [r3, #16]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	f003 0307 	and.w	r3, r3, #7
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	08da      	lsrs	r2, r3, #3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3208      	adds	r2, #8
 8000f24:	6939      	ldr	r1, [r7, #16]
 8000f26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 0203 	and.w	r2, r3, #3
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 809a 	beq.w	80010a0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6c:	4b55      	ldr	r3, [pc, #340]	; (80010c4 <HAL_GPIO_Init+0x2cc>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a54      	ldr	r2, [pc, #336]	; (80010c4 <HAL_GPIO_Init+0x2cc>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b52      	ldr	r3, [pc, #328]	; (80010c4 <HAL_GPIO_Init+0x2cc>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f84:	4a50      	ldr	r2, [pc, #320]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	220f      	movs	r2, #15
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fae:	d013      	beq.n	8000fd8 <HAL_GPIO_Init+0x1e0>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a46      	ldr	r2, [pc, #280]	; (80010cc <HAL_GPIO_Init+0x2d4>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d00d      	beq.n	8000fd4 <HAL_GPIO_Init+0x1dc>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a45      	ldr	r2, [pc, #276]	; (80010d0 <HAL_GPIO_Init+0x2d8>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d007      	beq.n	8000fd0 <HAL_GPIO_Init+0x1d8>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a44      	ldr	r2, [pc, #272]	; (80010d4 <HAL_GPIO_Init+0x2dc>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d101      	bne.n	8000fcc <HAL_GPIO_Init+0x1d4>
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e006      	b.n	8000fda <HAL_GPIO_Init+0x1e2>
 8000fcc:	2305      	movs	r3, #5
 8000fce:	e004      	b.n	8000fda <HAL_GPIO_Init+0x1e2>
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	e002      	b.n	8000fda <HAL_GPIO_Init+0x1e2>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <HAL_GPIO_Init+0x1e2>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	f002 0203 	and.w	r2, r2, #3
 8000fe0:	0092      	lsls	r2, r2, #2
 8000fe2:	4093      	lsls	r3, r2
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fea:	4937      	ldr	r1, [pc, #220]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff8:	4b37      	ldr	r3, [pc, #220]	; (80010d8 <HAL_GPIO_Init+0x2e0>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800101c:	4a2e      	ldr	r2, [pc, #184]	; (80010d8 <HAL_GPIO_Init+0x2e0>)
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001022:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <HAL_GPIO_Init+0x2e0>)
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001046:	4a24      	ldr	r2, [pc, #144]	; (80010d8 <HAL_GPIO_Init+0x2e0>)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800104c:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <HAL_GPIO_Init+0x2e0>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001070:	4a19      	ldr	r2, [pc, #100]	; (80010d8 <HAL_GPIO_Init+0x2e0>)
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_GPIO_Init+0x2e0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4313      	orrs	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800109a:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <HAL_GPIO_Init+0x2e0>)
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	3301      	adds	r3, #1
 80010a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	fa22 f303 	lsr.w	r3, r2, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f47f aea9 	bne.w	8000e08 <HAL_GPIO_Init+0x10>
  }
}
 80010b6:	bf00      	nop
 80010b8:	bf00      	nop
 80010ba:	371c      	adds	r7, #28
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010000 	.word	0x40010000
 80010cc:	48000400 	.word	0x48000400
 80010d0:	48000800 	.word	0x48000800
 80010d4:	48000c00 	.word	0x48000c00
 80010d8:	40010400 	.word	0x40010400

080010dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e081      	b.n	80011f2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d106      	bne.n	8001108 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff fa16 	bl	8000534 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2224      	movs	r2, #36	; 0x24
 800110c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 0201 	bic.w	r2, r2, #1
 800111e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800112c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800113c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d107      	bne.n	8001156 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	e006      	b.n	8001164 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001162:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	2b02      	cmp	r3, #2
 800116a:	d104      	bne.n	8001176 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001174:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	6812      	ldr	r2, [r2, #0]
 8001180:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001188:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68da      	ldr	r2, [r3, #12]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001198:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	691a      	ldr	r2, [r3, #16]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69d9      	ldr	r1, [r3, #28]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a1a      	ldr	r2, [r3, #32]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	430a      	orrs	r2, r1
 80011c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0201 	orr.w	r2, r2, #1
 80011d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2220      	movs	r2, #32
 80011de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b08a      	sub	sp, #40	; 0x28
 80011fe:	af02      	add	r7, sp, #8
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	603b      	str	r3, [r7, #0]
 8001206:	460b      	mov	r3, r1
 8001208:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b20      	cmp	r3, #32
 8001218:	f040 80f3 	bne.w	8001402 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800122a:	d101      	bne.n	8001230 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800122c:	2302      	movs	r3, #2
 800122e:	e0e9      	b.n	8001404 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001236:	2b01      	cmp	r3, #1
 8001238:	d101      	bne.n	800123e <HAL_I2C_IsDeviceReady+0x44>
 800123a:	2302      	movs	r3, #2
 800123c:	e0e2      	b.n	8001404 <HAL_I2C_IsDeviceReady+0x20a>
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2201      	movs	r2, #1
 8001242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2224      	movs	r2, #36	; 0x24
 800124a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2200      	movs	r2, #0
 8001252:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d107      	bne.n	800126c <HAL_I2C_IsDeviceReady+0x72>
 800125c:	897b      	ldrh	r3, [r7, #10]
 800125e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001262:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001266:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800126a:	e006      	b.n	800127a <HAL_I2C_IsDeviceReady+0x80>
 800126c:	897b      	ldrh	r3, [r7, #10]
 800126e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001272:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001276:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	6812      	ldr	r2, [r2, #0]
 800127e:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001280:	f7ff fb92 	bl	80009a8 <HAL_GetTick>
 8001284:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0320 	and.w	r3, r3, #32
 8001290:	2b20      	cmp	r3, #32
 8001292:	bf0c      	ite	eq
 8001294:	2301      	moveq	r3, #1
 8001296:	2300      	movne	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	f003 0310 	and.w	r3, r3, #16
 80012a6:	2b10      	cmp	r3, #16
 80012a8:	bf0c      	ite	eq
 80012aa:	2301      	moveq	r3, #1
 80012ac:	2300      	movne	r3, #0
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80012b2:	e034      	b.n	800131e <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012ba:	d01a      	beq.n	80012f2 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80012bc:	f7ff fb74 	bl	80009a8 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d302      	bcc.n	80012d2 <HAL_I2C_IsDeviceReady+0xd8>
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10f      	bne.n	80012f2 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2220      	movs	r2, #32
 80012d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	f043 0220 	orr.w	r2, r3, #32
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e088      	b.n	8001404 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0320 	and.w	r3, r3, #32
 80012fc:	2b20      	cmp	r3, #32
 80012fe:	bf0c      	ite	eq
 8001300:	2301      	moveq	r3, #1
 8001302:	2300      	movne	r3, #0
 8001304:	b2db      	uxtb	r3, r3
 8001306:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	f003 0310 	and.w	r3, r3, #16
 8001312:	2b10      	cmp	r3, #16
 8001314:	bf0c      	ite	eq
 8001316:	2301      	moveq	r3, #1
 8001318:	2300      	movne	r3, #0
 800131a:	b2db      	uxtb	r3, r3
 800131c:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800131e:	7ffb      	ldrb	r3, [r7, #31]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d102      	bne.n	800132a <HAL_I2C_IsDeviceReady+0x130>
 8001324:	7fbb      	ldrb	r3, [r7, #30]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0c4      	beq.n	80012b4 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0310 	and.w	r3, r3, #16
 8001334:	2b10      	cmp	r3, #16
 8001336:	d01a      	beq.n	800136e <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	2200      	movs	r2, #0
 8001340:	2120      	movs	r1, #32
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f000 f87c 	bl	8001440 <I2C_WaitOnFlagUntilTimeout>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e058      	b.n	8001404 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2220      	movs	r2, #32
 8001358:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2220      	movs	r2, #32
 800135e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e04a      	b.n	8001404 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	2200      	movs	r2, #0
 8001376:	2120      	movs	r1, #32
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f000 f861 	bl	8001440 <I2C_WaitOnFlagUntilTimeout>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e03d      	b.n	8001404 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2210      	movs	r2, #16
 800138e:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2220      	movs	r2, #32
 8001396:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	429a      	cmp	r2, r3
 800139e:	d118      	bne.n	80013d2 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013ae:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	2200      	movs	r2, #0
 80013b8:	2120      	movs	r1, #32
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f000 f840 	bl	8001440 <I2C_WaitOnFlagUntilTimeout>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e01c      	b.n	8001404 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2220      	movs	r2, #32
 80013d0:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3301      	adds	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	429a      	cmp	r2, r3
 80013de:	f63f af39 	bhi.w	8001254 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2220      	movs	r2, #32
 80013e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f043 0220 	orr.w	r2, r3, #32
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001402:	2302      	movs	r3, #2
  }
}
 8001404:	4618      	mov	r0, r3
 8001406:	3720      	adds	r7, #32
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001428:	2b00      	cmp	r3, #0
 800142a:	d005      	beq.n	8001438 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001430:	68ba      	ldr	r2, [r7, #8]
 8001432:	68f9      	ldr	r1, [r7, #12]
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	4798      	blx	r3
  }
}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	4613      	mov	r3, r2
 800144e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001450:	e031      	b.n	80014b6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001458:	d02d      	beq.n	80014b6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800145a:	f7ff faa5 	bl	80009a8 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	429a      	cmp	r2, r3
 8001468:	d302      	bcc.n	8001470 <I2C_WaitOnFlagUntilTimeout+0x30>
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d122      	bne.n	80014b6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	699a      	ldr	r2, [r3, #24]
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	4013      	ands	r3, r2
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	429a      	cmp	r2, r3
 800147e:	bf0c      	ite	eq
 8001480:	2301      	moveq	r3, #1
 8001482:	2300      	movne	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	461a      	mov	r2, r3
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	429a      	cmp	r2, r3
 800148c:	d113      	bne.n	80014b6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f043 0220 	orr.w	r2, r3, #32
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2220      	movs	r2, #32
 800149e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00f      	b.n	80014d6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	699a      	ldr	r2, [r3, #24]
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	4013      	ands	r3, r2
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	bf0c      	ite	eq
 80014c6:	2301      	moveq	r3, #1
 80014c8:	2300      	movne	r3, #0
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d0be      	beq.n	8001452 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b20      	cmp	r3, #32
 80014f2:	d138      	bne.n	8001566 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d101      	bne.n	8001502 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80014fe:	2302      	movs	r3, #2
 8001500:	e032      	b.n	8001568 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2224      	movs	r2, #36	; 0x24
 800150e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0201 	bic.w	r2, r2, #1
 8001520:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001530:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6819      	ldr	r1, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f042 0201 	orr.w	r2, r2, #1
 8001550:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2220      	movs	r2, #32
 8001556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	e000      	b.n	8001568 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001566:	2302      	movs	r3, #2
  }
}
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b20      	cmp	r3, #32
 8001588:	d139      	bne.n	80015fe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001590:	2b01      	cmp	r3, #1
 8001592:	d101      	bne.n	8001598 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001594:	2302      	movs	r3, #2
 8001596:	e033      	b.n	8001600 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2224      	movs	r2, #36	; 0x24
 80015a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0201 	bic.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015c6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f042 0201 	orr.w	r2, r2, #1
 80015e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2220      	movs	r2, #32
 80015ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	e000      	b.n	8001600 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80015fe:	2302      	movs	r3, #2
  }
}
 8001600:	4618      	mov	r0, r3
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001612:	af00      	add	r7, sp, #0
 8001614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001618:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800161c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800161e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001622:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d102      	bne.n	8001632 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	f001 b823 	b.w	8002678 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001636:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 817d 	beq.w	8001942 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001648:	4bbc      	ldr	r3, [pc, #752]	; (800193c <HAL_RCC_OscConfig+0x330>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 030c 	and.w	r3, r3, #12
 8001650:	2b04      	cmp	r3, #4
 8001652:	d00c      	beq.n	800166e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001654:	4bb9      	ldr	r3, [pc, #740]	; (800193c <HAL_RCC_OscConfig+0x330>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	2b08      	cmp	r3, #8
 800165e:	d15c      	bne.n	800171a <HAL_RCC_OscConfig+0x10e>
 8001660:	4bb6      	ldr	r3, [pc, #728]	; (800193c <HAL_RCC_OscConfig+0x330>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800166c:	d155      	bne.n	800171a <HAL_RCC_OscConfig+0x10e>
 800166e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001672:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001676:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800167a:	fa93 f3a3 	rbit	r3, r3
 800167e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001682:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001686:	fab3 f383 	clz	r3, r3
 800168a:	b2db      	uxtb	r3, r3
 800168c:	095b      	lsrs	r3, r3, #5
 800168e:	b2db      	uxtb	r3, r3
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b01      	cmp	r3, #1
 8001698:	d102      	bne.n	80016a0 <HAL_RCC_OscConfig+0x94>
 800169a:	4ba8      	ldr	r3, [pc, #672]	; (800193c <HAL_RCC_OscConfig+0x330>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	e015      	b.n	80016cc <HAL_RCC_OscConfig+0xc0>
 80016a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016a4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80016ac:	fa93 f3a3 	rbit	r3, r3
 80016b0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80016b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016b8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80016bc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80016c0:	fa93 f3a3 	rbit	r3, r3
 80016c4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80016c8:	4b9c      	ldr	r3, [pc, #624]	; (800193c <HAL_RCC_OscConfig+0x330>)
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016d0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80016d4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80016d8:	fa92 f2a2 	rbit	r2, r2
 80016dc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80016e0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80016e4:	fab2 f282 	clz	r2, r2
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	f042 0220 	orr.w	r2, r2, #32
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	f002 021f 	and.w	r2, r2, #31
 80016f4:	2101      	movs	r1, #1
 80016f6:	fa01 f202 	lsl.w	r2, r1, r2
 80016fa:	4013      	ands	r3, r2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 811f 	beq.w	8001940 <HAL_RCC_OscConfig+0x334>
 8001702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001706:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	f040 8116 	bne.w	8001940 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	f000 bfaf 	b.w	8002678 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800171a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800172a:	d106      	bne.n	800173a <HAL_RCC_OscConfig+0x12e>
 800172c:	4b83      	ldr	r3, [pc, #524]	; (800193c <HAL_RCC_OscConfig+0x330>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a82      	ldr	r2, [pc, #520]	; (800193c <HAL_RCC_OscConfig+0x330>)
 8001732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	e036      	b.n	80017a8 <HAL_RCC_OscConfig+0x19c>
 800173a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10c      	bne.n	8001764 <HAL_RCC_OscConfig+0x158>
 800174a:	4b7c      	ldr	r3, [pc, #496]	; (800193c <HAL_RCC_OscConfig+0x330>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a7b      	ldr	r2, [pc, #492]	; (800193c <HAL_RCC_OscConfig+0x330>)
 8001750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4b79      	ldr	r3, [pc, #484]	; (800193c <HAL_RCC_OscConfig+0x330>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a78      	ldr	r2, [pc, #480]	; (800193c <HAL_RCC_OscConfig+0x330>)
 800175c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	e021      	b.n	80017a8 <HAL_RCC_OscConfig+0x19c>
 8001764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001768:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001774:	d10c      	bne.n	8001790 <HAL_RCC_OscConfig+0x184>
 8001776:	4b71      	ldr	r3, [pc, #452]	; (800193c <HAL_RCC_OscConfig+0x330>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a70      	ldr	r2, [pc, #448]	; (800193c <HAL_RCC_OscConfig+0x330>)
 800177c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	4b6e      	ldr	r3, [pc, #440]	; (800193c <HAL_RCC_OscConfig+0x330>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a6d      	ldr	r2, [pc, #436]	; (800193c <HAL_RCC_OscConfig+0x330>)
 8001788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e00b      	b.n	80017a8 <HAL_RCC_OscConfig+0x19c>
 8001790:	4b6a      	ldr	r3, [pc, #424]	; (800193c <HAL_RCC_OscConfig+0x330>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a69      	ldr	r2, [pc, #420]	; (800193c <HAL_RCC_OscConfig+0x330>)
 8001796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	4b67      	ldr	r3, [pc, #412]	; (800193c <HAL_RCC_OscConfig+0x330>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a66      	ldr	r2, [pc, #408]	; (800193c <HAL_RCC_OscConfig+0x330>)
 80017a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017a8:	4b64      	ldr	r3, [pc, #400]	; (800193c <HAL_RCC_OscConfig+0x330>)
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	f023 020f 	bic.w	r2, r3, #15
 80017b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	495f      	ldr	r1, [pc, #380]	; (800193c <HAL_RCC_OscConfig+0x330>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d059      	beq.n	8001886 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d2:	f7ff f8e9 	bl	80009a8 <HAL_GetTick>
 80017d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	e00a      	b.n	80017f2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017dc:	f7ff f8e4 	bl	80009a8 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b64      	cmp	r3, #100	; 0x64
 80017ea:	d902      	bls.n	80017f2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	f000 bf43 	b.w	8002678 <HAL_RCC_OscConfig+0x106c>
 80017f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017f6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80017fe:	fa93 f3a3 	rbit	r3, r3
 8001802:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001806:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180a:	fab3 f383 	clz	r3, r3
 800180e:	b2db      	uxtb	r3, r3
 8001810:	095b      	lsrs	r3, r3, #5
 8001812:	b2db      	uxtb	r3, r3
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b01      	cmp	r3, #1
 800181c:	d102      	bne.n	8001824 <HAL_RCC_OscConfig+0x218>
 800181e:	4b47      	ldr	r3, [pc, #284]	; (800193c <HAL_RCC_OscConfig+0x330>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	e015      	b.n	8001850 <HAL_RCC_OscConfig+0x244>
 8001824:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001828:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001830:	fa93 f3a3 	rbit	r3, r3
 8001834:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001838:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800183c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001840:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001844:	fa93 f3a3 	rbit	r3, r3
 8001848:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800184c:	4b3b      	ldr	r3, [pc, #236]	; (800193c <HAL_RCC_OscConfig+0x330>)
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001854:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001858:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800185c:	fa92 f2a2 	rbit	r2, r2
 8001860:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001864:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001868:	fab2 f282 	clz	r2, r2
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	f042 0220 	orr.w	r2, r2, #32
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	f002 021f 	and.w	r2, r2, #31
 8001878:	2101      	movs	r1, #1
 800187a:	fa01 f202 	lsl.w	r2, r1, r2
 800187e:	4013      	ands	r3, r2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0ab      	beq.n	80017dc <HAL_RCC_OscConfig+0x1d0>
 8001884:	e05d      	b.n	8001942 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001886:	f7ff f88f 	bl	80009a8 <HAL_GetTick>
 800188a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188e:	e00a      	b.n	80018a6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001890:	f7ff f88a 	bl	80009a8 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b64      	cmp	r3, #100	; 0x64
 800189e:	d902      	bls.n	80018a6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	f000 bee9 	b.w	8002678 <HAL_RCC_OscConfig+0x106c>
 80018a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018aa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80018b2:	fa93 f3a3 	rbit	r3, r3
 80018b6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80018ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018be:	fab3 f383 	clz	r3, r3
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	095b      	lsrs	r3, r3, #5
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d102      	bne.n	80018d8 <HAL_RCC_OscConfig+0x2cc>
 80018d2:	4b1a      	ldr	r3, [pc, #104]	; (800193c <HAL_RCC_OscConfig+0x330>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	e015      	b.n	8001904 <HAL_RCC_OscConfig+0x2f8>
 80018d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018dc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80018e4:	fa93 f3a3 	rbit	r3, r3
 80018e8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80018ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80018f4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80018f8:	fa93 f3a3 	rbit	r3, r3
 80018fc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <HAL_RCC_OscConfig+0x330>)
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001908:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800190c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001910:	fa92 f2a2 	rbit	r2, r2
 8001914:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001918:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800191c:	fab2 f282 	clz	r2, r2
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	f042 0220 	orr.w	r2, r2, #32
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	f002 021f 	and.w	r2, r2, #31
 800192c:	2101      	movs	r1, #1
 800192e:	fa01 f202 	lsl.w	r2, r1, r2
 8001932:	4013      	ands	r3, r2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1ab      	bne.n	8001890 <HAL_RCC_OscConfig+0x284>
 8001938:	e003      	b.n	8001942 <HAL_RCC_OscConfig+0x336>
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001946:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 817d 	beq.w	8001c52 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001958:	4ba6      	ldr	r3, [pc, #664]	; (8001bf4 <HAL_RCC_OscConfig+0x5e8>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 030c 	and.w	r3, r3, #12
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00b      	beq.n	800197c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001964:	4ba3      	ldr	r3, [pc, #652]	; (8001bf4 <HAL_RCC_OscConfig+0x5e8>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b08      	cmp	r3, #8
 800196e:	d172      	bne.n	8001a56 <HAL_RCC_OscConfig+0x44a>
 8001970:	4ba0      	ldr	r3, [pc, #640]	; (8001bf4 <HAL_RCC_OscConfig+0x5e8>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d16c      	bne.n	8001a56 <HAL_RCC_OscConfig+0x44a>
 800197c:	2302      	movs	r3, #2
 800197e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001986:	fa93 f3a3 	rbit	r3, r3
 800198a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800198e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001992:	fab3 f383 	clz	r3, r3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	095b      	lsrs	r3, r3, #5
 800199a:	b2db      	uxtb	r3, r3
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d102      	bne.n	80019ac <HAL_RCC_OscConfig+0x3a0>
 80019a6:	4b93      	ldr	r3, [pc, #588]	; (8001bf4 <HAL_RCC_OscConfig+0x5e8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	e013      	b.n	80019d4 <HAL_RCC_OscConfig+0x3c8>
 80019ac:	2302      	movs	r3, #2
 80019ae:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80019b6:	fa93 f3a3 	rbit	r3, r3
 80019ba:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80019be:	2302      	movs	r3, #2
 80019c0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80019c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80019c8:	fa93 f3a3 	rbit	r3, r3
 80019cc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80019d0:	4b88      	ldr	r3, [pc, #544]	; (8001bf4 <HAL_RCC_OscConfig+0x5e8>)
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	2202      	movs	r2, #2
 80019d6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80019da:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80019de:	fa92 f2a2 	rbit	r2, r2
 80019e2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80019e6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80019ea:	fab2 f282 	clz	r2, r2
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	f042 0220 	orr.w	r2, r2, #32
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	f002 021f 	and.w	r2, r2, #31
 80019fa:	2101      	movs	r1, #1
 80019fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00a      	beq.n	8001a1c <HAL_RCC_OscConfig+0x410>
 8001a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d002      	beq.n	8001a1c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	f000 be2e 	b.w	8002678 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a1c:	4b75      	ldr	r3, [pc, #468]	; (8001bf4 <HAL_RCC_OscConfig+0x5e8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	21f8      	movs	r1, #248	; 0xf8
 8001a32:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a3a:	fa91 f1a1 	rbit	r1, r1
 8001a3e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001a42:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001a46:	fab1 f181 	clz	r1, r1
 8001a4a:	b2c9      	uxtb	r1, r1
 8001a4c:	408b      	lsls	r3, r1
 8001a4e:	4969      	ldr	r1, [pc, #420]	; (8001bf4 <HAL_RCC_OscConfig+0x5e8>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a54:	e0fd      	b.n	8001c52 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8088 	beq.w	8001b78 <HAL_RCC_OscConfig+0x56c>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001a72:	fa93 f3a3 	rbit	r3, r3
 8001a76:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001a7a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a7e:	fab3 f383 	clz	r3, r3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	461a      	mov	r2, r3
 8001a90:	2301      	movs	r3, #1
 8001a92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a94:	f7fe ff88 	bl	80009a8 <HAL_GetTick>
 8001a98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9c:	e00a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a9e:	f7fe ff83 	bl	80009a8 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d902      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	f000 bde2 	b.w	8002678 <HAL_RCC_OscConfig+0x106c>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001abe:	fa93 f3a3 	rbit	r3, r3
 8001ac2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001ac6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aca:	fab3 f383 	clz	r3, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	095b      	lsrs	r3, r3, #5
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d102      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x4d8>
 8001ade:	4b45      	ldr	r3, [pc, #276]	; (8001bf4 <HAL_RCC_OscConfig+0x5e8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	e013      	b.n	8001b0c <HAL_RCC_OscConfig+0x500>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001aee:	fa93 f3a3 	rbit	r3, r3
 8001af2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001af6:	2302      	movs	r3, #2
 8001af8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001afc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001b00:	fa93 f3a3 	rbit	r3, r3
 8001b04:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001b08:	4b3a      	ldr	r3, [pc, #232]	; (8001bf4 <HAL_RCC_OscConfig+0x5e8>)
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001b12:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b16:	fa92 f2a2 	rbit	r2, r2
 8001b1a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001b1e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001b22:	fab2 f282 	clz	r2, r2
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	f042 0220 	orr.w	r2, r2, #32
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	f002 021f 	and.w	r2, r2, #31
 8001b32:	2101      	movs	r1, #1
 8001b34:	fa01 f202 	lsl.w	r2, r1, r2
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0af      	beq.n	8001a9e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3e:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <HAL_RCC_OscConfig+0x5e8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	21f8      	movs	r1, #248	; 0xf8
 8001b54:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b5c:	fa91 f1a1 	rbit	r1, r1
 8001b60:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001b64:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001b68:	fab1 f181 	clz	r1, r1
 8001b6c:	b2c9      	uxtb	r1, r1
 8001b6e:	408b      	lsls	r3, r1
 8001b70:	4920      	ldr	r1, [pc, #128]	; (8001bf4 <HAL_RCC_OscConfig+0x5e8>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]
 8001b76:	e06c      	b.n	8001c52 <HAL_RCC_OscConfig+0x646>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001b82:	fa93 f3a3 	rbit	r3, r3
 8001b86:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001b8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8e:	fab3 f383 	clz	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7fe ff00 	bl	80009a8 <HAL_GetTick>
 8001ba8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bac:	e00a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bae:	f7fe fefb 	bl	80009a8 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d902      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	f000 bd5a 	b.w	8002678 <HAL_RCC_OscConfig+0x106c>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001bce:	fa93 f3a3 	rbit	r3, r3
 8001bd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	095b      	lsrs	r3, r3, #5
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d104      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x5ec>
 8001bee:	4b01      	ldr	r3, [pc, #4]	; (8001bf4 <HAL_RCC_OscConfig+0x5e8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	e015      	b.n	8001c20 <HAL_RCC_OscConfig+0x614>
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c10:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001c14:	fa93 f3a3 	rbit	r3, r3
 8001c18:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001c1c:	4bc8      	ldr	r3, [pc, #800]	; (8001f40 <HAL_RCC_OscConfig+0x934>)
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	2202      	movs	r2, #2
 8001c22:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001c26:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c2a:	fa92 f2a2 	rbit	r2, r2
 8001c2e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001c32:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001c36:	fab2 f282 	clz	r2, r2
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	f042 0220 	orr.w	r2, r2, #32
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	f002 021f 	and.w	r2, r2, #31
 8001c46:	2101      	movs	r1, #1
 8001c48:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1ad      	bne.n	8001bae <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8110 	beq.w	8001e88 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d079      	beq.n	8001d6c <HAL_RCC_OscConfig+0x760>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c82:	fa93 f3a3 	rbit	r3, r3
 8001c86:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8e:	fab3 f383 	clz	r3, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	4bab      	ldr	r3, [pc, #684]	; (8001f44 <HAL_RCC_OscConfig+0x938>)
 8001c98:	4413      	add	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca2:	f7fe fe81 	bl	80009a8 <HAL_GetTick>
 8001ca6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cac:	f7fe fe7c 	bl	80009a8 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d902      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	f000 bcdb 	b.w	8002678 <HAL_RCC_OscConfig+0x106c>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ccc:	fa93 f3a3 	rbit	r3, r3
 8001cd0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001cdc:	2202      	movs	r2, #2
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	fa93 f2a3 	rbit	r2, r3
 8001cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d00:	2202      	movs	r2, #2
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	fa93 f2a3 	rbit	r2, r3
 8001d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d16:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d1a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1c:	4b88      	ldr	r3, [pc, #544]	; (8001f40 <HAL_RCC_OscConfig+0x934>)
 8001d1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d24:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d28:	2102      	movs	r1, #2
 8001d2a:	6019      	str	r1, [r3, #0]
 8001d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d30:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	fa93 f1a3 	rbit	r1, r3
 8001d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d42:	6019      	str	r1, [r3, #0]
  return result;
 8001d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d48:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	f003 031f 	and.w	r3, r3, #31
 8001d5e:	2101      	movs	r1, #1
 8001d60:	fa01 f303 	lsl.w	r3, r1, r3
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0a0      	beq.n	8001cac <HAL_RCC_OscConfig+0x6a0>
 8001d6a:	e08d      	b.n	8001e88 <HAL_RCC_OscConfig+0x87c>
 8001d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d70:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d74:	2201      	movs	r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	fa93 f2a3 	rbit	r2, r3
 8001d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d8e:	601a      	str	r2, [r3, #0]
  return result;
 8001d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d94:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d98:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b68      	ldr	r3, [pc, #416]	; (8001f44 <HAL_RCC_OscConfig+0x938>)
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	461a      	mov	r2, r3
 8001daa:	2300      	movs	r3, #0
 8001dac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dae:	f7fe fdfb 	bl	80009a8 <HAL_GetTick>
 8001db2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db6:	e00a      	b.n	8001dce <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001db8:	f7fe fdf6 	bl	80009a8 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d902      	bls.n	8001dce <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	f000 bc55 	b.w	8002678 <HAL_RCC_OscConfig+0x106c>
 8001dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dde:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	fa93 f2a3 	rbit	r2, r3
 8001de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e02:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	fa93 f2a3 	rbit	r2, r3
 8001e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e1e:	2202      	movs	r2, #2
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	fa93 f2a3 	rbit	r2, r3
 8001e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e34:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e38:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3a:	4b41      	ldr	r3, [pc, #260]	; (8001f40 <HAL_RCC_OscConfig+0x934>)
 8001e3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e42:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001e46:	2102      	movs	r1, #2
 8001e48:	6019      	str	r1, [r3, #0]
 8001e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	fa93 f1a3 	rbit	r1, r3
 8001e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e60:	6019      	str	r1, [r3, #0]
  return result;
 8001e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e66:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	f003 031f 	and.w	r3, r3, #31
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d197      	bne.n	8001db8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 81a1 	beq.w	80021e0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ea4:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <HAL_RCC_OscConfig+0x934>)
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d116      	bne.n	8001ede <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb0:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <HAL_RCC_OscConfig+0x934>)
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	4a22      	ldr	r2, [pc, #136]	; (8001f40 <HAL_RCC_OscConfig+0x934>)
 8001eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eba:	61d3      	str	r3, [r2, #28]
 8001ebc:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <HAL_RCC_OscConfig+0x934>)
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001ed6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ede:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <HAL_RCC_OscConfig+0x93c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d11a      	bne.n	8001f20 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eea:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <HAL_RCC_OscConfig+0x93c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a16      	ldr	r2, [pc, #88]	; (8001f48 <HAL_RCC_OscConfig+0x93c>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef6:	f7fe fd57 	bl	80009a8 <HAL_GetTick>
 8001efa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efe:	e009      	b.n	8001f14 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f00:	f7fe fd52 	bl	80009a8 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b64      	cmp	r3, #100	; 0x64
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e3b1      	b.n	8002678 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <HAL_RCC_OscConfig+0x93c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0ef      	beq.n	8001f00 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d10d      	bne.n	8001f4c <HAL_RCC_OscConfig+0x940>
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <HAL_RCC_OscConfig+0x934>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4a02      	ldr	r2, [pc, #8]	; (8001f40 <HAL_RCC_OscConfig+0x934>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6213      	str	r3, [r2, #32]
 8001f3c:	e03c      	b.n	8001fb8 <HAL_RCC_OscConfig+0x9ac>
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000
 8001f44:	10908120 	.word	0x10908120
 8001f48:	40007000 	.word	0x40007000
 8001f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10c      	bne.n	8001f76 <HAL_RCC_OscConfig+0x96a>
 8001f5c:	4bc1      	ldr	r3, [pc, #772]	; (8002264 <HAL_RCC_OscConfig+0xc58>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	4ac0      	ldr	r2, [pc, #768]	; (8002264 <HAL_RCC_OscConfig+0xc58>)
 8001f62:	f023 0301 	bic.w	r3, r3, #1
 8001f66:	6213      	str	r3, [r2, #32]
 8001f68:	4bbe      	ldr	r3, [pc, #760]	; (8002264 <HAL_RCC_OscConfig+0xc58>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	4abd      	ldr	r2, [pc, #756]	; (8002264 <HAL_RCC_OscConfig+0xc58>)
 8001f6e:	f023 0304 	bic.w	r3, r3, #4
 8001f72:	6213      	str	r3, [r2, #32]
 8001f74:	e020      	b.n	8001fb8 <HAL_RCC_OscConfig+0x9ac>
 8001f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b05      	cmp	r3, #5
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x994>
 8001f86:	4bb7      	ldr	r3, [pc, #732]	; (8002264 <HAL_RCC_OscConfig+0xc58>)
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	4ab6      	ldr	r2, [pc, #728]	; (8002264 <HAL_RCC_OscConfig+0xc58>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	6213      	str	r3, [r2, #32]
 8001f92:	4bb4      	ldr	r3, [pc, #720]	; (8002264 <HAL_RCC_OscConfig+0xc58>)
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	4ab3      	ldr	r2, [pc, #716]	; (8002264 <HAL_RCC_OscConfig+0xc58>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6213      	str	r3, [r2, #32]
 8001f9e:	e00b      	b.n	8001fb8 <HAL_RCC_OscConfig+0x9ac>
 8001fa0:	4bb0      	ldr	r3, [pc, #704]	; (8002264 <HAL_RCC_OscConfig+0xc58>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	4aaf      	ldr	r2, [pc, #700]	; (8002264 <HAL_RCC_OscConfig+0xc58>)
 8001fa6:	f023 0301 	bic.w	r3, r3, #1
 8001faa:	6213      	str	r3, [r2, #32]
 8001fac:	4bad      	ldr	r3, [pc, #692]	; (8002264 <HAL_RCC_OscConfig+0xc58>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	4aac      	ldr	r2, [pc, #688]	; (8002264 <HAL_RCC_OscConfig+0xc58>)
 8001fb2:	f023 0304 	bic.w	r3, r3, #4
 8001fb6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 8081 	beq.w	80020cc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fca:	f7fe fced 	bl	80009a8 <HAL_GetTick>
 8001fce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd2:	e00b      	b.n	8001fec <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd4:	f7fe fce8 	bl	80009a8 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e345      	b.n	8002678 <HAL_RCC_OscConfig+0x106c>
 8001fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	fa93 f2a3 	rbit	r2, r3
 8002006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002014:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002018:	2202      	movs	r2, #2
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002020:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	fa93 f2a3 	rbit	r2, r3
 800202a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002032:	601a      	str	r2, [r3, #0]
  return result;
 8002034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002038:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800203c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	095b      	lsrs	r3, r3, #5
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d102      	bne.n	8002058 <HAL_RCC_OscConfig+0xa4c>
 8002052:	4b84      	ldr	r3, [pc, #528]	; (8002264 <HAL_RCC_OscConfig+0xc58>)
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	e013      	b.n	8002080 <HAL_RCC_OscConfig+0xa74>
 8002058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002060:	2202      	movs	r2, #2
 8002062:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002068:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	fa93 f2a3 	rbit	r2, r3
 8002072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002076:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	4b79      	ldr	r3, [pc, #484]	; (8002264 <HAL_RCC_OscConfig+0xc58>)
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002084:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002088:	2102      	movs	r1, #2
 800208a:	6011      	str	r1, [r2, #0]
 800208c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002090:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002094:	6812      	ldr	r2, [r2, #0]
 8002096:	fa92 f1a2 	rbit	r1, r2
 800209a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800209e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80020a2:	6011      	str	r1, [r2, #0]
  return result;
 80020a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020a8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	fab2 f282 	clz	r2, r2
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	f002 021f 	and.w	r2, r2, #31
 80020be:	2101      	movs	r1, #1
 80020c0:	fa01 f202 	lsl.w	r2, r1, r2
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d084      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x9c8>
 80020ca:	e07f      	b.n	80021cc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020cc:	f7fe fc6c 	bl	80009a8 <HAL_GetTick>
 80020d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d4:	e00b      	b.n	80020ee <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020d6:	f7fe fc67 	bl	80009a8 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e2c4      	b.n	8002678 <HAL_RCC_OscConfig+0x106c>
 80020ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80020f6:	2202      	movs	r2, #2
 80020f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	fa93 f2a3 	rbit	r2, r3
 8002108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002116:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800211a:	2202      	movs	r2, #2
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002122:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	fa93 f2a3 	rbit	r2, r3
 800212c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002130:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002134:	601a      	str	r2, [r3, #0]
  return result;
 8002136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800213e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002140:	fab3 f383 	clz	r3, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	b2db      	uxtb	r3, r3
 800214a:	f043 0302 	orr.w	r3, r3, #2
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d102      	bne.n	800215a <HAL_RCC_OscConfig+0xb4e>
 8002154:	4b43      	ldr	r3, [pc, #268]	; (8002264 <HAL_RCC_OscConfig+0xc58>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	e013      	b.n	8002182 <HAL_RCC_OscConfig+0xb76>
 800215a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002162:	2202      	movs	r2, #2
 8002164:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	fa93 f2a3 	rbit	r2, r3
 8002174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002178:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	4b39      	ldr	r3, [pc, #228]	; (8002264 <HAL_RCC_OscConfig+0xc58>)
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002186:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800218a:	2102      	movs	r1, #2
 800218c:	6011      	str	r1, [r2, #0]
 800218e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002192:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	fa92 f1a2 	rbit	r1, r2
 800219c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021a0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80021a4:	6011      	str	r1, [r2, #0]
  return result;
 80021a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021aa:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	fab2 f282 	clz	r2, r2
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	f002 021f 	and.w	r2, r2, #31
 80021c0:	2101      	movs	r1, #1
 80021c2:	fa01 f202 	lsl.w	r2, r1, r2
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d184      	bne.n	80020d6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021cc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d105      	bne.n	80021e0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d4:	4b23      	ldr	r3, [pc, #140]	; (8002264 <HAL_RCC_OscConfig+0xc58>)
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	4a22      	ldr	r2, [pc, #136]	; (8002264 <HAL_RCC_OscConfig+0xc58>)
 80021da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021de:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 8242 	beq.w	8002676 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021f2:	4b1c      	ldr	r3, [pc, #112]	; (8002264 <HAL_RCC_OscConfig+0xc58>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	f000 8213 	beq.w	8002626 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002204:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	2b02      	cmp	r3, #2
 800220e:	f040 8162 	bne.w	80024d6 <HAL_RCC_OscConfig+0xeca>
 8002212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002216:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800221a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800221e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002224:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	fa93 f2a3 	rbit	r2, r3
 800222e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002232:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002236:	601a      	str	r2, [r3, #0]
  return result;
 8002238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002240:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002242:	fab3 f383 	clz	r3, r3
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800224c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	461a      	mov	r2, r3
 8002254:	2300      	movs	r3, #0
 8002256:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7fe fba6 	bl	80009a8 <HAL_GetTick>
 800225c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002260:	e00c      	b.n	800227c <HAL_RCC_OscConfig+0xc70>
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002268:	f7fe fb9e 	bl	80009a8 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e1fd      	b.n	8002678 <HAL_RCC_OscConfig+0x106c>
 800227c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002280:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002284:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002288:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	fa93 f2a3 	rbit	r2, r3
 8002298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80022a0:	601a      	str	r2, [r3, #0]
  return result;
 80022a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80022aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	095b      	lsrs	r3, r3, #5
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d102      	bne.n	80022c6 <HAL_RCC_OscConfig+0xcba>
 80022c0:	4bb0      	ldr	r3, [pc, #704]	; (8002584 <HAL_RCC_OscConfig+0xf78>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	e027      	b.n	8002316 <HAL_RCC_OscConfig+0xd0a>
 80022c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ca:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80022ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	fa93 f2a3 	rbit	r2, r3
 80022e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80022f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	fa93 f2a3 	rbit	r2, r3
 8002308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	4b9c      	ldr	r3, [pc, #624]	; (8002584 <HAL_RCC_OscConfig+0xf78>)
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800231a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800231e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002322:	6011      	str	r1, [r2, #0]
 8002324:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002328:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800232c:	6812      	ldr	r2, [r2, #0]
 800232e:	fa92 f1a2 	rbit	r1, r2
 8002332:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002336:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800233a:	6011      	str	r1, [r2, #0]
  return result;
 800233c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002340:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002344:	6812      	ldr	r2, [r2, #0]
 8002346:	fab2 f282 	clz	r2, r2
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	f042 0220 	orr.w	r2, r2, #32
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	f002 021f 	and.w	r2, r2, #31
 8002356:	2101      	movs	r1, #1
 8002358:	fa01 f202 	lsl.w	r2, r1, r2
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d182      	bne.n	8002268 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002362:	4b88      	ldr	r3, [pc, #544]	; (8002584 <HAL_RCC_OscConfig+0xf78>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800236a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	430b      	orrs	r3, r1
 8002384:	497f      	ldr	r1, [pc, #508]	; (8002584 <HAL_RCC_OscConfig+0xf78>)
 8002386:	4313      	orrs	r3, r2
 8002388:	604b      	str	r3, [r1, #4]
 800238a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002392:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002396:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	fa93 f2a3 	rbit	r2, r3
 80023a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023aa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80023ae:	601a      	str	r2, [r3, #0]
  return result;
 80023b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80023b8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	461a      	mov	r2, r3
 80023cc:	2301      	movs	r3, #1
 80023ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7fe faea 	bl	80009a8 <HAL_GetTick>
 80023d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d8:	e009      	b.n	80023ee <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023da:	f7fe fae5 	bl	80009a8 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e144      	b.n	8002678 <HAL_RCC_OscConfig+0x106c>
 80023ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80023f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002400:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	fa93 f2a3 	rbit	r2, r3
 800240a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002412:	601a      	str	r2, [r3, #0]
  return result;
 8002414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002418:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800241c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	095b      	lsrs	r3, r3, #5
 8002426:	b2db      	uxtb	r3, r3
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d102      	bne.n	8002438 <HAL_RCC_OscConfig+0xe2c>
 8002432:	4b54      	ldr	r3, [pc, #336]	; (8002584 <HAL_RCC_OscConfig+0xf78>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	e027      	b.n	8002488 <HAL_RCC_OscConfig+0xe7c>
 8002438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002440:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002444:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	fa93 f2a3 	rbit	r2, r3
 8002454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002458:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002462:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002466:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002470:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	fa93 f2a3 	rbit	r2, r3
 800247a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	4b3f      	ldr	r3, [pc, #252]	; (8002584 <HAL_RCC_OscConfig+0xf78>)
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800248c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002490:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002494:	6011      	str	r1, [r2, #0]
 8002496:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800249a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	fa92 f1a2 	rbit	r1, r2
 80024a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024a8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80024ac:	6011      	str	r1, [r2, #0]
  return result;
 80024ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024b2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	fab2 f282 	clz	r2, r2
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	f042 0220 	orr.w	r2, r2, #32
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	f002 021f 	and.w	r2, r2, #31
 80024c8:	2101      	movs	r1, #1
 80024ca:	fa01 f202 	lsl.w	r2, r1, r2
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d082      	beq.n	80023da <HAL_RCC_OscConfig+0xdce>
 80024d4:	e0cf      	b.n	8002676 <HAL_RCC_OscConfig+0x106a>
 80024d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024da:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80024de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	fa93 f2a3 	rbit	r2, r3
 80024f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80024fa:	601a      	str	r2, [r3, #0]
  return result;
 80024fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002500:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002504:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002506:	fab3 f383 	clz	r3, r3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002510:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	461a      	mov	r2, r3
 8002518:	2300      	movs	r3, #0
 800251a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7fe fa44 	bl	80009a8 <HAL_GetTick>
 8002520:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002524:	e009      	b.n	800253a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002526:	f7fe fa3f 	bl	80009a8 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e09e      	b.n	8002678 <HAL_RCC_OscConfig+0x106c>
 800253a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002542:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002546:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	fa93 f2a3 	rbit	r2, r3
 8002556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800255e:	601a      	str	r2, [r3, #0]
  return result;
 8002560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002564:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002568:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800256a:	fab3 f383 	clz	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	095b      	lsrs	r3, r3, #5
 8002572:	b2db      	uxtb	r3, r3
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b01      	cmp	r3, #1
 800257c:	d104      	bne.n	8002588 <HAL_RCC_OscConfig+0xf7c>
 800257e:	4b01      	ldr	r3, [pc, #4]	; (8002584 <HAL_RCC_OscConfig+0xf78>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	e029      	b.n	80025d8 <HAL_RCC_OscConfig+0xfcc>
 8002584:	40021000 	.word	0x40021000
 8002588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002590:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002594:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	fa93 f2a3 	rbit	r2, r3
 80025a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80025b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	fa93 f2a3 	rbit	r2, r3
 80025ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ce:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <HAL_RCC_OscConfig+0x1078>)
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025dc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80025e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025e4:	6011      	str	r1, [r2, #0]
 80025e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025ea:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	fa92 f1a2 	rbit	r1, r2
 80025f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025f8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80025fc:	6011      	str	r1, [r2, #0]
  return result;
 80025fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002602:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	fab2 f282 	clz	r2, r2
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	f042 0220 	orr.w	r2, r2, #32
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	f002 021f 	and.w	r2, r2, #31
 8002618:	2101      	movs	r1, #1
 800261a:	fa01 f202 	lsl.w	r2, r1, r2
 800261e:	4013      	ands	r3, r2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d180      	bne.n	8002526 <HAL_RCC_OscConfig+0xf1a>
 8002624:	e027      	b.n	8002676 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e01e      	b.n	8002678 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800263a:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_RCC_OscConfig+0x1078>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002642:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002646:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800264a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	429a      	cmp	r2, r3
 8002658:	d10b      	bne.n	8002672 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800265a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800265e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002666:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800266e:	429a      	cmp	r2, r3
 8002670:	d001      	beq.n	8002676 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000

08002688 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b09e      	sub	sp, #120	; 0x78
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e162      	b.n	8002966 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026a0:	4b90      	ldr	r3, [pc, #576]	; (80028e4 <HAL_RCC_ClockConfig+0x25c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d910      	bls.n	80026d0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	4b8d      	ldr	r3, [pc, #564]	; (80028e4 <HAL_RCC_ClockConfig+0x25c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 0207 	bic.w	r2, r3, #7
 80026b6:	498b      	ldr	r1, [pc, #556]	; (80028e4 <HAL_RCC_ClockConfig+0x25c>)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026be:	4b89      	ldr	r3, [pc, #548]	; (80028e4 <HAL_RCC_ClockConfig+0x25c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e14a      	b.n	8002966 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026dc:	4b82      	ldr	r3, [pc, #520]	; (80028e8 <HAL_RCC_ClockConfig+0x260>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	497f      	ldr	r1, [pc, #508]	; (80028e8 <HAL_RCC_ClockConfig+0x260>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 80dc 	beq.w	80028b4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d13c      	bne.n	800277e <HAL_RCC_ClockConfig+0xf6>
 8002704:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002708:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002714:	fab3 f383 	clz	r3, r3
 8002718:	b2db      	uxtb	r3, r3
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b01      	cmp	r3, #1
 8002726:	d102      	bne.n	800272e <HAL_RCC_ClockConfig+0xa6>
 8002728:	4b6f      	ldr	r3, [pc, #444]	; (80028e8 <HAL_RCC_ClockConfig+0x260>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	e00f      	b.n	800274e <HAL_RCC_ClockConfig+0xc6>
 800272e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002732:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002736:	fa93 f3a3 	rbit	r3, r3
 800273a:	667b      	str	r3, [r7, #100]	; 0x64
 800273c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002740:	663b      	str	r3, [r7, #96]	; 0x60
 8002742:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	65fb      	str	r3, [r7, #92]	; 0x5c
 800274a:	4b67      	ldr	r3, [pc, #412]	; (80028e8 <HAL_RCC_ClockConfig+0x260>)
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002752:	65ba      	str	r2, [r7, #88]	; 0x58
 8002754:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002756:	fa92 f2a2 	rbit	r2, r2
 800275a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800275c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800275e:	fab2 f282 	clz	r2, r2
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	f042 0220 	orr.w	r2, r2, #32
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	f002 021f 	and.w	r2, r2, #31
 800276e:	2101      	movs	r1, #1
 8002770:	fa01 f202 	lsl.w	r2, r1, r2
 8002774:	4013      	ands	r3, r2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d17b      	bne.n	8002872 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e0f3      	b.n	8002966 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d13c      	bne.n	8002800 <HAL_RCC_ClockConfig+0x178>
 8002786:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800278a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	095b      	lsrs	r3, r3, #5
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d102      	bne.n	80027b0 <HAL_RCC_ClockConfig+0x128>
 80027aa:	4b4f      	ldr	r3, [pc, #316]	; (80028e8 <HAL_RCC_ClockConfig+0x260>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	e00f      	b.n	80027d0 <HAL_RCC_ClockConfig+0x148>
 80027b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027b8:	fa93 f3a3 	rbit	r3, r3
 80027bc:	647b      	str	r3, [r7, #68]	; 0x44
 80027be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027c2:	643b      	str	r3, [r7, #64]	; 0x40
 80027c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027cc:	4b46      	ldr	r3, [pc, #280]	; (80028e8 <HAL_RCC_ClockConfig+0x260>)
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027d4:	63ba      	str	r2, [r7, #56]	; 0x38
 80027d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027d8:	fa92 f2a2 	rbit	r2, r2
 80027dc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80027de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027e0:	fab2 f282 	clz	r2, r2
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	f042 0220 	orr.w	r2, r2, #32
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	f002 021f 	and.w	r2, r2, #31
 80027f0:	2101      	movs	r1, #1
 80027f2:	fa01 f202 	lsl.w	r2, r1, r2
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d13a      	bne.n	8002872 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0b2      	b.n	8002966 <HAL_RCC_ClockConfig+0x2de>
 8002800:	2302      	movs	r3, #2
 8002802:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800280c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280e:	fab3 f383 	clz	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	095b      	lsrs	r3, r3, #5
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b01      	cmp	r3, #1
 8002820:	d102      	bne.n	8002828 <HAL_RCC_ClockConfig+0x1a0>
 8002822:	4b31      	ldr	r3, [pc, #196]	; (80028e8 <HAL_RCC_ClockConfig+0x260>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	e00d      	b.n	8002844 <HAL_RCC_ClockConfig+0x1bc>
 8002828:	2302      	movs	r3, #2
 800282a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
 8002834:	2302      	movs	r3, #2
 8002836:	623b      	str	r3, [r7, #32]
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	fa93 f3a3 	rbit	r3, r3
 800283e:	61fb      	str	r3, [r7, #28]
 8002840:	4b29      	ldr	r3, [pc, #164]	; (80028e8 <HAL_RCC_ClockConfig+0x260>)
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	2202      	movs	r2, #2
 8002846:	61ba      	str	r2, [r7, #24]
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	fa92 f2a2 	rbit	r2, r2
 800284e:	617a      	str	r2, [r7, #20]
  return result;
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	fab2 f282 	clz	r2, r2
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	f042 0220 	orr.w	r2, r2, #32
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	f002 021f 	and.w	r2, r2, #31
 8002862:	2101      	movs	r1, #1
 8002864:	fa01 f202 	lsl.w	r2, r1, r2
 8002868:	4013      	ands	r3, r2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e079      	b.n	8002966 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002872:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_RCC_ClockConfig+0x260>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f023 0203 	bic.w	r2, r3, #3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	491a      	ldr	r1, [pc, #104]	; (80028e8 <HAL_RCC_ClockConfig+0x260>)
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002884:	f7fe f890 	bl	80009a8 <HAL_GetTick>
 8002888:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800288c:	f7fe f88c 	bl	80009a8 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	; 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e061      	b.n	8002966 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <HAL_RCC_ClockConfig+0x260>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 020c 	and.w	r2, r3, #12
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d1eb      	bne.n	800288c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_RCC_ClockConfig+0x25c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d214      	bcs.n	80028ec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <HAL_RCC_ClockConfig+0x25c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 0207 	bic.w	r2, r3, #7
 80028ca:	4906      	ldr	r1, [pc, #24]	; (80028e4 <HAL_RCC_ClockConfig+0x25c>)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d2:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <HAL_RCC_ClockConfig+0x25c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d005      	beq.n	80028ec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e040      	b.n	8002966 <HAL_RCC_ClockConfig+0x2de>
 80028e4:	40022000 	.word	0x40022000
 80028e8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f8:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <HAL_RCC_ClockConfig+0x2e8>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	491a      	ldr	r1, [pc, #104]	; (8002970 <HAL_RCC_ClockConfig+0x2e8>)
 8002906:	4313      	orrs	r3, r2
 8002908:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d009      	beq.n	800292a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002916:	4b16      	ldr	r3, [pc, #88]	; (8002970 <HAL_RCC_ClockConfig+0x2e8>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4912      	ldr	r1, [pc, #72]	; (8002970 <HAL_RCC_ClockConfig+0x2e8>)
 8002926:	4313      	orrs	r3, r2
 8002928:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800292a:	f000 f829 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 800292e:	4601      	mov	r1, r0
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <HAL_RCC_ClockConfig+0x2e8>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002938:	22f0      	movs	r2, #240	; 0xf0
 800293a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	fa92 f2a2 	rbit	r2, r2
 8002942:	60fa      	str	r2, [r7, #12]
  return result;
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	fab2 f282 	clz	r2, r2
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	40d3      	lsrs	r3, r2
 800294e:	4a09      	ldr	r2, [pc, #36]	; (8002974 <HAL_RCC_ClockConfig+0x2ec>)
 8002950:	5cd3      	ldrb	r3, [r2, r3]
 8002952:	fa21 f303 	lsr.w	r3, r1, r3
 8002956:	4a08      	ldr	r2, [pc, #32]	; (8002978 <HAL_RCC_ClockConfig+0x2f0>)
 8002958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800295a:	4b08      	ldr	r3, [pc, #32]	; (800297c <HAL_RCC_ClockConfig+0x2f4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7fd ffde 	bl	8000920 <HAL_InitTick>
  
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3778      	adds	r7, #120	; 0x78
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000
 8002974:	08004438 	.word	0x08004438
 8002978:	20000000 	.word	0x20000000
 800297c:	20000004 	.word	0x20000004

08002980 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	b480      	push	{r7}
 8002982:	b08b      	sub	sp, #44	; 0x2c
 8002984:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
 800298a:	2300      	movs	r3, #0
 800298c:	61bb      	str	r3, [r7, #24]
 800298e:	2300      	movs	r3, #0
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800299a:	4b29      	ldr	r3, [pc, #164]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xc0>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d002      	beq.n	80029b0 <HAL_RCC_GetSysClockFreq+0x30>
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d003      	beq.n	80029b6 <HAL_RCC_GetSysClockFreq+0x36>
 80029ae:	e03c      	b.n	8002a2a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029b0:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029b2:	623b      	str	r3, [r7, #32]
      break;
 80029b4:	e03c      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80029bc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80029c0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	fa92 f2a2 	rbit	r2, r2
 80029c8:	607a      	str	r2, [r7, #4]
  return result;
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	fab2 f282 	clz	r2, r2
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	40d3      	lsrs	r3, r2
 80029d4:	4a1c      	ldr	r2, [pc, #112]	; (8002a48 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029d6:	5cd3      	ldrb	r3, [r2, r3]
 80029d8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80029da:	4b19      	ldr	r3, [pc, #100]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	220f      	movs	r2, #15
 80029e4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	fa92 f2a2 	rbit	r2, r2
 80029ec:	60fa      	str	r2, [r7, #12]
  return result;
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	fab2 f282 	clz	r2, r2
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	40d3      	lsrs	r3, r2
 80029f8:	4a14      	ldr	r2, [pc, #80]	; (8002a4c <HAL_RCC_GetSysClockFreq+0xcc>)
 80029fa:	5cd3      	ldrb	r3, [r2, r3]
 80029fc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a08:	4a0e      	ldr	r2, [pc, #56]	; (8002a44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	fb02 f303 	mul.w	r3, r2, r3
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
 8002a18:	e004      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	4a0c      	ldr	r2, [pc, #48]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	623b      	str	r3, [r7, #32]
      break;
 8002a28:	e002      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a2c:	623b      	str	r3, [r7, #32]
      break;
 8002a2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a30:	6a3b      	ldr	r3, [r7, #32]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	372c      	adds	r7, #44	; 0x2c
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
 8002a44:	007a1200 	.word	0x007a1200
 8002a48:	08004450 	.word	0x08004450
 8002a4c:	08004460 	.word	0x08004460
 8002a50:	003d0900 	.word	0x003d0900

08002a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a58:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	20000000 	.word	0x20000000

08002a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a72:	f7ff ffef 	bl	8002a54 <HAL_RCC_GetHCLKFreq>
 8002a76:	4601      	mov	r1, r0
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a80:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a84:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	fa92 f2a2 	rbit	r2, r2
 8002a8c:	603a      	str	r2, [r7, #0]
  return result;
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	fab2 f282 	clz	r2, r2
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	40d3      	lsrs	r3, r2
 8002a98:	4a04      	ldr	r2, [pc, #16]	; (8002aac <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a9a:	5cd3      	ldrb	r3, [r2, r3]
 8002a9c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	08004448 	.word	0x08004448

08002ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ab6:	f7ff ffcd 	bl	8002a54 <HAL_RCC_GetHCLKFreq>
 8002aba:	4601      	mov	r1, r0
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002ac4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002ac8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	fa92 f2a2 	rbit	r2, r2
 8002ad0:	603a      	str	r2, [r7, #0]
  return result;
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	fab2 f282 	clz	r2, r2
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	40d3      	lsrs	r3, r2
 8002adc:	4a04      	ldr	r2, [pc, #16]	; (8002af0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ade:	5cd3      	ldrb	r3, [r2, r3]
 8002ae0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40021000 	.word	0x40021000
 8002af0:	08004448 	.word	0x08004448

08002af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b092      	sub	sp, #72	; 0x48
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b04:	2300      	movs	r3, #0
 8002b06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 80cd 	beq.w	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b18:	4b86      	ldr	r3, [pc, #536]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10e      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b24:	4b83      	ldr	r3, [pc, #524]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	4a82      	ldr	r2, [pc, #520]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	61d3      	str	r3, [r2, #28]
 8002b30:	4b80      	ldr	r3, [pc, #512]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b42:	4b7d      	ldr	r3, [pc, #500]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d118      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b4e:	4b7a      	ldr	r3, [pc, #488]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a79      	ldr	r2, [pc, #484]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b58:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b5a:	f7fd ff25 	bl	80009a8 <HAL_GetTick>
 8002b5e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b60:	e008      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b62:	f7fd ff21 	bl	80009a8 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b64      	cmp	r3, #100	; 0x64
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e0db      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b74:	4b70      	ldr	r3, [pc, #448]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b80:	4b6c      	ldr	r3, [pc, #432]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b88:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d07d      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d076      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b9e:	4b65      	ldr	r3, [pc, #404]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ba8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bac:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb0:	fa93 f3a3 	rbit	r3, r3
 8002bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bb8:	fab3 f383 	clz	r3, r3
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	4b5e      	ldr	r3, [pc, #376]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	2301      	movs	r3, #1
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bdc:	fab3 f383 	clz	r3, r3
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	4b55      	ldr	r3, [pc, #340]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	461a      	mov	r2, r3
 8002bec:	2300      	movs	r3, #0
 8002bee:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bf0:	4a50      	ldr	r2, [pc, #320]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bf4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d045      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7fd fed2 	bl	80009a8 <HAL_GetTick>
 8002c04:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c06:	e00a      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c08:	f7fd fece 	bl	80009a8 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e086      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	623b      	str	r3, [r7, #32]
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	61fb      	str	r3, [r7, #28]
  return result;
 8002c36:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c38:	fab3 f383 	clz	r3, r3
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f043 0302 	orr.w	r3, r3, #2
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d102      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002c4c:	4b39      	ldr	r3, [pc, #228]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	e007      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002c52:	2302      	movs	r3, #2
 8002c54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	fa93 f3a3 	rbit	r3, r3
 8002c5c:	617b      	str	r3, [r7, #20]
 8002c5e:	4b35      	ldr	r3, [pc, #212]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	2202      	movs	r2, #2
 8002c64:	613a      	str	r2, [r7, #16]
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	fa92 f2a2 	rbit	r2, r2
 8002c6c:	60fa      	str	r2, [r7, #12]
  return result;
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	fab2 f282 	clz	r2, r2
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	f002 021f 	and.w	r2, r2, #31
 8002c80:	2101      	movs	r1, #1
 8002c82:	fa01 f202 	lsl.w	r2, r1, r2
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0bd      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c8c:	4b29      	ldr	r3, [pc, #164]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	4926      	ldr	r1, [pc, #152]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c9e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d105      	bne.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca6:	4b23      	ldr	r3, [pc, #140]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	4a22      	ldr	r2, [pc, #136]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d008      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	f023 0203 	bic.w	r2, r3, #3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	491a      	ldr	r1, [pc, #104]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0320 	and.w	r3, r3, #32
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cdc:	4b15      	ldr	r3, [pc, #84]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	f023 0210 	bic.w	r2, r3, #16
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	4912      	ldr	r1, [pc, #72]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002cfa:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfe:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	490b      	ldr	r1, [pc, #44]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	4903      	ldr	r1, [pc, #12]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3748      	adds	r7, #72	; 0x48
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40021000 	.word	0x40021000
 8002d38:	40007000 	.word	0x40007000
 8002d3c:	10908100 	.word	0x10908100

08002d40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e040      	b.n	8002dd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fd fc64 	bl	8000630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2224      	movs	r2, #36	; 0x24
 8002d6c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0201 	bic.w	r2, r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f82c 	bl	8002ddc <UART_SetConfig>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e022      	b.n	8002dd4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f956 	bl	8003048 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002daa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
 8002dca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f9dd 	bl	800318c <UART_CheckIdleState>
 8002dd2:	4603      	mov	r3, r0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	4b8a      	ldr	r3, [pc, #552]	; (8003030 <UART_SetConfig+0x254>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	6979      	ldr	r1, [r7, #20]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a78      	ldr	r2, [pc, #480]	; (8003034 <UART_SetConfig+0x258>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d120      	bne.n	8002e9a <UART_SetConfig+0xbe>
 8002e58:	4b77      	ldr	r3, [pc, #476]	; (8003038 <UART_SetConfig+0x25c>)
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d817      	bhi.n	8002e94 <UART_SetConfig+0xb8>
 8002e64:	a201      	add	r2, pc, #4	; (adr r2, 8002e6c <UART_SetConfig+0x90>)
 8002e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6a:	bf00      	nop
 8002e6c:	08002e7d 	.word	0x08002e7d
 8002e70:	08002e89 	.word	0x08002e89
 8002e74:	08002e8f 	.word	0x08002e8f
 8002e78:	08002e83 	.word	0x08002e83
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	77fb      	strb	r3, [r7, #31]
 8002e80:	e01d      	b.n	8002ebe <UART_SetConfig+0xe2>
 8002e82:	2302      	movs	r3, #2
 8002e84:	77fb      	strb	r3, [r7, #31]
 8002e86:	e01a      	b.n	8002ebe <UART_SetConfig+0xe2>
 8002e88:	2304      	movs	r3, #4
 8002e8a:	77fb      	strb	r3, [r7, #31]
 8002e8c:	e017      	b.n	8002ebe <UART_SetConfig+0xe2>
 8002e8e:	2308      	movs	r3, #8
 8002e90:	77fb      	strb	r3, [r7, #31]
 8002e92:	e014      	b.n	8002ebe <UART_SetConfig+0xe2>
 8002e94:	2310      	movs	r3, #16
 8002e96:	77fb      	strb	r3, [r7, #31]
 8002e98:	e011      	b.n	8002ebe <UART_SetConfig+0xe2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a67      	ldr	r2, [pc, #412]	; (800303c <UART_SetConfig+0x260>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d102      	bne.n	8002eaa <UART_SetConfig+0xce>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	77fb      	strb	r3, [r7, #31]
 8002ea8:	e009      	b.n	8002ebe <UART_SetConfig+0xe2>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a64      	ldr	r2, [pc, #400]	; (8003040 <UART_SetConfig+0x264>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d102      	bne.n	8002eba <UART_SetConfig+0xde>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	77fb      	strb	r3, [r7, #31]
 8002eb8:	e001      	b.n	8002ebe <UART_SetConfig+0xe2>
 8002eba:	2310      	movs	r3, #16
 8002ebc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ec6:	d15a      	bne.n	8002f7e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002ec8:	7ffb      	ldrb	r3, [r7, #31]
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d827      	bhi.n	8002f1e <UART_SetConfig+0x142>
 8002ece:	a201      	add	r2, pc, #4	; (adr r2, 8002ed4 <UART_SetConfig+0xf8>)
 8002ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed4:	08002ef9 	.word	0x08002ef9
 8002ed8:	08002f01 	.word	0x08002f01
 8002edc:	08002f09 	.word	0x08002f09
 8002ee0:	08002f1f 	.word	0x08002f1f
 8002ee4:	08002f0f 	.word	0x08002f0f
 8002ee8:	08002f1f 	.word	0x08002f1f
 8002eec:	08002f1f 	.word	0x08002f1f
 8002ef0:	08002f1f 	.word	0x08002f1f
 8002ef4:	08002f17 	.word	0x08002f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ef8:	f7ff fdb8 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 8002efc:	61b8      	str	r0, [r7, #24]
        break;
 8002efe:	e013      	b.n	8002f28 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f00:	f7ff fdd6 	bl	8002ab0 <HAL_RCC_GetPCLK2Freq>
 8002f04:	61b8      	str	r0, [r7, #24]
        break;
 8002f06:	e00f      	b.n	8002f28 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f08:	4b4e      	ldr	r3, [pc, #312]	; (8003044 <UART_SetConfig+0x268>)
 8002f0a:	61bb      	str	r3, [r7, #24]
        break;
 8002f0c:	e00c      	b.n	8002f28 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f0e:	f7ff fd37 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8002f12:	61b8      	str	r0, [r7, #24]
        break;
 8002f14:	e008      	b.n	8002f28 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f1a:	61bb      	str	r3, [r7, #24]
        break;
 8002f1c:	e004      	b.n	8002f28 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	77bb      	strb	r3, [r7, #30]
        break;
 8002f26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d074      	beq.n	8003018 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	005a      	lsls	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	085b      	lsrs	r3, r3, #1
 8002f38:	441a      	add	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	2b0f      	cmp	r3, #15
 8002f48:	d916      	bls.n	8002f78 <UART_SetConfig+0x19c>
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f50:	d212      	bcs.n	8002f78 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	f023 030f 	bic.w	r3, r3, #15
 8002f5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	085b      	lsrs	r3, r3, #1
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	89fb      	ldrh	r3, [r7, #14]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	89fa      	ldrh	r2, [r7, #14]
 8002f74:	60da      	str	r2, [r3, #12]
 8002f76:	e04f      	b.n	8003018 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	77bb      	strb	r3, [r7, #30]
 8002f7c:	e04c      	b.n	8003018 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f7e:	7ffb      	ldrb	r3, [r7, #31]
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d828      	bhi.n	8002fd6 <UART_SetConfig+0x1fa>
 8002f84:	a201      	add	r2, pc, #4	; (adr r2, 8002f8c <UART_SetConfig+0x1b0>)
 8002f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8a:	bf00      	nop
 8002f8c:	08002fb1 	.word	0x08002fb1
 8002f90:	08002fb9 	.word	0x08002fb9
 8002f94:	08002fc1 	.word	0x08002fc1
 8002f98:	08002fd7 	.word	0x08002fd7
 8002f9c:	08002fc7 	.word	0x08002fc7
 8002fa0:	08002fd7 	.word	0x08002fd7
 8002fa4:	08002fd7 	.word	0x08002fd7
 8002fa8:	08002fd7 	.word	0x08002fd7
 8002fac:	08002fcf 	.word	0x08002fcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fb0:	f7ff fd5c 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 8002fb4:	61b8      	str	r0, [r7, #24]
        break;
 8002fb6:	e013      	b.n	8002fe0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fb8:	f7ff fd7a 	bl	8002ab0 <HAL_RCC_GetPCLK2Freq>
 8002fbc:	61b8      	str	r0, [r7, #24]
        break;
 8002fbe:	e00f      	b.n	8002fe0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fc0:	4b20      	ldr	r3, [pc, #128]	; (8003044 <UART_SetConfig+0x268>)
 8002fc2:	61bb      	str	r3, [r7, #24]
        break;
 8002fc4:	e00c      	b.n	8002fe0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fc6:	f7ff fcdb 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8002fca:	61b8      	str	r0, [r7, #24]
        break;
 8002fcc:	e008      	b.n	8002fe0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fd2:	61bb      	str	r3, [r7, #24]
        break;
 8002fd4:	e004      	b.n	8002fe0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	77bb      	strb	r3, [r7, #30]
        break;
 8002fde:	bf00      	nop
    }

    if (pclk != 0U)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d018      	beq.n	8003018 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	085a      	lsrs	r2, r3, #1
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	441a      	add	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	2b0f      	cmp	r3, #15
 8002ffe:	d909      	bls.n	8003014 <UART_SetConfig+0x238>
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003006:	d205      	bcs.n	8003014 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	b29a      	uxth	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	60da      	str	r2, [r3, #12]
 8003012:	e001      	b.n	8003018 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003024:	7fbb      	ldrb	r3, [r7, #30]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3720      	adds	r7, #32
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	efff69f3 	.word	0xefff69f3
 8003034:	40013800 	.word	0x40013800
 8003038:	40021000 	.word	0x40021000
 800303c:	40004400 	.word	0x40004400
 8003040:	40004800 	.word	0x40004800
 8003044:	007a1200 	.word	0x007a1200

08003048 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	f003 0310 	and.w	r3, r3, #16
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003124:	2b00      	cmp	r3, #0
 8003126:	d01a      	beq.n	800315e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003146:	d10a      	bne.n	800315e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	605a      	str	r2, [r3, #4]
  }
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b098      	sub	sp, #96	; 0x60
 8003190:	af02      	add	r7, sp, #8
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800319c:	f7fd fc04 	bl	80009a8 <HAL_GetTick>
 80031a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d12e      	bne.n	800320e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031b8:	2200      	movs	r2, #0
 80031ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f88c 	bl	80032dc <UART_WaitOnFlagUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d021      	beq.n	800320e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d2:	e853 3f00 	ldrex	r3, [r3]
 80031d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031de:	653b      	str	r3, [r7, #80]	; 0x50
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	461a      	mov	r2, r3
 80031e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031e8:	647b      	str	r3, [r7, #68]	; 0x44
 80031ea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031f0:	e841 2300 	strex	r3, r2, [r1]
 80031f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1e6      	bne.n	80031ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2220      	movs	r2, #32
 8003200:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e062      	b.n	80032d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b04      	cmp	r3, #4
 800321a:	d149      	bne.n	80032b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800321c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003224:	2200      	movs	r2, #0
 8003226:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f856 	bl	80032dc <UART_WaitOnFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d03c      	beq.n	80032b0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	e853 3f00 	ldrex	r3, [r3]
 8003242:	623b      	str	r3, [r7, #32]
   return(result);
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800324a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003254:	633b      	str	r3, [r7, #48]	; 0x30
 8003256:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003258:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800325a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800325c:	e841 2300 	strex	r3, r2, [r1]
 8003260:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1e6      	bne.n	8003236 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	3308      	adds	r3, #8
 800326e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	e853 3f00 	ldrex	r3, [r3]
 8003276:	60fb      	str	r3, [r7, #12]
   return(result);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0301 	bic.w	r3, r3, #1
 800327e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3308      	adds	r3, #8
 8003286:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003288:	61fa      	str	r2, [r7, #28]
 800328a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328c:	69b9      	ldr	r1, [r7, #24]
 800328e:	69fa      	ldr	r2, [r7, #28]
 8003290:	e841 2300 	strex	r3, r2, [r1]
 8003294:	617b      	str	r3, [r7, #20]
   return(result);
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1e5      	bne.n	8003268 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e011      	b.n	80032d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2220      	movs	r2, #32
 80032b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2220      	movs	r2, #32
 80032ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3758      	adds	r7, #88	; 0x58
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	4613      	mov	r3, r2
 80032ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ec:	e049      	b.n	8003382 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032f4:	d045      	beq.n	8003382 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f6:	f7fd fb57 	bl	80009a8 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	429a      	cmp	r2, r3
 8003304:	d302      	bcc.n	800330c <UART_WaitOnFlagUntilTimeout+0x30>
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e048      	b.n	80033a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b00      	cmp	r3, #0
 800331c:	d031      	beq.n	8003382 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b08      	cmp	r3, #8
 800332a:	d110      	bne.n	800334e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2208      	movs	r2, #8
 8003332:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 f838 	bl	80033aa <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2208      	movs	r2, #8
 800333e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e029      	b.n	80033a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800335c:	d111      	bne.n	8003382 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003366:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 f81e 	bl	80033aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2220      	movs	r2, #32
 8003372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e00f      	b.n	80033a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	4013      	ands	r3, r2
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	429a      	cmp	r2, r3
 8003390:	bf0c      	ite	eq
 8003392:	2301      	moveq	r3, #1
 8003394:	2300      	movne	r3, #0
 8003396:	b2db      	uxtb	r3, r3
 8003398:	461a      	mov	r2, r3
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	429a      	cmp	r2, r3
 800339e:	d0a6      	beq.n	80032ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b095      	sub	sp, #84	; 0x54
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ba:	e853 3f00 	ldrex	r3, [r3]
 80033be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80033c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d0:	643b      	str	r3, [r7, #64]	; 0x40
 80033d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033d8:	e841 2300 	strex	r3, r2, [r1]
 80033dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1e6      	bne.n	80033b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3308      	adds	r3, #8
 80033ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	e853 3f00 	ldrex	r3, [r3]
 80033f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f023 0301 	bic.w	r3, r3, #1
 80033fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3308      	adds	r3, #8
 8003402:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003404:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800340a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800340c:	e841 2300 	strex	r3, r2, [r1]
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1e5      	bne.n	80033e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800341c:	2b01      	cmp	r3, #1
 800341e:	d118      	bne.n	8003452 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	e853 3f00 	ldrex	r3, [r3]
 800342c:	60bb      	str	r3, [r7, #8]
   return(result);
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	f023 0310 	bic.w	r3, r3, #16
 8003434:	647b      	str	r3, [r7, #68]	; 0x44
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800343e:	61bb      	str	r3, [r7, #24]
 8003440:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003442:	6979      	ldr	r1, [r7, #20]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	e841 2300 	strex	r3, r2, [r1]
 800344a:	613b      	str	r3, [r7, #16]
   return(result);
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1e6      	bne.n	8003420 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2220      	movs	r2, #32
 8003456:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003466:	bf00      	nop
 8003468:	3754      	adds	r7, #84	; 0x54
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <__errno>:
 8003474:	4b01      	ldr	r3, [pc, #4]	; (800347c <__errno+0x8>)
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	2000000c 	.word	0x2000000c

08003480 <__libc_init_array>:
 8003480:	b570      	push	{r4, r5, r6, lr}
 8003482:	4d0d      	ldr	r5, [pc, #52]	; (80034b8 <__libc_init_array+0x38>)
 8003484:	4c0d      	ldr	r4, [pc, #52]	; (80034bc <__libc_init_array+0x3c>)
 8003486:	1b64      	subs	r4, r4, r5
 8003488:	10a4      	asrs	r4, r4, #2
 800348a:	2600      	movs	r6, #0
 800348c:	42a6      	cmp	r6, r4
 800348e:	d109      	bne.n	80034a4 <__libc_init_array+0x24>
 8003490:	4d0b      	ldr	r5, [pc, #44]	; (80034c0 <__libc_init_array+0x40>)
 8003492:	4c0c      	ldr	r4, [pc, #48]	; (80034c4 <__libc_init_array+0x44>)
 8003494:	f000 ffae 	bl	80043f4 <_init>
 8003498:	1b64      	subs	r4, r4, r5
 800349a:	10a4      	asrs	r4, r4, #2
 800349c:	2600      	movs	r6, #0
 800349e:	42a6      	cmp	r6, r4
 80034a0:	d105      	bne.n	80034ae <__libc_init_array+0x2e>
 80034a2:	bd70      	pop	{r4, r5, r6, pc}
 80034a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034a8:	4798      	blx	r3
 80034aa:	3601      	adds	r6, #1
 80034ac:	e7ee      	b.n	800348c <__libc_init_array+0xc>
 80034ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80034b2:	4798      	blx	r3
 80034b4:	3601      	adds	r6, #1
 80034b6:	e7f2      	b.n	800349e <__libc_init_array+0x1e>
 80034b8:	08004508 	.word	0x08004508
 80034bc:	08004508 	.word	0x08004508
 80034c0:	08004508 	.word	0x08004508
 80034c4:	0800450c 	.word	0x0800450c

080034c8 <memset>:
 80034c8:	4402      	add	r2, r0
 80034ca:	4603      	mov	r3, r0
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d100      	bne.n	80034d2 <memset+0xa>
 80034d0:	4770      	bx	lr
 80034d2:	f803 1b01 	strb.w	r1, [r3], #1
 80034d6:	e7f9      	b.n	80034cc <memset+0x4>

080034d8 <iprintf>:
 80034d8:	b40f      	push	{r0, r1, r2, r3}
 80034da:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <iprintf+0x2c>)
 80034dc:	b513      	push	{r0, r1, r4, lr}
 80034de:	681c      	ldr	r4, [r3, #0]
 80034e0:	b124      	cbz	r4, 80034ec <iprintf+0x14>
 80034e2:	69a3      	ldr	r3, [r4, #24]
 80034e4:	b913      	cbnz	r3, 80034ec <iprintf+0x14>
 80034e6:	4620      	mov	r0, r4
 80034e8:	f000 f866 	bl	80035b8 <__sinit>
 80034ec:	ab05      	add	r3, sp, #20
 80034ee:	9a04      	ldr	r2, [sp, #16]
 80034f0:	68a1      	ldr	r1, [r4, #8]
 80034f2:	9301      	str	r3, [sp, #4]
 80034f4:	4620      	mov	r0, r4
 80034f6:	f000 f9bd 	bl	8003874 <_vfiprintf_r>
 80034fa:	b002      	add	sp, #8
 80034fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003500:	b004      	add	sp, #16
 8003502:	4770      	bx	lr
 8003504:	2000000c 	.word	0x2000000c

08003508 <std>:
 8003508:	2300      	movs	r3, #0
 800350a:	b510      	push	{r4, lr}
 800350c:	4604      	mov	r4, r0
 800350e:	e9c0 3300 	strd	r3, r3, [r0]
 8003512:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003516:	6083      	str	r3, [r0, #8]
 8003518:	8181      	strh	r1, [r0, #12]
 800351a:	6643      	str	r3, [r0, #100]	; 0x64
 800351c:	81c2      	strh	r2, [r0, #14]
 800351e:	6183      	str	r3, [r0, #24]
 8003520:	4619      	mov	r1, r3
 8003522:	2208      	movs	r2, #8
 8003524:	305c      	adds	r0, #92	; 0x5c
 8003526:	f7ff ffcf 	bl	80034c8 <memset>
 800352a:	4b05      	ldr	r3, [pc, #20]	; (8003540 <std+0x38>)
 800352c:	6263      	str	r3, [r4, #36]	; 0x24
 800352e:	4b05      	ldr	r3, [pc, #20]	; (8003544 <std+0x3c>)
 8003530:	62a3      	str	r3, [r4, #40]	; 0x28
 8003532:	4b05      	ldr	r3, [pc, #20]	; (8003548 <std+0x40>)
 8003534:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003536:	4b05      	ldr	r3, [pc, #20]	; (800354c <std+0x44>)
 8003538:	6224      	str	r4, [r4, #32]
 800353a:	6323      	str	r3, [r4, #48]	; 0x30
 800353c:	bd10      	pop	{r4, pc}
 800353e:	bf00      	nop
 8003540:	08003e1d 	.word	0x08003e1d
 8003544:	08003e3f 	.word	0x08003e3f
 8003548:	08003e77 	.word	0x08003e77
 800354c:	08003e9b 	.word	0x08003e9b

08003550 <_cleanup_r>:
 8003550:	4901      	ldr	r1, [pc, #4]	; (8003558 <_cleanup_r+0x8>)
 8003552:	f000 b8af 	b.w	80036b4 <_fwalk_reent>
 8003556:	bf00      	nop
 8003558:	08004175 	.word	0x08004175

0800355c <__sfmoreglue>:
 800355c:	b570      	push	{r4, r5, r6, lr}
 800355e:	2268      	movs	r2, #104	; 0x68
 8003560:	1e4d      	subs	r5, r1, #1
 8003562:	4355      	muls	r5, r2
 8003564:	460e      	mov	r6, r1
 8003566:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800356a:	f000 f8e5 	bl	8003738 <_malloc_r>
 800356e:	4604      	mov	r4, r0
 8003570:	b140      	cbz	r0, 8003584 <__sfmoreglue+0x28>
 8003572:	2100      	movs	r1, #0
 8003574:	e9c0 1600 	strd	r1, r6, [r0]
 8003578:	300c      	adds	r0, #12
 800357a:	60a0      	str	r0, [r4, #8]
 800357c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003580:	f7ff ffa2 	bl	80034c8 <memset>
 8003584:	4620      	mov	r0, r4
 8003586:	bd70      	pop	{r4, r5, r6, pc}

08003588 <__sfp_lock_acquire>:
 8003588:	4801      	ldr	r0, [pc, #4]	; (8003590 <__sfp_lock_acquire+0x8>)
 800358a:	f000 b8b3 	b.w	80036f4 <__retarget_lock_acquire_recursive>
 800358e:	bf00      	nop
 8003590:	200001b5 	.word	0x200001b5

08003594 <__sfp_lock_release>:
 8003594:	4801      	ldr	r0, [pc, #4]	; (800359c <__sfp_lock_release+0x8>)
 8003596:	f000 b8ae 	b.w	80036f6 <__retarget_lock_release_recursive>
 800359a:	bf00      	nop
 800359c:	200001b5 	.word	0x200001b5

080035a0 <__sinit_lock_acquire>:
 80035a0:	4801      	ldr	r0, [pc, #4]	; (80035a8 <__sinit_lock_acquire+0x8>)
 80035a2:	f000 b8a7 	b.w	80036f4 <__retarget_lock_acquire_recursive>
 80035a6:	bf00      	nop
 80035a8:	200001b6 	.word	0x200001b6

080035ac <__sinit_lock_release>:
 80035ac:	4801      	ldr	r0, [pc, #4]	; (80035b4 <__sinit_lock_release+0x8>)
 80035ae:	f000 b8a2 	b.w	80036f6 <__retarget_lock_release_recursive>
 80035b2:	bf00      	nop
 80035b4:	200001b6 	.word	0x200001b6

080035b8 <__sinit>:
 80035b8:	b510      	push	{r4, lr}
 80035ba:	4604      	mov	r4, r0
 80035bc:	f7ff fff0 	bl	80035a0 <__sinit_lock_acquire>
 80035c0:	69a3      	ldr	r3, [r4, #24]
 80035c2:	b11b      	cbz	r3, 80035cc <__sinit+0x14>
 80035c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035c8:	f7ff bff0 	b.w	80035ac <__sinit_lock_release>
 80035cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80035d0:	6523      	str	r3, [r4, #80]	; 0x50
 80035d2:	4b13      	ldr	r3, [pc, #76]	; (8003620 <__sinit+0x68>)
 80035d4:	4a13      	ldr	r2, [pc, #76]	; (8003624 <__sinit+0x6c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80035da:	42a3      	cmp	r3, r4
 80035dc:	bf04      	itt	eq
 80035de:	2301      	moveq	r3, #1
 80035e0:	61a3      	streq	r3, [r4, #24]
 80035e2:	4620      	mov	r0, r4
 80035e4:	f000 f820 	bl	8003628 <__sfp>
 80035e8:	6060      	str	r0, [r4, #4]
 80035ea:	4620      	mov	r0, r4
 80035ec:	f000 f81c 	bl	8003628 <__sfp>
 80035f0:	60a0      	str	r0, [r4, #8]
 80035f2:	4620      	mov	r0, r4
 80035f4:	f000 f818 	bl	8003628 <__sfp>
 80035f8:	2200      	movs	r2, #0
 80035fa:	60e0      	str	r0, [r4, #12]
 80035fc:	2104      	movs	r1, #4
 80035fe:	6860      	ldr	r0, [r4, #4]
 8003600:	f7ff ff82 	bl	8003508 <std>
 8003604:	68a0      	ldr	r0, [r4, #8]
 8003606:	2201      	movs	r2, #1
 8003608:	2109      	movs	r1, #9
 800360a:	f7ff ff7d 	bl	8003508 <std>
 800360e:	68e0      	ldr	r0, [r4, #12]
 8003610:	2202      	movs	r2, #2
 8003612:	2112      	movs	r1, #18
 8003614:	f7ff ff78 	bl	8003508 <std>
 8003618:	2301      	movs	r3, #1
 800361a:	61a3      	str	r3, [r4, #24]
 800361c:	e7d2      	b.n	80035c4 <__sinit+0xc>
 800361e:	bf00      	nop
 8003620:	08004470 	.word	0x08004470
 8003624:	08003551 	.word	0x08003551

08003628 <__sfp>:
 8003628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800362a:	4607      	mov	r7, r0
 800362c:	f7ff ffac 	bl	8003588 <__sfp_lock_acquire>
 8003630:	4b1e      	ldr	r3, [pc, #120]	; (80036ac <__sfp+0x84>)
 8003632:	681e      	ldr	r6, [r3, #0]
 8003634:	69b3      	ldr	r3, [r6, #24]
 8003636:	b913      	cbnz	r3, 800363e <__sfp+0x16>
 8003638:	4630      	mov	r0, r6
 800363a:	f7ff ffbd 	bl	80035b8 <__sinit>
 800363e:	3648      	adds	r6, #72	; 0x48
 8003640:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003644:	3b01      	subs	r3, #1
 8003646:	d503      	bpl.n	8003650 <__sfp+0x28>
 8003648:	6833      	ldr	r3, [r6, #0]
 800364a:	b30b      	cbz	r3, 8003690 <__sfp+0x68>
 800364c:	6836      	ldr	r6, [r6, #0]
 800364e:	e7f7      	b.n	8003640 <__sfp+0x18>
 8003650:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003654:	b9d5      	cbnz	r5, 800368c <__sfp+0x64>
 8003656:	4b16      	ldr	r3, [pc, #88]	; (80036b0 <__sfp+0x88>)
 8003658:	60e3      	str	r3, [r4, #12]
 800365a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800365e:	6665      	str	r5, [r4, #100]	; 0x64
 8003660:	f000 f847 	bl	80036f2 <__retarget_lock_init_recursive>
 8003664:	f7ff ff96 	bl	8003594 <__sfp_lock_release>
 8003668:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800366c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003670:	6025      	str	r5, [r4, #0]
 8003672:	61a5      	str	r5, [r4, #24]
 8003674:	2208      	movs	r2, #8
 8003676:	4629      	mov	r1, r5
 8003678:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800367c:	f7ff ff24 	bl	80034c8 <memset>
 8003680:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003684:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003688:	4620      	mov	r0, r4
 800368a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800368c:	3468      	adds	r4, #104	; 0x68
 800368e:	e7d9      	b.n	8003644 <__sfp+0x1c>
 8003690:	2104      	movs	r1, #4
 8003692:	4638      	mov	r0, r7
 8003694:	f7ff ff62 	bl	800355c <__sfmoreglue>
 8003698:	4604      	mov	r4, r0
 800369a:	6030      	str	r0, [r6, #0]
 800369c:	2800      	cmp	r0, #0
 800369e:	d1d5      	bne.n	800364c <__sfp+0x24>
 80036a0:	f7ff ff78 	bl	8003594 <__sfp_lock_release>
 80036a4:	230c      	movs	r3, #12
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	e7ee      	b.n	8003688 <__sfp+0x60>
 80036aa:	bf00      	nop
 80036ac:	08004470 	.word	0x08004470
 80036b0:	ffff0001 	.word	0xffff0001

080036b4 <_fwalk_reent>:
 80036b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036b8:	4606      	mov	r6, r0
 80036ba:	4688      	mov	r8, r1
 80036bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80036c0:	2700      	movs	r7, #0
 80036c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036c6:	f1b9 0901 	subs.w	r9, r9, #1
 80036ca:	d505      	bpl.n	80036d8 <_fwalk_reent+0x24>
 80036cc:	6824      	ldr	r4, [r4, #0]
 80036ce:	2c00      	cmp	r4, #0
 80036d0:	d1f7      	bne.n	80036c2 <_fwalk_reent+0xe>
 80036d2:	4638      	mov	r0, r7
 80036d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036d8:	89ab      	ldrh	r3, [r5, #12]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d907      	bls.n	80036ee <_fwalk_reent+0x3a>
 80036de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036e2:	3301      	adds	r3, #1
 80036e4:	d003      	beq.n	80036ee <_fwalk_reent+0x3a>
 80036e6:	4629      	mov	r1, r5
 80036e8:	4630      	mov	r0, r6
 80036ea:	47c0      	blx	r8
 80036ec:	4307      	orrs	r7, r0
 80036ee:	3568      	adds	r5, #104	; 0x68
 80036f0:	e7e9      	b.n	80036c6 <_fwalk_reent+0x12>

080036f2 <__retarget_lock_init_recursive>:
 80036f2:	4770      	bx	lr

080036f4 <__retarget_lock_acquire_recursive>:
 80036f4:	4770      	bx	lr

080036f6 <__retarget_lock_release_recursive>:
 80036f6:	4770      	bx	lr

080036f8 <sbrk_aligned>:
 80036f8:	b570      	push	{r4, r5, r6, lr}
 80036fa:	4e0e      	ldr	r6, [pc, #56]	; (8003734 <sbrk_aligned+0x3c>)
 80036fc:	460c      	mov	r4, r1
 80036fe:	6831      	ldr	r1, [r6, #0]
 8003700:	4605      	mov	r5, r0
 8003702:	b911      	cbnz	r1, 800370a <sbrk_aligned+0x12>
 8003704:	f000 fb7a 	bl	8003dfc <_sbrk_r>
 8003708:	6030      	str	r0, [r6, #0]
 800370a:	4621      	mov	r1, r4
 800370c:	4628      	mov	r0, r5
 800370e:	f000 fb75 	bl	8003dfc <_sbrk_r>
 8003712:	1c43      	adds	r3, r0, #1
 8003714:	d00a      	beq.n	800372c <sbrk_aligned+0x34>
 8003716:	1cc4      	adds	r4, r0, #3
 8003718:	f024 0403 	bic.w	r4, r4, #3
 800371c:	42a0      	cmp	r0, r4
 800371e:	d007      	beq.n	8003730 <sbrk_aligned+0x38>
 8003720:	1a21      	subs	r1, r4, r0
 8003722:	4628      	mov	r0, r5
 8003724:	f000 fb6a 	bl	8003dfc <_sbrk_r>
 8003728:	3001      	adds	r0, #1
 800372a:	d101      	bne.n	8003730 <sbrk_aligned+0x38>
 800372c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003730:	4620      	mov	r0, r4
 8003732:	bd70      	pop	{r4, r5, r6, pc}
 8003734:	200001bc 	.word	0x200001bc

08003738 <_malloc_r>:
 8003738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800373c:	1ccd      	adds	r5, r1, #3
 800373e:	f025 0503 	bic.w	r5, r5, #3
 8003742:	3508      	adds	r5, #8
 8003744:	2d0c      	cmp	r5, #12
 8003746:	bf38      	it	cc
 8003748:	250c      	movcc	r5, #12
 800374a:	2d00      	cmp	r5, #0
 800374c:	4607      	mov	r7, r0
 800374e:	db01      	blt.n	8003754 <_malloc_r+0x1c>
 8003750:	42a9      	cmp	r1, r5
 8003752:	d905      	bls.n	8003760 <_malloc_r+0x28>
 8003754:	230c      	movs	r3, #12
 8003756:	603b      	str	r3, [r7, #0]
 8003758:	2600      	movs	r6, #0
 800375a:	4630      	mov	r0, r6
 800375c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003760:	4e2e      	ldr	r6, [pc, #184]	; (800381c <_malloc_r+0xe4>)
 8003762:	f000 fdbb 	bl	80042dc <__malloc_lock>
 8003766:	6833      	ldr	r3, [r6, #0]
 8003768:	461c      	mov	r4, r3
 800376a:	bb34      	cbnz	r4, 80037ba <_malloc_r+0x82>
 800376c:	4629      	mov	r1, r5
 800376e:	4638      	mov	r0, r7
 8003770:	f7ff ffc2 	bl	80036f8 <sbrk_aligned>
 8003774:	1c43      	adds	r3, r0, #1
 8003776:	4604      	mov	r4, r0
 8003778:	d14d      	bne.n	8003816 <_malloc_r+0xde>
 800377a:	6834      	ldr	r4, [r6, #0]
 800377c:	4626      	mov	r6, r4
 800377e:	2e00      	cmp	r6, #0
 8003780:	d140      	bne.n	8003804 <_malloc_r+0xcc>
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	4631      	mov	r1, r6
 8003786:	4638      	mov	r0, r7
 8003788:	eb04 0803 	add.w	r8, r4, r3
 800378c:	f000 fb36 	bl	8003dfc <_sbrk_r>
 8003790:	4580      	cmp	r8, r0
 8003792:	d13a      	bne.n	800380a <_malloc_r+0xd2>
 8003794:	6821      	ldr	r1, [r4, #0]
 8003796:	3503      	adds	r5, #3
 8003798:	1a6d      	subs	r5, r5, r1
 800379a:	f025 0503 	bic.w	r5, r5, #3
 800379e:	3508      	adds	r5, #8
 80037a0:	2d0c      	cmp	r5, #12
 80037a2:	bf38      	it	cc
 80037a4:	250c      	movcc	r5, #12
 80037a6:	4629      	mov	r1, r5
 80037a8:	4638      	mov	r0, r7
 80037aa:	f7ff ffa5 	bl	80036f8 <sbrk_aligned>
 80037ae:	3001      	adds	r0, #1
 80037b0:	d02b      	beq.n	800380a <_malloc_r+0xd2>
 80037b2:	6823      	ldr	r3, [r4, #0]
 80037b4:	442b      	add	r3, r5
 80037b6:	6023      	str	r3, [r4, #0]
 80037b8:	e00e      	b.n	80037d8 <_malloc_r+0xa0>
 80037ba:	6822      	ldr	r2, [r4, #0]
 80037bc:	1b52      	subs	r2, r2, r5
 80037be:	d41e      	bmi.n	80037fe <_malloc_r+0xc6>
 80037c0:	2a0b      	cmp	r2, #11
 80037c2:	d916      	bls.n	80037f2 <_malloc_r+0xba>
 80037c4:	1961      	adds	r1, r4, r5
 80037c6:	42a3      	cmp	r3, r4
 80037c8:	6025      	str	r5, [r4, #0]
 80037ca:	bf18      	it	ne
 80037cc:	6059      	strne	r1, [r3, #4]
 80037ce:	6863      	ldr	r3, [r4, #4]
 80037d0:	bf08      	it	eq
 80037d2:	6031      	streq	r1, [r6, #0]
 80037d4:	5162      	str	r2, [r4, r5]
 80037d6:	604b      	str	r3, [r1, #4]
 80037d8:	4638      	mov	r0, r7
 80037da:	f104 060b 	add.w	r6, r4, #11
 80037de:	f000 fd83 	bl	80042e8 <__malloc_unlock>
 80037e2:	f026 0607 	bic.w	r6, r6, #7
 80037e6:	1d23      	adds	r3, r4, #4
 80037e8:	1af2      	subs	r2, r6, r3
 80037ea:	d0b6      	beq.n	800375a <_malloc_r+0x22>
 80037ec:	1b9b      	subs	r3, r3, r6
 80037ee:	50a3      	str	r3, [r4, r2]
 80037f0:	e7b3      	b.n	800375a <_malloc_r+0x22>
 80037f2:	6862      	ldr	r2, [r4, #4]
 80037f4:	42a3      	cmp	r3, r4
 80037f6:	bf0c      	ite	eq
 80037f8:	6032      	streq	r2, [r6, #0]
 80037fa:	605a      	strne	r2, [r3, #4]
 80037fc:	e7ec      	b.n	80037d8 <_malloc_r+0xa0>
 80037fe:	4623      	mov	r3, r4
 8003800:	6864      	ldr	r4, [r4, #4]
 8003802:	e7b2      	b.n	800376a <_malloc_r+0x32>
 8003804:	4634      	mov	r4, r6
 8003806:	6876      	ldr	r6, [r6, #4]
 8003808:	e7b9      	b.n	800377e <_malloc_r+0x46>
 800380a:	230c      	movs	r3, #12
 800380c:	603b      	str	r3, [r7, #0]
 800380e:	4638      	mov	r0, r7
 8003810:	f000 fd6a 	bl	80042e8 <__malloc_unlock>
 8003814:	e7a1      	b.n	800375a <_malloc_r+0x22>
 8003816:	6025      	str	r5, [r4, #0]
 8003818:	e7de      	b.n	80037d8 <_malloc_r+0xa0>
 800381a:	bf00      	nop
 800381c:	200001b8 	.word	0x200001b8

08003820 <__sfputc_r>:
 8003820:	6893      	ldr	r3, [r2, #8]
 8003822:	3b01      	subs	r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	b410      	push	{r4}
 8003828:	6093      	str	r3, [r2, #8]
 800382a:	da08      	bge.n	800383e <__sfputc_r+0x1e>
 800382c:	6994      	ldr	r4, [r2, #24]
 800382e:	42a3      	cmp	r3, r4
 8003830:	db01      	blt.n	8003836 <__sfputc_r+0x16>
 8003832:	290a      	cmp	r1, #10
 8003834:	d103      	bne.n	800383e <__sfputc_r+0x1e>
 8003836:	f85d 4b04 	ldr.w	r4, [sp], #4
 800383a:	f000 bb33 	b.w	8003ea4 <__swbuf_r>
 800383e:	6813      	ldr	r3, [r2, #0]
 8003840:	1c58      	adds	r0, r3, #1
 8003842:	6010      	str	r0, [r2, #0]
 8003844:	7019      	strb	r1, [r3, #0]
 8003846:	4608      	mov	r0, r1
 8003848:	f85d 4b04 	ldr.w	r4, [sp], #4
 800384c:	4770      	bx	lr

0800384e <__sfputs_r>:
 800384e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003850:	4606      	mov	r6, r0
 8003852:	460f      	mov	r7, r1
 8003854:	4614      	mov	r4, r2
 8003856:	18d5      	adds	r5, r2, r3
 8003858:	42ac      	cmp	r4, r5
 800385a:	d101      	bne.n	8003860 <__sfputs_r+0x12>
 800385c:	2000      	movs	r0, #0
 800385e:	e007      	b.n	8003870 <__sfputs_r+0x22>
 8003860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003864:	463a      	mov	r2, r7
 8003866:	4630      	mov	r0, r6
 8003868:	f7ff ffda 	bl	8003820 <__sfputc_r>
 800386c:	1c43      	adds	r3, r0, #1
 800386e:	d1f3      	bne.n	8003858 <__sfputs_r+0xa>
 8003870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003874 <_vfiprintf_r>:
 8003874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003878:	460d      	mov	r5, r1
 800387a:	b09d      	sub	sp, #116	; 0x74
 800387c:	4614      	mov	r4, r2
 800387e:	4698      	mov	r8, r3
 8003880:	4606      	mov	r6, r0
 8003882:	b118      	cbz	r0, 800388c <_vfiprintf_r+0x18>
 8003884:	6983      	ldr	r3, [r0, #24]
 8003886:	b90b      	cbnz	r3, 800388c <_vfiprintf_r+0x18>
 8003888:	f7ff fe96 	bl	80035b8 <__sinit>
 800388c:	4b89      	ldr	r3, [pc, #548]	; (8003ab4 <_vfiprintf_r+0x240>)
 800388e:	429d      	cmp	r5, r3
 8003890:	d11b      	bne.n	80038ca <_vfiprintf_r+0x56>
 8003892:	6875      	ldr	r5, [r6, #4]
 8003894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003896:	07d9      	lsls	r1, r3, #31
 8003898:	d405      	bmi.n	80038a6 <_vfiprintf_r+0x32>
 800389a:	89ab      	ldrh	r3, [r5, #12]
 800389c:	059a      	lsls	r2, r3, #22
 800389e:	d402      	bmi.n	80038a6 <_vfiprintf_r+0x32>
 80038a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038a2:	f7ff ff27 	bl	80036f4 <__retarget_lock_acquire_recursive>
 80038a6:	89ab      	ldrh	r3, [r5, #12]
 80038a8:	071b      	lsls	r3, r3, #28
 80038aa:	d501      	bpl.n	80038b0 <_vfiprintf_r+0x3c>
 80038ac:	692b      	ldr	r3, [r5, #16]
 80038ae:	b9eb      	cbnz	r3, 80038ec <_vfiprintf_r+0x78>
 80038b0:	4629      	mov	r1, r5
 80038b2:	4630      	mov	r0, r6
 80038b4:	f000 fb5a 	bl	8003f6c <__swsetup_r>
 80038b8:	b1c0      	cbz	r0, 80038ec <_vfiprintf_r+0x78>
 80038ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038bc:	07dc      	lsls	r4, r3, #31
 80038be:	d50e      	bpl.n	80038de <_vfiprintf_r+0x6a>
 80038c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038c4:	b01d      	add	sp, #116	; 0x74
 80038c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038ca:	4b7b      	ldr	r3, [pc, #492]	; (8003ab8 <_vfiprintf_r+0x244>)
 80038cc:	429d      	cmp	r5, r3
 80038ce:	d101      	bne.n	80038d4 <_vfiprintf_r+0x60>
 80038d0:	68b5      	ldr	r5, [r6, #8]
 80038d2:	e7df      	b.n	8003894 <_vfiprintf_r+0x20>
 80038d4:	4b79      	ldr	r3, [pc, #484]	; (8003abc <_vfiprintf_r+0x248>)
 80038d6:	429d      	cmp	r5, r3
 80038d8:	bf08      	it	eq
 80038da:	68f5      	ldreq	r5, [r6, #12]
 80038dc:	e7da      	b.n	8003894 <_vfiprintf_r+0x20>
 80038de:	89ab      	ldrh	r3, [r5, #12]
 80038e0:	0598      	lsls	r0, r3, #22
 80038e2:	d4ed      	bmi.n	80038c0 <_vfiprintf_r+0x4c>
 80038e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038e6:	f7ff ff06 	bl	80036f6 <__retarget_lock_release_recursive>
 80038ea:	e7e9      	b.n	80038c0 <_vfiprintf_r+0x4c>
 80038ec:	2300      	movs	r3, #0
 80038ee:	9309      	str	r3, [sp, #36]	; 0x24
 80038f0:	2320      	movs	r3, #32
 80038f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80038fa:	2330      	movs	r3, #48	; 0x30
 80038fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003ac0 <_vfiprintf_r+0x24c>
 8003900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003904:	f04f 0901 	mov.w	r9, #1
 8003908:	4623      	mov	r3, r4
 800390a:	469a      	mov	sl, r3
 800390c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003910:	b10a      	cbz	r2, 8003916 <_vfiprintf_r+0xa2>
 8003912:	2a25      	cmp	r2, #37	; 0x25
 8003914:	d1f9      	bne.n	800390a <_vfiprintf_r+0x96>
 8003916:	ebba 0b04 	subs.w	fp, sl, r4
 800391a:	d00b      	beq.n	8003934 <_vfiprintf_r+0xc0>
 800391c:	465b      	mov	r3, fp
 800391e:	4622      	mov	r2, r4
 8003920:	4629      	mov	r1, r5
 8003922:	4630      	mov	r0, r6
 8003924:	f7ff ff93 	bl	800384e <__sfputs_r>
 8003928:	3001      	adds	r0, #1
 800392a:	f000 80aa 	beq.w	8003a82 <_vfiprintf_r+0x20e>
 800392e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003930:	445a      	add	r2, fp
 8003932:	9209      	str	r2, [sp, #36]	; 0x24
 8003934:	f89a 3000 	ldrb.w	r3, [sl]
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 80a2 	beq.w	8003a82 <_vfiprintf_r+0x20e>
 800393e:	2300      	movs	r3, #0
 8003940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003948:	f10a 0a01 	add.w	sl, sl, #1
 800394c:	9304      	str	r3, [sp, #16]
 800394e:	9307      	str	r3, [sp, #28]
 8003950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003954:	931a      	str	r3, [sp, #104]	; 0x68
 8003956:	4654      	mov	r4, sl
 8003958:	2205      	movs	r2, #5
 800395a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800395e:	4858      	ldr	r0, [pc, #352]	; (8003ac0 <_vfiprintf_r+0x24c>)
 8003960:	f7fc fc36 	bl	80001d0 <memchr>
 8003964:	9a04      	ldr	r2, [sp, #16]
 8003966:	b9d8      	cbnz	r0, 80039a0 <_vfiprintf_r+0x12c>
 8003968:	06d1      	lsls	r1, r2, #27
 800396a:	bf44      	itt	mi
 800396c:	2320      	movmi	r3, #32
 800396e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003972:	0713      	lsls	r3, r2, #28
 8003974:	bf44      	itt	mi
 8003976:	232b      	movmi	r3, #43	; 0x2b
 8003978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800397c:	f89a 3000 	ldrb.w	r3, [sl]
 8003980:	2b2a      	cmp	r3, #42	; 0x2a
 8003982:	d015      	beq.n	80039b0 <_vfiprintf_r+0x13c>
 8003984:	9a07      	ldr	r2, [sp, #28]
 8003986:	4654      	mov	r4, sl
 8003988:	2000      	movs	r0, #0
 800398a:	f04f 0c0a 	mov.w	ip, #10
 800398e:	4621      	mov	r1, r4
 8003990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003994:	3b30      	subs	r3, #48	; 0x30
 8003996:	2b09      	cmp	r3, #9
 8003998:	d94e      	bls.n	8003a38 <_vfiprintf_r+0x1c4>
 800399a:	b1b0      	cbz	r0, 80039ca <_vfiprintf_r+0x156>
 800399c:	9207      	str	r2, [sp, #28]
 800399e:	e014      	b.n	80039ca <_vfiprintf_r+0x156>
 80039a0:	eba0 0308 	sub.w	r3, r0, r8
 80039a4:	fa09 f303 	lsl.w	r3, r9, r3
 80039a8:	4313      	orrs	r3, r2
 80039aa:	9304      	str	r3, [sp, #16]
 80039ac:	46a2      	mov	sl, r4
 80039ae:	e7d2      	b.n	8003956 <_vfiprintf_r+0xe2>
 80039b0:	9b03      	ldr	r3, [sp, #12]
 80039b2:	1d19      	adds	r1, r3, #4
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	9103      	str	r1, [sp, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bfbb      	ittet	lt
 80039bc:	425b      	neglt	r3, r3
 80039be:	f042 0202 	orrlt.w	r2, r2, #2
 80039c2:	9307      	strge	r3, [sp, #28]
 80039c4:	9307      	strlt	r3, [sp, #28]
 80039c6:	bfb8      	it	lt
 80039c8:	9204      	strlt	r2, [sp, #16]
 80039ca:	7823      	ldrb	r3, [r4, #0]
 80039cc:	2b2e      	cmp	r3, #46	; 0x2e
 80039ce:	d10c      	bne.n	80039ea <_vfiprintf_r+0x176>
 80039d0:	7863      	ldrb	r3, [r4, #1]
 80039d2:	2b2a      	cmp	r3, #42	; 0x2a
 80039d4:	d135      	bne.n	8003a42 <_vfiprintf_r+0x1ce>
 80039d6:	9b03      	ldr	r3, [sp, #12]
 80039d8:	1d1a      	adds	r2, r3, #4
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	9203      	str	r2, [sp, #12]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	bfb8      	it	lt
 80039e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80039e6:	3402      	adds	r4, #2
 80039e8:	9305      	str	r3, [sp, #20]
 80039ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003ad0 <_vfiprintf_r+0x25c>
 80039ee:	7821      	ldrb	r1, [r4, #0]
 80039f0:	2203      	movs	r2, #3
 80039f2:	4650      	mov	r0, sl
 80039f4:	f7fc fbec 	bl	80001d0 <memchr>
 80039f8:	b140      	cbz	r0, 8003a0c <_vfiprintf_r+0x198>
 80039fa:	2340      	movs	r3, #64	; 0x40
 80039fc:	eba0 000a 	sub.w	r0, r0, sl
 8003a00:	fa03 f000 	lsl.w	r0, r3, r0
 8003a04:	9b04      	ldr	r3, [sp, #16]
 8003a06:	4303      	orrs	r3, r0
 8003a08:	3401      	adds	r4, #1
 8003a0a:	9304      	str	r3, [sp, #16]
 8003a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a10:	482c      	ldr	r0, [pc, #176]	; (8003ac4 <_vfiprintf_r+0x250>)
 8003a12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a16:	2206      	movs	r2, #6
 8003a18:	f7fc fbda 	bl	80001d0 <memchr>
 8003a1c:	2800      	cmp	r0, #0
 8003a1e:	d03f      	beq.n	8003aa0 <_vfiprintf_r+0x22c>
 8003a20:	4b29      	ldr	r3, [pc, #164]	; (8003ac8 <_vfiprintf_r+0x254>)
 8003a22:	bb1b      	cbnz	r3, 8003a6c <_vfiprintf_r+0x1f8>
 8003a24:	9b03      	ldr	r3, [sp, #12]
 8003a26:	3307      	adds	r3, #7
 8003a28:	f023 0307 	bic.w	r3, r3, #7
 8003a2c:	3308      	adds	r3, #8
 8003a2e:	9303      	str	r3, [sp, #12]
 8003a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a32:	443b      	add	r3, r7
 8003a34:	9309      	str	r3, [sp, #36]	; 0x24
 8003a36:	e767      	b.n	8003908 <_vfiprintf_r+0x94>
 8003a38:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a3c:	460c      	mov	r4, r1
 8003a3e:	2001      	movs	r0, #1
 8003a40:	e7a5      	b.n	800398e <_vfiprintf_r+0x11a>
 8003a42:	2300      	movs	r3, #0
 8003a44:	3401      	adds	r4, #1
 8003a46:	9305      	str	r3, [sp, #20]
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f04f 0c0a 	mov.w	ip, #10
 8003a4e:	4620      	mov	r0, r4
 8003a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a54:	3a30      	subs	r2, #48	; 0x30
 8003a56:	2a09      	cmp	r2, #9
 8003a58:	d903      	bls.n	8003a62 <_vfiprintf_r+0x1ee>
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0c5      	beq.n	80039ea <_vfiprintf_r+0x176>
 8003a5e:	9105      	str	r1, [sp, #20]
 8003a60:	e7c3      	b.n	80039ea <_vfiprintf_r+0x176>
 8003a62:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a66:	4604      	mov	r4, r0
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e7f0      	b.n	8003a4e <_vfiprintf_r+0x1da>
 8003a6c:	ab03      	add	r3, sp, #12
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	462a      	mov	r2, r5
 8003a72:	4b16      	ldr	r3, [pc, #88]	; (8003acc <_vfiprintf_r+0x258>)
 8003a74:	a904      	add	r1, sp, #16
 8003a76:	4630      	mov	r0, r6
 8003a78:	f3af 8000 	nop.w
 8003a7c:	4607      	mov	r7, r0
 8003a7e:	1c78      	adds	r0, r7, #1
 8003a80:	d1d6      	bne.n	8003a30 <_vfiprintf_r+0x1bc>
 8003a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a84:	07d9      	lsls	r1, r3, #31
 8003a86:	d405      	bmi.n	8003a94 <_vfiprintf_r+0x220>
 8003a88:	89ab      	ldrh	r3, [r5, #12]
 8003a8a:	059a      	lsls	r2, r3, #22
 8003a8c:	d402      	bmi.n	8003a94 <_vfiprintf_r+0x220>
 8003a8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a90:	f7ff fe31 	bl	80036f6 <__retarget_lock_release_recursive>
 8003a94:	89ab      	ldrh	r3, [r5, #12]
 8003a96:	065b      	lsls	r3, r3, #25
 8003a98:	f53f af12 	bmi.w	80038c0 <_vfiprintf_r+0x4c>
 8003a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a9e:	e711      	b.n	80038c4 <_vfiprintf_r+0x50>
 8003aa0:	ab03      	add	r3, sp, #12
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	462a      	mov	r2, r5
 8003aa6:	4b09      	ldr	r3, [pc, #36]	; (8003acc <_vfiprintf_r+0x258>)
 8003aa8:	a904      	add	r1, sp, #16
 8003aaa:	4630      	mov	r0, r6
 8003aac:	f000 f880 	bl	8003bb0 <_printf_i>
 8003ab0:	e7e4      	b.n	8003a7c <_vfiprintf_r+0x208>
 8003ab2:	bf00      	nop
 8003ab4:	08004494 	.word	0x08004494
 8003ab8:	080044b4 	.word	0x080044b4
 8003abc:	08004474 	.word	0x08004474
 8003ac0:	080044d4 	.word	0x080044d4
 8003ac4:	080044de 	.word	0x080044de
 8003ac8:	00000000 	.word	0x00000000
 8003acc:	0800384f 	.word	0x0800384f
 8003ad0:	080044da 	.word	0x080044da

08003ad4 <_printf_common>:
 8003ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ad8:	4616      	mov	r6, r2
 8003ada:	4699      	mov	r9, r3
 8003adc:	688a      	ldr	r2, [r1, #8]
 8003ade:	690b      	ldr	r3, [r1, #16]
 8003ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	bfb8      	it	lt
 8003ae8:	4613      	movlt	r3, r2
 8003aea:	6033      	str	r3, [r6, #0]
 8003aec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003af0:	4607      	mov	r7, r0
 8003af2:	460c      	mov	r4, r1
 8003af4:	b10a      	cbz	r2, 8003afa <_printf_common+0x26>
 8003af6:	3301      	adds	r3, #1
 8003af8:	6033      	str	r3, [r6, #0]
 8003afa:	6823      	ldr	r3, [r4, #0]
 8003afc:	0699      	lsls	r1, r3, #26
 8003afe:	bf42      	ittt	mi
 8003b00:	6833      	ldrmi	r3, [r6, #0]
 8003b02:	3302      	addmi	r3, #2
 8003b04:	6033      	strmi	r3, [r6, #0]
 8003b06:	6825      	ldr	r5, [r4, #0]
 8003b08:	f015 0506 	ands.w	r5, r5, #6
 8003b0c:	d106      	bne.n	8003b1c <_printf_common+0x48>
 8003b0e:	f104 0a19 	add.w	sl, r4, #25
 8003b12:	68e3      	ldr	r3, [r4, #12]
 8003b14:	6832      	ldr	r2, [r6, #0]
 8003b16:	1a9b      	subs	r3, r3, r2
 8003b18:	42ab      	cmp	r3, r5
 8003b1a:	dc26      	bgt.n	8003b6a <_printf_common+0x96>
 8003b1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b20:	1e13      	subs	r3, r2, #0
 8003b22:	6822      	ldr	r2, [r4, #0]
 8003b24:	bf18      	it	ne
 8003b26:	2301      	movne	r3, #1
 8003b28:	0692      	lsls	r2, r2, #26
 8003b2a:	d42b      	bmi.n	8003b84 <_printf_common+0xb0>
 8003b2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b30:	4649      	mov	r1, r9
 8003b32:	4638      	mov	r0, r7
 8003b34:	47c0      	blx	r8
 8003b36:	3001      	adds	r0, #1
 8003b38:	d01e      	beq.n	8003b78 <_printf_common+0xa4>
 8003b3a:	6823      	ldr	r3, [r4, #0]
 8003b3c:	68e5      	ldr	r5, [r4, #12]
 8003b3e:	6832      	ldr	r2, [r6, #0]
 8003b40:	f003 0306 	and.w	r3, r3, #6
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	bf08      	it	eq
 8003b48:	1aad      	subeq	r5, r5, r2
 8003b4a:	68a3      	ldr	r3, [r4, #8]
 8003b4c:	6922      	ldr	r2, [r4, #16]
 8003b4e:	bf0c      	ite	eq
 8003b50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b54:	2500      	movne	r5, #0
 8003b56:	4293      	cmp	r3, r2
 8003b58:	bfc4      	itt	gt
 8003b5a:	1a9b      	subgt	r3, r3, r2
 8003b5c:	18ed      	addgt	r5, r5, r3
 8003b5e:	2600      	movs	r6, #0
 8003b60:	341a      	adds	r4, #26
 8003b62:	42b5      	cmp	r5, r6
 8003b64:	d11a      	bne.n	8003b9c <_printf_common+0xc8>
 8003b66:	2000      	movs	r0, #0
 8003b68:	e008      	b.n	8003b7c <_printf_common+0xa8>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	4652      	mov	r2, sl
 8003b6e:	4649      	mov	r1, r9
 8003b70:	4638      	mov	r0, r7
 8003b72:	47c0      	blx	r8
 8003b74:	3001      	adds	r0, #1
 8003b76:	d103      	bne.n	8003b80 <_printf_common+0xac>
 8003b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b80:	3501      	adds	r5, #1
 8003b82:	e7c6      	b.n	8003b12 <_printf_common+0x3e>
 8003b84:	18e1      	adds	r1, r4, r3
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	2030      	movs	r0, #48	; 0x30
 8003b8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b8e:	4422      	add	r2, r4
 8003b90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b98:	3302      	adds	r3, #2
 8003b9a:	e7c7      	b.n	8003b2c <_printf_common+0x58>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	4622      	mov	r2, r4
 8003ba0:	4649      	mov	r1, r9
 8003ba2:	4638      	mov	r0, r7
 8003ba4:	47c0      	blx	r8
 8003ba6:	3001      	adds	r0, #1
 8003ba8:	d0e6      	beq.n	8003b78 <_printf_common+0xa4>
 8003baa:	3601      	adds	r6, #1
 8003bac:	e7d9      	b.n	8003b62 <_printf_common+0x8e>
	...

08003bb0 <_printf_i>:
 8003bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bb4:	7e0f      	ldrb	r7, [r1, #24]
 8003bb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bb8:	2f78      	cmp	r7, #120	; 0x78
 8003bba:	4691      	mov	r9, r2
 8003bbc:	4680      	mov	r8, r0
 8003bbe:	460c      	mov	r4, r1
 8003bc0:	469a      	mov	sl, r3
 8003bc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bc6:	d807      	bhi.n	8003bd8 <_printf_i+0x28>
 8003bc8:	2f62      	cmp	r7, #98	; 0x62
 8003bca:	d80a      	bhi.n	8003be2 <_printf_i+0x32>
 8003bcc:	2f00      	cmp	r7, #0
 8003bce:	f000 80d8 	beq.w	8003d82 <_printf_i+0x1d2>
 8003bd2:	2f58      	cmp	r7, #88	; 0x58
 8003bd4:	f000 80a3 	beq.w	8003d1e <_printf_i+0x16e>
 8003bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003be0:	e03a      	b.n	8003c58 <_printf_i+0xa8>
 8003be2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003be6:	2b15      	cmp	r3, #21
 8003be8:	d8f6      	bhi.n	8003bd8 <_printf_i+0x28>
 8003bea:	a101      	add	r1, pc, #4	; (adr r1, 8003bf0 <_printf_i+0x40>)
 8003bec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bf0:	08003c49 	.word	0x08003c49
 8003bf4:	08003c5d 	.word	0x08003c5d
 8003bf8:	08003bd9 	.word	0x08003bd9
 8003bfc:	08003bd9 	.word	0x08003bd9
 8003c00:	08003bd9 	.word	0x08003bd9
 8003c04:	08003bd9 	.word	0x08003bd9
 8003c08:	08003c5d 	.word	0x08003c5d
 8003c0c:	08003bd9 	.word	0x08003bd9
 8003c10:	08003bd9 	.word	0x08003bd9
 8003c14:	08003bd9 	.word	0x08003bd9
 8003c18:	08003bd9 	.word	0x08003bd9
 8003c1c:	08003d69 	.word	0x08003d69
 8003c20:	08003c8d 	.word	0x08003c8d
 8003c24:	08003d4b 	.word	0x08003d4b
 8003c28:	08003bd9 	.word	0x08003bd9
 8003c2c:	08003bd9 	.word	0x08003bd9
 8003c30:	08003d8b 	.word	0x08003d8b
 8003c34:	08003bd9 	.word	0x08003bd9
 8003c38:	08003c8d 	.word	0x08003c8d
 8003c3c:	08003bd9 	.word	0x08003bd9
 8003c40:	08003bd9 	.word	0x08003bd9
 8003c44:	08003d53 	.word	0x08003d53
 8003c48:	682b      	ldr	r3, [r5, #0]
 8003c4a:	1d1a      	adds	r2, r3, #4
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	602a      	str	r2, [r5, #0]
 8003c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e0a3      	b.n	8003da4 <_printf_i+0x1f4>
 8003c5c:	6820      	ldr	r0, [r4, #0]
 8003c5e:	6829      	ldr	r1, [r5, #0]
 8003c60:	0606      	lsls	r6, r0, #24
 8003c62:	f101 0304 	add.w	r3, r1, #4
 8003c66:	d50a      	bpl.n	8003c7e <_printf_i+0xce>
 8003c68:	680e      	ldr	r6, [r1, #0]
 8003c6a:	602b      	str	r3, [r5, #0]
 8003c6c:	2e00      	cmp	r6, #0
 8003c6e:	da03      	bge.n	8003c78 <_printf_i+0xc8>
 8003c70:	232d      	movs	r3, #45	; 0x2d
 8003c72:	4276      	negs	r6, r6
 8003c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c78:	485e      	ldr	r0, [pc, #376]	; (8003df4 <_printf_i+0x244>)
 8003c7a:	230a      	movs	r3, #10
 8003c7c:	e019      	b.n	8003cb2 <_printf_i+0x102>
 8003c7e:	680e      	ldr	r6, [r1, #0]
 8003c80:	602b      	str	r3, [r5, #0]
 8003c82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c86:	bf18      	it	ne
 8003c88:	b236      	sxthne	r6, r6
 8003c8a:	e7ef      	b.n	8003c6c <_printf_i+0xbc>
 8003c8c:	682b      	ldr	r3, [r5, #0]
 8003c8e:	6820      	ldr	r0, [r4, #0]
 8003c90:	1d19      	adds	r1, r3, #4
 8003c92:	6029      	str	r1, [r5, #0]
 8003c94:	0601      	lsls	r1, r0, #24
 8003c96:	d501      	bpl.n	8003c9c <_printf_i+0xec>
 8003c98:	681e      	ldr	r6, [r3, #0]
 8003c9a:	e002      	b.n	8003ca2 <_printf_i+0xf2>
 8003c9c:	0646      	lsls	r6, r0, #25
 8003c9e:	d5fb      	bpl.n	8003c98 <_printf_i+0xe8>
 8003ca0:	881e      	ldrh	r6, [r3, #0]
 8003ca2:	4854      	ldr	r0, [pc, #336]	; (8003df4 <_printf_i+0x244>)
 8003ca4:	2f6f      	cmp	r7, #111	; 0x6f
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2308      	moveq	r3, #8
 8003caa:	230a      	movne	r3, #10
 8003cac:	2100      	movs	r1, #0
 8003cae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cb2:	6865      	ldr	r5, [r4, #4]
 8003cb4:	60a5      	str	r5, [r4, #8]
 8003cb6:	2d00      	cmp	r5, #0
 8003cb8:	bfa2      	ittt	ge
 8003cba:	6821      	ldrge	r1, [r4, #0]
 8003cbc:	f021 0104 	bicge.w	r1, r1, #4
 8003cc0:	6021      	strge	r1, [r4, #0]
 8003cc2:	b90e      	cbnz	r6, 8003cc8 <_printf_i+0x118>
 8003cc4:	2d00      	cmp	r5, #0
 8003cc6:	d04d      	beq.n	8003d64 <_printf_i+0x1b4>
 8003cc8:	4615      	mov	r5, r2
 8003cca:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cce:	fb03 6711 	mls	r7, r3, r1, r6
 8003cd2:	5dc7      	ldrb	r7, [r0, r7]
 8003cd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003cd8:	4637      	mov	r7, r6
 8003cda:	42bb      	cmp	r3, r7
 8003cdc:	460e      	mov	r6, r1
 8003cde:	d9f4      	bls.n	8003cca <_printf_i+0x11a>
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d10b      	bne.n	8003cfc <_printf_i+0x14c>
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	07de      	lsls	r6, r3, #31
 8003ce8:	d508      	bpl.n	8003cfc <_printf_i+0x14c>
 8003cea:	6923      	ldr	r3, [r4, #16]
 8003cec:	6861      	ldr	r1, [r4, #4]
 8003cee:	4299      	cmp	r1, r3
 8003cf0:	bfde      	ittt	le
 8003cf2:	2330      	movle	r3, #48	; 0x30
 8003cf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cf8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003cfc:	1b52      	subs	r2, r2, r5
 8003cfe:	6122      	str	r2, [r4, #16]
 8003d00:	f8cd a000 	str.w	sl, [sp]
 8003d04:	464b      	mov	r3, r9
 8003d06:	aa03      	add	r2, sp, #12
 8003d08:	4621      	mov	r1, r4
 8003d0a:	4640      	mov	r0, r8
 8003d0c:	f7ff fee2 	bl	8003ad4 <_printf_common>
 8003d10:	3001      	adds	r0, #1
 8003d12:	d14c      	bne.n	8003dae <_printf_i+0x1fe>
 8003d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d18:	b004      	add	sp, #16
 8003d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d1e:	4835      	ldr	r0, [pc, #212]	; (8003df4 <_printf_i+0x244>)
 8003d20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d24:	6829      	ldr	r1, [r5, #0]
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d2c:	6029      	str	r1, [r5, #0]
 8003d2e:	061d      	lsls	r5, r3, #24
 8003d30:	d514      	bpl.n	8003d5c <_printf_i+0x1ac>
 8003d32:	07df      	lsls	r7, r3, #31
 8003d34:	bf44      	itt	mi
 8003d36:	f043 0320 	orrmi.w	r3, r3, #32
 8003d3a:	6023      	strmi	r3, [r4, #0]
 8003d3c:	b91e      	cbnz	r6, 8003d46 <_printf_i+0x196>
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	f023 0320 	bic.w	r3, r3, #32
 8003d44:	6023      	str	r3, [r4, #0]
 8003d46:	2310      	movs	r3, #16
 8003d48:	e7b0      	b.n	8003cac <_printf_i+0xfc>
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	f043 0320 	orr.w	r3, r3, #32
 8003d50:	6023      	str	r3, [r4, #0]
 8003d52:	2378      	movs	r3, #120	; 0x78
 8003d54:	4828      	ldr	r0, [pc, #160]	; (8003df8 <_printf_i+0x248>)
 8003d56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d5a:	e7e3      	b.n	8003d24 <_printf_i+0x174>
 8003d5c:	0659      	lsls	r1, r3, #25
 8003d5e:	bf48      	it	mi
 8003d60:	b2b6      	uxthmi	r6, r6
 8003d62:	e7e6      	b.n	8003d32 <_printf_i+0x182>
 8003d64:	4615      	mov	r5, r2
 8003d66:	e7bb      	b.n	8003ce0 <_printf_i+0x130>
 8003d68:	682b      	ldr	r3, [r5, #0]
 8003d6a:	6826      	ldr	r6, [r4, #0]
 8003d6c:	6961      	ldr	r1, [r4, #20]
 8003d6e:	1d18      	adds	r0, r3, #4
 8003d70:	6028      	str	r0, [r5, #0]
 8003d72:	0635      	lsls	r5, r6, #24
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	d501      	bpl.n	8003d7c <_printf_i+0x1cc>
 8003d78:	6019      	str	r1, [r3, #0]
 8003d7a:	e002      	b.n	8003d82 <_printf_i+0x1d2>
 8003d7c:	0670      	lsls	r0, r6, #25
 8003d7e:	d5fb      	bpl.n	8003d78 <_printf_i+0x1c8>
 8003d80:	8019      	strh	r1, [r3, #0]
 8003d82:	2300      	movs	r3, #0
 8003d84:	6123      	str	r3, [r4, #16]
 8003d86:	4615      	mov	r5, r2
 8003d88:	e7ba      	b.n	8003d00 <_printf_i+0x150>
 8003d8a:	682b      	ldr	r3, [r5, #0]
 8003d8c:	1d1a      	adds	r2, r3, #4
 8003d8e:	602a      	str	r2, [r5, #0]
 8003d90:	681d      	ldr	r5, [r3, #0]
 8003d92:	6862      	ldr	r2, [r4, #4]
 8003d94:	2100      	movs	r1, #0
 8003d96:	4628      	mov	r0, r5
 8003d98:	f7fc fa1a 	bl	80001d0 <memchr>
 8003d9c:	b108      	cbz	r0, 8003da2 <_printf_i+0x1f2>
 8003d9e:	1b40      	subs	r0, r0, r5
 8003da0:	6060      	str	r0, [r4, #4]
 8003da2:	6863      	ldr	r3, [r4, #4]
 8003da4:	6123      	str	r3, [r4, #16]
 8003da6:	2300      	movs	r3, #0
 8003da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dac:	e7a8      	b.n	8003d00 <_printf_i+0x150>
 8003dae:	6923      	ldr	r3, [r4, #16]
 8003db0:	462a      	mov	r2, r5
 8003db2:	4649      	mov	r1, r9
 8003db4:	4640      	mov	r0, r8
 8003db6:	47d0      	blx	sl
 8003db8:	3001      	adds	r0, #1
 8003dba:	d0ab      	beq.n	8003d14 <_printf_i+0x164>
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	079b      	lsls	r3, r3, #30
 8003dc0:	d413      	bmi.n	8003dea <_printf_i+0x23a>
 8003dc2:	68e0      	ldr	r0, [r4, #12]
 8003dc4:	9b03      	ldr	r3, [sp, #12]
 8003dc6:	4298      	cmp	r0, r3
 8003dc8:	bfb8      	it	lt
 8003dca:	4618      	movlt	r0, r3
 8003dcc:	e7a4      	b.n	8003d18 <_printf_i+0x168>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	4632      	mov	r2, r6
 8003dd2:	4649      	mov	r1, r9
 8003dd4:	4640      	mov	r0, r8
 8003dd6:	47d0      	blx	sl
 8003dd8:	3001      	adds	r0, #1
 8003dda:	d09b      	beq.n	8003d14 <_printf_i+0x164>
 8003ddc:	3501      	adds	r5, #1
 8003dde:	68e3      	ldr	r3, [r4, #12]
 8003de0:	9903      	ldr	r1, [sp, #12]
 8003de2:	1a5b      	subs	r3, r3, r1
 8003de4:	42ab      	cmp	r3, r5
 8003de6:	dcf2      	bgt.n	8003dce <_printf_i+0x21e>
 8003de8:	e7eb      	b.n	8003dc2 <_printf_i+0x212>
 8003dea:	2500      	movs	r5, #0
 8003dec:	f104 0619 	add.w	r6, r4, #25
 8003df0:	e7f5      	b.n	8003dde <_printf_i+0x22e>
 8003df2:	bf00      	nop
 8003df4:	080044e5 	.word	0x080044e5
 8003df8:	080044f6 	.word	0x080044f6

08003dfc <_sbrk_r>:
 8003dfc:	b538      	push	{r3, r4, r5, lr}
 8003dfe:	4d06      	ldr	r5, [pc, #24]	; (8003e18 <_sbrk_r+0x1c>)
 8003e00:	2300      	movs	r3, #0
 8003e02:	4604      	mov	r4, r0
 8003e04:	4608      	mov	r0, r1
 8003e06:	602b      	str	r3, [r5, #0]
 8003e08:	f7fc fd02 	bl	8000810 <_sbrk>
 8003e0c:	1c43      	adds	r3, r0, #1
 8003e0e:	d102      	bne.n	8003e16 <_sbrk_r+0x1a>
 8003e10:	682b      	ldr	r3, [r5, #0]
 8003e12:	b103      	cbz	r3, 8003e16 <_sbrk_r+0x1a>
 8003e14:	6023      	str	r3, [r4, #0]
 8003e16:	bd38      	pop	{r3, r4, r5, pc}
 8003e18:	200001c0 	.word	0x200001c0

08003e1c <__sread>:
 8003e1c:	b510      	push	{r4, lr}
 8003e1e:	460c      	mov	r4, r1
 8003e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e24:	f000 fab2 	bl	800438c <_read_r>
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	bfab      	itete	ge
 8003e2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e2e:	89a3      	ldrhlt	r3, [r4, #12]
 8003e30:	181b      	addge	r3, r3, r0
 8003e32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e36:	bfac      	ite	ge
 8003e38:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e3a:	81a3      	strhlt	r3, [r4, #12]
 8003e3c:	bd10      	pop	{r4, pc}

08003e3e <__swrite>:
 8003e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e42:	461f      	mov	r7, r3
 8003e44:	898b      	ldrh	r3, [r1, #12]
 8003e46:	05db      	lsls	r3, r3, #23
 8003e48:	4605      	mov	r5, r0
 8003e4a:	460c      	mov	r4, r1
 8003e4c:	4616      	mov	r6, r2
 8003e4e:	d505      	bpl.n	8003e5c <__swrite+0x1e>
 8003e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e54:	2302      	movs	r3, #2
 8003e56:	2200      	movs	r2, #0
 8003e58:	f000 f9c8 	bl	80041ec <_lseek_r>
 8003e5c:	89a3      	ldrh	r3, [r4, #12]
 8003e5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e66:	81a3      	strh	r3, [r4, #12]
 8003e68:	4632      	mov	r2, r6
 8003e6a:	463b      	mov	r3, r7
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e72:	f000 b869 	b.w	8003f48 <_write_r>

08003e76 <__sseek>:
 8003e76:	b510      	push	{r4, lr}
 8003e78:	460c      	mov	r4, r1
 8003e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e7e:	f000 f9b5 	bl	80041ec <_lseek_r>
 8003e82:	1c43      	adds	r3, r0, #1
 8003e84:	89a3      	ldrh	r3, [r4, #12]
 8003e86:	bf15      	itete	ne
 8003e88:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e92:	81a3      	strheq	r3, [r4, #12]
 8003e94:	bf18      	it	ne
 8003e96:	81a3      	strhne	r3, [r4, #12]
 8003e98:	bd10      	pop	{r4, pc}

08003e9a <__sclose>:
 8003e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e9e:	f000 b8d3 	b.w	8004048 <_close_r>
	...

08003ea4 <__swbuf_r>:
 8003ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea6:	460e      	mov	r6, r1
 8003ea8:	4614      	mov	r4, r2
 8003eaa:	4605      	mov	r5, r0
 8003eac:	b118      	cbz	r0, 8003eb6 <__swbuf_r+0x12>
 8003eae:	6983      	ldr	r3, [r0, #24]
 8003eb0:	b90b      	cbnz	r3, 8003eb6 <__swbuf_r+0x12>
 8003eb2:	f7ff fb81 	bl	80035b8 <__sinit>
 8003eb6:	4b21      	ldr	r3, [pc, #132]	; (8003f3c <__swbuf_r+0x98>)
 8003eb8:	429c      	cmp	r4, r3
 8003eba:	d12b      	bne.n	8003f14 <__swbuf_r+0x70>
 8003ebc:	686c      	ldr	r4, [r5, #4]
 8003ebe:	69a3      	ldr	r3, [r4, #24]
 8003ec0:	60a3      	str	r3, [r4, #8]
 8003ec2:	89a3      	ldrh	r3, [r4, #12]
 8003ec4:	071a      	lsls	r2, r3, #28
 8003ec6:	d52f      	bpl.n	8003f28 <__swbuf_r+0x84>
 8003ec8:	6923      	ldr	r3, [r4, #16]
 8003eca:	b36b      	cbz	r3, 8003f28 <__swbuf_r+0x84>
 8003ecc:	6923      	ldr	r3, [r4, #16]
 8003ece:	6820      	ldr	r0, [r4, #0]
 8003ed0:	1ac0      	subs	r0, r0, r3
 8003ed2:	6963      	ldr	r3, [r4, #20]
 8003ed4:	b2f6      	uxtb	r6, r6
 8003ed6:	4283      	cmp	r3, r0
 8003ed8:	4637      	mov	r7, r6
 8003eda:	dc04      	bgt.n	8003ee6 <__swbuf_r+0x42>
 8003edc:	4621      	mov	r1, r4
 8003ede:	4628      	mov	r0, r5
 8003ee0:	f000 f948 	bl	8004174 <_fflush_r>
 8003ee4:	bb30      	cbnz	r0, 8003f34 <__swbuf_r+0x90>
 8003ee6:	68a3      	ldr	r3, [r4, #8]
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	60a3      	str	r3, [r4, #8]
 8003eec:	6823      	ldr	r3, [r4, #0]
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	6022      	str	r2, [r4, #0]
 8003ef2:	701e      	strb	r6, [r3, #0]
 8003ef4:	6963      	ldr	r3, [r4, #20]
 8003ef6:	3001      	adds	r0, #1
 8003ef8:	4283      	cmp	r3, r0
 8003efa:	d004      	beq.n	8003f06 <__swbuf_r+0x62>
 8003efc:	89a3      	ldrh	r3, [r4, #12]
 8003efe:	07db      	lsls	r3, r3, #31
 8003f00:	d506      	bpl.n	8003f10 <__swbuf_r+0x6c>
 8003f02:	2e0a      	cmp	r6, #10
 8003f04:	d104      	bne.n	8003f10 <__swbuf_r+0x6c>
 8003f06:	4621      	mov	r1, r4
 8003f08:	4628      	mov	r0, r5
 8003f0a:	f000 f933 	bl	8004174 <_fflush_r>
 8003f0e:	b988      	cbnz	r0, 8003f34 <__swbuf_r+0x90>
 8003f10:	4638      	mov	r0, r7
 8003f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f14:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <__swbuf_r+0x9c>)
 8003f16:	429c      	cmp	r4, r3
 8003f18:	d101      	bne.n	8003f1e <__swbuf_r+0x7a>
 8003f1a:	68ac      	ldr	r4, [r5, #8]
 8003f1c:	e7cf      	b.n	8003ebe <__swbuf_r+0x1a>
 8003f1e:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <__swbuf_r+0xa0>)
 8003f20:	429c      	cmp	r4, r3
 8003f22:	bf08      	it	eq
 8003f24:	68ec      	ldreq	r4, [r5, #12]
 8003f26:	e7ca      	b.n	8003ebe <__swbuf_r+0x1a>
 8003f28:	4621      	mov	r1, r4
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	f000 f81e 	bl	8003f6c <__swsetup_r>
 8003f30:	2800      	cmp	r0, #0
 8003f32:	d0cb      	beq.n	8003ecc <__swbuf_r+0x28>
 8003f34:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003f38:	e7ea      	b.n	8003f10 <__swbuf_r+0x6c>
 8003f3a:	bf00      	nop
 8003f3c:	08004494 	.word	0x08004494
 8003f40:	080044b4 	.word	0x080044b4
 8003f44:	08004474 	.word	0x08004474

08003f48 <_write_r>:
 8003f48:	b538      	push	{r3, r4, r5, lr}
 8003f4a:	4d07      	ldr	r5, [pc, #28]	; (8003f68 <_write_r+0x20>)
 8003f4c:	4604      	mov	r4, r0
 8003f4e:	4608      	mov	r0, r1
 8003f50:	4611      	mov	r1, r2
 8003f52:	2200      	movs	r2, #0
 8003f54:	602a      	str	r2, [r5, #0]
 8003f56:	461a      	mov	r2, r3
 8003f58:	f7fc fc09 	bl	800076e <_write>
 8003f5c:	1c43      	adds	r3, r0, #1
 8003f5e:	d102      	bne.n	8003f66 <_write_r+0x1e>
 8003f60:	682b      	ldr	r3, [r5, #0]
 8003f62:	b103      	cbz	r3, 8003f66 <_write_r+0x1e>
 8003f64:	6023      	str	r3, [r4, #0]
 8003f66:	bd38      	pop	{r3, r4, r5, pc}
 8003f68:	200001c0 	.word	0x200001c0

08003f6c <__swsetup_r>:
 8003f6c:	4b32      	ldr	r3, [pc, #200]	; (8004038 <__swsetup_r+0xcc>)
 8003f6e:	b570      	push	{r4, r5, r6, lr}
 8003f70:	681d      	ldr	r5, [r3, #0]
 8003f72:	4606      	mov	r6, r0
 8003f74:	460c      	mov	r4, r1
 8003f76:	b125      	cbz	r5, 8003f82 <__swsetup_r+0x16>
 8003f78:	69ab      	ldr	r3, [r5, #24]
 8003f7a:	b913      	cbnz	r3, 8003f82 <__swsetup_r+0x16>
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	f7ff fb1b 	bl	80035b8 <__sinit>
 8003f82:	4b2e      	ldr	r3, [pc, #184]	; (800403c <__swsetup_r+0xd0>)
 8003f84:	429c      	cmp	r4, r3
 8003f86:	d10f      	bne.n	8003fa8 <__swsetup_r+0x3c>
 8003f88:	686c      	ldr	r4, [r5, #4]
 8003f8a:	89a3      	ldrh	r3, [r4, #12]
 8003f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f90:	0719      	lsls	r1, r3, #28
 8003f92:	d42c      	bmi.n	8003fee <__swsetup_r+0x82>
 8003f94:	06dd      	lsls	r5, r3, #27
 8003f96:	d411      	bmi.n	8003fbc <__swsetup_r+0x50>
 8003f98:	2309      	movs	r3, #9
 8003f9a:	6033      	str	r3, [r6, #0]
 8003f9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003fa0:	81a3      	strh	r3, [r4, #12]
 8003fa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fa6:	e03e      	b.n	8004026 <__swsetup_r+0xba>
 8003fa8:	4b25      	ldr	r3, [pc, #148]	; (8004040 <__swsetup_r+0xd4>)
 8003faa:	429c      	cmp	r4, r3
 8003fac:	d101      	bne.n	8003fb2 <__swsetup_r+0x46>
 8003fae:	68ac      	ldr	r4, [r5, #8]
 8003fb0:	e7eb      	b.n	8003f8a <__swsetup_r+0x1e>
 8003fb2:	4b24      	ldr	r3, [pc, #144]	; (8004044 <__swsetup_r+0xd8>)
 8003fb4:	429c      	cmp	r4, r3
 8003fb6:	bf08      	it	eq
 8003fb8:	68ec      	ldreq	r4, [r5, #12]
 8003fba:	e7e6      	b.n	8003f8a <__swsetup_r+0x1e>
 8003fbc:	0758      	lsls	r0, r3, #29
 8003fbe:	d512      	bpl.n	8003fe6 <__swsetup_r+0x7a>
 8003fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fc2:	b141      	cbz	r1, 8003fd6 <__swsetup_r+0x6a>
 8003fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fc8:	4299      	cmp	r1, r3
 8003fca:	d002      	beq.n	8003fd2 <__swsetup_r+0x66>
 8003fcc:	4630      	mov	r0, r6
 8003fce:	f000 f991 	bl	80042f4 <_free_r>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	6363      	str	r3, [r4, #52]	; 0x34
 8003fd6:	89a3      	ldrh	r3, [r4, #12]
 8003fd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fdc:	81a3      	strh	r3, [r4, #12]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	6063      	str	r3, [r4, #4]
 8003fe2:	6923      	ldr	r3, [r4, #16]
 8003fe4:	6023      	str	r3, [r4, #0]
 8003fe6:	89a3      	ldrh	r3, [r4, #12]
 8003fe8:	f043 0308 	orr.w	r3, r3, #8
 8003fec:	81a3      	strh	r3, [r4, #12]
 8003fee:	6923      	ldr	r3, [r4, #16]
 8003ff0:	b94b      	cbnz	r3, 8004006 <__swsetup_r+0x9a>
 8003ff2:	89a3      	ldrh	r3, [r4, #12]
 8003ff4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ffc:	d003      	beq.n	8004006 <__swsetup_r+0x9a>
 8003ffe:	4621      	mov	r1, r4
 8004000:	4630      	mov	r0, r6
 8004002:	f000 f92b 	bl	800425c <__smakebuf_r>
 8004006:	89a0      	ldrh	r0, [r4, #12]
 8004008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800400c:	f010 0301 	ands.w	r3, r0, #1
 8004010:	d00a      	beq.n	8004028 <__swsetup_r+0xbc>
 8004012:	2300      	movs	r3, #0
 8004014:	60a3      	str	r3, [r4, #8]
 8004016:	6963      	ldr	r3, [r4, #20]
 8004018:	425b      	negs	r3, r3
 800401a:	61a3      	str	r3, [r4, #24]
 800401c:	6923      	ldr	r3, [r4, #16]
 800401e:	b943      	cbnz	r3, 8004032 <__swsetup_r+0xc6>
 8004020:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004024:	d1ba      	bne.n	8003f9c <__swsetup_r+0x30>
 8004026:	bd70      	pop	{r4, r5, r6, pc}
 8004028:	0781      	lsls	r1, r0, #30
 800402a:	bf58      	it	pl
 800402c:	6963      	ldrpl	r3, [r4, #20]
 800402e:	60a3      	str	r3, [r4, #8]
 8004030:	e7f4      	b.n	800401c <__swsetup_r+0xb0>
 8004032:	2000      	movs	r0, #0
 8004034:	e7f7      	b.n	8004026 <__swsetup_r+0xba>
 8004036:	bf00      	nop
 8004038:	2000000c 	.word	0x2000000c
 800403c:	08004494 	.word	0x08004494
 8004040:	080044b4 	.word	0x080044b4
 8004044:	08004474 	.word	0x08004474

08004048 <_close_r>:
 8004048:	b538      	push	{r3, r4, r5, lr}
 800404a:	4d06      	ldr	r5, [pc, #24]	; (8004064 <_close_r+0x1c>)
 800404c:	2300      	movs	r3, #0
 800404e:	4604      	mov	r4, r0
 8004050:	4608      	mov	r0, r1
 8004052:	602b      	str	r3, [r5, #0]
 8004054:	f7fc fba7 	bl	80007a6 <_close>
 8004058:	1c43      	adds	r3, r0, #1
 800405a:	d102      	bne.n	8004062 <_close_r+0x1a>
 800405c:	682b      	ldr	r3, [r5, #0]
 800405e:	b103      	cbz	r3, 8004062 <_close_r+0x1a>
 8004060:	6023      	str	r3, [r4, #0]
 8004062:	bd38      	pop	{r3, r4, r5, pc}
 8004064:	200001c0 	.word	0x200001c0

08004068 <__sflush_r>:
 8004068:	898a      	ldrh	r2, [r1, #12]
 800406a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800406e:	4605      	mov	r5, r0
 8004070:	0710      	lsls	r0, r2, #28
 8004072:	460c      	mov	r4, r1
 8004074:	d458      	bmi.n	8004128 <__sflush_r+0xc0>
 8004076:	684b      	ldr	r3, [r1, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	dc05      	bgt.n	8004088 <__sflush_r+0x20>
 800407c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800407e:	2b00      	cmp	r3, #0
 8004080:	dc02      	bgt.n	8004088 <__sflush_r+0x20>
 8004082:	2000      	movs	r0, #0
 8004084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004088:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800408a:	2e00      	cmp	r6, #0
 800408c:	d0f9      	beq.n	8004082 <__sflush_r+0x1a>
 800408e:	2300      	movs	r3, #0
 8004090:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004094:	682f      	ldr	r7, [r5, #0]
 8004096:	602b      	str	r3, [r5, #0]
 8004098:	d032      	beq.n	8004100 <__sflush_r+0x98>
 800409a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800409c:	89a3      	ldrh	r3, [r4, #12]
 800409e:	075a      	lsls	r2, r3, #29
 80040a0:	d505      	bpl.n	80040ae <__sflush_r+0x46>
 80040a2:	6863      	ldr	r3, [r4, #4]
 80040a4:	1ac0      	subs	r0, r0, r3
 80040a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80040a8:	b10b      	cbz	r3, 80040ae <__sflush_r+0x46>
 80040aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040ac:	1ac0      	subs	r0, r0, r3
 80040ae:	2300      	movs	r3, #0
 80040b0:	4602      	mov	r2, r0
 80040b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040b4:	6a21      	ldr	r1, [r4, #32]
 80040b6:	4628      	mov	r0, r5
 80040b8:	47b0      	blx	r6
 80040ba:	1c43      	adds	r3, r0, #1
 80040bc:	89a3      	ldrh	r3, [r4, #12]
 80040be:	d106      	bne.n	80040ce <__sflush_r+0x66>
 80040c0:	6829      	ldr	r1, [r5, #0]
 80040c2:	291d      	cmp	r1, #29
 80040c4:	d82c      	bhi.n	8004120 <__sflush_r+0xb8>
 80040c6:	4a2a      	ldr	r2, [pc, #168]	; (8004170 <__sflush_r+0x108>)
 80040c8:	40ca      	lsrs	r2, r1
 80040ca:	07d6      	lsls	r6, r2, #31
 80040cc:	d528      	bpl.n	8004120 <__sflush_r+0xb8>
 80040ce:	2200      	movs	r2, #0
 80040d0:	6062      	str	r2, [r4, #4]
 80040d2:	04d9      	lsls	r1, r3, #19
 80040d4:	6922      	ldr	r2, [r4, #16]
 80040d6:	6022      	str	r2, [r4, #0]
 80040d8:	d504      	bpl.n	80040e4 <__sflush_r+0x7c>
 80040da:	1c42      	adds	r2, r0, #1
 80040dc:	d101      	bne.n	80040e2 <__sflush_r+0x7a>
 80040de:	682b      	ldr	r3, [r5, #0]
 80040e0:	b903      	cbnz	r3, 80040e4 <__sflush_r+0x7c>
 80040e2:	6560      	str	r0, [r4, #84]	; 0x54
 80040e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040e6:	602f      	str	r7, [r5, #0]
 80040e8:	2900      	cmp	r1, #0
 80040ea:	d0ca      	beq.n	8004082 <__sflush_r+0x1a>
 80040ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040f0:	4299      	cmp	r1, r3
 80040f2:	d002      	beq.n	80040fa <__sflush_r+0x92>
 80040f4:	4628      	mov	r0, r5
 80040f6:	f000 f8fd 	bl	80042f4 <_free_r>
 80040fa:	2000      	movs	r0, #0
 80040fc:	6360      	str	r0, [r4, #52]	; 0x34
 80040fe:	e7c1      	b.n	8004084 <__sflush_r+0x1c>
 8004100:	6a21      	ldr	r1, [r4, #32]
 8004102:	2301      	movs	r3, #1
 8004104:	4628      	mov	r0, r5
 8004106:	47b0      	blx	r6
 8004108:	1c41      	adds	r1, r0, #1
 800410a:	d1c7      	bne.n	800409c <__sflush_r+0x34>
 800410c:	682b      	ldr	r3, [r5, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0c4      	beq.n	800409c <__sflush_r+0x34>
 8004112:	2b1d      	cmp	r3, #29
 8004114:	d001      	beq.n	800411a <__sflush_r+0xb2>
 8004116:	2b16      	cmp	r3, #22
 8004118:	d101      	bne.n	800411e <__sflush_r+0xb6>
 800411a:	602f      	str	r7, [r5, #0]
 800411c:	e7b1      	b.n	8004082 <__sflush_r+0x1a>
 800411e:	89a3      	ldrh	r3, [r4, #12]
 8004120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004124:	81a3      	strh	r3, [r4, #12]
 8004126:	e7ad      	b.n	8004084 <__sflush_r+0x1c>
 8004128:	690f      	ldr	r7, [r1, #16]
 800412a:	2f00      	cmp	r7, #0
 800412c:	d0a9      	beq.n	8004082 <__sflush_r+0x1a>
 800412e:	0793      	lsls	r3, r2, #30
 8004130:	680e      	ldr	r6, [r1, #0]
 8004132:	bf08      	it	eq
 8004134:	694b      	ldreq	r3, [r1, #20]
 8004136:	600f      	str	r7, [r1, #0]
 8004138:	bf18      	it	ne
 800413a:	2300      	movne	r3, #0
 800413c:	eba6 0807 	sub.w	r8, r6, r7
 8004140:	608b      	str	r3, [r1, #8]
 8004142:	f1b8 0f00 	cmp.w	r8, #0
 8004146:	dd9c      	ble.n	8004082 <__sflush_r+0x1a>
 8004148:	6a21      	ldr	r1, [r4, #32]
 800414a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800414c:	4643      	mov	r3, r8
 800414e:	463a      	mov	r2, r7
 8004150:	4628      	mov	r0, r5
 8004152:	47b0      	blx	r6
 8004154:	2800      	cmp	r0, #0
 8004156:	dc06      	bgt.n	8004166 <__sflush_r+0xfe>
 8004158:	89a3      	ldrh	r3, [r4, #12]
 800415a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800415e:	81a3      	strh	r3, [r4, #12]
 8004160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004164:	e78e      	b.n	8004084 <__sflush_r+0x1c>
 8004166:	4407      	add	r7, r0
 8004168:	eba8 0800 	sub.w	r8, r8, r0
 800416c:	e7e9      	b.n	8004142 <__sflush_r+0xda>
 800416e:	bf00      	nop
 8004170:	20400001 	.word	0x20400001

08004174 <_fflush_r>:
 8004174:	b538      	push	{r3, r4, r5, lr}
 8004176:	690b      	ldr	r3, [r1, #16]
 8004178:	4605      	mov	r5, r0
 800417a:	460c      	mov	r4, r1
 800417c:	b913      	cbnz	r3, 8004184 <_fflush_r+0x10>
 800417e:	2500      	movs	r5, #0
 8004180:	4628      	mov	r0, r5
 8004182:	bd38      	pop	{r3, r4, r5, pc}
 8004184:	b118      	cbz	r0, 800418e <_fflush_r+0x1a>
 8004186:	6983      	ldr	r3, [r0, #24]
 8004188:	b90b      	cbnz	r3, 800418e <_fflush_r+0x1a>
 800418a:	f7ff fa15 	bl	80035b8 <__sinit>
 800418e:	4b14      	ldr	r3, [pc, #80]	; (80041e0 <_fflush_r+0x6c>)
 8004190:	429c      	cmp	r4, r3
 8004192:	d11b      	bne.n	80041cc <_fflush_r+0x58>
 8004194:	686c      	ldr	r4, [r5, #4]
 8004196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0ef      	beq.n	800417e <_fflush_r+0xa>
 800419e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80041a0:	07d0      	lsls	r0, r2, #31
 80041a2:	d404      	bmi.n	80041ae <_fflush_r+0x3a>
 80041a4:	0599      	lsls	r1, r3, #22
 80041a6:	d402      	bmi.n	80041ae <_fflush_r+0x3a>
 80041a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041aa:	f7ff faa3 	bl	80036f4 <__retarget_lock_acquire_recursive>
 80041ae:	4628      	mov	r0, r5
 80041b0:	4621      	mov	r1, r4
 80041b2:	f7ff ff59 	bl	8004068 <__sflush_r>
 80041b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041b8:	07da      	lsls	r2, r3, #31
 80041ba:	4605      	mov	r5, r0
 80041bc:	d4e0      	bmi.n	8004180 <_fflush_r+0xc>
 80041be:	89a3      	ldrh	r3, [r4, #12]
 80041c0:	059b      	lsls	r3, r3, #22
 80041c2:	d4dd      	bmi.n	8004180 <_fflush_r+0xc>
 80041c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041c6:	f7ff fa96 	bl	80036f6 <__retarget_lock_release_recursive>
 80041ca:	e7d9      	b.n	8004180 <_fflush_r+0xc>
 80041cc:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <_fflush_r+0x70>)
 80041ce:	429c      	cmp	r4, r3
 80041d0:	d101      	bne.n	80041d6 <_fflush_r+0x62>
 80041d2:	68ac      	ldr	r4, [r5, #8]
 80041d4:	e7df      	b.n	8004196 <_fflush_r+0x22>
 80041d6:	4b04      	ldr	r3, [pc, #16]	; (80041e8 <_fflush_r+0x74>)
 80041d8:	429c      	cmp	r4, r3
 80041da:	bf08      	it	eq
 80041dc:	68ec      	ldreq	r4, [r5, #12]
 80041de:	e7da      	b.n	8004196 <_fflush_r+0x22>
 80041e0:	08004494 	.word	0x08004494
 80041e4:	080044b4 	.word	0x080044b4
 80041e8:	08004474 	.word	0x08004474

080041ec <_lseek_r>:
 80041ec:	b538      	push	{r3, r4, r5, lr}
 80041ee:	4d07      	ldr	r5, [pc, #28]	; (800420c <_lseek_r+0x20>)
 80041f0:	4604      	mov	r4, r0
 80041f2:	4608      	mov	r0, r1
 80041f4:	4611      	mov	r1, r2
 80041f6:	2200      	movs	r2, #0
 80041f8:	602a      	str	r2, [r5, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	f7fc fafa 	bl	80007f4 <_lseek>
 8004200:	1c43      	adds	r3, r0, #1
 8004202:	d102      	bne.n	800420a <_lseek_r+0x1e>
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	b103      	cbz	r3, 800420a <_lseek_r+0x1e>
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	bd38      	pop	{r3, r4, r5, pc}
 800420c:	200001c0 	.word	0x200001c0

08004210 <__swhatbuf_r>:
 8004210:	b570      	push	{r4, r5, r6, lr}
 8004212:	460e      	mov	r6, r1
 8004214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004218:	2900      	cmp	r1, #0
 800421a:	b096      	sub	sp, #88	; 0x58
 800421c:	4614      	mov	r4, r2
 800421e:	461d      	mov	r5, r3
 8004220:	da08      	bge.n	8004234 <__swhatbuf_r+0x24>
 8004222:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	602a      	str	r2, [r5, #0]
 800422a:	061a      	lsls	r2, r3, #24
 800422c:	d410      	bmi.n	8004250 <__swhatbuf_r+0x40>
 800422e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004232:	e00e      	b.n	8004252 <__swhatbuf_r+0x42>
 8004234:	466a      	mov	r2, sp
 8004236:	f000 f8bb 	bl	80043b0 <_fstat_r>
 800423a:	2800      	cmp	r0, #0
 800423c:	dbf1      	blt.n	8004222 <__swhatbuf_r+0x12>
 800423e:	9a01      	ldr	r2, [sp, #4]
 8004240:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004244:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004248:	425a      	negs	r2, r3
 800424a:	415a      	adcs	r2, r3
 800424c:	602a      	str	r2, [r5, #0]
 800424e:	e7ee      	b.n	800422e <__swhatbuf_r+0x1e>
 8004250:	2340      	movs	r3, #64	; 0x40
 8004252:	2000      	movs	r0, #0
 8004254:	6023      	str	r3, [r4, #0]
 8004256:	b016      	add	sp, #88	; 0x58
 8004258:	bd70      	pop	{r4, r5, r6, pc}
	...

0800425c <__smakebuf_r>:
 800425c:	898b      	ldrh	r3, [r1, #12]
 800425e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004260:	079d      	lsls	r5, r3, #30
 8004262:	4606      	mov	r6, r0
 8004264:	460c      	mov	r4, r1
 8004266:	d507      	bpl.n	8004278 <__smakebuf_r+0x1c>
 8004268:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800426c:	6023      	str	r3, [r4, #0]
 800426e:	6123      	str	r3, [r4, #16]
 8004270:	2301      	movs	r3, #1
 8004272:	6163      	str	r3, [r4, #20]
 8004274:	b002      	add	sp, #8
 8004276:	bd70      	pop	{r4, r5, r6, pc}
 8004278:	ab01      	add	r3, sp, #4
 800427a:	466a      	mov	r2, sp
 800427c:	f7ff ffc8 	bl	8004210 <__swhatbuf_r>
 8004280:	9900      	ldr	r1, [sp, #0]
 8004282:	4605      	mov	r5, r0
 8004284:	4630      	mov	r0, r6
 8004286:	f7ff fa57 	bl	8003738 <_malloc_r>
 800428a:	b948      	cbnz	r0, 80042a0 <__smakebuf_r+0x44>
 800428c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004290:	059a      	lsls	r2, r3, #22
 8004292:	d4ef      	bmi.n	8004274 <__smakebuf_r+0x18>
 8004294:	f023 0303 	bic.w	r3, r3, #3
 8004298:	f043 0302 	orr.w	r3, r3, #2
 800429c:	81a3      	strh	r3, [r4, #12]
 800429e:	e7e3      	b.n	8004268 <__smakebuf_r+0xc>
 80042a0:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <__smakebuf_r+0x7c>)
 80042a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80042a4:	89a3      	ldrh	r3, [r4, #12]
 80042a6:	6020      	str	r0, [r4, #0]
 80042a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ac:	81a3      	strh	r3, [r4, #12]
 80042ae:	9b00      	ldr	r3, [sp, #0]
 80042b0:	6163      	str	r3, [r4, #20]
 80042b2:	9b01      	ldr	r3, [sp, #4]
 80042b4:	6120      	str	r0, [r4, #16]
 80042b6:	b15b      	cbz	r3, 80042d0 <__smakebuf_r+0x74>
 80042b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042bc:	4630      	mov	r0, r6
 80042be:	f000 f889 	bl	80043d4 <_isatty_r>
 80042c2:	b128      	cbz	r0, 80042d0 <__smakebuf_r+0x74>
 80042c4:	89a3      	ldrh	r3, [r4, #12]
 80042c6:	f023 0303 	bic.w	r3, r3, #3
 80042ca:	f043 0301 	orr.w	r3, r3, #1
 80042ce:	81a3      	strh	r3, [r4, #12]
 80042d0:	89a0      	ldrh	r0, [r4, #12]
 80042d2:	4305      	orrs	r5, r0
 80042d4:	81a5      	strh	r5, [r4, #12]
 80042d6:	e7cd      	b.n	8004274 <__smakebuf_r+0x18>
 80042d8:	08003551 	.word	0x08003551

080042dc <__malloc_lock>:
 80042dc:	4801      	ldr	r0, [pc, #4]	; (80042e4 <__malloc_lock+0x8>)
 80042de:	f7ff ba09 	b.w	80036f4 <__retarget_lock_acquire_recursive>
 80042e2:	bf00      	nop
 80042e4:	200001b4 	.word	0x200001b4

080042e8 <__malloc_unlock>:
 80042e8:	4801      	ldr	r0, [pc, #4]	; (80042f0 <__malloc_unlock+0x8>)
 80042ea:	f7ff ba04 	b.w	80036f6 <__retarget_lock_release_recursive>
 80042ee:	bf00      	nop
 80042f0:	200001b4 	.word	0x200001b4

080042f4 <_free_r>:
 80042f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042f6:	2900      	cmp	r1, #0
 80042f8:	d044      	beq.n	8004384 <_free_r+0x90>
 80042fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042fe:	9001      	str	r0, [sp, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	f1a1 0404 	sub.w	r4, r1, #4
 8004306:	bfb8      	it	lt
 8004308:	18e4      	addlt	r4, r4, r3
 800430a:	f7ff ffe7 	bl	80042dc <__malloc_lock>
 800430e:	4a1e      	ldr	r2, [pc, #120]	; (8004388 <_free_r+0x94>)
 8004310:	9801      	ldr	r0, [sp, #4]
 8004312:	6813      	ldr	r3, [r2, #0]
 8004314:	b933      	cbnz	r3, 8004324 <_free_r+0x30>
 8004316:	6063      	str	r3, [r4, #4]
 8004318:	6014      	str	r4, [r2, #0]
 800431a:	b003      	add	sp, #12
 800431c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004320:	f7ff bfe2 	b.w	80042e8 <__malloc_unlock>
 8004324:	42a3      	cmp	r3, r4
 8004326:	d908      	bls.n	800433a <_free_r+0x46>
 8004328:	6825      	ldr	r5, [r4, #0]
 800432a:	1961      	adds	r1, r4, r5
 800432c:	428b      	cmp	r3, r1
 800432e:	bf01      	itttt	eq
 8004330:	6819      	ldreq	r1, [r3, #0]
 8004332:	685b      	ldreq	r3, [r3, #4]
 8004334:	1949      	addeq	r1, r1, r5
 8004336:	6021      	streq	r1, [r4, #0]
 8004338:	e7ed      	b.n	8004316 <_free_r+0x22>
 800433a:	461a      	mov	r2, r3
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	b10b      	cbz	r3, 8004344 <_free_r+0x50>
 8004340:	42a3      	cmp	r3, r4
 8004342:	d9fa      	bls.n	800433a <_free_r+0x46>
 8004344:	6811      	ldr	r1, [r2, #0]
 8004346:	1855      	adds	r5, r2, r1
 8004348:	42a5      	cmp	r5, r4
 800434a:	d10b      	bne.n	8004364 <_free_r+0x70>
 800434c:	6824      	ldr	r4, [r4, #0]
 800434e:	4421      	add	r1, r4
 8004350:	1854      	adds	r4, r2, r1
 8004352:	42a3      	cmp	r3, r4
 8004354:	6011      	str	r1, [r2, #0]
 8004356:	d1e0      	bne.n	800431a <_free_r+0x26>
 8004358:	681c      	ldr	r4, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	6053      	str	r3, [r2, #4]
 800435e:	4421      	add	r1, r4
 8004360:	6011      	str	r1, [r2, #0]
 8004362:	e7da      	b.n	800431a <_free_r+0x26>
 8004364:	d902      	bls.n	800436c <_free_r+0x78>
 8004366:	230c      	movs	r3, #12
 8004368:	6003      	str	r3, [r0, #0]
 800436a:	e7d6      	b.n	800431a <_free_r+0x26>
 800436c:	6825      	ldr	r5, [r4, #0]
 800436e:	1961      	adds	r1, r4, r5
 8004370:	428b      	cmp	r3, r1
 8004372:	bf04      	itt	eq
 8004374:	6819      	ldreq	r1, [r3, #0]
 8004376:	685b      	ldreq	r3, [r3, #4]
 8004378:	6063      	str	r3, [r4, #4]
 800437a:	bf04      	itt	eq
 800437c:	1949      	addeq	r1, r1, r5
 800437e:	6021      	streq	r1, [r4, #0]
 8004380:	6054      	str	r4, [r2, #4]
 8004382:	e7ca      	b.n	800431a <_free_r+0x26>
 8004384:	b003      	add	sp, #12
 8004386:	bd30      	pop	{r4, r5, pc}
 8004388:	200001b8 	.word	0x200001b8

0800438c <_read_r>:
 800438c:	b538      	push	{r3, r4, r5, lr}
 800438e:	4d07      	ldr	r5, [pc, #28]	; (80043ac <_read_r+0x20>)
 8004390:	4604      	mov	r4, r0
 8004392:	4608      	mov	r0, r1
 8004394:	4611      	mov	r1, r2
 8004396:	2200      	movs	r2, #0
 8004398:	602a      	str	r2, [r5, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	f7fc f9ca 	bl	8000734 <_read>
 80043a0:	1c43      	adds	r3, r0, #1
 80043a2:	d102      	bne.n	80043aa <_read_r+0x1e>
 80043a4:	682b      	ldr	r3, [r5, #0]
 80043a6:	b103      	cbz	r3, 80043aa <_read_r+0x1e>
 80043a8:	6023      	str	r3, [r4, #0]
 80043aa:	bd38      	pop	{r3, r4, r5, pc}
 80043ac:	200001c0 	.word	0x200001c0

080043b0 <_fstat_r>:
 80043b0:	b538      	push	{r3, r4, r5, lr}
 80043b2:	4d07      	ldr	r5, [pc, #28]	; (80043d0 <_fstat_r+0x20>)
 80043b4:	2300      	movs	r3, #0
 80043b6:	4604      	mov	r4, r0
 80043b8:	4608      	mov	r0, r1
 80043ba:	4611      	mov	r1, r2
 80043bc:	602b      	str	r3, [r5, #0]
 80043be:	f7fc f9fe 	bl	80007be <_fstat>
 80043c2:	1c43      	adds	r3, r0, #1
 80043c4:	d102      	bne.n	80043cc <_fstat_r+0x1c>
 80043c6:	682b      	ldr	r3, [r5, #0]
 80043c8:	b103      	cbz	r3, 80043cc <_fstat_r+0x1c>
 80043ca:	6023      	str	r3, [r4, #0]
 80043cc:	bd38      	pop	{r3, r4, r5, pc}
 80043ce:	bf00      	nop
 80043d0:	200001c0 	.word	0x200001c0

080043d4 <_isatty_r>:
 80043d4:	b538      	push	{r3, r4, r5, lr}
 80043d6:	4d06      	ldr	r5, [pc, #24]	; (80043f0 <_isatty_r+0x1c>)
 80043d8:	2300      	movs	r3, #0
 80043da:	4604      	mov	r4, r0
 80043dc:	4608      	mov	r0, r1
 80043de:	602b      	str	r3, [r5, #0]
 80043e0:	f7fc f9fd 	bl	80007de <_isatty>
 80043e4:	1c43      	adds	r3, r0, #1
 80043e6:	d102      	bne.n	80043ee <_isatty_r+0x1a>
 80043e8:	682b      	ldr	r3, [r5, #0]
 80043ea:	b103      	cbz	r3, 80043ee <_isatty_r+0x1a>
 80043ec:	6023      	str	r3, [r4, #0]
 80043ee:	bd38      	pop	{r3, r4, r5, pc}
 80043f0:	200001c0 	.word	0x200001c0

080043f4 <_init>:
 80043f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f6:	bf00      	nop
 80043f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043fa:	bc08      	pop	{r3}
 80043fc:	469e      	mov	lr, r3
 80043fe:	4770      	bx	lr

08004400 <_fini>:
 8004400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004402:	bf00      	nop
 8004404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004406:	bc08      	pop	{r3}
 8004408:	469e      	mov	lr, r3
 800440a:	4770      	bx	lr
