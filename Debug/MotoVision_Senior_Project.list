
MotoVision_Senior_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007818  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  080079a8  080079a8  000179a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e04  08007e04  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007e04  08007e04  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e04  08007e04  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e04  08007e04  00017e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e08  08007e08  00017e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00000198  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000037c  2000037c  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d30c  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c30  00000000  00000000  0002d520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a80  00000000  00000000  0002f150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009c8  00000000  00000000  0002fbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b6d5  00000000  00000000  00030598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000def4  00000000  00000000  0004bc6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d542  00000000  00000000  00059b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f70a3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c48  00000000  00000000  000f70f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007990 	.word	0x08007990

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08007990 	.word	0x08007990

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <L_RED_LED>:
#ifndef INC_RGB_LED_H_
#define INC_RGB_LED_H_

#include "stm32f3xx_hal_conf.h"

void L_RED_LED() {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, L_RED_Pin, GPIO_PIN_SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	2102      	movs	r1, #2
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb4:	f001 f8ae 	bl	8001d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, L_GREEN_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2108      	movs	r1, #8
 8000bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc0:	f001 f8a8 	bl	8001d14 <HAL_GPIO_WritePin>
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <L_YELLOW_LED>:
void L_GREEN_LED() {
	HAL_GPIO_WritePin(GPIOA, L_RED_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOA, L_GREEN_Pin, GPIO_PIN_SET);
}
void L_YELLOW_LED() {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, L_RED_Pin, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2102      	movs	r1, #2
 8000bd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd4:	f001 f89e 	bl	8001d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, L_GREEN_Pin, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2108      	movs	r1, #8
 8000bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be0:	f001 f898 	bl	8001d14 <HAL_GPIO_WritePin>
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <L_OFF_LED>:
void L_OFF_LED() {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, L_RED_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2102      	movs	r1, #2
 8000bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf4:	f001 f88e 	bl	8001d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, L_GREEN_Pin, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2108      	movs	r1, #8
 8000bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c00:	f001 f888 	bl	8001d14 <HAL_GPIO_WritePin>
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <R_RED_LED>:

void R_RED_LED() {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, R_RED_Pin, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2120      	movs	r1, #32
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <R_RED_LED+0x20>)
 8000c12:	f001 f87f 	bl	8001d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, R_GREEN_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c20:	f001 f878 	bl	8001d14 <HAL_GPIO_WritePin>
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	48000400 	.word	0x48000400

08000c2c <R_YELLOW_LED>:
void R_GREEN_LED() {
	HAL_GPIO_WritePin(GPIOB, R_RED_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOA, R_GREEN_Pin, GPIO_PIN_SET);
}
void R_YELLOW_LED() {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, R_RED_Pin, GPIO_PIN_SET);
 8000c30:	2201      	movs	r2, #1
 8000c32:	2120      	movs	r1, #32
 8000c34:	4805      	ldr	r0, [pc, #20]	; (8000c4c <R_YELLOW_LED+0x20>)
 8000c36:	f001 f86d 	bl	8001d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, R_GREEN_Pin, GPIO_PIN_SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c44:	f001 f866 	bl	8001d14 <HAL_GPIO_WritePin>
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	48000400 	.word	0x48000400

08000c50 <R_OFF_LED>:
void R_OFF_LED() {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, R_RED_Pin, GPIO_PIN_RESET);	//red pin
 8000c54:	2200      	movs	r2, #0
 8000c56:	2120      	movs	r1, #32
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <R_OFF_LED+0x20>)
 8000c5a:	f001 f85b 	bl	8001d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, R_GREEN_Pin, GPIO_PIN_RESET); 	//green pin
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c68:	f001 f854 	bl	8001d14 <HAL_GPIO_WritePin>
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	48000400 	.word	0x48000400

08000c74 <CheckDevice>:
uint8_t distance_high;
uint16_t distanceL = 0;
uint16_t distanceR = 0;
char msg[128];

HAL_StatusTypeDef CheckDevice(uint8_t lidarAddr){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b0a4      	sub	sp, #144	; 0x90
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	char msg[128];

	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, lidarAddr << 1, 10, HAL_MAX_DELAY);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	b299      	uxth	r1, r3
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c8a:	220a      	movs	r2, #10
 8000c8c:	481c      	ldr	r0, [pc, #112]	; (8000d00 <CheckDevice+0x8c>)
 8000c8e:	f001 fb17 	bl	80022c0 <HAL_I2C_IsDeviceReady>
 8000c92:	4603      	mov	r3, r0
 8000c94:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if(ret == HAL_OK)
 8000c98:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d114      	bne.n	8000cca <CheckDevice+0x56>
	{
	  sprintf(msg, "Device is ready.\r\n");
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	4917      	ldr	r1, [pc, #92]	; (8000d04 <CheckDevice+0x90>)
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f004 fbf8 	bl	800549c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fa8d 	bl	80001d0 <strlen>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	f107 010c 	add.w	r1, r7, #12
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cc2:	4811      	ldr	r0, [pc, #68]	; (8000d08 <CheckDevice+0x94>)
 8000cc4:	f003 fb78 	bl	80043b8 <HAL_UART_Transmit>
 8000cc8:	e013      	b.n	8000cf2 <CheckDevice+0x7e>
	}
	else
	{
	  sprintf(msg, "Device is not connected.\r\n");
 8000cca:	f107 030c 	add.w	r3, r7, #12
 8000cce:	490f      	ldr	r1, [pc, #60]	; (8000d0c <CheckDevice+0x98>)
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f004 fbe3 	bl	800549c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 8000cd6:	f107 030c 	add.w	r3, r7, #12
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fa78 	bl	80001d0 <strlen>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	f107 010c 	add.w	r1, r7, #12
 8000ce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cec:	4806      	ldr	r0, [pc, #24]	; (8000d08 <CheckDevice+0x94>)
 8000cee:	f003 fb63 	bl	80043b8 <HAL_UART_Transmit>
	}
	return ret;
 8000cf2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3790      	adds	r7, #144	; 0x90
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000200 	.word	0x20000200
 8000d04:	080079a8 	.word	0x080079a8
 8000d08:	20000254 	.word	0x20000254
 8000d0c:	080079bc 	.word	0x080079bc

08000d10 <ConfigureLidarAddress>:

void ConfigureLidarAddress(uint8_t lidarliteAddress, uint8_t newAddress, uint8_t disableDefault)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af04      	add	r7, sp, #16
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	71bb      	strb	r3, [r7, #6]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	717b      	strb	r3, [r7, #5]
	uint8_t dataBytes[5];
    // Enable flash storage
    dataBytes[0] = 0x11;
 8000d22:	2311      	movs	r3, #17
 8000d24:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Mem_Write(&hi2c1, lidarliteAddress << 1, 0xEA, 1, dataBytes, 1, HAL_MAX_DELAY);
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	b299      	uxth	r1, r3
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d32:	9302      	str	r3, [sp, #8]
 8000d34:	2301      	movs	r3, #1
 8000d36:	9301      	str	r3, [sp, #4]
 8000d38:	f107 0308 	add.w	r3, r7, #8
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	2301      	movs	r3, #1
 8000d40:	22ea      	movs	r2, #234	; 0xea
 8000d42:	4832      	ldr	r0, [pc, #200]	; (8000e0c <ConfigureLidarAddress+0xfc>)
 8000d44:	f001 f88e 	bl	8001e64 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8000d48:	2064      	movs	r0, #100	; 0x64
 8000d4a:	f000 fd3b 	bl	80017c4 <HAL_Delay>

    // Read 4-byte device serial number
    HAL_I2C_Mem_Read(&hi2c1, lidarliteAddress << 1, 0x16, 1, dataBytes, 4, HAL_MAX_DELAY);
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	b299      	uxth	r1, r3
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d5a:	9302      	str	r3, [sp, #8]
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	9301      	str	r3, [sp, #4]
 8000d60:	f107 0308 	add.w	r3, r7, #8
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	2301      	movs	r3, #1
 8000d68:	2216      	movs	r2, #22
 8000d6a:	4828      	ldr	r0, [pc, #160]	; (8000e0c <ConfigureLidarAddress+0xfc>)
 8000d6c:	f001 f98e 	bl	800208c <HAL_I2C_Mem_Read>

    // Append the desired I2C address to the end of the serial number byte array
    dataBytes[4] = newAddress;
 8000d70:	79bb      	ldrb	r3, [r7, #6]
 8000d72:	733b      	strb	r3, [r7, #12]

    // Write the serial number and new address in one 5-byte transaction
    HAL_I2C_Mem_Write(&hi2c1, lidarliteAddress << 1, 0x16, 1, dataBytes, 5, HAL_MAX_DELAY);
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	b299      	uxth	r1, r3
 8000d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d80:	9302      	str	r3, [sp, #8]
 8000d82:	2305      	movs	r3, #5
 8000d84:	9301      	str	r3, [sp, #4]
 8000d86:	f107 0308 	add.w	r3, r7, #8
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	2216      	movs	r2, #22
 8000d90:	481e      	ldr	r0, [pc, #120]	; (8000e0c <ConfigureLidarAddress+0xfc>)
 8000d92:	f001 f867 	bl	8001e64 <HAL_I2C_Mem_Write>

    // Wait for the I2C peripheral to be restarted with new device address
    HAL_Delay(100);
 8000d96:	2064      	movs	r0, #100	; 0x64
 8000d98:	f000 fd14 	bl	80017c4 <HAL_Delay>

    // If desired, disable default I2C device address (using the new I2C device address)
    if (disableDefault)
 8000d9c:	797b      	ldrb	r3, [r7, #5]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d015      	beq.n	8000dce <ConfigureLidarAddress+0xbe>
    {
        dataBytes[0] = 0x01; // set bit to disable default address
 8000da2:	2301      	movs	r3, #1
 8000da4:	723b      	strb	r3, [r7, #8]
        HAL_I2C_Mem_Write(&hi2c1, newAddress << 1, 0x1b, 1, dataBytes, 1, HAL_MAX_DELAY);
 8000da6:	79bb      	ldrb	r3, [r7, #6]
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	b299      	uxth	r1, r3
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000db2:	9302      	str	r3, [sp, #8]
 8000db4:	2301      	movs	r3, #1
 8000db6:	9301      	str	r3, [sp, #4]
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	221b      	movs	r2, #27
 8000dc2:	4812      	ldr	r0, [pc, #72]	; (8000e0c <ConfigureLidarAddress+0xfc>)
 8000dc4:	f001 f84e 	bl	8001e64 <HAL_I2C_Mem_Write>

        // Wait for the I2C peripheral to be restarted with new device address
        HAL_Delay(100);
 8000dc8:	2064      	movs	r0, #100	; 0x64
 8000dca:	f000 fcfb 	bl	80017c4 <HAL_Delay>
    }

    // Disable flash storage
    dataBytes[0] = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Mem_Write(&hi2c1, newAddress << 1, 0xEA, 1, dataBytes, 1, HAL_MAX_DELAY);
 8000dd2:	79bb      	ldrb	r3, [r7, #6]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	b299      	uxth	r1, r3
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dde:	9302      	str	r3, [sp, #8]
 8000de0:	2301      	movs	r3, #1
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	f107 0308 	add.w	r3, r7, #8
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	2301      	movs	r3, #1
 8000dec:	22ea      	movs	r2, #234	; 0xea
 8000dee:	4807      	ldr	r0, [pc, #28]	; (8000e0c <ConfigureLidarAddress+0xfc>)
 8000df0:	f001 f838 	bl	8001e64 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8000df4:	2064      	movs	r0, #100	; 0x64
 8000df6:	f000 fce5 	bl	80017c4 <HAL_Delay>
    CheckDevice(newAddress);
 8000dfa:	79bb      	ldrb	r3, [r7, #6]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff39 	bl	8000c74 <CheckDevice>
}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000200 	.word	0x20000200

08000e10 <GetDistance>:

	// Wait for the I2C peripheral to be restarted with new device address
	HAL_Delay(100);
}

uint16_t GetDistance(uint8_t lidarAddr){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af04      	add	r7, sp, #16
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
	uint32_t startTick = HAL_GetTick(); // Get current tick for timeout
 8000e1a:	f000 fcc7 	bl	80017ac <HAL_GetTick>
 8000e1e:	60f8      	str	r0, [r7, #12]

	// 1. Write 0x04 to register 0x00.
	HAL_I2C_Mem_Write(&hi2c1, lidarAddr << 1, ACQ_COMMAND, 1, &TAKE_DIST, 1, HAL_MAX_DELAY);
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	b299      	uxth	r1, r3
 8000e28:	4b30      	ldr	r3, [pc, #192]	; (8000eec <GetDistance+0xdc>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e32:	9302      	str	r3, [sp, #8]
 8000e34:	2301      	movs	r3, #1
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	4b2d      	ldr	r3, [pc, #180]	; (8000ef0 <GetDistance+0xe0>)
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	482d      	ldr	r0, [pc, #180]	; (8000ef4 <GetDistance+0xe4>)
 8000e40:	f001 f810 	bl	8001e64 <HAL_I2C_Mem_Write>


	do { // 2. Read register 0x01.
	  HAL_I2C_Mem_Read(&hi2c1, lidarAddr << 1, STATUS_REG, 1, &status, 1, HAL_MAX_DELAY);
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	b299      	uxth	r1, r3
 8000e4c:	4b2a      	ldr	r3, [pc, #168]	; (8000ef8 <GetDistance+0xe8>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e56:	9302      	str	r3, [sp, #8]
 8000e58:	2301      	movs	r3, #1
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	4b27      	ldr	r3, [pc, #156]	; (8000efc <GetDistance+0xec>)
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2301      	movs	r3, #1
 8000e62:	4824      	ldr	r0, [pc, #144]	; (8000ef4 <GetDistance+0xe4>)
 8000e64:	f001 f912 	bl	800208c <HAL_I2C_Mem_Read>

	  if((HAL_GetTick() - startTick) > TIMEOUT_MS) {// Handle timeout
 8000e68:	f000 fca0 	bl	80017ac <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e76:	d901      	bls.n	8000e7c <GetDistance+0x6c>
	  	    return 0;  // return invalid distance value
 8000e78:	2300      	movs	r3, #0
 8000e7a:	e033      	b.n	8000ee4 <GetDistance+0xd4>
	  }

	} while (status & 0x01); // 3. Repeat step 2 until bit 0 (LSB) goes low.
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <GetDistance+0xec>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1dd      	bne.n	8000e44 <GetDistance+0x34>


	// 4. Read two bytes from 0x10 (low byte 0x10 then high byte 0x11) to obtain the 16-bit measured distance in centimeters.
	HAL_I2C_Mem_Read(&hi2c1, lidarAddr << 1, DISTANCE_REG_LOW, 1, &distance_low, 1, HAL_MAX_DELAY);
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	b299      	uxth	r1, r3
 8000e90:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <GetDistance+0xf0>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e9a:	9302      	str	r3, [sp, #8]
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	9301      	str	r3, [sp, #4]
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <GetDistance+0xf4>)
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	4813      	ldr	r0, [pc, #76]	; (8000ef4 <GetDistance+0xe4>)
 8000ea8:	f001 f8f0 	bl	800208c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, lidarAddr << 1, DISTANCE_REG_HIGH, 1, &distance_high, 1, HAL_MAX_DELAY);
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	b299      	uxth	r1, r3
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <GetDistance+0xf8>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ebe:	9302      	str	r3, [sp, #8]
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <GetDistance+0xfc>)
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	480a      	ldr	r0, [pc, #40]	; (8000ef4 <GetDistance+0xe4>)
 8000ecc:	f001 f8de 	bl	800208c <HAL_I2C_Mem_Read>

	return (((uint16_t)distance_high << 8) | distance_low);
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <GetDistance+0xfc>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	b21a      	sxth	r2, r3
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <GetDistance+0xf4>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	b21b      	sxth	r3, r3
 8000ee2:	b29b      	uxth	r3, r3
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	200002dc 	.word	0x200002dc
 8000ef0:	20000002 	.word	0x20000002
 8000ef4:	20000200 	.word	0x20000200
 8000ef8:	20000005 	.word	0x20000005
 8000efc:	200002dd 	.word	0x200002dd
 8000f00:	20000003 	.word	0x20000003
 8000f04:	200002de 	.word	0x200002de
 8000f08:	20000004 	.word	0x20000004
 8000f0c:	200002df 	.word	0x200002df

08000f10 <CheckRightSensor>:

void CheckRightSensor() {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	while(CheckDevice(LIDAR_ADDR_R) != HAL_OK) {
 8000f14:	e00e      	b.n	8000f34 <CheckRightSensor+0x24>
		  sprintf(msg, "device 1\r\n");
 8000f16:	4916      	ldr	r1, [pc, #88]	; (8000f70 <CheckRightSensor+0x60>)
 8000f18:	4816      	ldr	r0, [pc, #88]	; (8000f74 <CheckRightSensor+0x64>)
 8000f1a:	f004 fabf 	bl	800549c <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 8000f1e:	4815      	ldr	r0, [pc, #84]	; (8000f74 <CheckRightSensor+0x64>)
 8000f20:	f7ff f956 	bl	80001d0 <strlen>
 8000f24:	4603      	mov	r3, r0
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f2c:	4911      	ldr	r1, [pc, #68]	; (8000f74 <CheckRightSensor+0x64>)
 8000f2e:	4812      	ldr	r0, [pc, #72]	; (8000f78 <CheckRightSensor+0x68>)
 8000f30:	f003 fa42 	bl	80043b8 <HAL_UART_Transmit>
	while(CheckDevice(LIDAR_ADDR_R) != HAL_OK) {
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <CheckRightSensor+0x6c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fe9b 	bl	8000c74 <CheckDevice>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1e8      	bne.n	8000f16 <CheckRightSensor+0x6>
	  }
	  R_RED_LED();
 8000f44:	f7ff fe60 	bl	8000c08 <R_RED_LED>
	  HAL_Delay(100);
 8000f48:	2064      	movs	r0, #100	; 0x64
 8000f4a:	f000 fc3b 	bl	80017c4 <HAL_Delay>
	  R_OFF_LED();
 8000f4e:	f7ff fe7f 	bl	8000c50 <R_OFF_LED>
	  HAL_Delay(100);
 8000f52:	2064      	movs	r0, #100	; 0x64
 8000f54:	f000 fc36 	bl	80017c4 <HAL_Delay>
	  R_RED_LED();
 8000f58:	f7ff fe56 	bl	8000c08 <R_RED_LED>
	  HAL_Delay(100);
 8000f5c:	2064      	movs	r0, #100	; 0x64
 8000f5e:	f000 fc31 	bl	80017c4 <HAL_Delay>
	  R_OFF_LED();
 8000f62:	f7ff fe75 	bl	8000c50 <R_OFF_LED>
	  HAL_Delay(100);
 8000f66:	2064      	movs	r0, #100	; 0x64
 8000f68:	f000 fc2c 	bl	80017c4 <HAL_Delay>
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	080079d8 	.word	0x080079d8
 8000f74:	200002e4 	.word	0x200002e4
 8000f78:	20000254 	.word	0x20000254
 8000f7c:	20000000 	.word	0x20000000

08000f80 <CheckLeftSensor>:

void CheckLeftSensor() {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	while(CheckDevice(LIDAR_ADDR_L) != HAL_OK) {
 8000f84:	e00e      	b.n	8000fa4 <CheckLeftSensor+0x24>
		  sprintf(msg, "device 2\r\n");
 8000f86:	4916      	ldr	r1, [pc, #88]	; (8000fe0 <CheckLeftSensor+0x60>)
 8000f88:	4816      	ldr	r0, [pc, #88]	; (8000fe4 <CheckLeftSensor+0x64>)
 8000f8a:	f004 fa87 	bl	800549c <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 8000f8e:	4815      	ldr	r0, [pc, #84]	; (8000fe4 <CheckLeftSensor+0x64>)
 8000f90:	f7ff f91e 	bl	80001d0 <strlen>
 8000f94:	4603      	mov	r3, r0
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f9c:	4911      	ldr	r1, [pc, #68]	; (8000fe4 <CheckLeftSensor+0x64>)
 8000f9e:	4812      	ldr	r0, [pc, #72]	; (8000fe8 <CheckLeftSensor+0x68>)
 8000fa0:	f003 fa0a 	bl	80043b8 <HAL_UART_Transmit>
	while(CheckDevice(LIDAR_ADDR_L) != HAL_OK) {
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <CheckLeftSensor+0x6c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fe63 	bl	8000c74 <CheckDevice>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1e8      	bne.n	8000f86 <CheckLeftSensor+0x6>
	  }
	  L_RED_LED();
 8000fb4:	f7ff fdf8 	bl	8000ba8 <L_RED_LED>
	  HAL_Delay(100);
 8000fb8:	2064      	movs	r0, #100	; 0x64
 8000fba:	f000 fc03 	bl	80017c4 <HAL_Delay>
	  L_OFF_LED();
 8000fbe:	f7ff fe13 	bl	8000be8 <L_OFF_LED>
	  HAL_Delay(100);
 8000fc2:	2064      	movs	r0, #100	; 0x64
 8000fc4:	f000 fbfe 	bl	80017c4 <HAL_Delay>
	  L_RED_LED();
 8000fc8:	f7ff fdee 	bl	8000ba8 <L_RED_LED>
	  HAL_Delay(100);
 8000fcc:	2064      	movs	r0, #100	; 0x64
 8000fce:	f000 fbf9 	bl	80017c4 <HAL_Delay>
	  L_OFF_LED();
 8000fd2:	f7ff fe09 	bl	8000be8 <L_OFF_LED>
	  HAL_Delay(100);
 8000fd6:	2064      	movs	r0, #100	; 0x64
 8000fd8:	f000 fbf4 	bl	80017c4 <HAL_Delay>
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	080079e4 	.word	0x080079e4
 8000fe4:	200002e4 	.word	0x200002e4
 8000fe8:	20000254 	.word	0x20000254
 8000fec:	20000001 	.word	0x20000001

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff6:	f000 fb7f 	bl	80016f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffa:	f000 f863 	bl	80010c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffe:	f000 f921 	bl	8001244 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001002:	f000 f8ef 	bl	80011e4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001006:	f000 f8af 	bl	8001168 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Disable default address for left sensor
  // DisableDefaultAddress(LIDAR_ADDR_L);
  ConfigureLidarAddress(LIDAR_ADDR_L, LIDAR_ADDR_L, 1);
 800100a:	4b2a      	ldr	r3, [pc, #168]	; (80010b4 <main+0xc4>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	4a29      	ldr	r2, [pc, #164]	; (80010b4 <main+0xc4>)
 8001010:	7811      	ldrb	r1, [r2, #0]
 8001012:	2201      	movs	r2, #1
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fe7b 	bl	8000d10 <ConfigureLidarAddress>

  CheckRightSensor();
 800101a:	f7ff ff79 	bl	8000f10 <CheckRightSensor>
  CheckLeftSensor();
 800101e:	f7ff ffaf 	bl	8000f80 <CheckLeftSensor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Get right and left distances
	  tempR = GetDistance(LIDAR_ADDR_R);
 8001022:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <main+0xc8>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fef2 	bl	8000e10 <GetDistance>
 800102c:	4603      	mov	r3, r0
 800102e:	80fb      	strh	r3, [r7, #6]
	  tempL = GetDistance(LIDAR_ADDR_L);
 8001030:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <main+0xc4>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff feeb 	bl	8000e10 <GetDistance>
 800103a:	4603      	mov	r3, r0
 800103c:	80bb      	strh	r3, [r7, #4]

	  // Check for 'Lane Splitting' condition
	  if(tempR < 100 && tempL < 100)
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	2b63      	cmp	r3, #99	; 0x63
 8001042:	d807      	bhi.n	8001054 <main+0x64>
 8001044:	88bb      	ldrh	r3, [r7, #4]
 8001046:	2b63      	cmp	r3, #99	; 0x63
 8001048:	d804      	bhi.n	8001054 <main+0x64>
	  {
		  R_OFF_LED();
 800104a:	f7ff fe01 	bl	8000c50 <R_OFF_LED>
		  L_OFF_LED();
 800104e:	f7ff fdcb 	bl	8000be8 <L_OFF_LED>
 8001052:	e02b      	b.n	80010ac <main+0xbc>
	  }
	  else {
		  // Check for valid right distance and set
		  if(tempR > 5)
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	2b05      	cmp	r3, #5
 8001058:	d902      	bls.n	8001060 <main+0x70>
			  distanceR = tempR;
 800105a:	4a18      	ldr	r2, [pc, #96]	; (80010bc <main+0xcc>)
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	8013      	strh	r3, [r2, #0]
		  // If distance not valid keep previous distance
		  if(distanceR < 100)
 8001060:	4b16      	ldr	r3, [pc, #88]	; (80010bc <main+0xcc>)
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	2b63      	cmp	r3, #99	; 0x63
 8001066:	d802      	bhi.n	800106e <main+0x7e>
			  R_RED_LED();
 8001068:	f7ff fdce 	bl	8000c08 <R_RED_LED>
 800106c:	e008      	b.n	8001080 <main+0x90>
		  else if(distanceR > 200)
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <main+0xcc>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	2bc8      	cmp	r3, #200	; 0xc8
 8001074:	d902      	bls.n	800107c <main+0x8c>
			  R_OFF_LED();
 8001076:	f7ff fdeb 	bl	8000c50 <R_OFF_LED>
 800107a:	e001      	b.n	8001080 <main+0x90>
		  else
			  R_YELLOW_LED();
 800107c:	f7ff fdd6 	bl	8000c2c <R_YELLOW_LED>

		  // Check for valid left distance and set
		  if(tempL > 5)
 8001080:	88bb      	ldrh	r3, [r7, #4]
 8001082:	2b05      	cmp	r3, #5
 8001084:	d902      	bls.n	800108c <main+0x9c>
			  distanceL = tempL;
 8001086:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <main+0xd0>)
 8001088:	88bb      	ldrh	r3, [r7, #4]
 800108a:	8013      	strh	r3, [r2, #0]
		  // If distance not valid keep previous distance
		  if(distanceL < 100)
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <main+0xd0>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	2b63      	cmp	r3, #99	; 0x63
 8001092:	d802      	bhi.n	800109a <main+0xaa>
			  L_RED_LED();
 8001094:	f7ff fd88 	bl	8000ba8 <L_RED_LED>
 8001098:	e008      	b.n	80010ac <main+0xbc>
		  else if(distanceL > 200)
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <main+0xd0>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	2bc8      	cmp	r3, #200	; 0xc8
 80010a0:	d902      	bls.n	80010a8 <main+0xb8>
			  L_OFF_LED();
 80010a2:	f7ff fda1 	bl	8000be8 <L_OFF_LED>
 80010a6:	e001      	b.n	80010ac <main+0xbc>
		  else
			  L_YELLOW_LED();
 80010a8:	f7ff fd8e 	bl	8000bc8 <L_YELLOW_LED>
	  sprintf(msg, "distance R: %d\r\n", distanceR);
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
	  */

	  // Wait 100 ms
	  HAL_Delay(100);
 80010ac:	2064      	movs	r0, #100	; 0x64
 80010ae:	f000 fb89 	bl	80017c4 <HAL_Delay>
	  tempR = GetDistance(LIDAR_ADDR_R);
 80010b2:	e7b6      	b.n	8001022 <main+0x32>
 80010b4:	20000001 	.word	0x20000001
 80010b8:	20000000 	.word	0x20000000
 80010bc:	200002e2 	.word	0x200002e2
 80010c0:	200002e0 	.word	0x200002e0

080010c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b096      	sub	sp, #88	; 0x58
 80010c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010ce:	2228      	movs	r2, #40	; 0x28
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f003 fd70 	bl	8004bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]
 80010f6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f8:	2302      	movs	r3, #2
 80010fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010fc:	2301      	movs	r3, #1
 80010fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001100:	2310      	movs	r3, #16
 8001102:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001104:	2300      	movs	r3, #0
 8001106:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001108:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800110c:	4618      	mov	r0, r3
 800110e:	f001 fd6b 	bl	8002be8 <HAL_RCC_OscConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001118:	f000 f8f6 	bl	8001308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111c:	230f      	movs	r3, #15
 800111e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001120:	2300      	movs	r3, #0
 8001122:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f002 fd94 	bl	8003c64 <HAL_RCC_ClockConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001142:	f000 f8e1 	bl	8001308 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001146:	2320      	movs	r3, #32
 8001148:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	4618      	mov	r0, r3
 8001152:	f002 ffbd 	bl	80040d0 <HAL_RCCEx_PeriphCLKConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800115c:	f000 f8d4 	bl	8001308 <Error_Handler>
  }
}
 8001160:	bf00      	nop
 8001162:	3758      	adds	r7, #88	; 0x58
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <MX_I2C1_Init+0x74>)
 800116e:	4a1c      	ldr	r2, [pc, #112]	; (80011e0 <MX_I2C1_Init+0x78>)
 8001170:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_I2C1_Init+0x74>)
 8001174:	f240 220b 	movw	r2, #523	; 0x20b
 8001178:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 196;
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <MX_I2C1_Init+0x74>)
 800117c:	22c4      	movs	r2, #196	; 0xc4
 800117e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001180:	4b16      	ldr	r3, [pc, #88]	; (80011dc <MX_I2C1_Init+0x74>)
 8001182:	2201      	movs	r2, #1
 8001184:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <MX_I2C1_Init+0x74>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <MX_I2C1_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_I2C1_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001198:	4b10      	ldr	r3, [pc, #64]	; (80011dc <MX_I2C1_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_I2C1_Init+0x74>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011a4:	480d      	ldr	r0, [pc, #52]	; (80011dc <MX_I2C1_Init+0x74>)
 80011a6:	f000 fdcd 	bl	8001d44 <HAL_I2C_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011b0:	f000 f8aa 	bl	8001308 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011b4:	2100      	movs	r1, #0
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <MX_I2C1_Init+0x74>)
 80011b8:	f001 fc5e 	bl	8002a78 <HAL_I2CEx_ConfigAnalogFilter>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80011c2:	f000 f8a1 	bl	8001308 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011c6:	2100      	movs	r1, #0
 80011c8:	4804      	ldr	r0, [pc, #16]	; (80011dc <MX_I2C1_Init+0x74>)
 80011ca:	f001 fca0 	bl	8002b0e <HAL_I2CEx_ConfigDigitalFilter>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80011d4:	f000 f898 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000200 	.word	0x20000200
 80011e0:	40005400 	.word	0x40005400

080011e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_USART2_UART_Init+0x58>)
 80011ea:	4a15      	ldr	r2, [pc, #84]	; (8001240 <MX_USART2_UART_Init+0x5c>)
 80011ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <MX_USART2_UART_Init+0x58>)
 80011f0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80011f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_USART2_UART_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_USART2_UART_Init+0x58>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_USART2_UART_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_USART2_UART_Init+0x58>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <MX_USART2_UART_Init+0x58>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_USART2_UART_Init+0x58>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <MX_USART2_UART_Init+0x58>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_USART2_UART_Init+0x58>)
 8001222:	2200      	movs	r2, #0
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_USART2_UART_Init+0x58>)
 8001228:	f003 f878 	bl	800431c <HAL_UART_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001232:	f000 f869 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000254 	.word	0x20000254
 8001240:	40004400 	.word	0x40004400

08001244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800125a:	4b29      	ldr	r3, [pc, #164]	; (8001300 <MX_GPIO_Init+0xbc>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	4a28      	ldr	r2, [pc, #160]	; (8001300 <MX_GPIO_Init+0xbc>)
 8001260:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001264:	6153      	str	r3, [r2, #20]
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <MX_GPIO_Init+0xbc>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	4b23      	ldr	r3, [pc, #140]	; (8001300 <MX_GPIO_Init+0xbc>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	4a22      	ldr	r2, [pc, #136]	; (8001300 <MX_GPIO_Init+0xbc>)
 8001278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127c:	6153      	str	r3, [r2, #20]
 800127e:	4b20      	ldr	r3, [pc, #128]	; (8001300 <MX_GPIO_Init+0xbc>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <MX_GPIO_Init+0xbc>)
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	4a1c      	ldr	r2, [pc, #112]	; (8001300 <MX_GPIO_Init+0xbc>)
 8001290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001294:	6153      	str	r3, [r2, #20]
 8001296:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <MX_GPIO_Init+0xbc>)
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L_RED_Pin|L_GREEN_Pin|R_GREEN_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	f640 010a 	movw	r1, #2058	; 0x80a
 80012a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ac:	f000 fd32 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R_RED_GPIO_Port, R_RED_Pin, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2120      	movs	r1, #32
 80012b4:	4813      	ldr	r0, [pc, #76]	; (8001304 <MX_GPIO_Init+0xc0>)
 80012b6:	f000 fd2d 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L_RED_Pin L_GREEN_Pin R_GREEN_Pin */
  GPIO_InitStruct.Pin = L_RED_Pin|L_GREEN_Pin|R_GREEN_Pin;
 80012ba:	f640 030a 	movw	r3, #2058	; 0x80a
 80012be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	4619      	mov	r1, r3
 80012d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d6:	f000 fbab 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : R_RED_Pin */
  GPIO_InitStruct.Pin = R_RED_Pin;
 80012da:	2320      	movs	r3, #32
 80012dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012de:	2301      	movs	r3, #1
 80012e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(R_RED_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	4619      	mov	r1, r3
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_GPIO_Init+0xc0>)
 80012f2:	f000 fb9d 	bl	8001a30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012f6:	bf00      	nop
 80012f8:	3720      	adds	r7, #32
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000
 8001304:	48000400 	.word	0x48000400

08001308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800130c:	b672      	cpsid	i
}
 800130e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001310:	e7fe      	b.n	8001310 <Error_Handler+0x8>
	...

08001314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_MspInit+0x44>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <HAL_MspInit+0x44>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6193      	str	r3, [r2, #24]
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <HAL_MspInit+0x44>)
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_MspInit+0x44>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	4a08      	ldr	r2, [pc, #32]	; (8001358 <HAL_MspInit+0x44>)
 8001338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800133c:	61d3      	str	r3, [r2, #28]
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_MspInit+0x44>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000

0800135c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a1f      	ldr	r2, [pc, #124]	; (80013f8 <HAL_I2C_MspInit+0x9c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d137      	bne.n	80013ee <HAL_I2C_MspInit+0x92>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <HAL_I2C_MspInit+0xa0>)
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	4a1e      	ldr	r2, [pc, #120]	; (80013fc <HAL_I2C_MspInit+0xa0>)
 8001384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001388:	6153      	str	r3, [r2, #20]
 800138a:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <HAL_I2C_MspInit+0xa0>)
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001396:	23c0      	movs	r3, #192	; 0xc0
 8001398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139a:	2312      	movs	r3, #18
 800139c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800139e:	2301      	movs	r3, #1
 80013a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a2:	2303      	movs	r3, #3
 80013a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013a6:	2304      	movs	r3, #4
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	4813      	ldr	r0, [pc, #76]	; (8001400 <HAL_I2C_MspInit+0xa4>)
 80013b2:	f000 fb3d 	bl	8001a30 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 80013b6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80013ba:	f001 fbf5 	bl	8002ba8 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 80013be:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80013c2:	f001 fbf1 	bl	8002ba8 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <HAL_I2C_MspInit+0xa0>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	4a0c      	ldr	r2, [pc, #48]	; (80013fc <HAL_I2C_MspInit+0xa0>)
 80013cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013d0:	61d3      	str	r3, [r2, #28]
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_I2C_MspInit+0xa0>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	201f      	movs	r0, #31
 80013e4:	f000 faed 	bl	80019c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80013e8:	201f      	movs	r0, #31
 80013ea:	f000 fb06 	bl	80019fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013ee:	bf00      	nop
 80013f0:	3728      	adds	r7, #40	; 0x28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40005400 	.word	0x40005400
 80013fc:	40021000 	.word	0x40021000
 8001400:	48000400 	.word	0x48000400

08001404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a18      	ldr	r2, [pc, #96]	; (8001484 <HAL_UART_MspInit+0x80>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d129      	bne.n	800147a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001426:	4b18      	ldr	r3, [pc, #96]	; (8001488 <HAL_UART_MspInit+0x84>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	4a17      	ldr	r2, [pc, #92]	; (8001488 <HAL_UART_MspInit+0x84>)
 800142c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001430:	61d3      	str	r3, [r2, #28]
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HAL_UART_MspInit+0x84>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_UART_MspInit+0x84>)
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	4a11      	ldr	r2, [pc, #68]	; (8001488 <HAL_UART_MspInit+0x84>)
 8001444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001448:	6153      	str	r3, [r2, #20]
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_UART_MspInit+0x84>)
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001456:	f248 0304 	movw	r3, #32772	; 0x8004
 800145a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001468:	2307      	movs	r3, #7
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	4619      	mov	r1, r3
 8001472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001476:	f000 fadb 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800147a:	bf00      	nop
 800147c:	3728      	adds	r7, #40	; 0x28
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40004400 	.word	0x40004400
 8001488:	40021000 	.word	0x40021000

0800148c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <NMI_Handler+0x4>

08001492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <HardFault_Handler+0x4>

08001498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <MemManage_Handler+0x4>

0800149e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <BusFault_Handler+0x4>

080014a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <UsageFault_Handler+0x4>

080014aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d8:	f000 f954 	bl	8001784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}

080014e0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <I2C1_EV_IRQHandler+0x10>)
 80014e6:	f000 fff4 	bl	80024d2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000200 	.word	0x20000200

080014f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return 1;
 80014f8:	2301      	movs	r3, #1
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <_kill>:

int _kill(int pid, int sig)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800150e:	f003 fb29 	bl	8004b64 <__errno>
 8001512:	4603      	mov	r3, r0
 8001514:	2216      	movs	r2, #22
 8001516:	601a      	str	r2, [r3, #0]
  return -1;
 8001518:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <_exit>:

void _exit (int status)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800152c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ffe7 	bl	8001504 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001536:	e7fe      	b.n	8001536 <_exit+0x12>

08001538 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	e00a      	b.n	8001560 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800154a:	f3af 8000 	nop.w
 800154e:	4601      	mov	r1, r0
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	1c5a      	adds	r2, r3, #1
 8001554:	60ba      	str	r2, [r7, #8]
 8001556:	b2ca      	uxtb	r2, r1
 8001558:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	3301      	adds	r3, #1
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	429a      	cmp	r2, r3
 8001566:	dbf0      	blt.n	800154a <_read+0x12>
  }

  return len;
 8001568:	687b      	ldr	r3, [r7, #4]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	e009      	b.n	8001598 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	1c5a      	adds	r2, r3, #1
 8001588:	60ba      	str	r2, [r7, #8]
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	3301      	adds	r3, #1
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	429a      	cmp	r2, r3
 800159e:	dbf1      	blt.n	8001584 <_write+0x12>
  }
  return len;
 80015a0:	687b      	ldr	r3, [r7, #4]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <_close>:

int _close(int file)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015d2:	605a      	str	r2, [r3, #4]
  return 0;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <_isatty>:

int _isatty(int file)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015ea:	2301      	movs	r3, #1
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800161c:	4a14      	ldr	r2, [pc, #80]	; (8001670 <_sbrk+0x5c>)
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <_sbrk+0x60>)
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001628:	4b13      	ldr	r3, [pc, #76]	; (8001678 <_sbrk+0x64>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d102      	bne.n	8001636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <_sbrk+0x64>)
 8001632:	4a12      	ldr	r2, [pc, #72]	; (800167c <_sbrk+0x68>)
 8001634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <_sbrk+0x64>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	429a      	cmp	r2, r3
 8001642:	d207      	bcs.n	8001654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001644:	f003 fa8e 	bl	8004b64 <__errno>
 8001648:	4603      	mov	r3, r0
 800164a:	220c      	movs	r2, #12
 800164c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800164e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001652:	e009      	b.n	8001668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_sbrk+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800165a:	4b07      	ldr	r3, [pc, #28]	; (8001678 <_sbrk+0x64>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	4a05      	ldr	r2, [pc, #20]	; (8001678 <_sbrk+0x64>)
 8001664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001666:	68fb      	ldr	r3, [r7, #12]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20003000 	.word	0x20003000
 8001674:	00000400 	.word	0x00000400
 8001678:	20000364 	.word	0x20000364
 800167c:	20000380 	.word	0x20000380

08001680 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <SystemInit+0x20>)
 8001686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800168a:	4a05      	ldr	r2, [pc, #20]	; (80016a0 <SystemInit+0x20>)
 800168c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016dc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80016a8:	f7ff ffea 	bl	8001680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016ac:	480c      	ldr	r0, [pc, #48]	; (80016e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80016ae:	490d      	ldr	r1, [pc, #52]	; (80016e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016b0:	4a0d      	ldr	r2, [pc, #52]	; (80016e8 <LoopForever+0xe>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b4:	e002      	b.n	80016bc <LoopCopyDataInit>

080016b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ba:	3304      	adds	r3, #4

080016bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c0:	d3f9      	bcc.n	80016b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c2:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80016c4:	4c0a      	ldr	r4, [pc, #40]	; (80016f0 <LoopForever+0x16>)
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c8:	e001      	b.n	80016ce <LoopFillZerobss>

080016ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016cc:	3204      	adds	r2, #4

080016ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d0:	d3fb      	bcc.n	80016ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016d2:	f003 fa4d 	bl	8004b70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016d6:	f7ff fc8b 	bl	8000ff0 <main>

080016da <LoopForever>:

LoopForever:
    b LoopForever
 80016da:	e7fe      	b.n	80016da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016dc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80016e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80016e8:	08007e0c 	.word	0x08007e0c
  ldr r2, =_sbss
 80016ec:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80016f0:	2000037c 	.word	0x2000037c

080016f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016f4:	e7fe      	b.n	80016f4 <ADC1_2_IRQHandler>
	...

080016f8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_Init+0x28>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a07      	ldr	r2, [pc, #28]	; (8001720 <HAL_Init+0x28>)
 8001702:	f043 0310 	orr.w	r3, r3, #16
 8001706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001708:	2003      	movs	r0, #3
 800170a:	f000 f94f 	bl	80019ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170e:	2000      	movs	r0, #0
 8001710:	f000 f808 	bl	8001724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001714:	f7ff fdfe 	bl	8001314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40022000 	.word	0x40022000

08001724 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_InitTick+0x54>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_InitTick+0x58>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173a:	fbb3 f3f1 	udiv	r3, r3, r1
 800173e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f000 f967 	bl	8001a16 <HAL_SYSTICK_Config>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e00e      	b.n	8001770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b0f      	cmp	r3, #15
 8001756:	d80a      	bhi.n	800176e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001758:	2200      	movs	r2, #0
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001760:	f000 f92f 	bl	80019c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001764:	4a06      	ldr	r2, [pc, #24]	; (8001780 <HAL_InitTick+0x5c>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000008 	.word	0x20000008
 800177c:	20000010 	.word	0x20000010
 8001780:	2000000c 	.word	0x2000000c

08001784 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000010 	.word	0x20000010
 80017a8:	20000368 	.word	0x20000368

080017ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000368 	.word	0x20000368

080017c4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017cc:	f7ff ffee 	bl	80017ac <HAL_GetTick>
 80017d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017dc:	d005      	beq.n	80017ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_Delay+0x44>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80017ea:	bf00      	nop
 80017ec:	f7ff ffde 	bl	80017ac <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d8f7      	bhi.n	80017ec <HAL_Delay+0x28>
  {
  }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000010 	.word	0x20000010

0800180c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001828:	4013      	ands	r3, r2
 800182a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800183c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183e:	4a04      	ldr	r2, [pc, #16]	; (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	60d3      	str	r3, [r2, #12]
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <__NVIC_GetPriorityGrouping+0x18>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	f003 0307 	and.w	r3, r3, #7
}
 8001862:	4618      	mov	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	2b00      	cmp	r3, #0
 8001880:	db0b      	blt.n	800189a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	f003 021f 	and.w	r2, r3, #31
 8001888:	4907      	ldr	r1, [pc, #28]	; (80018a8 <__NVIC_EnableIRQ+0x38>)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	095b      	lsrs	r3, r3, #5
 8001890:	2001      	movs	r0, #1
 8001892:	fa00 f202 	lsl.w	r2, r0, r2
 8001896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000e100 	.word	0xe000e100

080018ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	6039      	str	r1, [r7, #0]
 80018b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	db0a      	blt.n	80018d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	490c      	ldr	r1, [pc, #48]	; (80018f8 <__NVIC_SetPriority+0x4c>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	0112      	lsls	r2, r2, #4
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	440b      	add	r3, r1
 80018d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d4:	e00a      	b.n	80018ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4908      	ldr	r1, [pc, #32]	; (80018fc <__NVIC_SetPriority+0x50>)
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	3b04      	subs	r3, #4
 80018e4:	0112      	lsls	r2, r2, #4
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	440b      	add	r3, r1
 80018ea:	761a      	strb	r2, [r3, #24]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000e100 	.word	0xe000e100
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	; 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f1c3 0307 	rsb	r3, r3, #7
 800191a:	2b04      	cmp	r3, #4
 800191c:	bf28      	it	cs
 800191e:	2304      	movcs	r3, #4
 8001920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3304      	adds	r3, #4
 8001926:	2b06      	cmp	r3, #6
 8001928:	d902      	bls.n	8001930 <NVIC_EncodePriority+0x30>
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3b03      	subs	r3, #3
 800192e:	e000      	b.n	8001932 <NVIC_EncodePriority+0x32>
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	401a      	ands	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001948:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
 8001952:	43d9      	mvns	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	4313      	orrs	r3, r2
         );
}
 800195a:	4618      	mov	r0, r3
 800195c:	3724      	adds	r7, #36	; 0x24
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001978:	d301      	bcc.n	800197e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197a:	2301      	movs	r3, #1
 800197c:	e00f      	b.n	800199e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <SysTick_Config+0x40>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001986:	210f      	movs	r1, #15
 8001988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800198c:	f7ff ff8e 	bl	80018ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <SysTick_Config+0x40>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001996:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <SysTick_Config+0x40>)
 8001998:	2207      	movs	r2, #7
 800199a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	e000e010 	.word	0xe000e010

080019ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ff29 	bl	800180c <__NVIC_SetPriorityGrouping>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
 80019ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d4:	f7ff ff3e 	bl	8001854 <__NVIC_GetPriorityGrouping>
 80019d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68b9      	ldr	r1, [r7, #8]
 80019de:	6978      	ldr	r0, [r7, #20]
 80019e0:	f7ff ff8e 	bl	8001900 <NVIC_EncodePriority>
 80019e4:	4602      	mov	r2, r0
 80019e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff5d 	bl	80018ac <__NVIC_SetPriority>
}
 80019f2:	bf00      	nop
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4603      	mov	r3, r0
 8001a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ff31 	bl	8001870 <__NVIC_EnableIRQ>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ffa2 	bl	8001968 <SysTick_Config>
 8001a24:	4603      	mov	r3, r0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a3e:	e14e      	b.n	8001cde <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	2101      	movs	r1, #1
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 8140 	beq.w	8001cd8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d005      	beq.n	8001a70 <HAL_GPIO_Init+0x40>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d130      	bne.n	8001ad2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	091b      	lsrs	r3, r3, #4
 8001abc:	f003 0201 	and.w	r2, r3, #1
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d017      	beq.n	8001b0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	2203      	movs	r2, #3
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d123      	bne.n	8001b62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	08da      	lsrs	r2, r3, #3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3208      	adds	r2, #8
 8001b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	220f      	movs	r2, #15
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	691a      	ldr	r2, [r3, #16]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	08da      	lsrs	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3208      	adds	r2, #8
 8001b5c:	6939      	ldr	r1, [r7, #16]
 8001b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 0203 	and.w	r2, r3, #3
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 809a 	beq.w	8001cd8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba4:	4b55      	ldr	r3, [pc, #340]	; (8001cfc <HAL_GPIO_Init+0x2cc>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	4a54      	ldr	r2, [pc, #336]	; (8001cfc <HAL_GPIO_Init+0x2cc>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	6193      	str	r3, [r2, #24]
 8001bb0:	4b52      	ldr	r3, [pc, #328]	; (8001cfc <HAL_GPIO_Init+0x2cc>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bbc:	4a50      	ldr	r2, [pc, #320]	; (8001d00 <HAL_GPIO_Init+0x2d0>)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	089b      	lsrs	r3, r3, #2
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001be6:	d013      	beq.n	8001c10 <HAL_GPIO_Init+0x1e0>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a46      	ldr	r2, [pc, #280]	; (8001d04 <HAL_GPIO_Init+0x2d4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d00d      	beq.n	8001c0c <HAL_GPIO_Init+0x1dc>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a45      	ldr	r2, [pc, #276]	; (8001d08 <HAL_GPIO_Init+0x2d8>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d007      	beq.n	8001c08 <HAL_GPIO_Init+0x1d8>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a44      	ldr	r2, [pc, #272]	; (8001d0c <HAL_GPIO_Init+0x2dc>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d101      	bne.n	8001c04 <HAL_GPIO_Init+0x1d4>
 8001c00:	2303      	movs	r3, #3
 8001c02:	e006      	b.n	8001c12 <HAL_GPIO_Init+0x1e2>
 8001c04:	2305      	movs	r3, #5
 8001c06:	e004      	b.n	8001c12 <HAL_GPIO_Init+0x1e2>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e002      	b.n	8001c12 <HAL_GPIO_Init+0x1e2>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <HAL_GPIO_Init+0x1e2>
 8001c10:	2300      	movs	r3, #0
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	f002 0203 	and.w	r2, r2, #3
 8001c18:	0092      	lsls	r2, r2, #2
 8001c1a:	4093      	lsls	r3, r2
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c22:	4937      	ldr	r1, [pc, #220]	; (8001d00 <HAL_GPIO_Init+0x2d0>)
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	089b      	lsrs	r3, r3, #2
 8001c28:	3302      	adds	r3, #2
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c30:	4b37      	ldr	r3, [pc, #220]	; (8001d10 <HAL_GPIO_Init+0x2e0>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c54:	4a2e      	ldr	r2, [pc, #184]	; (8001d10 <HAL_GPIO_Init+0x2e0>)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <HAL_GPIO_Init+0x2e0>)
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c7e:	4a24      	ldr	r2, [pc, #144]	; (8001d10 <HAL_GPIO_Init+0x2e0>)
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c84:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <HAL_GPIO_Init+0x2e0>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ca8:	4a19      	ldr	r2, [pc, #100]	; (8001d10 <HAL_GPIO_Init+0x2e0>)
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cae:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <HAL_GPIO_Init+0x2e0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001cd2:	4a0f      	ldr	r2, [pc, #60]	; (8001d10 <HAL_GPIO_Init+0x2e0>)
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f47f aea9 	bne.w	8001a40 <HAL_GPIO_Init+0x10>
  }
}
 8001cee:	bf00      	nop
 8001cf0:	bf00      	nop
 8001cf2:	371c      	adds	r7, #28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40010000 	.word	0x40010000
 8001d04:	48000400 	.word	0x48000400
 8001d08:	48000800 	.word	0x48000800
 8001d0c:	48000c00 	.word	0x48000c00
 8001d10:	40010400 	.word	0x40010400

08001d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	807b      	strh	r3, [r7, #2]
 8001d20:	4613      	mov	r3, r2
 8001d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d24:	787b      	ldrb	r3, [r7, #1]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d30:	e002      	b.n	8001d38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d32:	887a      	ldrh	r2, [r7, #2]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e081      	b.n	8001e5a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d106      	bne.n	8001d70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff faf6 	bl	800135c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2224      	movs	r2, #36	; 0x24
 8001d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0201 	bic.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001da4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d107      	bne.n	8001dbe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	e006      	b.n	8001dcc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001dca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d104      	bne.n	8001dde <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ddc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001df0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691a      	ldr	r2, [r3, #16]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69d9      	ldr	r1, [r3, #28]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a1a      	ldr	r2, [r3, #32]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2220      	movs	r2, #32
 8001e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af02      	add	r7, sp, #8
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	4608      	mov	r0, r1
 8001e6e:	4611      	mov	r1, r2
 8001e70:	461a      	mov	r2, r3
 8001e72:	4603      	mov	r3, r0
 8001e74:	817b      	strh	r3, [r7, #10]
 8001e76:	460b      	mov	r3, r1
 8001e78:	813b      	strh	r3, [r7, #8]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b20      	cmp	r3, #32
 8001e88:	f040 80f9 	bne.w	800207e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <HAL_I2C_Mem_Write+0x34>
 8001e92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d105      	bne.n	8001ea4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0ed      	b.n	8002080 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_I2C_Mem_Write+0x4e>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e0e6      	b.n	8002080 <HAL_I2C_Mem_Write+0x21c>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001eba:	f7ff fc77 	bl	80017ac <HAL_GetTick>
 8001ebe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	2319      	movs	r3, #25
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 fbe7 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0d1      	b.n	8002080 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2221      	movs	r2, #33	; 0x21
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2240      	movs	r2, #64	; 0x40
 8001ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6a3a      	ldr	r2, [r7, #32]
 8001ef6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001efc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f04:	88f8      	ldrh	r0, [r7, #6]
 8001f06:	893a      	ldrh	r2, [r7, #8]
 8001f08:	8979      	ldrh	r1, [r7, #10]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	9301      	str	r3, [sp, #4]
 8001f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	4603      	mov	r3, r0
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 faf7 	bl	8002508 <I2C_RequestMemoryWrite>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0a9      	b.n	8002080 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	2bff      	cmp	r3, #255	; 0xff
 8001f34:	d90e      	bls.n	8001f54 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	22ff      	movs	r2, #255	; 0xff
 8001f3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	8979      	ldrh	r1, [r7, #10]
 8001f44:	2300      	movs	r3, #0
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 fd61 	bl	8002a14 <I2C_TransferConfig>
 8001f52:	e00f      	b.n	8001f74 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	8979      	ldrh	r1, [r7, #10]
 8001f66:	2300      	movs	r3, #0
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 fd50 	bl	8002a14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 fbe0 	bl	800273e <I2C_WaitOnTXISFlagUntilTimeout>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e07b      	b.n	8002080 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	781a      	ldrb	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d034      	beq.n	800202c <HAL_I2C_Mem_Write+0x1c8>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d130      	bne.n	800202c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2180      	movs	r1, #128	; 0x80
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 fb63 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e04d      	b.n	8002080 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	2bff      	cmp	r3, #255	; 0xff
 8001fec:	d90e      	bls.n	800200c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	22ff      	movs	r2, #255	; 0xff
 8001ff2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	8979      	ldrh	r1, [r7, #10]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 fd05 	bl	8002a14 <I2C_TransferConfig>
 800200a:	e00f      	b.n	800202c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002010:	b29a      	uxth	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201a:	b2da      	uxtb	r2, r3
 800201c:	8979      	ldrh	r1, [r7, #10]
 800201e:	2300      	movs	r3, #0
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 fcf4 	bl	8002a14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002030:	b29b      	uxth	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d19e      	bne.n	8001f74 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 fbc6 	bl	80027cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e01a      	b.n	8002080 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2220      	movs	r2, #32
 8002050:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6859      	ldr	r1, [r3, #4]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <HAL_I2C_Mem_Write+0x224>)
 800205e:	400b      	ands	r3, r1
 8002060:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2220      	movs	r2, #32
 8002066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	e000      	b.n	8002080 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800207e:	2302      	movs	r3, #2
  }
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	fe00e800 	.word	0xfe00e800

0800208c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af02      	add	r7, sp, #8
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	4608      	mov	r0, r1
 8002096:	4611      	mov	r1, r2
 8002098:	461a      	mov	r2, r3
 800209a:	4603      	mov	r3, r0
 800209c:	817b      	strh	r3, [r7, #10]
 800209e:	460b      	mov	r3, r1
 80020a0:	813b      	strh	r3, [r7, #8]
 80020a2:	4613      	mov	r3, r2
 80020a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b20      	cmp	r3, #32
 80020b0:	f040 80fd 	bne.w	80022ae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d002      	beq.n	80020c0 <HAL_I2C_Mem_Read+0x34>
 80020ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d105      	bne.n	80020cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0f1      	b.n	80022b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_I2C_Mem_Read+0x4e>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e0ea      	b.n	80022b0 <HAL_I2C_Mem_Read+0x224>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020e2:	f7ff fb63 	bl	80017ac <HAL_GetTick>
 80020e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	2319      	movs	r3, #25
 80020ee:	2201      	movs	r2, #1
 80020f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 fad3 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0d5      	b.n	80022b0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2222      	movs	r2, #34	; 0x22
 8002108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2240      	movs	r2, #64	; 0x40
 8002110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a3a      	ldr	r2, [r7, #32]
 800211e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002124:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800212c:	88f8      	ldrh	r0, [r7, #6]
 800212e:	893a      	ldrh	r2, [r7, #8]
 8002130:	8979      	ldrh	r1, [r7, #10]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	9301      	str	r3, [sp, #4]
 8002136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	4603      	mov	r3, r0
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 fa37 	bl	80025b0 <I2C_RequestMemoryRead>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0ad      	b.n	80022b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002158:	b29b      	uxth	r3, r3
 800215a:	2bff      	cmp	r3, #255	; 0xff
 800215c:	d90e      	bls.n	800217c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	22ff      	movs	r2, #255	; 0xff
 8002162:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002168:	b2da      	uxtb	r2, r3
 800216a:	8979      	ldrh	r1, [r7, #10]
 800216c:	4b52      	ldr	r3, [pc, #328]	; (80022b8 <HAL_I2C_Mem_Read+0x22c>)
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 fc4d 	bl	8002a14 <I2C_TransferConfig>
 800217a:	e00f      	b.n	800219c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002180:	b29a      	uxth	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218a:	b2da      	uxtb	r2, r3
 800218c:	8979      	ldrh	r1, [r7, #10]
 800218e:	4b4a      	ldr	r3, [pc, #296]	; (80022b8 <HAL_I2C_Mem_Read+0x22c>)
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 fc3c 	bl	8002a14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a2:	2200      	movs	r2, #0
 80021a4:	2104      	movs	r1, #4
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 fa7a 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e07c      	b.n	80022b0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021de:	b29b      	uxth	r3, r3
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d034      	beq.n	800225c <HAL_I2C_Mem_Read+0x1d0>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d130      	bne.n	800225c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002200:	2200      	movs	r2, #0
 8002202:	2180      	movs	r1, #128	; 0x80
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 fa4b 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e04d      	b.n	80022b0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002218:	b29b      	uxth	r3, r3
 800221a:	2bff      	cmp	r3, #255	; 0xff
 800221c:	d90e      	bls.n	800223c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	22ff      	movs	r2, #255	; 0xff
 8002222:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002228:	b2da      	uxtb	r2, r3
 800222a:	8979      	ldrh	r1, [r7, #10]
 800222c:	2300      	movs	r3, #0
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 fbed 	bl	8002a14 <I2C_TransferConfig>
 800223a:	e00f      	b.n	800225c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224a:	b2da      	uxtb	r2, r3
 800224c:	8979      	ldrh	r1, [r7, #10]
 800224e:	2300      	movs	r3, #0
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 fbdc 	bl	8002a14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d19a      	bne.n	800219c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 faae 	bl	80027cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e01a      	b.n	80022b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2220      	movs	r2, #32
 8002280:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6859      	ldr	r1, [r3, #4]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_I2C_Mem_Read+0x230>)
 800228e:	400b      	ands	r3, r1
 8002290:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2220      	movs	r2, #32
 8002296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	e000      	b.n	80022b0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80022ae:	2302      	movs	r3, #2
  }
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	80002400 	.word	0x80002400
 80022bc:	fe00e800 	.word	0xfe00e800

080022c0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af02      	add	r7, sp, #8
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	460b      	mov	r3, r1
 80022ce:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b20      	cmp	r3, #32
 80022de:	f040 80f3 	bne.w	80024c8 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022f0:	d101      	bne.n	80022f6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80022f2:	2302      	movs	r3, #2
 80022f4:	e0e9      	b.n	80024ca <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_I2C_IsDeviceReady+0x44>
 8002300:	2302      	movs	r3, #2
 8002302:	e0e2      	b.n	80024ca <HAL_I2C_IsDeviceReady+0x20a>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2224      	movs	r2, #36	; 0x24
 8002310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d107      	bne.n	8002332 <HAL_I2C_IsDeviceReady+0x72>
 8002322:	897b      	ldrh	r3, [r7, #10]
 8002324:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002328:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800232c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002330:	e006      	b.n	8002340 <HAL_I2C_IsDeviceReady+0x80>
 8002332:	897b      	ldrh	r3, [r7, #10]
 8002334:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002338:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800233c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002346:	f7ff fa31 	bl	80017ac <HAL_GetTick>
 800234a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f003 0320 	and.w	r3, r3, #32
 8002356:	2b20      	cmp	r3, #32
 8002358:	bf0c      	ite	eq
 800235a:	2301      	moveq	r3, #1
 800235c:	2300      	movne	r3, #0
 800235e:	b2db      	uxtb	r3, r3
 8002360:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f003 0310 	and.w	r3, r3, #16
 800236c:	2b10      	cmp	r3, #16
 800236e:	bf0c      	ite	eq
 8002370:	2301      	moveq	r3, #1
 8002372:	2300      	movne	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002378:	e034      	b.n	80023e4 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002380:	d01a      	beq.n	80023b8 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002382:	f7ff fa13 	bl	80017ac <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d302      	bcc.n	8002398 <HAL_I2C_IsDeviceReady+0xd8>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10f      	bne.n	80023b8 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2220      	movs	r2, #32
 800239c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a4:	f043 0220 	orr.w	r2, r3, #32
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e088      	b.n	80024ca <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	f003 0320 	and.w	r3, r3, #32
 80023c2:	2b20      	cmp	r3, #32
 80023c4:	bf0c      	ite	eq
 80023c6:	2301      	moveq	r3, #1
 80023c8:	2300      	movne	r3, #0
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	2b10      	cmp	r3, #16
 80023da:	bf0c      	ite	eq
 80023dc:	2301      	moveq	r3, #1
 80023de:	2300      	movne	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80023e4:	7ffb      	ldrb	r3, [r7, #31]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d102      	bne.n	80023f0 <HAL_I2C_IsDeviceReady+0x130>
 80023ea:	7fbb      	ldrb	r3, [r7, #30]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0c4      	beq.n	800237a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f003 0310 	and.w	r3, r3, #16
 80023fa:	2b10      	cmp	r3, #16
 80023fc:	d01a      	beq.n	8002434 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2200      	movs	r2, #0
 8002406:	2120      	movs	r1, #32
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f949 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e058      	b.n	80024ca <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2220      	movs	r2, #32
 800241e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	e04a      	b.n	80024ca <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	2200      	movs	r2, #0
 800243c:	2120      	movs	r1, #32
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 f92e 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e03d      	b.n	80024ca <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2210      	movs	r2, #16
 8002454:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2220      	movs	r2, #32
 800245c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	429a      	cmp	r2, r3
 8002464:	d118      	bne.n	8002498 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002474:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	2200      	movs	r2, #0
 800247e:	2120      	movs	r1, #32
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 f90d 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e01c      	b.n	80024ca <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2220      	movs	r2, #32
 8002496:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	3301      	adds	r3, #1
 800249c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	f63f af39 	bhi.w	800231a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b4:	f043 0220 	orr.w	r2, r3, #32
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e000      	b.n	80024ca <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80024c8:	2302      	movs	r3, #2
  }
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3720      	adds	r7, #32
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	68f9      	ldr	r1, [r7, #12]
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	4798      	blx	r3
  }
}
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af02      	add	r7, sp, #8
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	4608      	mov	r0, r1
 8002512:	4611      	mov	r1, r2
 8002514:	461a      	mov	r2, r3
 8002516:	4603      	mov	r3, r0
 8002518:	817b      	strh	r3, [r7, #10]
 800251a:	460b      	mov	r3, r1
 800251c:	813b      	strh	r3, [r7, #8]
 800251e:	4613      	mov	r3, r2
 8002520:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002522:	88fb      	ldrh	r3, [r7, #6]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	8979      	ldrh	r1, [r7, #10]
 8002528:	4b20      	ldr	r3, [pc, #128]	; (80025ac <I2C_RequestMemoryWrite+0xa4>)
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 fa6f 	bl	8002a14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002536:	69fa      	ldr	r2, [r7, #28]
 8002538:	69b9      	ldr	r1, [r7, #24]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f8ff 	bl	800273e <I2C_WaitOnTXISFlagUntilTimeout>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e02c      	b.n	80025a4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800254a:	88fb      	ldrh	r3, [r7, #6]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d105      	bne.n	800255c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002550:	893b      	ldrh	r3, [r7, #8]
 8002552:	b2da      	uxtb	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	629a      	str	r2, [r3, #40]	; 0x28
 800255a:	e015      	b.n	8002588 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800255c:	893b      	ldrh	r3, [r7, #8]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	b29b      	uxth	r3, r3
 8002562:	b2da      	uxtb	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	69b9      	ldr	r1, [r7, #24]
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 f8e5 	bl	800273e <I2C_WaitOnTXISFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e012      	b.n	80025a4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800257e:	893b      	ldrh	r3, [r7, #8]
 8002580:	b2da      	uxtb	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	2200      	movs	r2, #0
 8002590:	2180      	movs	r1, #128	; 0x80
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f884 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	80002000 	.word	0x80002000

080025b0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	4608      	mov	r0, r1
 80025ba:	4611      	mov	r1, r2
 80025bc:	461a      	mov	r2, r3
 80025be:	4603      	mov	r3, r0
 80025c0:	817b      	strh	r3, [r7, #10]
 80025c2:	460b      	mov	r3, r1
 80025c4:	813b      	strh	r3, [r7, #8]
 80025c6:	4613      	mov	r3, r2
 80025c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	8979      	ldrh	r1, [r7, #10]
 80025d0:	4b20      	ldr	r3, [pc, #128]	; (8002654 <I2C_RequestMemoryRead+0xa4>)
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	2300      	movs	r3, #0
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 fa1c 	bl	8002a14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	69b9      	ldr	r1, [r7, #24]
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 f8ac 	bl	800273e <I2C_WaitOnTXISFlagUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e02c      	b.n	800264a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025f0:	88fb      	ldrh	r3, [r7, #6]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d105      	bne.n	8002602 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025f6:	893b      	ldrh	r3, [r7, #8]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002600:	e015      	b.n	800262e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002602:	893b      	ldrh	r3, [r7, #8]
 8002604:	0a1b      	lsrs	r3, r3, #8
 8002606:	b29b      	uxth	r3, r3
 8002608:	b2da      	uxtb	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	69b9      	ldr	r1, [r7, #24]
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f892 	bl	800273e <I2C_WaitOnTXISFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e012      	b.n	800264a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002624:	893b      	ldrh	r3, [r7, #8]
 8002626:	b2da      	uxtb	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	2200      	movs	r2, #0
 8002636:	2140      	movs	r1, #64	; 0x40
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 f831 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	80002000 	.word	0x80002000

08002658 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b02      	cmp	r3, #2
 800266c:	d103      	bne.n	8002676 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2200      	movs	r2, #0
 8002674:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d007      	beq.n	8002694 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	619a      	str	r2, [r3, #24]
  }
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	4613      	mov	r3, r2
 80026ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026b0:	e031      	b.n	8002716 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026b8:	d02d      	beq.n	8002716 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ba:	f7ff f877 	bl	80017ac <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d302      	bcc.n	80026d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d122      	bne.n	8002716 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699a      	ldr	r2, [r3, #24]
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	4013      	ands	r3, r2
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	429a      	cmp	r2, r3
 80026de:	bf0c      	ite	eq
 80026e0:	2301      	moveq	r3, #1
 80026e2:	2300      	movne	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d113      	bne.n	8002716 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f043 0220 	orr.w	r2, r3, #32
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e00f      	b.n	8002736 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699a      	ldr	r2, [r3, #24]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4013      	ands	r3, r2
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	429a      	cmp	r2, r3
 8002724:	bf0c      	ite	eq
 8002726:	2301      	moveq	r3, #1
 8002728:	2300      	movne	r3, #0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	429a      	cmp	r2, r3
 8002732:	d0be      	beq.n	80026b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af00      	add	r7, sp, #0
 8002744:	60f8      	str	r0, [r7, #12]
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800274a:	e033      	b.n	80027b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	68b9      	ldr	r1, [r7, #8]
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 f87f 	bl	8002854 <I2C_IsErrorOccurred>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e031      	b.n	80027c4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002766:	d025      	beq.n	80027b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002768:	f7ff f820 	bl	80017ac <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	429a      	cmp	r2, r3
 8002776:	d302      	bcc.n	800277e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d11a      	bne.n	80027b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b02      	cmp	r3, #2
 800278a:	d013      	beq.n	80027b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002790:	f043 0220 	orr.w	r2, r3, #32
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2220      	movs	r2, #32
 800279c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e007      	b.n	80027c4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d1c4      	bne.n	800274c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027d8:	e02f      	b.n	800283a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f838 	bl	8002854 <I2C_IsErrorOccurred>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e02d      	b.n	800284a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ee:	f7fe ffdd 	bl	80017ac <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d302      	bcc.n	8002804 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d11a      	bne.n	800283a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	2b20      	cmp	r3, #32
 8002810:	d013      	beq.n	800283a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	f043 0220 	orr.w	r2, r3, #32
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e007      	b.n	800284a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b20      	cmp	r3, #32
 8002846:	d1c8      	bne.n	80027da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	; 0x28
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	2b00      	cmp	r3, #0
 800287e:	d068      	beq.n	8002952 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2210      	movs	r2, #16
 8002886:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002888:	e049      	b.n	800291e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002890:	d045      	beq.n	800291e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002892:	f7fe ff8b 	bl	80017ac <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d302      	bcc.n	80028a8 <I2C_IsErrorOccurred+0x54>
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d13a      	bne.n	800291e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028ca:	d121      	bne.n	8002910 <I2C_IsErrorOccurred+0xbc>
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028d2:	d01d      	beq.n	8002910 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80028d4:	7cfb      	ldrb	r3, [r7, #19]
 80028d6:	2b20      	cmp	r3, #32
 80028d8:	d01a      	beq.n	8002910 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028e8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80028ea:	f7fe ff5f 	bl	80017ac <HAL_GetTick>
 80028ee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028f0:	e00e      	b.n	8002910 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80028f2:	f7fe ff5b 	bl	80017ac <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b19      	cmp	r3, #25
 80028fe:	d907      	bls.n	8002910 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	f043 0320 	orr.w	r3, r3, #32
 8002906:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800290e:	e006      	b.n	800291e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f003 0320 	and.w	r3, r3, #32
 800291a:	2b20      	cmp	r3, #32
 800291c:	d1e9      	bne.n	80028f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	f003 0320 	and.w	r3, r3, #32
 8002928:	2b20      	cmp	r3, #32
 800292a:	d003      	beq.n	8002934 <I2C_IsErrorOccurred+0xe0>
 800292c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0aa      	beq.n	800288a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002938:	2b00      	cmp	r3, #0
 800293a:	d103      	bne.n	8002944 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2220      	movs	r2, #32
 8002942:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	f043 0304 	orr.w	r3, r3, #4
 800294a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00b      	beq.n	800297c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002974:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00b      	beq.n	800299e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	f043 0308 	orr.w	r3, r3, #8
 800298c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002996:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00b      	beq.n	80029c0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	f043 0302 	orr.w	r3, r3, #2
 80029ae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80029c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d01c      	beq.n	8002a02 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f7ff fe45 	bl	8002658 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6859      	ldr	r1, [r3, #4]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <I2C_IsErrorOccurred+0x1bc>)
 80029da:	400b      	ands	r3, r1
 80029dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	431a      	orrs	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002a02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3728      	adds	r7, #40	; 0x28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	fe00e800 	.word	0xfe00e800

08002a14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	607b      	str	r3, [r7, #4]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	817b      	strh	r3, [r7, #10]
 8002a22:	4613      	mov	r3, r2
 8002a24:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a26:	897b      	ldrh	r3, [r7, #10]
 8002a28:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a2c:	7a7b      	ldrb	r3, [r7, #9]
 8002a2e:	041b      	lsls	r3, r3, #16
 8002a30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a34:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a42:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	0d5b      	lsrs	r3, r3, #21
 8002a4e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a52:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <I2C_TransferConfig+0x60>)
 8002a54:	430b      	orrs	r3, r1
 8002a56:	43db      	mvns	r3, r3
 8002a58:	ea02 0103 	and.w	r1, r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a66:	bf00      	nop
 8002a68:	371c      	adds	r7, #28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	03ff63ff 	.word	0x03ff63ff

08002a78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b20      	cmp	r3, #32
 8002a8c:	d138      	bne.n	8002b00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e032      	b.n	8002b02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2224      	movs	r2, #36	; 0x24
 8002aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0201 	bic.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002aca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6819      	ldr	r1, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	e000      	b.n	8002b02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b00:	2302      	movs	r3, #2
  }
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b085      	sub	sp, #20
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	d139      	bne.n	8002b98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e033      	b.n	8002b9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2224      	movs	r2, #36	; 0x24
 8002b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0201 	bic.w	r2, r2, #1
 8002b50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	021b      	lsls	r3, r3, #8
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0201 	orr.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	e000      	b.n	8002b9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b98:	2302      	movs	r3, #2
  }
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	4a0a      	ldr	r2, [pc, #40]	; (8002be0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	6193      	str	r3, [r2, #24]
 8002bbc:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4905      	ldr	r1, [pc, #20]	; (8002be4 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	600b      	str	r3, [r1, #0]
}
 8002bd4:	bf00      	nop
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40010000 	.word	0x40010000

08002be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bf8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d102      	bne.n	8002c0e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	f001 b823 	b.w	8003c54 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 817d 	beq.w	8002f1e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c24:	4bbc      	ldr	r3, [pc, #752]	; (8002f18 <HAL_RCC_OscConfig+0x330>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 030c 	and.w	r3, r3, #12
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d00c      	beq.n	8002c4a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c30:	4bb9      	ldr	r3, [pc, #740]	; (8002f18 <HAL_RCC_OscConfig+0x330>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 030c 	and.w	r3, r3, #12
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d15c      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x10e>
 8002c3c:	4bb6      	ldr	r3, [pc, #728]	; (8002f18 <HAL_RCC_OscConfig+0x330>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c48:	d155      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x10e>
 8002c4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c4e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c5e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c62:	fab3 f383 	clz	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	095b      	lsrs	r3, r3, #5
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d102      	bne.n	8002c7c <HAL_RCC_OscConfig+0x94>
 8002c76:	4ba8      	ldr	r3, [pc, #672]	; (8002f18 <HAL_RCC_OscConfig+0x330>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	e015      	b.n	8002ca8 <HAL_RCC_OscConfig+0xc0>
 8002c7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c80:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c84:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002c88:	fa93 f3a3 	rbit	r3, r3
 8002c8c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002c90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c94:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002c98:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002c9c:	fa93 f3a3 	rbit	r3, r3
 8002ca0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002ca4:	4b9c      	ldr	r3, [pc, #624]	; (8002f18 <HAL_RCC_OscConfig+0x330>)
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cac:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002cb0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002cb4:	fa92 f2a2 	rbit	r2, r2
 8002cb8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002cbc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002cc0:	fab2 f282 	clz	r2, r2
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	f042 0220 	orr.w	r2, r2, #32
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	f002 021f 	and.w	r2, r2, #31
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 811f 	beq.w	8002f1c <HAL_RCC_OscConfig+0x334>
 8002cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f040 8116 	bne.w	8002f1c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	f000 bfaf 	b.w	8003c54 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d06:	d106      	bne.n	8002d16 <HAL_RCC_OscConfig+0x12e>
 8002d08:	4b83      	ldr	r3, [pc, #524]	; (8002f18 <HAL_RCC_OscConfig+0x330>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a82      	ldr	r2, [pc, #520]	; (8002f18 <HAL_RCC_OscConfig+0x330>)
 8002d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	e036      	b.n	8002d84 <HAL_RCC_OscConfig+0x19c>
 8002d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x158>
 8002d26:	4b7c      	ldr	r3, [pc, #496]	; (8002f18 <HAL_RCC_OscConfig+0x330>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a7b      	ldr	r2, [pc, #492]	; (8002f18 <HAL_RCC_OscConfig+0x330>)
 8002d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b79      	ldr	r3, [pc, #484]	; (8002f18 <HAL_RCC_OscConfig+0x330>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a78      	ldr	r2, [pc, #480]	; (8002f18 <HAL_RCC_OscConfig+0x330>)
 8002d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e021      	b.n	8002d84 <HAL_RCC_OscConfig+0x19c>
 8002d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x184>
 8002d52:	4b71      	ldr	r3, [pc, #452]	; (8002f18 <HAL_RCC_OscConfig+0x330>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a70      	ldr	r2, [pc, #448]	; (8002f18 <HAL_RCC_OscConfig+0x330>)
 8002d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	4b6e      	ldr	r3, [pc, #440]	; (8002f18 <HAL_RCC_OscConfig+0x330>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a6d      	ldr	r2, [pc, #436]	; (8002f18 <HAL_RCC_OscConfig+0x330>)
 8002d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	e00b      	b.n	8002d84 <HAL_RCC_OscConfig+0x19c>
 8002d6c:	4b6a      	ldr	r3, [pc, #424]	; (8002f18 <HAL_RCC_OscConfig+0x330>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a69      	ldr	r2, [pc, #420]	; (8002f18 <HAL_RCC_OscConfig+0x330>)
 8002d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	4b67      	ldr	r3, [pc, #412]	; (8002f18 <HAL_RCC_OscConfig+0x330>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a66      	ldr	r2, [pc, #408]	; (8002f18 <HAL_RCC_OscConfig+0x330>)
 8002d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d82:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d84:	4b64      	ldr	r3, [pc, #400]	; (8002f18 <HAL_RCC_OscConfig+0x330>)
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	f023 020f 	bic.w	r2, r3, #15
 8002d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	495f      	ldr	r1, [pc, #380]	; (8002f18 <HAL_RCC_OscConfig+0x330>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d059      	beq.n	8002e62 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dae:	f7fe fcfd 	bl	80017ac <HAL_GetTick>
 8002db2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db6:	e00a      	b.n	8002dce <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db8:	f7fe fcf8 	bl	80017ac <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b64      	cmp	r3, #100	; 0x64
 8002dc6:	d902      	bls.n	8002dce <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	f000 bf43 	b.w	8003c54 <HAL_RCC_OscConfig+0x106c>
 8002dce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dd2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002dda:	fa93 f3a3 	rbit	r3, r3
 8002dde:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002de2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d102      	bne.n	8002e00 <HAL_RCC_OscConfig+0x218>
 8002dfa:	4b47      	ldr	r3, [pc, #284]	; (8002f18 <HAL_RCC_OscConfig+0x330>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	e015      	b.n	8002e2c <HAL_RCC_OscConfig+0x244>
 8002e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e04:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e08:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002e14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e18:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002e1c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002e20:	fa93 f3a3 	rbit	r3, r3
 8002e24:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002e28:	4b3b      	ldr	r3, [pc, #236]	; (8002f18 <HAL_RCC_OscConfig+0x330>)
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e30:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002e34:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002e38:	fa92 f2a2 	rbit	r2, r2
 8002e3c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002e40:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002e44:	fab2 f282 	clz	r2, r2
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	f042 0220 	orr.w	r2, r2, #32
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	f002 021f 	and.w	r2, r2, #31
 8002e54:	2101      	movs	r1, #1
 8002e56:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0ab      	beq.n	8002db8 <HAL_RCC_OscConfig+0x1d0>
 8002e60:	e05d      	b.n	8002f1e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e62:	f7fe fca3 	bl	80017ac <HAL_GetTick>
 8002e66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6a:	e00a      	b.n	8002e82 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e6c:	f7fe fc9e 	bl	80017ac <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b64      	cmp	r3, #100	; 0x64
 8002e7a:	d902      	bls.n	8002e82 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	f000 bee9 	b.w	8003c54 <HAL_RCC_OscConfig+0x106c>
 8002e82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e86:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002e96:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e9a:	fab3 f383 	clz	r3, r3
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	095b      	lsrs	r3, r3, #5
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d102      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x2cc>
 8002eae:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <HAL_RCC_OscConfig+0x330>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	e015      	b.n	8002ee0 <HAL_RCC_OscConfig+0x2f8>
 8002eb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eb8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002ec8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ecc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002ed0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002ed4:	fa93 f3a3 	rbit	r3, r3
 8002ed8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002edc:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <HAL_RCC_OscConfig+0x330>)
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ee4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002ee8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002eec:	fa92 f2a2 	rbit	r2, r2
 8002ef0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002ef4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002ef8:	fab2 f282 	clz	r2, r2
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	f042 0220 	orr.w	r2, r2, #32
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	f002 021f 	and.w	r2, r2, #31
 8002f08:	2101      	movs	r1, #1
 8002f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1ab      	bne.n	8002e6c <HAL_RCC_OscConfig+0x284>
 8002f14:	e003      	b.n	8002f1e <HAL_RCC_OscConfig+0x336>
 8002f16:	bf00      	nop
 8002f18:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 817d 	beq.w	800322e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f34:	4ba6      	ldr	r3, [pc, #664]	; (80031d0 <HAL_RCC_OscConfig+0x5e8>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 030c 	and.w	r3, r3, #12
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00b      	beq.n	8002f58 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f40:	4ba3      	ldr	r3, [pc, #652]	; (80031d0 <HAL_RCC_OscConfig+0x5e8>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 030c 	and.w	r3, r3, #12
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d172      	bne.n	8003032 <HAL_RCC_OscConfig+0x44a>
 8002f4c:	4ba0      	ldr	r3, [pc, #640]	; (80031d0 <HAL_RCC_OscConfig+0x5e8>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d16c      	bne.n	8003032 <HAL_RCC_OscConfig+0x44a>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002f62:	fa93 f3a3 	rbit	r3, r3
 8002f66:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002f6a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f6e:	fab3 f383 	clz	r3, r3
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	095b      	lsrs	r3, r3, #5
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d102      	bne.n	8002f88 <HAL_RCC_OscConfig+0x3a0>
 8002f82:	4b93      	ldr	r3, [pc, #588]	; (80031d0 <HAL_RCC_OscConfig+0x5e8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	e013      	b.n	8002fb0 <HAL_RCC_OscConfig+0x3c8>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002f92:	fa93 f3a3 	rbit	r3, r3
 8002f96:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002fa0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fa4:	fa93 f3a3 	rbit	r3, r3
 8002fa8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002fac:	4b88      	ldr	r3, [pc, #544]	; (80031d0 <HAL_RCC_OscConfig+0x5e8>)
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002fb6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002fba:	fa92 f2a2 	rbit	r2, r2
 8002fbe:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002fc2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002fc6:	fab2 f282 	clz	r2, r2
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	f042 0220 	orr.w	r2, r2, #32
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	f002 021f 	and.w	r2, r2, #31
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fdc:	4013      	ands	r3, r2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x410>
 8002fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d002      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	f000 be2e 	b.w	8003c54 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff8:	4b75      	ldr	r3, [pc, #468]	; (80031d0 <HAL_RCC_OscConfig+0x5e8>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003004:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	21f8      	movs	r1, #248	; 0xf8
 800300e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003016:	fa91 f1a1 	rbit	r1, r1
 800301a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800301e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003022:	fab1 f181 	clz	r1, r1
 8003026:	b2c9      	uxtb	r1, r1
 8003028:	408b      	lsls	r3, r1
 800302a:	4969      	ldr	r1, [pc, #420]	; (80031d0 <HAL_RCC_OscConfig+0x5e8>)
 800302c:	4313      	orrs	r3, r2
 800302e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003030:	e0fd      	b.n	800322e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003036:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 8088 	beq.w	8003154 <HAL_RCC_OscConfig+0x56c>
 8003044:	2301      	movs	r3, #1
 8003046:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800304e:	fa93 f3a3 	rbit	r3, r3
 8003052:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003056:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800305a:	fab3 f383 	clz	r3, r3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003064:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	461a      	mov	r2, r3
 800306c:	2301      	movs	r3, #1
 800306e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003070:	f7fe fb9c 	bl	80017ac <HAL_GetTick>
 8003074:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003078:	e00a      	b.n	8003090 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800307a:	f7fe fb97 	bl	80017ac <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d902      	bls.n	8003090 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	f000 bde2 	b.w	8003c54 <HAL_RCC_OscConfig+0x106c>
 8003090:	2302      	movs	r3, #2
 8003092:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003096:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800309a:	fa93 f3a3 	rbit	r3, r3
 800309e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80030a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a6:	fab3 f383 	clz	r3, r3
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	095b      	lsrs	r3, r3, #5
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d102      	bne.n	80030c0 <HAL_RCC_OscConfig+0x4d8>
 80030ba:	4b45      	ldr	r3, [pc, #276]	; (80031d0 <HAL_RCC_OscConfig+0x5e8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	e013      	b.n	80030e8 <HAL_RCC_OscConfig+0x500>
 80030c0:	2302      	movs	r3, #2
 80030c2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80030ca:	fa93 f3a3 	rbit	r3, r3
 80030ce:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80030d2:	2302      	movs	r3, #2
 80030d4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80030d8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80030dc:	fa93 f3a3 	rbit	r3, r3
 80030e0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80030e4:	4b3a      	ldr	r3, [pc, #232]	; (80031d0 <HAL_RCC_OscConfig+0x5e8>)
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	2202      	movs	r2, #2
 80030ea:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80030ee:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80030f2:	fa92 f2a2 	rbit	r2, r2
 80030f6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80030fa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80030fe:	fab2 f282 	clz	r2, r2
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	f042 0220 	orr.w	r2, r2, #32
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	f002 021f 	and.w	r2, r2, #31
 800310e:	2101      	movs	r1, #1
 8003110:	fa01 f202 	lsl.w	r2, r1, r2
 8003114:	4013      	ands	r3, r2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0af      	beq.n	800307a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311a:	4b2d      	ldr	r3, [pc, #180]	; (80031d0 <HAL_RCC_OscConfig+0x5e8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003126:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	21f8      	movs	r1, #248	; 0xf8
 8003130:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003138:	fa91 f1a1 	rbit	r1, r1
 800313c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003140:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003144:	fab1 f181 	clz	r1, r1
 8003148:	b2c9      	uxtb	r1, r1
 800314a:	408b      	lsls	r3, r1
 800314c:	4920      	ldr	r1, [pc, #128]	; (80031d0 <HAL_RCC_OscConfig+0x5e8>)
 800314e:	4313      	orrs	r3, r2
 8003150:	600b      	str	r3, [r1, #0]
 8003152:	e06c      	b.n	800322e <HAL_RCC_OscConfig+0x646>
 8003154:	2301      	movs	r3, #1
 8003156:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003166:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800316a:	fab3 f383 	clz	r3, r3
 800316e:	b2db      	uxtb	r3, r3
 8003170:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003174:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	461a      	mov	r2, r3
 800317c:	2300      	movs	r3, #0
 800317e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003180:	f7fe fb14 	bl	80017ac <HAL_GetTick>
 8003184:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003188:	e00a      	b.n	80031a0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800318a:	f7fe fb0f 	bl	80017ac <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d902      	bls.n	80031a0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	f000 bd5a 	b.w	8003c54 <HAL_RCC_OscConfig+0x106c>
 80031a0:	2302      	movs	r3, #2
 80031a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80031b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b6:	fab3 f383 	clz	r3, r3
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	095b      	lsrs	r3, r3, #5
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d104      	bne.n	80031d4 <HAL_RCC_OscConfig+0x5ec>
 80031ca:	4b01      	ldr	r3, [pc, #4]	; (80031d0 <HAL_RCC_OscConfig+0x5e8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	e015      	b.n	80031fc <HAL_RCC_OscConfig+0x614>
 80031d0:	40021000 	.word	0x40021000
 80031d4:	2302      	movs	r3, #2
 80031d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80031de:	fa93 f3a3 	rbit	r3, r3
 80031e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80031e6:	2302      	movs	r3, #2
 80031e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80031ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80031f0:	fa93 f3a3 	rbit	r3, r3
 80031f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80031f8:	4bc8      	ldr	r3, [pc, #800]	; (800351c <HAL_RCC_OscConfig+0x934>)
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	2202      	movs	r2, #2
 80031fe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003202:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003206:	fa92 f2a2 	rbit	r2, r2
 800320a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800320e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003212:	fab2 f282 	clz	r2, r2
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	f042 0220 	orr.w	r2, r2, #32
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	f002 021f 	and.w	r2, r2, #31
 8003222:	2101      	movs	r1, #1
 8003224:	fa01 f202 	lsl.w	r2, r1, r2
 8003228:	4013      	ands	r3, r2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1ad      	bne.n	800318a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800322e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003232:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 8110 	beq.w	8003464 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003248:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d079      	beq.n	8003348 <HAL_RCC_OscConfig+0x760>
 8003254:	2301      	movs	r3, #1
 8003256:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800325e:	fa93 f3a3 	rbit	r3, r3
 8003262:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003266:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800326a:	fab3 f383 	clz	r3, r3
 800326e:	b2db      	uxtb	r3, r3
 8003270:	461a      	mov	r2, r3
 8003272:	4bab      	ldr	r3, [pc, #684]	; (8003520 <HAL_RCC_OscConfig+0x938>)
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	461a      	mov	r2, r3
 800327a:	2301      	movs	r3, #1
 800327c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327e:	f7fe fa95 	bl	80017ac <HAL_GetTick>
 8003282:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003286:	e00a      	b.n	800329e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003288:	f7fe fa90 	bl	80017ac <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d902      	bls.n	800329e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	f000 bcdb 	b.w	8003c54 <HAL_RCC_OscConfig+0x106c>
 800329e:	2302      	movs	r3, #2
 80032a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80032a8:	fa93 f3a3 	rbit	r3, r3
 80032ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80032b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80032b8:	2202      	movs	r2, #2
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	fa93 f2a3 	rbit	r2, r3
 80032ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80032dc:	2202      	movs	r2, #2
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	fa93 f2a3 	rbit	r2, r3
 80032ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80032f6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f8:	4b88      	ldr	r3, [pc, #544]	; (800351c <HAL_RCC_OscConfig+0x934>)
 80032fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003300:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003304:	2102      	movs	r1, #2
 8003306:	6019      	str	r1, [r3, #0]
 8003308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	fa93 f1a3 	rbit	r1, r3
 8003316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800331e:	6019      	str	r1, [r3, #0]
  return result;
 8003320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003324:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003334:	b2db      	uxtb	r3, r3
 8003336:	f003 031f 	and.w	r3, r3, #31
 800333a:	2101      	movs	r1, #1
 800333c:	fa01 f303 	lsl.w	r3, r1, r3
 8003340:	4013      	ands	r3, r2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0a0      	beq.n	8003288 <HAL_RCC_OscConfig+0x6a0>
 8003346:	e08d      	b.n	8003464 <HAL_RCC_OscConfig+0x87c>
 8003348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003350:	2201      	movs	r2, #1
 8003352:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003358:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	fa93 f2a3 	rbit	r2, r3
 8003362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003366:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800336a:	601a      	str	r2, [r3, #0]
  return result;
 800336c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003370:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003374:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003376:	fab3 f383 	clz	r3, r3
 800337a:	b2db      	uxtb	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	4b68      	ldr	r3, [pc, #416]	; (8003520 <HAL_RCC_OscConfig+0x938>)
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	461a      	mov	r2, r3
 8003386:	2300      	movs	r3, #0
 8003388:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800338a:	f7fe fa0f 	bl	80017ac <HAL_GetTick>
 800338e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003392:	e00a      	b.n	80033aa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003394:	f7fe fa0a 	bl	80017ac <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d902      	bls.n	80033aa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	f000 bc55 	b.w	8003c54 <HAL_RCC_OscConfig+0x106c>
 80033aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80033b2:	2202      	movs	r2, #2
 80033b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	fa93 f2a3 	rbit	r2, r3
 80033c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80033d6:	2202      	movs	r2, #2
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	fa93 f2a3 	rbit	r2, r3
 80033e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80033fa:	2202      	movs	r2, #2
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003402:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	fa93 f2a3 	rbit	r2, r3
 800340c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003410:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003414:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003416:	4b41      	ldr	r3, [pc, #260]	; (800351c <HAL_RCC_OscConfig+0x934>)
 8003418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800341a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003422:	2102      	movs	r1, #2
 8003424:	6019      	str	r1, [r3, #0]
 8003426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	fa93 f1a3 	rbit	r1, r3
 8003434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003438:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800343c:	6019      	str	r1, [r3, #0]
  return result;
 800343e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003442:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	fab3 f383 	clz	r3, r3
 800344c:	b2db      	uxtb	r3, r3
 800344e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003452:	b2db      	uxtb	r3, r3
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	2101      	movs	r1, #1
 800345a:	fa01 f303 	lsl.w	r3, r1, r3
 800345e:	4013      	ands	r3, r2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d197      	bne.n	8003394 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003468:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 81a1 	beq.w	80037bc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800347a:	2300      	movs	r3, #0
 800347c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003480:	4b26      	ldr	r3, [pc, #152]	; (800351c <HAL_RCC_OscConfig+0x934>)
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d116      	bne.n	80034ba <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800348c:	4b23      	ldr	r3, [pc, #140]	; (800351c <HAL_RCC_OscConfig+0x934>)
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	4a22      	ldr	r2, [pc, #136]	; (800351c <HAL_RCC_OscConfig+0x934>)
 8003492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003496:	61d3      	str	r3, [r2, #28]
 8003498:	4b20      	ldr	r3, [pc, #128]	; (800351c <HAL_RCC_OscConfig+0x934>)
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80034a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ae:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80034b2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80034b4:	2301      	movs	r3, #1
 80034b6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ba:	4b1a      	ldr	r3, [pc, #104]	; (8003524 <HAL_RCC_OscConfig+0x93c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d11a      	bne.n	80034fc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034c6:	4b17      	ldr	r3, [pc, #92]	; (8003524 <HAL_RCC_OscConfig+0x93c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a16      	ldr	r2, [pc, #88]	; (8003524 <HAL_RCC_OscConfig+0x93c>)
 80034cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034d2:	f7fe f96b 	bl	80017ac <HAL_GetTick>
 80034d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034da:	e009      	b.n	80034f0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034dc:	f7fe f966 	bl	80017ac <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b64      	cmp	r3, #100	; 0x64
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e3b1      	b.n	8003c54 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f0:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <HAL_RCC_OscConfig+0x93c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0ef      	beq.n	80034dc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003500:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d10d      	bne.n	8003528 <HAL_RCC_OscConfig+0x940>
 800350c:	4b03      	ldr	r3, [pc, #12]	; (800351c <HAL_RCC_OscConfig+0x934>)
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	4a02      	ldr	r2, [pc, #8]	; (800351c <HAL_RCC_OscConfig+0x934>)
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	6213      	str	r3, [r2, #32]
 8003518:	e03c      	b.n	8003594 <HAL_RCC_OscConfig+0x9ac>
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000
 8003520:	10908120 	.word	0x10908120
 8003524:	40007000 	.word	0x40007000
 8003528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800352c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10c      	bne.n	8003552 <HAL_RCC_OscConfig+0x96a>
 8003538:	4bc1      	ldr	r3, [pc, #772]	; (8003840 <HAL_RCC_OscConfig+0xc58>)
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	4ac0      	ldr	r2, [pc, #768]	; (8003840 <HAL_RCC_OscConfig+0xc58>)
 800353e:	f023 0301 	bic.w	r3, r3, #1
 8003542:	6213      	str	r3, [r2, #32]
 8003544:	4bbe      	ldr	r3, [pc, #760]	; (8003840 <HAL_RCC_OscConfig+0xc58>)
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	4abd      	ldr	r2, [pc, #756]	; (8003840 <HAL_RCC_OscConfig+0xc58>)
 800354a:	f023 0304 	bic.w	r3, r3, #4
 800354e:	6213      	str	r3, [r2, #32]
 8003550:	e020      	b.n	8003594 <HAL_RCC_OscConfig+0x9ac>
 8003552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003556:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	2b05      	cmp	r3, #5
 8003560:	d10c      	bne.n	800357c <HAL_RCC_OscConfig+0x994>
 8003562:	4bb7      	ldr	r3, [pc, #732]	; (8003840 <HAL_RCC_OscConfig+0xc58>)
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	4ab6      	ldr	r2, [pc, #728]	; (8003840 <HAL_RCC_OscConfig+0xc58>)
 8003568:	f043 0304 	orr.w	r3, r3, #4
 800356c:	6213      	str	r3, [r2, #32]
 800356e:	4bb4      	ldr	r3, [pc, #720]	; (8003840 <HAL_RCC_OscConfig+0xc58>)
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	4ab3      	ldr	r2, [pc, #716]	; (8003840 <HAL_RCC_OscConfig+0xc58>)
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	6213      	str	r3, [r2, #32]
 800357a:	e00b      	b.n	8003594 <HAL_RCC_OscConfig+0x9ac>
 800357c:	4bb0      	ldr	r3, [pc, #704]	; (8003840 <HAL_RCC_OscConfig+0xc58>)
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	4aaf      	ldr	r2, [pc, #700]	; (8003840 <HAL_RCC_OscConfig+0xc58>)
 8003582:	f023 0301 	bic.w	r3, r3, #1
 8003586:	6213      	str	r3, [r2, #32]
 8003588:	4bad      	ldr	r3, [pc, #692]	; (8003840 <HAL_RCC_OscConfig+0xc58>)
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	4aac      	ldr	r2, [pc, #688]	; (8003840 <HAL_RCC_OscConfig+0xc58>)
 800358e:	f023 0304 	bic.w	r3, r3, #4
 8003592:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003598:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 8081 	beq.w	80036a8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a6:	f7fe f901 	bl	80017ac <HAL_GetTick>
 80035aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ae:	e00b      	b.n	80035c8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035b0:	f7fe f8fc 	bl	80017ac <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e345      	b.n	8003c54 <HAL_RCC_OscConfig+0x106c>
 80035c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035cc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80035d0:	2202      	movs	r2, #2
 80035d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	fa93 f2a3 	rbit	r2, r3
 80035e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80035f4:	2202      	movs	r2, #2
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	fa93 f2a3 	rbit	r2, r3
 8003606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800360a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800360e:	601a      	str	r2, [r3, #0]
  return result;
 8003610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003614:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003618:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361a:	fab3 f383 	clz	r3, r3
 800361e:	b2db      	uxtb	r3, r3
 8003620:	095b      	lsrs	r3, r3, #5
 8003622:	b2db      	uxtb	r3, r3
 8003624:	f043 0302 	orr.w	r3, r3, #2
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d102      	bne.n	8003634 <HAL_RCC_OscConfig+0xa4c>
 800362e:	4b84      	ldr	r3, [pc, #528]	; (8003840 <HAL_RCC_OscConfig+0xc58>)
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	e013      	b.n	800365c <HAL_RCC_OscConfig+0xa74>
 8003634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003638:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800363c:	2202      	movs	r2, #2
 800363e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003644:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	fa93 f2a3 	rbit	r2, r3
 800364e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003652:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	4b79      	ldr	r3, [pc, #484]	; (8003840 <HAL_RCC_OscConfig+0xc58>)
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003660:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003664:	2102      	movs	r1, #2
 8003666:	6011      	str	r1, [r2, #0]
 8003668:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800366c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003670:	6812      	ldr	r2, [r2, #0]
 8003672:	fa92 f1a2 	rbit	r1, r2
 8003676:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800367a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800367e:	6011      	str	r1, [r2, #0]
  return result;
 8003680:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003684:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003688:	6812      	ldr	r2, [r2, #0]
 800368a:	fab2 f282 	clz	r2, r2
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	f002 021f 	and.w	r2, r2, #31
 800369a:	2101      	movs	r1, #1
 800369c:	fa01 f202 	lsl.w	r2, r1, r2
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d084      	beq.n	80035b0 <HAL_RCC_OscConfig+0x9c8>
 80036a6:	e07f      	b.n	80037a8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a8:	f7fe f880 	bl	80017ac <HAL_GetTick>
 80036ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b0:	e00b      	b.n	80036ca <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fe f87b 	bl	80017ac <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e2c4      	b.n	8003c54 <HAL_RCC_OscConfig+0x106c>
 80036ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ce:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80036d2:	2202      	movs	r2, #2
 80036d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036da:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	fa93 f2a3 	rbit	r2, r3
 80036e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80036f6:	2202      	movs	r2, #2
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	fa93 f2a3 	rbit	r2, r3
 8003708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003710:	601a      	str	r2, [r3, #0]
  return result;
 8003712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003716:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800371a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371c:	fab3 f383 	clz	r3, r3
 8003720:	b2db      	uxtb	r3, r3
 8003722:	095b      	lsrs	r3, r3, #5
 8003724:	b2db      	uxtb	r3, r3
 8003726:	f043 0302 	orr.w	r3, r3, #2
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d102      	bne.n	8003736 <HAL_RCC_OscConfig+0xb4e>
 8003730:	4b43      	ldr	r3, [pc, #268]	; (8003840 <HAL_RCC_OscConfig+0xc58>)
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	e013      	b.n	800375e <HAL_RCC_OscConfig+0xb76>
 8003736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800373e:	2202      	movs	r2, #2
 8003740:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003746:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	fa93 f2a3 	rbit	r2, r3
 8003750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003754:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	4b39      	ldr	r3, [pc, #228]	; (8003840 <HAL_RCC_OscConfig+0xc58>)
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003762:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003766:	2102      	movs	r1, #2
 8003768:	6011      	str	r1, [r2, #0]
 800376a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800376e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	fa92 f1a2 	rbit	r1, r2
 8003778:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800377c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003780:	6011      	str	r1, [r2, #0]
  return result;
 8003782:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003786:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800378a:	6812      	ldr	r2, [r2, #0]
 800378c:	fab2 f282 	clz	r2, r2
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	f002 021f 	and.w	r2, r2, #31
 800379c:	2101      	movs	r1, #1
 800379e:	fa01 f202 	lsl.w	r2, r1, r2
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d184      	bne.n	80036b2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037a8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d105      	bne.n	80037bc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b0:	4b23      	ldr	r3, [pc, #140]	; (8003840 <HAL_RCC_OscConfig+0xc58>)
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	4a22      	ldr	r2, [pc, #136]	; (8003840 <HAL_RCC_OscConfig+0xc58>)
 80037b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 8242 	beq.w	8003c52 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037ce:	4b1c      	ldr	r3, [pc, #112]	; (8003840 <HAL_RCC_OscConfig+0xc58>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	f000 8213 	beq.w	8003c02 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	f040 8162 	bne.w	8003ab2 <HAL_RCC_OscConfig+0xeca>
 80037ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80037f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003800:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	fa93 f2a3 	rbit	r2, r3
 800380a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003812:	601a      	str	r2, [r3, #0]
  return result;
 8003814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003818:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800381c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381e:	fab3 f383 	clz	r3, r3
 8003822:	b2db      	uxtb	r3, r3
 8003824:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003828:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	461a      	mov	r2, r3
 8003830:	2300      	movs	r3, #0
 8003832:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003834:	f7fd ffba 	bl	80017ac <HAL_GetTick>
 8003838:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800383c:	e00c      	b.n	8003858 <HAL_RCC_OscConfig+0xc70>
 800383e:	bf00      	nop
 8003840:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003844:	f7fd ffb2 	bl	80017ac <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e1fd      	b.n	8003c54 <HAL_RCC_OscConfig+0x106c>
 8003858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003860:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003864:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	fa93 f2a3 	rbit	r2, r3
 8003874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003878:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800387c:	601a      	str	r2, [r3, #0]
  return result;
 800387e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003882:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003886:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003888:	fab3 f383 	clz	r3, r3
 800388c:	b2db      	uxtb	r3, r3
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	b2db      	uxtb	r3, r3
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b01      	cmp	r3, #1
 800389a:	d102      	bne.n	80038a2 <HAL_RCC_OscConfig+0xcba>
 800389c:	4bb0      	ldr	r3, [pc, #704]	; (8003b60 <HAL_RCC_OscConfig+0xf78>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	e027      	b.n	80038f2 <HAL_RCC_OscConfig+0xd0a>
 80038a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80038aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	fa93 f2a3 	rbit	r2, r3
 80038be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038cc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80038d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038da:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	fa93 f2a3 	rbit	r2, r3
 80038e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	4b9c      	ldr	r3, [pc, #624]	; (8003b60 <HAL_RCC_OscConfig+0xf78>)
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038f6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80038fa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038fe:	6011      	str	r1, [r2, #0]
 8003900:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003904:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003908:	6812      	ldr	r2, [r2, #0]
 800390a:	fa92 f1a2 	rbit	r1, r2
 800390e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003912:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003916:	6011      	str	r1, [r2, #0]
  return result;
 8003918:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800391c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	fab2 f282 	clz	r2, r2
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	f042 0220 	orr.w	r2, r2, #32
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	f002 021f 	and.w	r2, r2, #31
 8003932:	2101      	movs	r1, #1
 8003934:	fa01 f202 	lsl.w	r2, r1, r2
 8003938:	4013      	ands	r3, r2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d182      	bne.n	8003844 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800393e:	4b88      	ldr	r3, [pc, #544]	; (8003b60 <HAL_RCC_OscConfig+0xf78>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800394a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003956:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	430b      	orrs	r3, r1
 8003960:	497f      	ldr	r1, [pc, #508]	; (8003b60 <HAL_RCC_OscConfig+0xf78>)
 8003962:	4313      	orrs	r3, r2
 8003964:	604b      	str	r3, [r1, #4]
 8003966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800396e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003972:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003978:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	fa93 f2a3 	rbit	r2, r3
 8003982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003986:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800398a:	601a      	str	r2, [r3, #0]
  return result;
 800398c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003990:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003994:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003996:	fab3 f383 	clz	r3, r3
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	461a      	mov	r2, r3
 80039a8:	2301      	movs	r3, #1
 80039aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fd fefe 	bl	80017ac <HAL_GetTick>
 80039b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039b4:	e009      	b.n	80039ca <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b6:	f7fd fef9 	bl	80017ac <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e144      	b.n	8003c54 <HAL_RCC_OscConfig+0x106c>
 80039ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ce:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80039d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039dc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	fa93 f2a3 	rbit	r2, r3
 80039e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ea:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80039ee:	601a      	str	r2, [r3, #0]
  return result;
 80039f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80039f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039fa:	fab3 f383 	clz	r3, r3
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d102      	bne.n	8003a14 <HAL_RCC_OscConfig+0xe2c>
 8003a0e:	4b54      	ldr	r3, [pc, #336]	; (8003b60 <HAL_RCC_OscConfig+0xf78>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	e027      	b.n	8003a64 <HAL_RCC_OscConfig+0xe7c>
 8003a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a18:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003a1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a26:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	fa93 f2a3 	rbit	r2, r3
 8003a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a34:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003a42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a4c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	fa93 f2a3 	rbit	r2, r3
 8003a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	4b3f      	ldr	r3, [pc, #252]	; (8003b60 <HAL_RCC_OscConfig+0xf78>)
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a68:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003a6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a70:	6011      	str	r1, [r2, #0]
 8003a72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a76:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	fa92 f1a2 	rbit	r1, r2
 8003a80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a84:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003a88:	6011      	str	r1, [r2, #0]
  return result;
 8003a8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a8e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003a92:	6812      	ldr	r2, [r2, #0]
 8003a94:	fab2 f282 	clz	r2, r2
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	f042 0220 	orr.w	r2, r2, #32
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	f002 021f 	and.w	r2, r2, #31
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d082      	beq.n	80039b6 <HAL_RCC_OscConfig+0xdce>
 8003ab0:	e0cf      	b.n	8003c52 <HAL_RCC_OscConfig+0x106a>
 8003ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003aba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003abe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	fa93 f2a3 	rbit	r2, r3
 8003ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003ad6:	601a      	str	r2, [r3, #0]
  return result;
 8003ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003adc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003ae0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae2:	fab3 f383 	clz	r3, r3
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003aec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	461a      	mov	r2, r3
 8003af4:	2300      	movs	r3, #0
 8003af6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af8:	f7fd fe58 	bl	80017ac <HAL_GetTick>
 8003afc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b00:	e009      	b.n	8003b16 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b02:	f7fd fe53 	bl	80017ac <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e09e      	b.n	8003c54 <HAL_RCC_OscConfig+0x106c>
 8003b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b1a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003b1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b28:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	fa93 f2a3 	rbit	r2, r3
 8003b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b36:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003b3a:	601a      	str	r2, [r3, #0]
  return result;
 8003b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b40:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003b44:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b46:	fab3 f383 	clz	r3, r3
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	095b      	lsrs	r3, r3, #5
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d104      	bne.n	8003b64 <HAL_RCC_OscConfig+0xf7c>
 8003b5a:	4b01      	ldr	r3, [pc, #4]	; (8003b60 <HAL_RCC_OscConfig+0xf78>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	e029      	b.n	8003bb4 <HAL_RCC_OscConfig+0xfcc>
 8003b60:	40021000 	.word	0x40021000
 8003b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b68:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003b6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b76:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	fa93 f2a3 	rbit	r2, r3
 8003b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b84:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b8e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003b92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	fa93 f2a3 	rbit	r2, r3
 8003ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003baa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	4b2b      	ldr	r3, [pc, #172]	; (8003c60 <HAL_RCC_OscConfig+0x1078>)
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bb8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003bbc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003bc0:	6011      	str	r1, [r2, #0]
 8003bc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bc6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	fa92 f1a2 	rbit	r1, r2
 8003bd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bd4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003bd8:	6011      	str	r1, [r2, #0]
  return result;
 8003bda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bde:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003be2:	6812      	ldr	r2, [r2, #0]
 8003be4:	fab2 f282 	clz	r2, r2
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	f042 0220 	orr.w	r2, r2, #32
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	f002 021f 	and.w	r2, r2, #31
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d180      	bne.n	8003b02 <HAL_RCC_OscConfig+0xf1a>
 8003c00:	e027      	b.n	8003c52 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e01e      	b.n	8003c54 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c16:	4b12      	ldr	r3, [pc, #72]	; (8003c60 <HAL_RCC_OscConfig+0x1078>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c1e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003c22:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d10b      	bne.n	8003c4e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003c36:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003c3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d001      	beq.n	8003c52 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40021000 	.word	0x40021000

08003c64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b09e      	sub	sp, #120	; 0x78
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e162      	b.n	8003f42 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c7c:	4b90      	ldr	r3, [pc, #576]	; (8003ec0 <HAL_RCC_ClockConfig+0x25c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d910      	bls.n	8003cac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8a:	4b8d      	ldr	r3, [pc, #564]	; (8003ec0 <HAL_RCC_ClockConfig+0x25c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f023 0207 	bic.w	r2, r3, #7
 8003c92:	498b      	ldr	r1, [pc, #556]	; (8003ec0 <HAL_RCC_ClockConfig+0x25c>)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9a:	4b89      	ldr	r3, [pc, #548]	; (8003ec0 <HAL_RCC_ClockConfig+0x25c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d001      	beq.n	8003cac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e14a      	b.n	8003f42 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb8:	4b82      	ldr	r3, [pc, #520]	; (8003ec4 <HAL_RCC_ClockConfig+0x260>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	497f      	ldr	r1, [pc, #508]	; (8003ec4 <HAL_RCC_ClockConfig+0x260>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 80dc 	beq.w	8003e90 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d13c      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xf6>
 8003ce0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ce4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ce8:	fa93 f3a3 	rbit	r3, r3
 8003cec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf0:	fab3 f383 	clz	r3, r3
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d102      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xa6>
 8003d04:	4b6f      	ldr	r3, [pc, #444]	; (8003ec4 <HAL_RCC_ClockConfig+0x260>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	e00f      	b.n	8003d2a <HAL_RCC_ClockConfig+0xc6>
 8003d0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d12:	fa93 f3a3 	rbit	r3, r3
 8003d16:	667b      	str	r3, [r7, #100]	; 0x64
 8003d18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d1c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d20:	fa93 f3a3 	rbit	r3, r3
 8003d24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d26:	4b67      	ldr	r3, [pc, #412]	; (8003ec4 <HAL_RCC_ClockConfig+0x260>)
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d2e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d32:	fa92 f2a2 	rbit	r2, r2
 8003d36:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003d38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d3a:	fab2 f282 	clz	r2, r2
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	f042 0220 	orr.w	r2, r2, #32
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	f002 021f 	and.w	r2, r2, #31
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d17b      	bne.n	8003e4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e0f3      	b.n	8003f42 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d13c      	bne.n	8003ddc <HAL_RCC_ClockConfig+0x178>
 8003d62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d66:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d6a:	fa93 f3a3 	rbit	r3, r3
 8003d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d72:	fab3 f383 	clz	r3, r3
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d102      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x128>
 8003d86:	4b4f      	ldr	r3, [pc, #316]	; (8003ec4 <HAL_RCC_ClockConfig+0x260>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	e00f      	b.n	8003dac <HAL_RCC_ClockConfig+0x148>
 8003d8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d90:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d94:	fa93 f3a3 	rbit	r3, r3
 8003d98:	647b      	str	r3, [r7, #68]	; 0x44
 8003d9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d9e:	643b      	str	r3, [r7, #64]	; 0x40
 8003da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da2:	fa93 f3a3 	rbit	r3, r3
 8003da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003da8:	4b46      	ldr	r3, [pc, #280]	; (8003ec4 <HAL_RCC_ClockConfig+0x260>)
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003db0:	63ba      	str	r2, [r7, #56]	; 0x38
 8003db2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003db4:	fa92 f2a2 	rbit	r2, r2
 8003db8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003dba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dbc:	fab2 f282 	clz	r2, r2
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	f042 0220 	orr.w	r2, r2, #32
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	f002 021f 	and.w	r2, r2, #31
 8003dcc:	2101      	movs	r1, #1
 8003dce:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d13a      	bne.n	8003e4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e0b2      	b.n	8003f42 <HAL_RCC_ClockConfig+0x2de>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de2:	fa93 f3a3 	rbit	r3, r3
 8003de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dea:	fab3 f383 	clz	r3, r3
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	095b      	lsrs	r3, r3, #5
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	f043 0301 	orr.w	r3, r3, #1
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d102      	bne.n	8003e04 <HAL_RCC_ClockConfig+0x1a0>
 8003dfe:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <HAL_RCC_ClockConfig+0x260>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	e00d      	b.n	8003e20 <HAL_RCC_ClockConfig+0x1bc>
 8003e04:	2302      	movs	r3, #2
 8003e06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0a:	fa93 f3a3 	rbit	r3, r3
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e10:	2302      	movs	r3, #2
 8003e12:	623b      	str	r3, [r7, #32]
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	fa93 f3a3 	rbit	r3, r3
 8003e1a:	61fb      	str	r3, [r7, #28]
 8003e1c:	4b29      	ldr	r3, [pc, #164]	; (8003ec4 <HAL_RCC_ClockConfig+0x260>)
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	2202      	movs	r2, #2
 8003e22:	61ba      	str	r2, [r7, #24]
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	fa92 f2a2 	rbit	r2, r2
 8003e2a:	617a      	str	r2, [r7, #20]
  return result;
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	fab2 f282 	clz	r2, r2
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	f042 0220 	orr.w	r2, r2, #32
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	f002 021f 	and.w	r2, r2, #31
 8003e3e:	2101      	movs	r1, #1
 8003e40:	fa01 f202 	lsl.w	r2, r1, r2
 8003e44:	4013      	ands	r3, r2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e079      	b.n	8003f42 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ec4 <HAL_RCC_ClockConfig+0x260>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f023 0203 	bic.w	r2, r3, #3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	491a      	ldr	r1, [pc, #104]	; (8003ec4 <HAL_RCC_ClockConfig+0x260>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e60:	f7fd fca4 	bl	80017ac <HAL_GetTick>
 8003e64:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e66:	e00a      	b.n	8003e7e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e68:	f7fd fca0 	bl	80017ac <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e061      	b.n	8003f42 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7e:	4b11      	ldr	r3, [pc, #68]	; (8003ec4 <HAL_RCC_ClockConfig+0x260>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f003 020c 	and.w	r2, r3, #12
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d1eb      	bne.n	8003e68 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e90:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <HAL_RCC_ClockConfig+0x25c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d214      	bcs.n	8003ec8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e9e:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <HAL_RCC_ClockConfig+0x25c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f023 0207 	bic.w	r2, r3, #7
 8003ea6:	4906      	ldr	r1, [pc, #24]	; (8003ec0 <HAL_RCC_ClockConfig+0x25c>)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eae:	4b04      	ldr	r3, [pc, #16]	; (8003ec0 <HAL_RCC_ClockConfig+0x25c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d005      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e040      	b.n	8003f42 <HAL_RCC_ClockConfig+0x2de>
 8003ec0:	40022000 	.word	0x40022000
 8003ec4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ed4:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <HAL_RCC_ClockConfig+0x2e8>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	491a      	ldr	r1, [pc, #104]	; (8003f4c <HAL_RCC_ClockConfig+0x2e8>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d009      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ef2:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <HAL_RCC_ClockConfig+0x2e8>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4912      	ldr	r1, [pc, #72]	; (8003f4c <HAL_RCC_ClockConfig+0x2e8>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003f06:	f000 f829 	bl	8003f5c <HAL_RCC_GetSysClockFreq>
 8003f0a:	4601      	mov	r1, r0
 8003f0c:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <HAL_RCC_ClockConfig+0x2e8>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f14:	22f0      	movs	r2, #240	; 0xf0
 8003f16:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	fa92 f2a2 	rbit	r2, r2
 8003f1e:	60fa      	str	r2, [r7, #12]
  return result;
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	fab2 f282 	clz	r2, r2
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	40d3      	lsrs	r3, r2
 8003f2a:	4a09      	ldr	r2, [pc, #36]	; (8003f50 <HAL_RCC_ClockConfig+0x2ec>)
 8003f2c:	5cd3      	ldrb	r3, [r2, r3]
 8003f2e:	fa21 f303 	lsr.w	r3, r1, r3
 8003f32:	4a08      	ldr	r2, [pc, #32]	; (8003f54 <HAL_RCC_ClockConfig+0x2f0>)
 8003f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003f36:	4b08      	ldr	r3, [pc, #32]	; (8003f58 <HAL_RCC_ClockConfig+0x2f4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fd fbf2 	bl	8001724 <HAL_InitTick>
  
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3778      	adds	r7, #120	; 0x78
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	080079f0 	.word	0x080079f0
 8003f54:	20000008 	.word	0x20000008
 8003f58:	2000000c 	.word	0x2000000c

08003f5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b08b      	sub	sp, #44	; 0x2c
 8003f60:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
 8003f66:	2300      	movs	r3, #0
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003f76:	4b29      	ldr	r3, [pc, #164]	; (800401c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d002      	beq.n	8003f8c <HAL_RCC_GetSysClockFreq+0x30>
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d003      	beq.n	8003f92 <HAL_RCC_GetSysClockFreq+0x36>
 8003f8a:	e03c      	b.n	8004006 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f8c:	4b24      	ldr	r3, [pc, #144]	; (8004020 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f8e:	623b      	str	r3, [r7, #32]
      break;
 8003f90:	e03c      	b.n	800400c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003f98:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003f9c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	fa92 f2a2 	rbit	r2, r2
 8003fa4:	607a      	str	r2, [r7, #4]
  return result;
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	fab2 f282 	clz	r2, r2
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	40d3      	lsrs	r3, r2
 8003fb0:	4a1c      	ldr	r2, [pc, #112]	; (8004024 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003fb2:	5cd3      	ldrb	r3, [r2, r3]
 8003fb4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003fb6:	4b19      	ldr	r3, [pc, #100]	; (800401c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	220f      	movs	r2, #15
 8003fc0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	fa92 f2a2 	rbit	r2, r2
 8003fc8:	60fa      	str	r2, [r7, #12]
  return result;
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	fab2 f282 	clz	r2, r2
 8003fd0:	b2d2      	uxtb	r2, r2
 8003fd2:	40d3      	lsrs	r3, r2
 8003fd4:	4a14      	ldr	r2, [pc, #80]	; (8004028 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003fd6:	5cd3      	ldrb	r3, [r2, r3]
 8003fd8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003fe4:	4a0e      	ldr	r2, [pc, #56]	; (8004020 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	fb02 f303 	mul.w	r3, r2, r3
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff4:	e004      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	4a0c      	ldr	r2, [pc, #48]	; (800402c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ffa:	fb02 f303 	mul.w	r3, r2, r3
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	623b      	str	r3, [r7, #32]
      break;
 8004004:	e002      	b.n	800400c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004006:	4b06      	ldr	r3, [pc, #24]	; (8004020 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004008:	623b      	str	r3, [r7, #32]
      break;
 800400a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800400c:	6a3b      	ldr	r3, [r7, #32]
}
 800400e:	4618      	mov	r0, r3
 8004010:	372c      	adds	r7, #44	; 0x2c
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40021000 	.word	0x40021000
 8004020:	007a1200 	.word	0x007a1200
 8004024:	08007a08 	.word	0x08007a08
 8004028:	08007a18 	.word	0x08007a18
 800402c:	003d0900 	.word	0x003d0900

08004030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004034:	4b03      	ldr	r3, [pc, #12]	; (8004044 <HAL_RCC_GetHCLKFreq+0x14>)
 8004036:	681b      	ldr	r3, [r3, #0]
}
 8004038:	4618      	mov	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	20000008 	.word	0x20000008

08004048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800404e:	f7ff ffef 	bl	8004030 <HAL_RCC_GetHCLKFreq>
 8004052:	4601      	mov	r1, r0
 8004054:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800405c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004060:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	fa92 f2a2 	rbit	r2, r2
 8004068:	603a      	str	r2, [r7, #0]
  return result;
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	fab2 f282 	clz	r2, r2
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	40d3      	lsrs	r3, r2
 8004074:	4a04      	ldr	r2, [pc, #16]	; (8004088 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004076:	5cd3      	ldrb	r3, [r2, r3]
 8004078:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800407c:	4618      	mov	r0, r3
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40021000 	.word	0x40021000
 8004088:	08007a00 	.word	0x08007a00

0800408c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004092:	f7ff ffcd 	bl	8004030 <HAL_RCC_GetHCLKFreq>
 8004096:	4601      	mov	r1, r0
 8004098:	4b0b      	ldr	r3, [pc, #44]	; (80040c8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80040a0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80040a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	fa92 f2a2 	rbit	r2, r2
 80040ac:	603a      	str	r2, [r7, #0]
  return result;
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	fab2 f282 	clz	r2, r2
 80040b4:	b2d2      	uxtb	r2, r2
 80040b6:	40d3      	lsrs	r3, r2
 80040b8:	4a04      	ldr	r2, [pc, #16]	; (80040cc <HAL_RCC_GetPCLK2Freq+0x40>)
 80040ba:	5cd3      	ldrb	r3, [r2, r3]
 80040bc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80040c0:	4618      	mov	r0, r3
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40021000 	.word	0x40021000
 80040cc:	08007a00 	.word	0x08007a00

080040d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b092      	sub	sp, #72	; 0x48
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80040e0:	2300      	movs	r3, #0
 80040e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 80cd 	beq.w	800428e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040f4:	4b86      	ldr	r3, [pc, #536]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10e      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004100:	4b83      	ldr	r3, [pc, #524]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	4a82      	ldr	r2, [pc, #520]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800410a:	61d3      	str	r3, [r2, #28]
 800410c:	4b80      	ldr	r3, [pc, #512]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004114:	60bb      	str	r3, [r7, #8]
 8004116:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004118:	2301      	movs	r3, #1
 800411a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411e:	4b7d      	ldr	r3, [pc, #500]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d118      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800412a:	4b7a      	ldr	r3, [pc, #488]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a79      	ldr	r2, [pc, #484]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004134:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004136:	f7fd fb39 	bl	80017ac <HAL_GetTick>
 800413a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413c:	e008      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800413e:	f7fd fb35 	bl	80017ac <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b64      	cmp	r3, #100	; 0x64
 800414a:	d901      	bls.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e0db      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004150:	4b70      	ldr	r3, [pc, #448]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800415c:	4b6c      	ldr	r3, [pc, #432]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004164:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004168:	2b00      	cmp	r3, #0
 800416a:	d07d      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004174:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004176:	429a      	cmp	r2, r3
 8004178:	d076      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800417a:	4b65      	ldr	r3, [pc, #404]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004184:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004188:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	fa93 f3a3 	rbit	r3, r3
 8004190:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004194:	fab3 f383 	clz	r3, r3
 8004198:	b2db      	uxtb	r3, r3
 800419a:	461a      	mov	r2, r3
 800419c:	4b5e      	ldr	r3, [pc, #376]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800419e:	4413      	add	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	461a      	mov	r2, r3
 80041a4:	2301      	movs	r3, #1
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b0:	fa93 f3a3 	rbit	r3, r3
 80041b4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80041b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041b8:	fab3 f383 	clz	r3, r3
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	461a      	mov	r2, r3
 80041c0:	4b55      	ldr	r3, [pc, #340]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80041c2:	4413      	add	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	461a      	mov	r2, r3
 80041c8:	2300      	movs	r3, #0
 80041ca:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041cc:	4a50      	ldr	r2, [pc, #320]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d045      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041dc:	f7fd fae6 	bl	80017ac <HAL_GetTick>
 80041e0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e2:	e00a      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e4:	f7fd fae2 	bl	80017ac <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d901      	bls.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e086      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80041fa:	2302      	movs	r3, #2
 80041fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004200:	fa93 f3a3 	rbit	r3, r3
 8004204:	627b      	str	r3, [r7, #36]	; 0x24
 8004206:	2302      	movs	r3, #2
 8004208:	623b      	str	r3, [r7, #32]
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	fa93 f3a3 	rbit	r3, r3
 8004210:	61fb      	str	r3, [r7, #28]
  return result;
 8004212:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004214:	fab3 f383 	clz	r3, r3
 8004218:	b2db      	uxtb	r3, r3
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	b2db      	uxtb	r3, r3
 800421e:	f043 0302 	orr.w	r3, r3, #2
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d102      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004228:	4b39      	ldr	r3, [pc, #228]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	e007      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800422e:	2302      	movs	r3, #2
 8004230:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	fa93 f3a3 	rbit	r3, r3
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	4b35      	ldr	r3, [pc, #212]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	2202      	movs	r2, #2
 8004240:	613a      	str	r2, [r7, #16]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	fa92 f2a2 	rbit	r2, r2
 8004248:	60fa      	str	r2, [r7, #12]
  return result;
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	fab2 f282 	clz	r2, r2
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	f002 021f 	and.w	r2, r2, #31
 800425c:	2101      	movs	r1, #1
 800425e:	fa01 f202 	lsl.w	r2, r1, r2
 8004262:	4013      	ands	r3, r2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0bd      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004268:	4b29      	ldr	r3, [pc, #164]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	4926      	ldr	r1, [pc, #152]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004276:	4313      	orrs	r3, r2
 8004278:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800427a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800427e:	2b01      	cmp	r3, #1
 8004280:	d105      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004282:	4b23      	ldr	r3, [pc, #140]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	4a22      	ldr	r2, [pc, #136]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800428c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800429a:	4b1d      	ldr	r3, [pc, #116]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	f023 0203 	bic.w	r2, r3, #3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	491a      	ldr	r1, [pc, #104]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042b8:	4b15      	ldr	r3, [pc, #84]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042bc:	f023 0210 	bic.w	r2, r3, #16
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	4912      	ldr	r1, [pc, #72]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80042d6:	4b0e      	ldr	r3, [pc, #56]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	490b      	ldr	r1, [pc, #44]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d008      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80042f4:	4b06      	ldr	r3, [pc, #24]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	4903      	ldr	r1, [pc, #12]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004302:	4313      	orrs	r3, r2
 8004304:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3748      	adds	r7, #72	; 0x48
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40021000 	.word	0x40021000
 8004314:	40007000 	.word	0x40007000
 8004318:	10908100 	.word	0x10908100

0800431c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e040      	b.n	80043b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fd f860 	bl	8001404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2224      	movs	r2, #36	; 0x24
 8004348:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0201 	bic.w	r2, r2, #1
 8004358:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f8b6 	bl	80044cc <UART_SetConfig>
 8004360:	4603      	mov	r3, r0
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e022      	b.n	80043b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f9e0 	bl	8004738 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004386:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689a      	ldr	r2, [r3, #8]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004396:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0201 	orr.w	r2, r2, #1
 80043a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 fa67 	bl	800487c <UART_CheckIdleState>
 80043ae:	4603      	mov	r3, r0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08a      	sub	sp, #40	; 0x28
 80043bc:	af02      	add	r7, sp, #8
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	4613      	mov	r3, r2
 80043c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d178      	bne.n	80044c2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <HAL_UART_Transmit+0x24>
 80043d6:	88fb      	ldrh	r3, [r7, #6]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e071      	b.n	80044c4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2221      	movs	r2, #33	; 0x21
 80043ec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043ee:	f7fd f9dd 	bl	80017ac <HAL_GetTick>
 80043f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	88fa      	ldrh	r2, [r7, #6]
 80043f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	88fa      	ldrh	r2, [r7, #6]
 8004400:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800440c:	d108      	bne.n	8004420 <HAL_UART_Transmit+0x68>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d104      	bne.n	8004420 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004416:	2300      	movs	r3, #0
 8004418:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	e003      	b.n	8004428 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004424:	2300      	movs	r3, #0
 8004426:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004428:	e030      	b.n	800448c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2200      	movs	r2, #0
 8004432:	2180      	movs	r1, #128	; 0x80
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 fac9 	bl	80049cc <UART_WaitOnFlagUntilTimeout>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d004      	beq.n	800444a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2220      	movs	r2, #32
 8004444:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e03c      	b.n	80044c4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10b      	bne.n	8004468 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	881a      	ldrh	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800445c:	b292      	uxth	r2, r2
 800445e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	3302      	adds	r3, #2
 8004464:	61bb      	str	r3, [r7, #24]
 8004466:	e008      	b.n	800447a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	781a      	ldrb	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	b292      	uxth	r2, r2
 8004472:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	3301      	adds	r3, #1
 8004478:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004480:	b29b      	uxth	r3, r3
 8004482:	3b01      	subs	r3, #1
 8004484:	b29a      	uxth	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1c8      	bne.n	800442a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2200      	movs	r2, #0
 80044a0:	2140      	movs	r1, #64	; 0x40
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 fa92 	bl	80049cc <UART_WaitOnFlagUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d004      	beq.n	80044b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2220      	movs	r2, #32
 80044b2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e005      	b.n	80044c4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2220      	movs	r2, #32
 80044bc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80044be:	2300      	movs	r3, #0
 80044c0:	e000      	b.n	80044c4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80044c2:	2302      	movs	r3, #2
  }
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3720      	adds	r7, #32
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	431a      	orrs	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	4b8a      	ldr	r3, [pc, #552]	; (8004720 <UART_SetConfig+0x254>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6812      	ldr	r2, [r2, #0]
 80044fe:	6979      	ldr	r1, [r7, #20]
 8004500:	430b      	orrs	r3, r1
 8004502:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	430a      	orrs	r2, r1
 800453c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a78      	ldr	r2, [pc, #480]	; (8004724 <UART_SetConfig+0x258>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d120      	bne.n	800458a <UART_SetConfig+0xbe>
 8004548:	4b77      	ldr	r3, [pc, #476]	; (8004728 <UART_SetConfig+0x25c>)
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	2b03      	cmp	r3, #3
 8004552:	d817      	bhi.n	8004584 <UART_SetConfig+0xb8>
 8004554:	a201      	add	r2, pc, #4	; (adr r2, 800455c <UART_SetConfig+0x90>)
 8004556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455a:	bf00      	nop
 800455c:	0800456d 	.word	0x0800456d
 8004560:	08004579 	.word	0x08004579
 8004564:	0800457f 	.word	0x0800457f
 8004568:	08004573 	.word	0x08004573
 800456c:	2300      	movs	r3, #0
 800456e:	77fb      	strb	r3, [r7, #31]
 8004570:	e01d      	b.n	80045ae <UART_SetConfig+0xe2>
 8004572:	2302      	movs	r3, #2
 8004574:	77fb      	strb	r3, [r7, #31]
 8004576:	e01a      	b.n	80045ae <UART_SetConfig+0xe2>
 8004578:	2304      	movs	r3, #4
 800457a:	77fb      	strb	r3, [r7, #31]
 800457c:	e017      	b.n	80045ae <UART_SetConfig+0xe2>
 800457e:	2308      	movs	r3, #8
 8004580:	77fb      	strb	r3, [r7, #31]
 8004582:	e014      	b.n	80045ae <UART_SetConfig+0xe2>
 8004584:	2310      	movs	r3, #16
 8004586:	77fb      	strb	r3, [r7, #31]
 8004588:	e011      	b.n	80045ae <UART_SetConfig+0xe2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a67      	ldr	r2, [pc, #412]	; (800472c <UART_SetConfig+0x260>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d102      	bne.n	800459a <UART_SetConfig+0xce>
 8004594:	2300      	movs	r3, #0
 8004596:	77fb      	strb	r3, [r7, #31]
 8004598:	e009      	b.n	80045ae <UART_SetConfig+0xe2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a64      	ldr	r2, [pc, #400]	; (8004730 <UART_SetConfig+0x264>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d102      	bne.n	80045aa <UART_SetConfig+0xde>
 80045a4:	2300      	movs	r3, #0
 80045a6:	77fb      	strb	r3, [r7, #31]
 80045a8:	e001      	b.n	80045ae <UART_SetConfig+0xe2>
 80045aa:	2310      	movs	r3, #16
 80045ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b6:	d15a      	bne.n	800466e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80045b8:	7ffb      	ldrb	r3, [r7, #31]
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d827      	bhi.n	800460e <UART_SetConfig+0x142>
 80045be:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <UART_SetConfig+0xf8>)
 80045c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c4:	080045e9 	.word	0x080045e9
 80045c8:	080045f1 	.word	0x080045f1
 80045cc:	080045f9 	.word	0x080045f9
 80045d0:	0800460f 	.word	0x0800460f
 80045d4:	080045ff 	.word	0x080045ff
 80045d8:	0800460f 	.word	0x0800460f
 80045dc:	0800460f 	.word	0x0800460f
 80045e0:	0800460f 	.word	0x0800460f
 80045e4:	08004607 	.word	0x08004607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045e8:	f7ff fd2e 	bl	8004048 <HAL_RCC_GetPCLK1Freq>
 80045ec:	61b8      	str	r0, [r7, #24]
        break;
 80045ee:	e013      	b.n	8004618 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045f0:	f7ff fd4c 	bl	800408c <HAL_RCC_GetPCLK2Freq>
 80045f4:	61b8      	str	r0, [r7, #24]
        break;
 80045f6:	e00f      	b.n	8004618 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045f8:	4b4e      	ldr	r3, [pc, #312]	; (8004734 <UART_SetConfig+0x268>)
 80045fa:	61bb      	str	r3, [r7, #24]
        break;
 80045fc:	e00c      	b.n	8004618 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045fe:	f7ff fcad 	bl	8003f5c <HAL_RCC_GetSysClockFreq>
 8004602:	61b8      	str	r0, [r7, #24]
        break;
 8004604:	e008      	b.n	8004618 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800460a:	61bb      	str	r3, [r7, #24]
        break;
 800460c:	e004      	b.n	8004618 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	77bb      	strb	r3, [r7, #30]
        break;
 8004616:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d074      	beq.n	8004708 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	005a      	lsls	r2, r3, #1
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	085b      	lsrs	r3, r3, #1
 8004628:	441a      	add	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004632:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	2b0f      	cmp	r3, #15
 8004638:	d916      	bls.n	8004668 <UART_SetConfig+0x19c>
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004640:	d212      	bcs.n	8004668 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	b29b      	uxth	r3, r3
 8004646:	f023 030f 	bic.w	r3, r3, #15
 800464a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	085b      	lsrs	r3, r3, #1
 8004650:	b29b      	uxth	r3, r3
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	b29a      	uxth	r2, r3
 8004658:	89fb      	ldrh	r3, [r7, #14]
 800465a:	4313      	orrs	r3, r2
 800465c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	89fa      	ldrh	r2, [r7, #14]
 8004664:	60da      	str	r2, [r3, #12]
 8004666:	e04f      	b.n	8004708 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	77bb      	strb	r3, [r7, #30]
 800466c:	e04c      	b.n	8004708 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800466e:	7ffb      	ldrb	r3, [r7, #31]
 8004670:	2b08      	cmp	r3, #8
 8004672:	d828      	bhi.n	80046c6 <UART_SetConfig+0x1fa>
 8004674:	a201      	add	r2, pc, #4	; (adr r2, 800467c <UART_SetConfig+0x1b0>)
 8004676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467a:	bf00      	nop
 800467c:	080046a1 	.word	0x080046a1
 8004680:	080046a9 	.word	0x080046a9
 8004684:	080046b1 	.word	0x080046b1
 8004688:	080046c7 	.word	0x080046c7
 800468c:	080046b7 	.word	0x080046b7
 8004690:	080046c7 	.word	0x080046c7
 8004694:	080046c7 	.word	0x080046c7
 8004698:	080046c7 	.word	0x080046c7
 800469c:	080046bf 	.word	0x080046bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046a0:	f7ff fcd2 	bl	8004048 <HAL_RCC_GetPCLK1Freq>
 80046a4:	61b8      	str	r0, [r7, #24]
        break;
 80046a6:	e013      	b.n	80046d0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046a8:	f7ff fcf0 	bl	800408c <HAL_RCC_GetPCLK2Freq>
 80046ac:	61b8      	str	r0, [r7, #24]
        break;
 80046ae:	e00f      	b.n	80046d0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046b0:	4b20      	ldr	r3, [pc, #128]	; (8004734 <UART_SetConfig+0x268>)
 80046b2:	61bb      	str	r3, [r7, #24]
        break;
 80046b4:	e00c      	b.n	80046d0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046b6:	f7ff fc51 	bl	8003f5c <HAL_RCC_GetSysClockFreq>
 80046ba:	61b8      	str	r0, [r7, #24]
        break;
 80046bc:	e008      	b.n	80046d0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046c2:	61bb      	str	r3, [r7, #24]
        break;
 80046c4:	e004      	b.n	80046d0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	77bb      	strb	r3, [r7, #30]
        break;
 80046ce:	bf00      	nop
    }

    if (pclk != 0U)
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d018      	beq.n	8004708 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	085a      	lsrs	r2, r3, #1
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	441a      	add	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	2b0f      	cmp	r3, #15
 80046ee:	d909      	bls.n	8004704 <UART_SetConfig+0x238>
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f6:	d205      	bcs.n	8004704 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60da      	str	r2, [r3, #12]
 8004702:	e001      	b.n	8004708 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004714:	7fbb      	ldrb	r3, [r7, #30]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3720      	adds	r7, #32
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	efff69f3 	.word	0xefff69f3
 8004724:	40013800 	.word	0x40013800
 8004728:	40021000 	.word	0x40021000
 800472c:	40004400 	.word	0x40004400
 8004730:	40004800 	.word	0x40004800
 8004734:	007a1200 	.word	0x007a1200

08004738 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004814:	2b00      	cmp	r3, #0
 8004816:	d01a      	beq.n	800484e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004836:	d10a      	bne.n	800484e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	605a      	str	r2, [r3, #4]
  }
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b098      	sub	sp, #96	; 0x60
 8004880:	af02      	add	r7, sp, #8
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800488c:	f7fc ff8e 	bl	80017ac <HAL_GetTick>
 8004890:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b08      	cmp	r3, #8
 800489e:	d12e      	bne.n	80048fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048a8:	2200      	movs	r2, #0
 80048aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f88c 	bl	80049cc <UART_WaitOnFlagUntilTimeout>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d021      	beq.n	80048fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ce:	653b      	str	r3, [r7, #80]	; 0x50
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048d8:	647b      	str	r3, [r7, #68]	; 0x44
 80048da:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048e0:	e841 2300 	strex	r3, r2, [r1]
 80048e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e6      	bne.n	80048ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2220      	movs	r2, #32
 80048f0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e062      	b.n	80049c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b04      	cmp	r3, #4
 800490a:	d149      	bne.n	80049a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800490c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004914:	2200      	movs	r2, #0
 8004916:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f856 	bl	80049cc <UART_WaitOnFlagUntilTimeout>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d03c      	beq.n	80049a0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	e853 3f00 	ldrex	r3, [r3]
 8004932:	623b      	str	r3, [r7, #32]
   return(result);
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800493a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	461a      	mov	r2, r3
 8004942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004944:	633b      	str	r3, [r7, #48]	; 0x30
 8004946:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004948:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800494a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800494c:	e841 2300 	strex	r3, r2, [r1]
 8004950:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e6      	bne.n	8004926 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3308      	adds	r3, #8
 800495e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	e853 3f00 	ldrex	r3, [r3]
 8004966:	60fb      	str	r3, [r7, #12]
   return(result);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0301 	bic.w	r3, r3, #1
 800496e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3308      	adds	r3, #8
 8004976:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004978:	61fa      	str	r2, [r7, #28]
 800497a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497c:	69b9      	ldr	r1, [r7, #24]
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	e841 2300 	strex	r3, r2, [r1]
 8004984:	617b      	str	r3, [r7, #20]
   return(result);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1e5      	bne.n	8004958 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2220      	movs	r2, #32
 8004990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e011      	b.n	80049c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2220      	movs	r2, #32
 80049a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3758      	adds	r7, #88	; 0x58
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	4613      	mov	r3, r2
 80049da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049dc:	e049      	b.n	8004a72 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049e4:	d045      	beq.n	8004a72 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e6:	f7fc fee1 	bl	80017ac <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d302      	bcc.n	80049fc <UART_WaitOnFlagUntilTimeout+0x30>
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e048      	b.n	8004a92 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0304 	and.w	r3, r3, #4
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d031      	beq.n	8004a72 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d110      	bne.n	8004a3e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2208      	movs	r2, #8
 8004a22:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 f838 	bl	8004a9a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2208      	movs	r2, #8
 8004a2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e029      	b.n	8004a92 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a4c:	d111      	bne.n	8004a72 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 f81e 	bl	8004a9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2220      	movs	r2, #32
 8004a62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e00f      	b.n	8004a92 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69da      	ldr	r2, [r3, #28]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	bf0c      	ite	eq
 8004a82:	2301      	moveq	r3, #1
 8004a84:	2300      	movne	r3, #0
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	461a      	mov	r2, r3
 8004a8a:	79fb      	ldrb	r3, [r7, #7]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d0a6      	beq.n	80049de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b095      	sub	sp, #84	; 0x54
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aaa:	e853 3f00 	ldrex	r3, [r3]
 8004aae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ac0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ac2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ac6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ac8:	e841 2300 	strex	r3, r2, [r1]
 8004acc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1e6      	bne.n	8004aa2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3308      	adds	r3, #8
 8004ada:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	e853 3f00 	ldrex	r3, [r3]
 8004ae2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	f023 0301 	bic.w	r3, r3, #1
 8004aea:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3308      	adds	r3, #8
 8004af2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004af4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004af6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004afc:	e841 2300 	strex	r3, r2, [r1]
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1e5      	bne.n	8004ad4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d118      	bne.n	8004b42 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	e853 3f00 	ldrex	r3, [r3]
 8004b1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f023 0310 	bic.w	r3, r3, #16
 8004b24:	647b      	str	r3, [r7, #68]	; 0x44
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b2e:	61bb      	str	r3, [r7, #24]
 8004b30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b32:	6979      	ldr	r1, [r7, #20]
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	e841 2300 	strex	r3, r2, [r1]
 8004b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1e6      	bne.n	8004b10 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004b56:	bf00      	nop
 8004b58:	3754      	adds	r7, #84	; 0x54
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
	...

08004b64 <__errno>:
 8004b64:	4b01      	ldr	r3, [pc, #4]	; (8004b6c <__errno+0x8>)
 8004b66:	6818      	ldr	r0, [r3, #0]
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	20000014 	.word	0x20000014

08004b70 <__libc_init_array>:
 8004b70:	b570      	push	{r4, r5, r6, lr}
 8004b72:	4d0d      	ldr	r5, [pc, #52]	; (8004ba8 <__libc_init_array+0x38>)
 8004b74:	4c0d      	ldr	r4, [pc, #52]	; (8004bac <__libc_init_array+0x3c>)
 8004b76:	1b64      	subs	r4, r4, r5
 8004b78:	10a4      	asrs	r4, r4, #2
 8004b7a:	2600      	movs	r6, #0
 8004b7c:	42a6      	cmp	r6, r4
 8004b7e:	d109      	bne.n	8004b94 <__libc_init_array+0x24>
 8004b80:	4d0b      	ldr	r5, [pc, #44]	; (8004bb0 <__libc_init_array+0x40>)
 8004b82:	4c0c      	ldr	r4, [pc, #48]	; (8004bb4 <__libc_init_array+0x44>)
 8004b84:	f002 ff04 	bl	8007990 <_init>
 8004b88:	1b64      	subs	r4, r4, r5
 8004b8a:	10a4      	asrs	r4, r4, #2
 8004b8c:	2600      	movs	r6, #0
 8004b8e:	42a6      	cmp	r6, r4
 8004b90:	d105      	bne.n	8004b9e <__libc_init_array+0x2e>
 8004b92:	bd70      	pop	{r4, r5, r6, pc}
 8004b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b98:	4798      	blx	r3
 8004b9a:	3601      	adds	r6, #1
 8004b9c:	e7ee      	b.n	8004b7c <__libc_init_array+0xc>
 8004b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba2:	4798      	blx	r3
 8004ba4:	3601      	adds	r6, #1
 8004ba6:	e7f2      	b.n	8004b8e <__libc_init_array+0x1e>
 8004ba8:	08007e04 	.word	0x08007e04
 8004bac:	08007e04 	.word	0x08007e04
 8004bb0:	08007e04 	.word	0x08007e04
 8004bb4:	08007e08 	.word	0x08007e08

08004bb8 <memset>:
 8004bb8:	4402      	add	r2, r0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d100      	bne.n	8004bc2 <memset+0xa>
 8004bc0:	4770      	bx	lr
 8004bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004bc6:	e7f9      	b.n	8004bbc <memset+0x4>

08004bc8 <__cvt>:
 8004bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bcc:	ec55 4b10 	vmov	r4, r5, d0
 8004bd0:	2d00      	cmp	r5, #0
 8004bd2:	460e      	mov	r6, r1
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	462b      	mov	r3, r5
 8004bd8:	bfbb      	ittet	lt
 8004bda:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004bde:	461d      	movlt	r5, r3
 8004be0:	2300      	movge	r3, #0
 8004be2:	232d      	movlt	r3, #45	; 0x2d
 8004be4:	700b      	strb	r3, [r1, #0]
 8004be6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004be8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004bec:	4691      	mov	r9, r2
 8004bee:	f023 0820 	bic.w	r8, r3, #32
 8004bf2:	bfbc      	itt	lt
 8004bf4:	4622      	movlt	r2, r4
 8004bf6:	4614      	movlt	r4, r2
 8004bf8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004bfc:	d005      	beq.n	8004c0a <__cvt+0x42>
 8004bfe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004c02:	d100      	bne.n	8004c06 <__cvt+0x3e>
 8004c04:	3601      	adds	r6, #1
 8004c06:	2102      	movs	r1, #2
 8004c08:	e000      	b.n	8004c0c <__cvt+0x44>
 8004c0a:	2103      	movs	r1, #3
 8004c0c:	ab03      	add	r3, sp, #12
 8004c0e:	9301      	str	r3, [sp, #4]
 8004c10:	ab02      	add	r3, sp, #8
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	ec45 4b10 	vmov	d0, r4, r5
 8004c18:	4653      	mov	r3, sl
 8004c1a:	4632      	mov	r2, r6
 8004c1c:	f000 fcec 	bl	80055f8 <_dtoa_r>
 8004c20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c24:	4607      	mov	r7, r0
 8004c26:	d102      	bne.n	8004c2e <__cvt+0x66>
 8004c28:	f019 0f01 	tst.w	r9, #1
 8004c2c:	d022      	beq.n	8004c74 <__cvt+0xac>
 8004c2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c32:	eb07 0906 	add.w	r9, r7, r6
 8004c36:	d110      	bne.n	8004c5a <__cvt+0x92>
 8004c38:	783b      	ldrb	r3, [r7, #0]
 8004c3a:	2b30      	cmp	r3, #48	; 0x30
 8004c3c:	d10a      	bne.n	8004c54 <__cvt+0x8c>
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2300      	movs	r3, #0
 8004c42:	4620      	mov	r0, r4
 8004c44:	4629      	mov	r1, r5
 8004c46:	f7fb ff3f 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c4a:	b918      	cbnz	r0, 8004c54 <__cvt+0x8c>
 8004c4c:	f1c6 0601 	rsb	r6, r6, #1
 8004c50:	f8ca 6000 	str.w	r6, [sl]
 8004c54:	f8da 3000 	ldr.w	r3, [sl]
 8004c58:	4499      	add	r9, r3
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	4620      	mov	r0, r4
 8004c60:	4629      	mov	r1, r5
 8004c62:	f7fb ff31 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c66:	b108      	cbz	r0, 8004c6c <__cvt+0xa4>
 8004c68:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c6c:	2230      	movs	r2, #48	; 0x30
 8004c6e:	9b03      	ldr	r3, [sp, #12]
 8004c70:	454b      	cmp	r3, r9
 8004c72:	d307      	bcc.n	8004c84 <__cvt+0xbc>
 8004c74:	9b03      	ldr	r3, [sp, #12]
 8004c76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c78:	1bdb      	subs	r3, r3, r7
 8004c7a:	4638      	mov	r0, r7
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	b004      	add	sp, #16
 8004c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c84:	1c59      	adds	r1, r3, #1
 8004c86:	9103      	str	r1, [sp, #12]
 8004c88:	701a      	strb	r2, [r3, #0]
 8004c8a:	e7f0      	b.n	8004c6e <__cvt+0xa6>

08004c8c <__exponent>:
 8004c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2900      	cmp	r1, #0
 8004c92:	bfb8      	it	lt
 8004c94:	4249      	neglt	r1, r1
 8004c96:	f803 2b02 	strb.w	r2, [r3], #2
 8004c9a:	bfb4      	ite	lt
 8004c9c:	222d      	movlt	r2, #45	; 0x2d
 8004c9e:	222b      	movge	r2, #43	; 0x2b
 8004ca0:	2909      	cmp	r1, #9
 8004ca2:	7042      	strb	r2, [r0, #1]
 8004ca4:	dd2a      	ble.n	8004cfc <__exponent+0x70>
 8004ca6:	f10d 0407 	add.w	r4, sp, #7
 8004caa:	46a4      	mov	ip, r4
 8004cac:	270a      	movs	r7, #10
 8004cae:	46a6      	mov	lr, r4
 8004cb0:	460a      	mov	r2, r1
 8004cb2:	fb91 f6f7 	sdiv	r6, r1, r7
 8004cb6:	fb07 1516 	mls	r5, r7, r6, r1
 8004cba:	3530      	adds	r5, #48	; 0x30
 8004cbc:	2a63      	cmp	r2, #99	; 0x63
 8004cbe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004cc2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004cc6:	4631      	mov	r1, r6
 8004cc8:	dcf1      	bgt.n	8004cae <__exponent+0x22>
 8004cca:	3130      	adds	r1, #48	; 0x30
 8004ccc:	f1ae 0502 	sub.w	r5, lr, #2
 8004cd0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004cd4:	1c44      	adds	r4, r0, #1
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	4561      	cmp	r1, ip
 8004cda:	d30a      	bcc.n	8004cf2 <__exponent+0x66>
 8004cdc:	f10d 0209 	add.w	r2, sp, #9
 8004ce0:	eba2 020e 	sub.w	r2, r2, lr
 8004ce4:	4565      	cmp	r5, ip
 8004ce6:	bf88      	it	hi
 8004ce8:	2200      	movhi	r2, #0
 8004cea:	4413      	add	r3, r2
 8004cec:	1a18      	subs	r0, r3, r0
 8004cee:	b003      	add	sp, #12
 8004cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cf6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004cfa:	e7ed      	b.n	8004cd8 <__exponent+0x4c>
 8004cfc:	2330      	movs	r3, #48	; 0x30
 8004cfe:	3130      	adds	r1, #48	; 0x30
 8004d00:	7083      	strb	r3, [r0, #2]
 8004d02:	70c1      	strb	r1, [r0, #3]
 8004d04:	1d03      	adds	r3, r0, #4
 8004d06:	e7f1      	b.n	8004cec <__exponent+0x60>

08004d08 <_printf_float>:
 8004d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d0c:	ed2d 8b02 	vpush	{d8}
 8004d10:	b08d      	sub	sp, #52	; 0x34
 8004d12:	460c      	mov	r4, r1
 8004d14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004d18:	4616      	mov	r6, r2
 8004d1a:	461f      	mov	r7, r3
 8004d1c:	4605      	mov	r5, r0
 8004d1e:	f001 fa59 	bl	80061d4 <_localeconv_r>
 8004d22:	f8d0 a000 	ldr.w	sl, [r0]
 8004d26:	4650      	mov	r0, sl
 8004d28:	f7fb fa52 	bl	80001d0 <strlen>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	930a      	str	r3, [sp, #40]	; 0x28
 8004d30:	6823      	ldr	r3, [r4, #0]
 8004d32:	9305      	str	r3, [sp, #20]
 8004d34:	f8d8 3000 	ldr.w	r3, [r8]
 8004d38:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004d3c:	3307      	adds	r3, #7
 8004d3e:	f023 0307 	bic.w	r3, r3, #7
 8004d42:	f103 0208 	add.w	r2, r3, #8
 8004d46:	f8c8 2000 	str.w	r2, [r8]
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004d52:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004d56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d5a:	9307      	str	r3, [sp, #28]
 8004d5c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d60:	ee08 0a10 	vmov	s16, r0
 8004d64:	4b9f      	ldr	r3, [pc, #636]	; (8004fe4 <_printf_float+0x2dc>)
 8004d66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d6e:	f7fb fedd 	bl	8000b2c <__aeabi_dcmpun>
 8004d72:	bb88      	cbnz	r0, 8004dd8 <_printf_float+0xd0>
 8004d74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d78:	4b9a      	ldr	r3, [pc, #616]	; (8004fe4 <_printf_float+0x2dc>)
 8004d7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d7e:	f7fb feb7 	bl	8000af0 <__aeabi_dcmple>
 8004d82:	bb48      	cbnz	r0, 8004dd8 <_printf_float+0xd0>
 8004d84:	2200      	movs	r2, #0
 8004d86:	2300      	movs	r3, #0
 8004d88:	4640      	mov	r0, r8
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	f7fb fea6 	bl	8000adc <__aeabi_dcmplt>
 8004d90:	b110      	cbz	r0, 8004d98 <_printf_float+0x90>
 8004d92:	232d      	movs	r3, #45	; 0x2d
 8004d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d98:	4b93      	ldr	r3, [pc, #588]	; (8004fe8 <_printf_float+0x2e0>)
 8004d9a:	4894      	ldr	r0, [pc, #592]	; (8004fec <_printf_float+0x2e4>)
 8004d9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004da0:	bf94      	ite	ls
 8004da2:	4698      	movls	r8, r3
 8004da4:	4680      	movhi	r8, r0
 8004da6:	2303      	movs	r3, #3
 8004da8:	6123      	str	r3, [r4, #16]
 8004daa:	9b05      	ldr	r3, [sp, #20]
 8004dac:	f023 0204 	bic.w	r2, r3, #4
 8004db0:	6022      	str	r2, [r4, #0]
 8004db2:	f04f 0900 	mov.w	r9, #0
 8004db6:	9700      	str	r7, [sp, #0]
 8004db8:	4633      	mov	r3, r6
 8004dba:	aa0b      	add	r2, sp, #44	; 0x2c
 8004dbc:	4621      	mov	r1, r4
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	f000 f9d8 	bl	8005174 <_printf_common>
 8004dc4:	3001      	adds	r0, #1
 8004dc6:	f040 8090 	bne.w	8004eea <_printf_float+0x1e2>
 8004dca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dce:	b00d      	add	sp, #52	; 0x34
 8004dd0:	ecbd 8b02 	vpop	{d8}
 8004dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dd8:	4642      	mov	r2, r8
 8004dda:	464b      	mov	r3, r9
 8004ddc:	4640      	mov	r0, r8
 8004dde:	4649      	mov	r1, r9
 8004de0:	f7fb fea4 	bl	8000b2c <__aeabi_dcmpun>
 8004de4:	b140      	cbz	r0, 8004df8 <_printf_float+0xf0>
 8004de6:	464b      	mov	r3, r9
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	bfbc      	itt	lt
 8004dec:	232d      	movlt	r3, #45	; 0x2d
 8004dee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004df2:	487f      	ldr	r0, [pc, #508]	; (8004ff0 <_printf_float+0x2e8>)
 8004df4:	4b7f      	ldr	r3, [pc, #508]	; (8004ff4 <_printf_float+0x2ec>)
 8004df6:	e7d1      	b.n	8004d9c <_printf_float+0x94>
 8004df8:	6863      	ldr	r3, [r4, #4]
 8004dfa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004dfe:	9206      	str	r2, [sp, #24]
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	d13f      	bne.n	8004e84 <_printf_float+0x17c>
 8004e04:	2306      	movs	r3, #6
 8004e06:	6063      	str	r3, [r4, #4]
 8004e08:	9b05      	ldr	r3, [sp, #20]
 8004e0a:	6861      	ldr	r1, [r4, #4]
 8004e0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004e10:	2300      	movs	r3, #0
 8004e12:	9303      	str	r3, [sp, #12]
 8004e14:	ab0a      	add	r3, sp, #40	; 0x28
 8004e16:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004e1a:	ab09      	add	r3, sp, #36	; 0x24
 8004e1c:	ec49 8b10 	vmov	d0, r8, r9
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	6022      	str	r2, [r4, #0]
 8004e24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e28:	4628      	mov	r0, r5
 8004e2a:	f7ff fecd 	bl	8004bc8 <__cvt>
 8004e2e:	9b06      	ldr	r3, [sp, #24]
 8004e30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e32:	2b47      	cmp	r3, #71	; 0x47
 8004e34:	4680      	mov	r8, r0
 8004e36:	d108      	bne.n	8004e4a <_printf_float+0x142>
 8004e38:	1cc8      	adds	r0, r1, #3
 8004e3a:	db02      	blt.n	8004e42 <_printf_float+0x13a>
 8004e3c:	6863      	ldr	r3, [r4, #4]
 8004e3e:	4299      	cmp	r1, r3
 8004e40:	dd41      	ble.n	8004ec6 <_printf_float+0x1be>
 8004e42:	f1ab 0b02 	sub.w	fp, fp, #2
 8004e46:	fa5f fb8b 	uxtb.w	fp, fp
 8004e4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004e4e:	d820      	bhi.n	8004e92 <_printf_float+0x18a>
 8004e50:	3901      	subs	r1, #1
 8004e52:	465a      	mov	r2, fp
 8004e54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e58:	9109      	str	r1, [sp, #36]	; 0x24
 8004e5a:	f7ff ff17 	bl	8004c8c <__exponent>
 8004e5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e60:	1813      	adds	r3, r2, r0
 8004e62:	2a01      	cmp	r2, #1
 8004e64:	4681      	mov	r9, r0
 8004e66:	6123      	str	r3, [r4, #16]
 8004e68:	dc02      	bgt.n	8004e70 <_printf_float+0x168>
 8004e6a:	6822      	ldr	r2, [r4, #0]
 8004e6c:	07d2      	lsls	r2, r2, #31
 8004e6e:	d501      	bpl.n	8004e74 <_printf_float+0x16c>
 8004e70:	3301      	adds	r3, #1
 8004e72:	6123      	str	r3, [r4, #16]
 8004e74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d09c      	beq.n	8004db6 <_printf_float+0xae>
 8004e7c:	232d      	movs	r3, #45	; 0x2d
 8004e7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e82:	e798      	b.n	8004db6 <_printf_float+0xae>
 8004e84:	9a06      	ldr	r2, [sp, #24]
 8004e86:	2a47      	cmp	r2, #71	; 0x47
 8004e88:	d1be      	bne.n	8004e08 <_printf_float+0x100>
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1bc      	bne.n	8004e08 <_printf_float+0x100>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e7b9      	b.n	8004e06 <_printf_float+0xfe>
 8004e92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004e96:	d118      	bne.n	8004eca <_printf_float+0x1c2>
 8004e98:	2900      	cmp	r1, #0
 8004e9a:	6863      	ldr	r3, [r4, #4]
 8004e9c:	dd0b      	ble.n	8004eb6 <_printf_float+0x1ae>
 8004e9e:	6121      	str	r1, [r4, #16]
 8004ea0:	b913      	cbnz	r3, 8004ea8 <_printf_float+0x1a0>
 8004ea2:	6822      	ldr	r2, [r4, #0]
 8004ea4:	07d0      	lsls	r0, r2, #31
 8004ea6:	d502      	bpl.n	8004eae <_printf_float+0x1a6>
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	440b      	add	r3, r1
 8004eac:	6123      	str	r3, [r4, #16]
 8004eae:	65a1      	str	r1, [r4, #88]	; 0x58
 8004eb0:	f04f 0900 	mov.w	r9, #0
 8004eb4:	e7de      	b.n	8004e74 <_printf_float+0x16c>
 8004eb6:	b913      	cbnz	r3, 8004ebe <_printf_float+0x1b6>
 8004eb8:	6822      	ldr	r2, [r4, #0]
 8004eba:	07d2      	lsls	r2, r2, #31
 8004ebc:	d501      	bpl.n	8004ec2 <_printf_float+0x1ba>
 8004ebe:	3302      	adds	r3, #2
 8004ec0:	e7f4      	b.n	8004eac <_printf_float+0x1a4>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e7f2      	b.n	8004eac <_printf_float+0x1a4>
 8004ec6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ecc:	4299      	cmp	r1, r3
 8004ece:	db05      	blt.n	8004edc <_printf_float+0x1d4>
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	6121      	str	r1, [r4, #16]
 8004ed4:	07d8      	lsls	r0, r3, #31
 8004ed6:	d5ea      	bpl.n	8004eae <_printf_float+0x1a6>
 8004ed8:	1c4b      	adds	r3, r1, #1
 8004eda:	e7e7      	b.n	8004eac <_printf_float+0x1a4>
 8004edc:	2900      	cmp	r1, #0
 8004ede:	bfd4      	ite	le
 8004ee0:	f1c1 0202 	rsble	r2, r1, #2
 8004ee4:	2201      	movgt	r2, #1
 8004ee6:	4413      	add	r3, r2
 8004ee8:	e7e0      	b.n	8004eac <_printf_float+0x1a4>
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	055a      	lsls	r2, r3, #21
 8004eee:	d407      	bmi.n	8004f00 <_printf_float+0x1f8>
 8004ef0:	6923      	ldr	r3, [r4, #16]
 8004ef2:	4642      	mov	r2, r8
 8004ef4:	4631      	mov	r1, r6
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	47b8      	blx	r7
 8004efa:	3001      	adds	r0, #1
 8004efc:	d12c      	bne.n	8004f58 <_printf_float+0x250>
 8004efe:	e764      	b.n	8004dca <_printf_float+0xc2>
 8004f00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f04:	f240 80e0 	bls.w	80050c8 <_printf_float+0x3c0>
 8004f08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f7fb fdda 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f14:	2800      	cmp	r0, #0
 8004f16:	d034      	beq.n	8004f82 <_printf_float+0x27a>
 8004f18:	4a37      	ldr	r2, [pc, #220]	; (8004ff8 <_printf_float+0x2f0>)
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	4631      	mov	r1, r6
 8004f1e:	4628      	mov	r0, r5
 8004f20:	47b8      	blx	r7
 8004f22:	3001      	adds	r0, #1
 8004f24:	f43f af51 	beq.w	8004dca <_printf_float+0xc2>
 8004f28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	db02      	blt.n	8004f36 <_printf_float+0x22e>
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	07d8      	lsls	r0, r3, #31
 8004f34:	d510      	bpl.n	8004f58 <_printf_float+0x250>
 8004f36:	ee18 3a10 	vmov	r3, s16
 8004f3a:	4652      	mov	r2, sl
 8004f3c:	4631      	mov	r1, r6
 8004f3e:	4628      	mov	r0, r5
 8004f40:	47b8      	blx	r7
 8004f42:	3001      	adds	r0, #1
 8004f44:	f43f af41 	beq.w	8004dca <_printf_float+0xc2>
 8004f48:	f04f 0800 	mov.w	r8, #0
 8004f4c:	f104 091a 	add.w	r9, r4, #26
 8004f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f52:	3b01      	subs	r3, #1
 8004f54:	4543      	cmp	r3, r8
 8004f56:	dc09      	bgt.n	8004f6c <_printf_float+0x264>
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	079b      	lsls	r3, r3, #30
 8004f5c:	f100 8105 	bmi.w	800516a <_printf_float+0x462>
 8004f60:	68e0      	ldr	r0, [r4, #12]
 8004f62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f64:	4298      	cmp	r0, r3
 8004f66:	bfb8      	it	lt
 8004f68:	4618      	movlt	r0, r3
 8004f6a:	e730      	b.n	8004dce <_printf_float+0xc6>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	464a      	mov	r2, r9
 8004f70:	4631      	mov	r1, r6
 8004f72:	4628      	mov	r0, r5
 8004f74:	47b8      	blx	r7
 8004f76:	3001      	adds	r0, #1
 8004f78:	f43f af27 	beq.w	8004dca <_printf_float+0xc2>
 8004f7c:	f108 0801 	add.w	r8, r8, #1
 8004f80:	e7e6      	b.n	8004f50 <_printf_float+0x248>
 8004f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	dc39      	bgt.n	8004ffc <_printf_float+0x2f4>
 8004f88:	4a1b      	ldr	r2, [pc, #108]	; (8004ff8 <_printf_float+0x2f0>)
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	4631      	mov	r1, r6
 8004f8e:	4628      	mov	r0, r5
 8004f90:	47b8      	blx	r7
 8004f92:	3001      	adds	r0, #1
 8004f94:	f43f af19 	beq.w	8004dca <_printf_float+0xc2>
 8004f98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	d102      	bne.n	8004fa6 <_printf_float+0x29e>
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	07d9      	lsls	r1, r3, #31
 8004fa4:	d5d8      	bpl.n	8004f58 <_printf_float+0x250>
 8004fa6:	ee18 3a10 	vmov	r3, s16
 8004faa:	4652      	mov	r2, sl
 8004fac:	4631      	mov	r1, r6
 8004fae:	4628      	mov	r0, r5
 8004fb0:	47b8      	blx	r7
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	f43f af09 	beq.w	8004dca <_printf_float+0xc2>
 8004fb8:	f04f 0900 	mov.w	r9, #0
 8004fbc:	f104 0a1a 	add.w	sl, r4, #26
 8004fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fc2:	425b      	negs	r3, r3
 8004fc4:	454b      	cmp	r3, r9
 8004fc6:	dc01      	bgt.n	8004fcc <_printf_float+0x2c4>
 8004fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fca:	e792      	b.n	8004ef2 <_printf_float+0x1ea>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	4652      	mov	r2, sl
 8004fd0:	4631      	mov	r1, r6
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	47b8      	blx	r7
 8004fd6:	3001      	adds	r0, #1
 8004fd8:	f43f aef7 	beq.w	8004dca <_printf_float+0xc2>
 8004fdc:	f109 0901 	add.w	r9, r9, #1
 8004fe0:	e7ee      	b.n	8004fc0 <_printf_float+0x2b8>
 8004fe2:	bf00      	nop
 8004fe4:	7fefffff 	.word	0x7fefffff
 8004fe8:	08007a2c 	.word	0x08007a2c
 8004fec:	08007a30 	.word	0x08007a30
 8004ff0:	08007a38 	.word	0x08007a38
 8004ff4:	08007a34 	.word	0x08007a34
 8004ff8:	08007a3c 	.word	0x08007a3c
 8004ffc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ffe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005000:	429a      	cmp	r2, r3
 8005002:	bfa8      	it	ge
 8005004:	461a      	movge	r2, r3
 8005006:	2a00      	cmp	r2, #0
 8005008:	4691      	mov	r9, r2
 800500a:	dc37      	bgt.n	800507c <_printf_float+0x374>
 800500c:	f04f 0b00 	mov.w	fp, #0
 8005010:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005014:	f104 021a 	add.w	r2, r4, #26
 8005018:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800501a:	9305      	str	r3, [sp, #20]
 800501c:	eba3 0309 	sub.w	r3, r3, r9
 8005020:	455b      	cmp	r3, fp
 8005022:	dc33      	bgt.n	800508c <_printf_float+0x384>
 8005024:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005028:	429a      	cmp	r2, r3
 800502a:	db3b      	blt.n	80050a4 <_printf_float+0x39c>
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	07da      	lsls	r2, r3, #31
 8005030:	d438      	bmi.n	80050a4 <_printf_float+0x39c>
 8005032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005034:	9a05      	ldr	r2, [sp, #20]
 8005036:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005038:	1a9a      	subs	r2, r3, r2
 800503a:	eba3 0901 	sub.w	r9, r3, r1
 800503e:	4591      	cmp	r9, r2
 8005040:	bfa8      	it	ge
 8005042:	4691      	movge	r9, r2
 8005044:	f1b9 0f00 	cmp.w	r9, #0
 8005048:	dc35      	bgt.n	80050b6 <_printf_float+0x3ae>
 800504a:	f04f 0800 	mov.w	r8, #0
 800504e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005052:	f104 0a1a 	add.w	sl, r4, #26
 8005056:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	eba3 0309 	sub.w	r3, r3, r9
 8005060:	4543      	cmp	r3, r8
 8005062:	f77f af79 	ble.w	8004f58 <_printf_float+0x250>
 8005066:	2301      	movs	r3, #1
 8005068:	4652      	mov	r2, sl
 800506a:	4631      	mov	r1, r6
 800506c:	4628      	mov	r0, r5
 800506e:	47b8      	blx	r7
 8005070:	3001      	adds	r0, #1
 8005072:	f43f aeaa 	beq.w	8004dca <_printf_float+0xc2>
 8005076:	f108 0801 	add.w	r8, r8, #1
 800507a:	e7ec      	b.n	8005056 <_printf_float+0x34e>
 800507c:	4613      	mov	r3, r2
 800507e:	4631      	mov	r1, r6
 8005080:	4642      	mov	r2, r8
 8005082:	4628      	mov	r0, r5
 8005084:	47b8      	blx	r7
 8005086:	3001      	adds	r0, #1
 8005088:	d1c0      	bne.n	800500c <_printf_float+0x304>
 800508a:	e69e      	b.n	8004dca <_printf_float+0xc2>
 800508c:	2301      	movs	r3, #1
 800508e:	4631      	mov	r1, r6
 8005090:	4628      	mov	r0, r5
 8005092:	9205      	str	r2, [sp, #20]
 8005094:	47b8      	blx	r7
 8005096:	3001      	adds	r0, #1
 8005098:	f43f ae97 	beq.w	8004dca <_printf_float+0xc2>
 800509c:	9a05      	ldr	r2, [sp, #20]
 800509e:	f10b 0b01 	add.w	fp, fp, #1
 80050a2:	e7b9      	b.n	8005018 <_printf_float+0x310>
 80050a4:	ee18 3a10 	vmov	r3, s16
 80050a8:	4652      	mov	r2, sl
 80050aa:	4631      	mov	r1, r6
 80050ac:	4628      	mov	r0, r5
 80050ae:	47b8      	blx	r7
 80050b0:	3001      	adds	r0, #1
 80050b2:	d1be      	bne.n	8005032 <_printf_float+0x32a>
 80050b4:	e689      	b.n	8004dca <_printf_float+0xc2>
 80050b6:	9a05      	ldr	r2, [sp, #20]
 80050b8:	464b      	mov	r3, r9
 80050ba:	4442      	add	r2, r8
 80050bc:	4631      	mov	r1, r6
 80050be:	4628      	mov	r0, r5
 80050c0:	47b8      	blx	r7
 80050c2:	3001      	adds	r0, #1
 80050c4:	d1c1      	bne.n	800504a <_printf_float+0x342>
 80050c6:	e680      	b.n	8004dca <_printf_float+0xc2>
 80050c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050ca:	2a01      	cmp	r2, #1
 80050cc:	dc01      	bgt.n	80050d2 <_printf_float+0x3ca>
 80050ce:	07db      	lsls	r3, r3, #31
 80050d0:	d538      	bpl.n	8005144 <_printf_float+0x43c>
 80050d2:	2301      	movs	r3, #1
 80050d4:	4642      	mov	r2, r8
 80050d6:	4631      	mov	r1, r6
 80050d8:	4628      	mov	r0, r5
 80050da:	47b8      	blx	r7
 80050dc:	3001      	adds	r0, #1
 80050de:	f43f ae74 	beq.w	8004dca <_printf_float+0xc2>
 80050e2:	ee18 3a10 	vmov	r3, s16
 80050e6:	4652      	mov	r2, sl
 80050e8:	4631      	mov	r1, r6
 80050ea:	4628      	mov	r0, r5
 80050ec:	47b8      	blx	r7
 80050ee:	3001      	adds	r0, #1
 80050f0:	f43f ae6b 	beq.w	8004dca <_printf_float+0xc2>
 80050f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050f8:	2200      	movs	r2, #0
 80050fa:	2300      	movs	r3, #0
 80050fc:	f7fb fce4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005100:	b9d8      	cbnz	r0, 800513a <_printf_float+0x432>
 8005102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005104:	f108 0201 	add.w	r2, r8, #1
 8005108:	3b01      	subs	r3, #1
 800510a:	4631      	mov	r1, r6
 800510c:	4628      	mov	r0, r5
 800510e:	47b8      	blx	r7
 8005110:	3001      	adds	r0, #1
 8005112:	d10e      	bne.n	8005132 <_printf_float+0x42a>
 8005114:	e659      	b.n	8004dca <_printf_float+0xc2>
 8005116:	2301      	movs	r3, #1
 8005118:	4652      	mov	r2, sl
 800511a:	4631      	mov	r1, r6
 800511c:	4628      	mov	r0, r5
 800511e:	47b8      	blx	r7
 8005120:	3001      	adds	r0, #1
 8005122:	f43f ae52 	beq.w	8004dca <_printf_float+0xc2>
 8005126:	f108 0801 	add.w	r8, r8, #1
 800512a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800512c:	3b01      	subs	r3, #1
 800512e:	4543      	cmp	r3, r8
 8005130:	dcf1      	bgt.n	8005116 <_printf_float+0x40e>
 8005132:	464b      	mov	r3, r9
 8005134:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005138:	e6dc      	b.n	8004ef4 <_printf_float+0x1ec>
 800513a:	f04f 0800 	mov.w	r8, #0
 800513e:	f104 0a1a 	add.w	sl, r4, #26
 8005142:	e7f2      	b.n	800512a <_printf_float+0x422>
 8005144:	2301      	movs	r3, #1
 8005146:	4642      	mov	r2, r8
 8005148:	e7df      	b.n	800510a <_printf_float+0x402>
 800514a:	2301      	movs	r3, #1
 800514c:	464a      	mov	r2, r9
 800514e:	4631      	mov	r1, r6
 8005150:	4628      	mov	r0, r5
 8005152:	47b8      	blx	r7
 8005154:	3001      	adds	r0, #1
 8005156:	f43f ae38 	beq.w	8004dca <_printf_float+0xc2>
 800515a:	f108 0801 	add.w	r8, r8, #1
 800515e:	68e3      	ldr	r3, [r4, #12]
 8005160:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005162:	1a5b      	subs	r3, r3, r1
 8005164:	4543      	cmp	r3, r8
 8005166:	dcf0      	bgt.n	800514a <_printf_float+0x442>
 8005168:	e6fa      	b.n	8004f60 <_printf_float+0x258>
 800516a:	f04f 0800 	mov.w	r8, #0
 800516e:	f104 0919 	add.w	r9, r4, #25
 8005172:	e7f4      	b.n	800515e <_printf_float+0x456>

08005174 <_printf_common>:
 8005174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005178:	4616      	mov	r6, r2
 800517a:	4699      	mov	r9, r3
 800517c:	688a      	ldr	r2, [r1, #8]
 800517e:	690b      	ldr	r3, [r1, #16]
 8005180:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005184:	4293      	cmp	r3, r2
 8005186:	bfb8      	it	lt
 8005188:	4613      	movlt	r3, r2
 800518a:	6033      	str	r3, [r6, #0]
 800518c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005190:	4607      	mov	r7, r0
 8005192:	460c      	mov	r4, r1
 8005194:	b10a      	cbz	r2, 800519a <_printf_common+0x26>
 8005196:	3301      	adds	r3, #1
 8005198:	6033      	str	r3, [r6, #0]
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	0699      	lsls	r1, r3, #26
 800519e:	bf42      	ittt	mi
 80051a0:	6833      	ldrmi	r3, [r6, #0]
 80051a2:	3302      	addmi	r3, #2
 80051a4:	6033      	strmi	r3, [r6, #0]
 80051a6:	6825      	ldr	r5, [r4, #0]
 80051a8:	f015 0506 	ands.w	r5, r5, #6
 80051ac:	d106      	bne.n	80051bc <_printf_common+0x48>
 80051ae:	f104 0a19 	add.w	sl, r4, #25
 80051b2:	68e3      	ldr	r3, [r4, #12]
 80051b4:	6832      	ldr	r2, [r6, #0]
 80051b6:	1a9b      	subs	r3, r3, r2
 80051b8:	42ab      	cmp	r3, r5
 80051ba:	dc26      	bgt.n	800520a <_printf_common+0x96>
 80051bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051c0:	1e13      	subs	r3, r2, #0
 80051c2:	6822      	ldr	r2, [r4, #0]
 80051c4:	bf18      	it	ne
 80051c6:	2301      	movne	r3, #1
 80051c8:	0692      	lsls	r2, r2, #26
 80051ca:	d42b      	bmi.n	8005224 <_printf_common+0xb0>
 80051cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051d0:	4649      	mov	r1, r9
 80051d2:	4638      	mov	r0, r7
 80051d4:	47c0      	blx	r8
 80051d6:	3001      	adds	r0, #1
 80051d8:	d01e      	beq.n	8005218 <_printf_common+0xa4>
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	68e5      	ldr	r5, [r4, #12]
 80051de:	6832      	ldr	r2, [r6, #0]
 80051e0:	f003 0306 	and.w	r3, r3, #6
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	bf08      	it	eq
 80051e8:	1aad      	subeq	r5, r5, r2
 80051ea:	68a3      	ldr	r3, [r4, #8]
 80051ec:	6922      	ldr	r2, [r4, #16]
 80051ee:	bf0c      	ite	eq
 80051f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051f4:	2500      	movne	r5, #0
 80051f6:	4293      	cmp	r3, r2
 80051f8:	bfc4      	itt	gt
 80051fa:	1a9b      	subgt	r3, r3, r2
 80051fc:	18ed      	addgt	r5, r5, r3
 80051fe:	2600      	movs	r6, #0
 8005200:	341a      	adds	r4, #26
 8005202:	42b5      	cmp	r5, r6
 8005204:	d11a      	bne.n	800523c <_printf_common+0xc8>
 8005206:	2000      	movs	r0, #0
 8005208:	e008      	b.n	800521c <_printf_common+0xa8>
 800520a:	2301      	movs	r3, #1
 800520c:	4652      	mov	r2, sl
 800520e:	4649      	mov	r1, r9
 8005210:	4638      	mov	r0, r7
 8005212:	47c0      	blx	r8
 8005214:	3001      	adds	r0, #1
 8005216:	d103      	bne.n	8005220 <_printf_common+0xac>
 8005218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800521c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005220:	3501      	adds	r5, #1
 8005222:	e7c6      	b.n	80051b2 <_printf_common+0x3e>
 8005224:	18e1      	adds	r1, r4, r3
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	2030      	movs	r0, #48	; 0x30
 800522a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800522e:	4422      	add	r2, r4
 8005230:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005234:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005238:	3302      	adds	r3, #2
 800523a:	e7c7      	b.n	80051cc <_printf_common+0x58>
 800523c:	2301      	movs	r3, #1
 800523e:	4622      	mov	r2, r4
 8005240:	4649      	mov	r1, r9
 8005242:	4638      	mov	r0, r7
 8005244:	47c0      	blx	r8
 8005246:	3001      	adds	r0, #1
 8005248:	d0e6      	beq.n	8005218 <_printf_common+0xa4>
 800524a:	3601      	adds	r6, #1
 800524c:	e7d9      	b.n	8005202 <_printf_common+0x8e>
	...

08005250 <_printf_i>:
 8005250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005254:	7e0f      	ldrb	r7, [r1, #24]
 8005256:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005258:	2f78      	cmp	r7, #120	; 0x78
 800525a:	4691      	mov	r9, r2
 800525c:	4680      	mov	r8, r0
 800525e:	460c      	mov	r4, r1
 8005260:	469a      	mov	sl, r3
 8005262:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005266:	d807      	bhi.n	8005278 <_printf_i+0x28>
 8005268:	2f62      	cmp	r7, #98	; 0x62
 800526a:	d80a      	bhi.n	8005282 <_printf_i+0x32>
 800526c:	2f00      	cmp	r7, #0
 800526e:	f000 80d8 	beq.w	8005422 <_printf_i+0x1d2>
 8005272:	2f58      	cmp	r7, #88	; 0x58
 8005274:	f000 80a3 	beq.w	80053be <_printf_i+0x16e>
 8005278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800527c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005280:	e03a      	b.n	80052f8 <_printf_i+0xa8>
 8005282:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005286:	2b15      	cmp	r3, #21
 8005288:	d8f6      	bhi.n	8005278 <_printf_i+0x28>
 800528a:	a101      	add	r1, pc, #4	; (adr r1, 8005290 <_printf_i+0x40>)
 800528c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005290:	080052e9 	.word	0x080052e9
 8005294:	080052fd 	.word	0x080052fd
 8005298:	08005279 	.word	0x08005279
 800529c:	08005279 	.word	0x08005279
 80052a0:	08005279 	.word	0x08005279
 80052a4:	08005279 	.word	0x08005279
 80052a8:	080052fd 	.word	0x080052fd
 80052ac:	08005279 	.word	0x08005279
 80052b0:	08005279 	.word	0x08005279
 80052b4:	08005279 	.word	0x08005279
 80052b8:	08005279 	.word	0x08005279
 80052bc:	08005409 	.word	0x08005409
 80052c0:	0800532d 	.word	0x0800532d
 80052c4:	080053eb 	.word	0x080053eb
 80052c8:	08005279 	.word	0x08005279
 80052cc:	08005279 	.word	0x08005279
 80052d0:	0800542b 	.word	0x0800542b
 80052d4:	08005279 	.word	0x08005279
 80052d8:	0800532d 	.word	0x0800532d
 80052dc:	08005279 	.word	0x08005279
 80052e0:	08005279 	.word	0x08005279
 80052e4:	080053f3 	.word	0x080053f3
 80052e8:	682b      	ldr	r3, [r5, #0]
 80052ea:	1d1a      	adds	r2, r3, #4
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	602a      	str	r2, [r5, #0]
 80052f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052f8:	2301      	movs	r3, #1
 80052fa:	e0a3      	b.n	8005444 <_printf_i+0x1f4>
 80052fc:	6820      	ldr	r0, [r4, #0]
 80052fe:	6829      	ldr	r1, [r5, #0]
 8005300:	0606      	lsls	r6, r0, #24
 8005302:	f101 0304 	add.w	r3, r1, #4
 8005306:	d50a      	bpl.n	800531e <_printf_i+0xce>
 8005308:	680e      	ldr	r6, [r1, #0]
 800530a:	602b      	str	r3, [r5, #0]
 800530c:	2e00      	cmp	r6, #0
 800530e:	da03      	bge.n	8005318 <_printf_i+0xc8>
 8005310:	232d      	movs	r3, #45	; 0x2d
 8005312:	4276      	negs	r6, r6
 8005314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005318:	485e      	ldr	r0, [pc, #376]	; (8005494 <_printf_i+0x244>)
 800531a:	230a      	movs	r3, #10
 800531c:	e019      	b.n	8005352 <_printf_i+0x102>
 800531e:	680e      	ldr	r6, [r1, #0]
 8005320:	602b      	str	r3, [r5, #0]
 8005322:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005326:	bf18      	it	ne
 8005328:	b236      	sxthne	r6, r6
 800532a:	e7ef      	b.n	800530c <_printf_i+0xbc>
 800532c:	682b      	ldr	r3, [r5, #0]
 800532e:	6820      	ldr	r0, [r4, #0]
 8005330:	1d19      	adds	r1, r3, #4
 8005332:	6029      	str	r1, [r5, #0]
 8005334:	0601      	lsls	r1, r0, #24
 8005336:	d501      	bpl.n	800533c <_printf_i+0xec>
 8005338:	681e      	ldr	r6, [r3, #0]
 800533a:	e002      	b.n	8005342 <_printf_i+0xf2>
 800533c:	0646      	lsls	r6, r0, #25
 800533e:	d5fb      	bpl.n	8005338 <_printf_i+0xe8>
 8005340:	881e      	ldrh	r6, [r3, #0]
 8005342:	4854      	ldr	r0, [pc, #336]	; (8005494 <_printf_i+0x244>)
 8005344:	2f6f      	cmp	r7, #111	; 0x6f
 8005346:	bf0c      	ite	eq
 8005348:	2308      	moveq	r3, #8
 800534a:	230a      	movne	r3, #10
 800534c:	2100      	movs	r1, #0
 800534e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005352:	6865      	ldr	r5, [r4, #4]
 8005354:	60a5      	str	r5, [r4, #8]
 8005356:	2d00      	cmp	r5, #0
 8005358:	bfa2      	ittt	ge
 800535a:	6821      	ldrge	r1, [r4, #0]
 800535c:	f021 0104 	bicge.w	r1, r1, #4
 8005360:	6021      	strge	r1, [r4, #0]
 8005362:	b90e      	cbnz	r6, 8005368 <_printf_i+0x118>
 8005364:	2d00      	cmp	r5, #0
 8005366:	d04d      	beq.n	8005404 <_printf_i+0x1b4>
 8005368:	4615      	mov	r5, r2
 800536a:	fbb6 f1f3 	udiv	r1, r6, r3
 800536e:	fb03 6711 	mls	r7, r3, r1, r6
 8005372:	5dc7      	ldrb	r7, [r0, r7]
 8005374:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005378:	4637      	mov	r7, r6
 800537a:	42bb      	cmp	r3, r7
 800537c:	460e      	mov	r6, r1
 800537e:	d9f4      	bls.n	800536a <_printf_i+0x11a>
 8005380:	2b08      	cmp	r3, #8
 8005382:	d10b      	bne.n	800539c <_printf_i+0x14c>
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	07de      	lsls	r6, r3, #31
 8005388:	d508      	bpl.n	800539c <_printf_i+0x14c>
 800538a:	6923      	ldr	r3, [r4, #16]
 800538c:	6861      	ldr	r1, [r4, #4]
 800538e:	4299      	cmp	r1, r3
 8005390:	bfde      	ittt	le
 8005392:	2330      	movle	r3, #48	; 0x30
 8005394:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005398:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800539c:	1b52      	subs	r2, r2, r5
 800539e:	6122      	str	r2, [r4, #16]
 80053a0:	f8cd a000 	str.w	sl, [sp]
 80053a4:	464b      	mov	r3, r9
 80053a6:	aa03      	add	r2, sp, #12
 80053a8:	4621      	mov	r1, r4
 80053aa:	4640      	mov	r0, r8
 80053ac:	f7ff fee2 	bl	8005174 <_printf_common>
 80053b0:	3001      	adds	r0, #1
 80053b2:	d14c      	bne.n	800544e <_printf_i+0x1fe>
 80053b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053b8:	b004      	add	sp, #16
 80053ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053be:	4835      	ldr	r0, [pc, #212]	; (8005494 <_printf_i+0x244>)
 80053c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80053c4:	6829      	ldr	r1, [r5, #0]
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80053cc:	6029      	str	r1, [r5, #0]
 80053ce:	061d      	lsls	r5, r3, #24
 80053d0:	d514      	bpl.n	80053fc <_printf_i+0x1ac>
 80053d2:	07df      	lsls	r7, r3, #31
 80053d4:	bf44      	itt	mi
 80053d6:	f043 0320 	orrmi.w	r3, r3, #32
 80053da:	6023      	strmi	r3, [r4, #0]
 80053dc:	b91e      	cbnz	r6, 80053e6 <_printf_i+0x196>
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	f023 0320 	bic.w	r3, r3, #32
 80053e4:	6023      	str	r3, [r4, #0]
 80053e6:	2310      	movs	r3, #16
 80053e8:	e7b0      	b.n	800534c <_printf_i+0xfc>
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	f043 0320 	orr.w	r3, r3, #32
 80053f0:	6023      	str	r3, [r4, #0]
 80053f2:	2378      	movs	r3, #120	; 0x78
 80053f4:	4828      	ldr	r0, [pc, #160]	; (8005498 <_printf_i+0x248>)
 80053f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053fa:	e7e3      	b.n	80053c4 <_printf_i+0x174>
 80053fc:	0659      	lsls	r1, r3, #25
 80053fe:	bf48      	it	mi
 8005400:	b2b6      	uxthmi	r6, r6
 8005402:	e7e6      	b.n	80053d2 <_printf_i+0x182>
 8005404:	4615      	mov	r5, r2
 8005406:	e7bb      	b.n	8005380 <_printf_i+0x130>
 8005408:	682b      	ldr	r3, [r5, #0]
 800540a:	6826      	ldr	r6, [r4, #0]
 800540c:	6961      	ldr	r1, [r4, #20]
 800540e:	1d18      	adds	r0, r3, #4
 8005410:	6028      	str	r0, [r5, #0]
 8005412:	0635      	lsls	r5, r6, #24
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	d501      	bpl.n	800541c <_printf_i+0x1cc>
 8005418:	6019      	str	r1, [r3, #0]
 800541a:	e002      	b.n	8005422 <_printf_i+0x1d2>
 800541c:	0670      	lsls	r0, r6, #25
 800541e:	d5fb      	bpl.n	8005418 <_printf_i+0x1c8>
 8005420:	8019      	strh	r1, [r3, #0]
 8005422:	2300      	movs	r3, #0
 8005424:	6123      	str	r3, [r4, #16]
 8005426:	4615      	mov	r5, r2
 8005428:	e7ba      	b.n	80053a0 <_printf_i+0x150>
 800542a:	682b      	ldr	r3, [r5, #0]
 800542c:	1d1a      	adds	r2, r3, #4
 800542e:	602a      	str	r2, [r5, #0]
 8005430:	681d      	ldr	r5, [r3, #0]
 8005432:	6862      	ldr	r2, [r4, #4]
 8005434:	2100      	movs	r1, #0
 8005436:	4628      	mov	r0, r5
 8005438:	f7fa fed2 	bl	80001e0 <memchr>
 800543c:	b108      	cbz	r0, 8005442 <_printf_i+0x1f2>
 800543e:	1b40      	subs	r0, r0, r5
 8005440:	6060      	str	r0, [r4, #4]
 8005442:	6863      	ldr	r3, [r4, #4]
 8005444:	6123      	str	r3, [r4, #16]
 8005446:	2300      	movs	r3, #0
 8005448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800544c:	e7a8      	b.n	80053a0 <_printf_i+0x150>
 800544e:	6923      	ldr	r3, [r4, #16]
 8005450:	462a      	mov	r2, r5
 8005452:	4649      	mov	r1, r9
 8005454:	4640      	mov	r0, r8
 8005456:	47d0      	blx	sl
 8005458:	3001      	adds	r0, #1
 800545a:	d0ab      	beq.n	80053b4 <_printf_i+0x164>
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	079b      	lsls	r3, r3, #30
 8005460:	d413      	bmi.n	800548a <_printf_i+0x23a>
 8005462:	68e0      	ldr	r0, [r4, #12]
 8005464:	9b03      	ldr	r3, [sp, #12]
 8005466:	4298      	cmp	r0, r3
 8005468:	bfb8      	it	lt
 800546a:	4618      	movlt	r0, r3
 800546c:	e7a4      	b.n	80053b8 <_printf_i+0x168>
 800546e:	2301      	movs	r3, #1
 8005470:	4632      	mov	r2, r6
 8005472:	4649      	mov	r1, r9
 8005474:	4640      	mov	r0, r8
 8005476:	47d0      	blx	sl
 8005478:	3001      	adds	r0, #1
 800547a:	d09b      	beq.n	80053b4 <_printf_i+0x164>
 800547c:	3501      	adds	r5, #1
 800547e:	68e3      	ldr	r3, [r4, #12]
 8005480:	9903      	ldr	r1, [sp, #12]
 8005482:	1a5b      	subs	r3, r3, r1
 8005484:	42ab      	cmp	r3, r5
 8005486:	dcf2      	bgt.n	800546e <_printf_i+0x21e>
 8005488:	e7eb      	b.n	8005462 <_printf_i+0x212>
 800548a:	2500      	movs	r5, #0
 800548c:	f104 0619 	add.w	r6, r4, #25
 8005490:	e7f5      	b.n	800547e <_printf_i+0x22e>
 8005492:	bf00      	nop
 8005494:	08007a3e 	.word	0x08007a3e
 8005498:	08007a4f 	.word	0x08007a4f

0800549c <siprintf>:
 800549c:	b40e      	push	{r1, r2, r3}
 800549e:	b500      	push	{lr}
 80054a0:	b09c      	sub	sp, #112	; 0x70
 80054a2:	ab1d      	add	r3, sp, #116	; 0x74
 80054a4:	9002      	str	r0, [sp, #8]
 80054a6:	9006      	str	r0, [sp, #24]
 80054a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054ac:	4809      	ldr	r0, [pc, #36]	; (80054d4 <siprintf+0x38>)
 80054ae:	9107      	str	r1, [sp, #28]
 80054b0:	9104      	str	r1, [sp, #16]
 80054b2:	4909      	ldr	r1, [pc, #36]	; (80054d8 <siprintf+0x3c>)
 80054b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80054b8:	9105      	str	r1, [sp, #20]
 80054ba:	6800      	ldr	r0, [r0, #0]
 80054bc:	9301      	str	r3, [sp, #4]
 80054be:	a902      	add	r1, sp, #8
 80054c0:	f001 fb78 	bl	8006bb4 <_svfiprintf_r>
 80054c4:	9b02      	ldr	r3, [sp, #8]
 80054c6:	2200      	movs	r2, #0
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	b01c      	add	sp, #112	; 0x70
 80054cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80054d0:	b003      	add	sp, #12
 80054d2:	4770      	bx	lr
 80054d4:	20000014 	.word	0x20000014
 80054d8:	ffff0208 	.word	0xffff0208

080054dc <quorem>:
 80054dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e0:	6903      	ldr	r3, [r0, #16]
 80054e2:	690c      	ldr	r4, [r1, #16]
 80054e4:	42a3      	cmp	r3, r4
 80054e6:	4607      	mov	r7, r0
 80054e8:	f2c0 8081 	blt.w	80055ee <quorem+0x112>
 80054ec:	3c01      	subs	r4, #1
 80054ee:	f101 0814 	add.w	r8, r1, #20
 80054f2:	f100 0514 	add.w	r5, r0, #20
 80054f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054fa:	9301      	str	r3, [sp, #4]
 80054fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005500:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005504:	3301      	adds	r3, #1
 8005506:	429a      	cmp	r2, r3
 8005508:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800550c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005510:	fbb2 f6f3 	udiv	r6, r2, r3
 8005514:	d331      	bcc.n	800557a <quorem+0x9e>
 8005516:	f04f 0e00 	mov.w	lr, #0
 800551a:	4640      	mov	r0, r8
 800551c:	46ac      	mov	ip, r5
 800551e:	46f2      	mov	sl, lr
 8005520:	f850 2b04 	ldr.w	r2, [r0], #4
 8005524:	b293      	uxth	r3, r2
 8005526:	fb06 e303 	mla	r3, r6, r3, lr
 800552a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800552e:	b29b      	uxth	r3, r3
 8005530:	ebaa 0303 	sub.w	r3, sl, r3
 8005534:	f8dc a000 	ldr.w	sl, [ip]
 8005538:	0c12      	lsrs	r2, r2, #16
 800553a:	fa13 f38a 	uxtah	r3, r3, sl
 800553e:	fb06 e202 	mla	r2, r6, r2, lr
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	9b00      	ldr	r3, [sp, #0]
 8005546:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800554a:	b292      	uxth	r2, r2
 800554c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005550:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005554:	f8bd 3000 	ldrh.w	r3, [sp]
 8005558:	4581      	cmp	r9, r0
 800555a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800555e:	f84c 3b04 	str.w	r3, [ip], #4
 8005562:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005566:	d2db      	bcs.n	8005520 <quorem+0x44>
 8005568:	f855 300b 	ldr.w	r3, [r5, fp]
 800556c:	b92b      	cbnz	r3, 800557a <quorem+0x9e>
 800556e:	9b01      	ldr	r3, [sp, #4]
 8005570:	3b04      	subs	r3, #4
 8005572:	429d      	cmp	r5, r3
 8005574:	461a      	mov	r2, r3
 8005576:	d32e      	bcc.n	80055d6 <quorem+0xfa>
 8005578:	613c      	str	r4, [r7, #16]
 800557a:	4638      	mov	r0, r7
 800557c:	f001 f8c6 	bl	800670c <__mcmp>
 8005580:	2800      	cmp	r0, #0
 8005582:	db24      	blt.n	80055ce <quorem+0xf2>
 8005584:	3601      	adds	r6, #1
 8005586:	4628      	mov	r0, r5
 8005588:	f04f 0c00 	mov.w	ip, #0
 800558c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005590:	f8d0 e000 	ldr.w	lr, [r0]
 8005594:	b293      	uxth	r3, r2
 8005596:	ebac 0303 	sub.w	r3, ip, r3
 800559a:	0c12      	lsrs	r2, r2, #16
 800559c:	fa13 f38e 	uxtah	r3, r3, lr
 80055a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80055a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055ae:	45c1      	cmp	r9, r8
 80055b0:	f840 3b04 	str.w	r3, [r0], #4
 80055b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80055b8:	d2e8      	bcs.n	800558c <quorem+0xb0>
 80055ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055c2:	b922      	cbnz	r2, 80055ce <quorem+0xf2>
 80055c4:	3b04      	subs	r3, #4
 80055c6:	429d      	cmp	r5, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	d30a      	bcc.n	80055e2 <quorem+0x106>
 80055cc:	613c      	str	r4, [r7, #16]
 80055ce:	4630      	mov	r0, r6
 80055d0:	b003      	add	sp, #12
 80055d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d6:	6812      	ldr	r2, [r2, #0]
 80055d8:	3b04      	subs	r3, #4
 80055da:	2a00      	cmp	r2, #0
 80055dc:	d1cc      	bne.n	8005578 <quorem+0x9c>
 80055de:	3c01      	subs	r4, #1
 80055e0:	e7c7      	b.n	8005572 <quorem+0x96>
 80055e2:	6812      	ldr	r2, [r2, #0]
 80055e4:	3b04      	subs	r3, #4
 80055e6:	2a00      	cmp	r2, #0
 80055e8:	d1f0      	bne.n	80055cc <quorem+0xf0>
 80055ea:	3c01      	subs	r4, #1
 80055ec:	e7eb      	b.n	80055c6 <quorem+0xea>
 80055ee:	2000      	movs	r0, #0
 80055f0:	e7ee      	b.n	80055d0 <quorem+0xf4>
 80055f2:	0000      	movs	r0, r0
 80055f4:	0000      	movs	r0, r0
	...

080055f8 <_dtoa_r>:
 80055f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055fc:	ed2d 8b04 	vpush	{d8-d9}
 8005600:	ec57 6b10 	vmov	r6, r7, d0
 8005604:	b093      	sub	sp, #76	; 0x4c
 8005606:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005608:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800560c:	9106      	str	r1, [sp, #24]
 800560e:	ee10 aa10 	vmov	sl, s0
 8005612:	4604      	mov	r4, r0
 8005614:	9209      	str	r2, [sp, #36]	; 0x24
 8005616:	930c      	str	r3, [sp, #48]	; 0x30
 8005618:	46bb      	mov	fp, r7
 800561a:	b975      	cbnz	r5, 800563a <_dtoa_r+0x42>
 800561c:	2010      	movs	r0, #16
 800561e:	f000 fddd 	bl	80061dc <malloc>
 8005622:	4602      	mov	r2, r0
 8005624:	6260      	str	r0, [r4, #36]	; 0x24
 8005626:	b920      	cbnz	r0, 8005632 <_dtoa_r+0x3a>
 8005628:	4ba7      	ldr	r3, [pc, #668]	; (80058c8 <_dtoa_r+0x2d0>)
 800562a:	21ea      	movs	r1, #234	; 0xea
 800562c:	48a7      	ldr	r0, [pc, #668]	; (80058cc <_dtoa_r+0x2d4>)
 800562e:	f001 fbd1 	bl	8006dd4 <__assert_func>
 8005632:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005636:	6005      	str	r5, [r0, #0]
 8005638:	60c5      	str	r5, [r0, #12]
 800563a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800563c:	6819      	ldr	r1, [r3, #0]
 800563e:	b151      	cbz	r1, 8005656 <_dtoa_r+0x5e>
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	604a      	str	r2, [r1, #4]
 8005644:	2301      	movs	r3, #1
 8005646:	4093      	lsls	r3, r2
 8005648:	608b      	str	r3, [r1, #8]
 800564a:	4620      	mov	r0, r4
 800564c:	f000 fe1c 	bl	8006288 <_Bfree>
 8005650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	1e3b      	subs	r3, r7, #0
 8005658:	bfaa      	itet	ge
 800565a:	2300      	movge	r3, #0
 800565c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005660:	f8c8 3000 	strge.w	r3, [r8]
 8005664:	4b9a      	ldr	r3, [pc, #616]	; (80058d0 <_dtoa_r+0x2d8>)
 8005666:	bfbc      	itt	lt
 8005668:	2201      	movlt	r2, #1
 800566a:	f8c8 2000 	strlt.w	r2, [r8]
 800566e:	ea33 030b 	bics.w	r3, r3, fp
 8005672:	d11b      	bne.n	80056ac <_dtoa_r+0xb4>
 8005674:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005676:	f242 730f 	movw	r3, #9999	; 0x270f
 800567a:	6013      	str	r3, [r2, #0]
 800567c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005680:	4333      	orrs	r3, r6
 8005682:	f000 8592 	beq.w	80061aa <_dtoa_r+0xbb2>
 8005686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005688:	b963      	cbnz	r3, 80056a4 <_dtoa_r+0xac>
 800568a:	4b92      	ldr	r3, [pc, #584]	; (80058d4 <_dtoa_r+0x2dc>)
 800568c:	e022      	b.n	80056d4 <_dtoa_r+0xdc>
 800568e:	4b92      	ldr	r3, [pc, #584]	; (80058d8 <_dtoa_r+0x2e0>)
 8005690:	9301      	str	r3, [sp, #4]
 8005692:	3308      	adds	r3, #8
 8005694:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	9801      	ldr	r0, [sp, #4]
 800569a:	b013      	add	sp, #76	; 0x4c
 800569c:	ecbd 8b04 	vpop	{d8-d9}
 80056a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a4:	4b8b      	ldr	r3, [pc, #556]	; (80058d4 <_dtoa_r+0x2dc>)
 80056a6:	9301      	str	r3, [sp, #4]
 80056a8:	3303      	adds	r3, #3
 80056aa:	e7f3      	b.n	8005694 <_dtoa_r+0x9c>
 80056ac:	2200      	movs	r2, #0
 80056ae:	2300      	movs	r3, #0
 80056b0:	4650      	mov	r0, sl
 80056b2:	4659      	mov	r1, fp
 80056b4:	f7fb fa08 	bl	8000ac8 <__aeabi_dcmpeq>
 80056b8:	ec4b ab19 	vmov	d9, sl, fp
 80056bc:	4680      	mov	r8, r0
 80056be:	b158      	cbz	r0, 80056d8 <_dtoa_r+0xe0>
 80056c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056c2:	2301      	movs	r3, #1
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 856b 	beq.w	80061a4 <_dtoa_r+0xbac>
 80056ce:	4883      	ldr	r0, [pc, #524]	; (80058dc <_dtoa_r+0x2e4>)
 80056d0:	6018      	str	r0, [r3, #0]
 80056d2:	1e43      	subs	r3, r0, #1
 80056d4:	9301      	str	r3, [sp, #4]
 80056d6:	e7df      	b.n	8005698 <_dtoa_r+0xa0>
 80056d8:	ec4b ab10 	vmov	d0, sl, fp
 80056dc:	aa10      	add	r2, sp, #64	; 0x40
 80056de:	a911      	add	r1, sp, #68	; 0x44
 80056e0:	4620      	mov	r0, r4
 80056e2:	f001 f8b9 	bl	8006858 <__d2b>
 80056e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80056ea:	ee08 0a10 	vmov	s16, r0
 80056ee:	2d00      	cmp	r5, #0
 80056f0:	f000 8084 	beq.w	80057fc <_dtoa_r+0x204>
 80056f4:	ee19 3a90 	vmov	r3, s19
 80056f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005700:	4656      	mov	r6, sl
 8005702:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005706:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800570a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800570e:	4b74      	ldr	r3, [pc, #464]	; (80058e0 <_dtoa_r+0x2e8>)
 8005710:	2200      	movs	r2, #0
 8005712:	4630      	mov	r0, r6
 8005714:	4639      	mov	r1, r7
 8005716:	f7fa fdb7 	bl	8000288 <__aeabi_dsub>
 800571a:	a365      	add	r3, pc, #404	; (adr r3, 80058b0 <_dtoa_r+0x2b8>)
 800571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005720:	f7fa ff6a 	bl	80005f8 <__aeabi_dmul>
 8005724:	a364      	add	r3, pc, #400	; (adr r3, 80058b8 <_dtoa_r+0x2c0>)
 8005726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572a:	f7fa fdaf 	bl	800028c <__adddf3>
 800572e:	4606      	mov	r6, r0
 8005730:	4628      	mov	r0, r5
 8005732:	460f      	mov	r7, r1
 8005734:	f7fa fef6 	bl	8000524 <__aeabi_i2d>
 8005738:	a361      	add	r3, pc, #388	; (adr r3, 80058c0 <_dtoa_r+0x2c8>)
 800573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573e:	f7fa ff5b 	bl	80005f8 <__aeabi_dmul>
 8005742:	4602      	mov	r2, r0
 8005744:	460b      	mov	r3, r1
 8005746:	4630      	mov	r0, r6
 8005748:	4639      	mov	r1, r7
 800574a:	f7fa fd9f 	bl	800028c <__adddf3>
 800574e:	4606      	mov	r6, r0
 8005750:	460f      	mov	r7, r1
 8005752:	f7fb fa01 	bl	8000b58 <__aeabi_d2iz>
 8005756:	2200      	movs	r2, #0
 8005758:	9000      	str	r0, [sp, #0]
 800575a:	2300      	movs	r3, #0
 800575c:	4630      	mov	r0, r6
 800575e:	4639      	mov	r1, r7
 8005760:	f7fb f9bc 	bl	8000adc <__aeabi_dcmplt>
 8005764:	b150      	cbz	r0, 800577c <_dtoa_r+0x184>
 8005766:	9800      	ldr	r0, [sp, #0]
 8005768:	f7fa fedc 	bl	8000524 <__aeabi_i2d>
 800576c:	4632      	mov	r2, r6
 800576e:	463b      	mov	r3, r7
 8005770:	f7fb f9aa 	bl	8000ac8 <__aeabi_dcmpeq>
 8005774:	b910      	cbnz	r0, 800577c <_dtoa_r+0x184>
 8005776:	9b00      	ldr	r3, [sp, #0]
 8005778:	3b01      	subs	r3, #1
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	9b00      	ldr	r3, [sp, #0]
 800577e:	2b16      	cmp	r3, #22
 8005780:	d85a      	bhi.n	8005838 <_dtoa_r+0x240>
 8005782:	9a00      	ldr	r2, [sp, #0]
 8005784:	4b57      	ldr	r3, [pc, #348]	; (80058e4 <_dtoa_r+0x2ec>)
 8005786:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800578a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578e:	ec51 0b19 	vmov	r0, r1, d9
 8005792:	f7fb f9a3 	bl	8000adc <__aeabi_dcmplt>
 8005796:	2800      	cmp	r0, #0
 8005798:	d050      	beq.n	800583c <_dtoa_r+0x244>
 800579a:	9b00      	ldr	r3, [sp, #0]
 800579c:	3b01      	subs	r3, #1
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	2300      	movs	r3, #0
 80057a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80057a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057a6:	1b5d      	subs	r5, r3, r5
 80057a8:	1e6b      	subs	r3, r5, #1
 80057aa:	9305      	str	r3, [sp, #20]
 80057ac:	bf45      	ittet	mi
 80057ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80057b2:	9304      	strmi	r3, [sp, #16]
 80057b4:	2300      	movpl	r3, #0
 80057b6:	2300      	movmi	r3, #0
 80057b8:	bf4c      	ite	mi
 80057ba:	9305      	strmi	r3, [sp, #20]
 80057bc:	9304      	strpl	r3, [sp, #16]
 80057be:	9b00      	ldr	r3, [sp, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	db3d      	blt.n	8005840 <_dtoa_r+0x248>
 80057c4:	9b05      	ldr	r3, [sp, #20]
 80057c6:	9a00      	ldr	r2, [sp, #0]
 80057c8:	920a      	str	r2, [sp, #40]	; 0x28
 80057ca:	4413      	add	r3, r2
 80057cc:	9305      	str	r3, [sp, #20]
 80057ce:	2300      	movs	r3, #0
 80057d0:	9307      	str	r3, [sp, #28]
 80057d2:	9b06      	ldr	r3, [sp, #24]
 80057d4:	2b09      	cmp	r3, #9
 80057d6:	f200 8089 	bhi.w	80058ec <_dtoa_r+0x2f4>
 80057da:	2b05      	cmp	r3, #5
 80057dc:	bfc4      	itt	gt
 80057de:	3b04      	subgt	r3, #4
 80057e0:	9306      	strgt	r3, [sp, #24]
 80057e2:	9b06      	ldr	r3, [sp, #24]
 80057e4:	f1a3 0302 	sub.w	r3, r3, #2
 80057e8:	bfcc      	ite	gt
 80057ea:	2500      	movgt	r5, #0
 80057ec:	2501      	movle	r5, #1
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	f200 8087 	bhi.w	8005902 <_dtoa_r+0x30a>
 80057f4:	e8df f003 	tbb	[pc, r3]
 80057f8:	59383a2d 	.word	0x59383a2d
 80057fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005800:	441d      	add	r5, r3
 8005802:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005806:	2b20      	cmp	r3, #32
 8005808:	bfc1      	itttt	gt
 800580a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800580e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005812:	fa0b f303 	lslgt.w	r3, fp, r3
 8005816:	fa26 f000 	lsrgt.w	r0, r6, r0
 800581a:	bfda      	itte	le
 800581c:	f1c3 0320 	rsble	r3, r3, #32
 8005820:	fa06 f003 	lslle.w	r0, r6, r3
 8005824:	4318      	orrgt	r0, r3
 8005826:	f7fa fe6d 	bl	8000504 <__aeabi_ui2d>
 800582a:	2301      	movs	r3, #1
 800582c:	4606      	mov	r6, r0
 800582e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005832:	3d01      	subs	r5, #1
 8005834:	930e      	str	r3, [sp, #56]	; 0x38
 8005836:	e76a      	b.n	800570e <_dtoa_r+0x116>
 8005838:	2301      	movs	r3, #1
 800583a:	e7b2      	b.n	80057a2 <_dtoa_r+0x1aa>
 800583c:	900b      	str	r0, [sp, #44]	; 0x2c
 800583e:	e7b1      	b.n	80057a4 <_dtoa_r+0x1ac>
 8005840:	9b04      	ldr	r3, [sp, #16]
 8005842:	9a00      	ldr	r2, [sp, #0]
 8005844:	1a9b      	subs	r3, r3, r2
 8005846:	9304      	str	r3, [sp, #16]
 8005848:	4253      	negs	r3, r2
 800584a:	9307      	str	r3, [sp, #28]
 800584c:	2300      	movs	r3, #0
 800584e:	930a      	str	r3, [sp, #40]	; 0x28
 8005850:	e7bf      	b.n	80057d2 <_dtoa_r+0x1da>
 8005852:	2300      	movs	r3, #0
 8005854:	9308      	str	r3, [sp, #32]
 8005856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005858:	2b00      	cmp	r3, #0
 800585a:	dc55      	bgt.n	8005908 <_dtoa_r+0x310>
 800585c:	2301      	movs	r3, #1
 800585e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005862:	461a      	mov	r2, r3
 8005864:	9209      	str	r2, [sp, #36]	; 0x24
 8005866:	e00c      	b.n	8005882 <_dtoa_r+0x28a>
 8005868:	2301      	movs	r3, #1
 800586a:	e7f3      	b.n	8005854 <_dtoa_r+0x25c>
 800586c:	2300      	movs	r3, #0
 800586e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005870:	9308      	str	r3, [sp, #32]
 8005872:	9b00      	ldr	r3, [sp, #0]
 8005874:	4413      	add	r3, r2
 8005876:	9302      	str	r3, [sp, #8]
 8005878:	3301      	adds	r3, #1
 800587a:	2b01      	cmp	r3, #1
 800587c:	9303      	str	r3, [sp, #12]
 800587e:	bfb8      	it	lt
 8005880:	2301      	movlt	r3, #1
 8005882:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005884:	2200      	movs	r2, #0
 8005886:	6042      	str	r2, [r0, #4]
 8005888:	2204      	movs	r2, #4
 800588a:	f102 0614 	add.w	r6, r2, #20
 800588e:	429e      	cmp	r6, r3
 8005890:	6841      	ldr	r1, [r0, #4]
 8005892:	d93d      	bls.n	8005910 <_dtoa_r+0x318>
 8005894:	4620      	mov	r0, r4
 8005896:	f000 fcb7 	bl	8006208 <_Balloc>
 800589a:	9001      	str	r0, [sp, #4]
 800589c:	2800      	cmp	r0, #0
 800589e:	d13b      	bne.n	8005918 <_dtoa_r+0x320>
 80058a0:	4b11      	ldr	r3, [pc, #68]	; (80058e8 <_dtoa_r+0x2f0>)
 80058a2:	4602      	mov	r2, r0
 80058a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80058a8:	e6c0      	b.n	800562c <_dtoa_r+0x34>
 80058aa:	2301      	movs	r3, #1
 80058ac:	e7df      	b.n	800586e <_dtoa_r+0x276>
 80058ae:	bf00      	nop
 80058b0:	636f4361 	.word	0x636f4361
 80058b4:	3fd287a7 	.word	0x3fd287a7
 80058b8:	8b60c8b3 	.word	0x8b60c8b3
 80058bc:	3fc68a28 	.word	0x3fc68a28
 80058c0:	509f79fb 	.word	0x509f79fb
 80058c4:	3fd34413 	.word	0x3fd34413
 80058c8:	08007a6d 	.word	0x08007a6d
 80058cc:	08007a84 	.word	0x08007a84
 80058d0:	7ff00000 	.word	0x7ff00000
 80058d4:	08007a69 	.word	0x08007a69
 80058d8:	08007a60 	.word	0x08007a60
 80058dc:	08007a3d 	.word	0x08007a3d
 80058e0:	3ff80000 	.word	0x3ff80000
 80058e4:	08007b78 	.word	0x08007b78
 80058e8:	08007adf 	.word	0x08007adf
 80058ec:	2501      	movs	r5, #1
 80058ee:	2300      	movs	r3, #0
 80058f0:	9306      	str	r3, [sp, #24]
 80058f2:	9508      	str	r5, [sp, #32]
 80058f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80058fc:	2200      	movs	r2, #0
 80058fe:	2312      	movs	r3, #18
 8005900:	e7b0      	b.n	8005864 <_dtoa_r+0x26c>
 8005902:	2301      	movs	r3, #1
 8005904:	9308      	str	r3, [sp, #32]
 8005906:	e7f5      	b.n	80058f4 <_dtoa_r+0x2fc>
 8005908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800590a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800590e:	e7b8      	b.n	8005882 <_dtoa_r+0x28a>
 8005910:	3101      	adds	r1, #1
 8005912:	6041      	str	r1, [r0, #4]
 8005914:	0052      	lsls	r2, r2, #1
 8005916:	e7b8      	b.n	800588a <_dtoa_r+0x292>
 8005918:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800591a:	9a01      	ldr	r2, [sp, #4]
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	9b03      	ldr	r3, [sp, #12]
 8005920:	2b0e      	cmp	r3, #14
 8005922:	f200 809d 	bhi.w	8005a60 <_dtoa_r+0x468>
 8005926:	2d00      	cmp	r5, #0
 8005928:	f000 809a 	beq.w	8005a60 <_dtoa_r+0x468>
 800592c:	9b00      	ldr	r3, [sp, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	dd32      	ble.n	8005998 <_dtoa_r+0x3a0>
 8005932:	4ab7      	ldr	r2, [pc, #732]	; (8005c10 <_dtoa_r+0x618>)
 8005934:	f003 030f 	and.w	r3, r3, #15
 8005938:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800593c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005940:	9b00      	ldr	r3, [sp, #0]
 8005942:	05d8      	lsls	r0, r3, #23
 8005944:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005948:	d516      	bpl.n	8005978 <_dtoa_r+0x380>
 800594a:	4bb2      	ldr	r3, [pc, #712]	; (8005c14 <_dtoa_r+0x61c>)
 800594c:	ec51 0b19 	vmov	r0, r1, d9
 8005950:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005954:	f7fa ff7a 	bl	800084c <__aeabi_ddiv>
 8005958:	f007 070f 	and.w	r7, r7, #15
 800595c:	4682      	mov	sl, r0
 800595e:	468b      	mov	fp, r1
 8005960:	2503      	movs	r5, #3
 8005962:	4eac      	ldr	r6, [pc, #688]	; (8005c14 <_dtoa_r+0x61c>)
 8005964:	b957      	cbnz	r7, 800597c <_dtoa_r+0x384>
 8005966:	4642      	mov	r2, r8
 8005968:	464b      	mov	r3, r9
 800596a:	4650      	mov	r0, sl
 800596c:	4659      	mov	r1, fp
 800596e:	f7fa ff6d 	bl	800084c <__aeabi_ddiv>
 8005972:	4682      	mov	sl, r0
 8005974:	468b      	mov	fp, r1
 8005976:	e028      	b.n	80059ca <_dtoa_r+0x3d2>
 8005978:	2502      	movs	r5, #2
 800597a:	e7f2      	b.n	8005962 <_dtoa_r+0x36a>
 800597c:	07f9      	lsls	r1, r7, #31
 800597e:	d508      	bpl.n	8005992 <_dtoa_r+0x39a>
 8005980:	4640      	mov	r0, r8
 8005982:	4649      	mov	r1, r9
 8005984:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005988:	f7fa fe36 	bl	80005f8 <__aeabi_dmul>
 800598c:	3501      	adds	r5, #1
 800598e:	4680      	mov	r8, r0
 8005990:	4689      	mov	r9, r1
 8005992:	107f      	asrs	r7, r7, #1
 8005994:	3608      	adds	r6, #8
 8005996:	e7e5      	b.n	8005964 <_dtoa_r+0x36c>
 8005998:	f000 809b 	beq.w	8005ad2 <_dtoa_r+0x4da>
 800599c:	9b00      	ldr	r3, [sp, #0]
 800599e:	4f9d      	ldr	r7, [pc, #628]	; (8005c14 <_dtoa_r+0x61c>)
 80059a0:	425e      	negs	r6, r3
 80059a2:	4b9b      	ldr	r3, [pc, #620]	; (8005c10 <_dtoa_r+0x618>)
 80059a4:	f006 020f 	and.w	r2, r6, #15
 80059a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b0:	ec51 0b19 	vmov	r0, r1, d9
 80059b4:	f7fa fe20 	bl	80005f8 <__aeabi_dmul>
 80059b8:	1136      	asrs	r6, r6, #4
 80059ba:	4682      	mov	sl, r0
 80059bc:	468b      	mov	fp, r1
 80059be:	2300      	movs	r3, #0
 80059c0:	2502      	movs	r5, #2
 80059c2:	2e00      	cmp	r6, #0
 80059c4:	d17a      	bne.n	8005abc <_dtoa_r+0x4c4>
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1d3      	bne.n	8005972 <_dtoa_r+0x37a>
 80059ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 8082 	beq.w	8005ad6 <_dtoa_r+0x4de>
 80059d2:	4b91      	ldr	r3, [pc, #580]	; (8005c18 <_dtoa_r+0x620>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	4650      	mov	r0, sl
 80059d8:	4659      	mov	r1, fp
 80059da:	f7fb f87f 	bl	8000adc <__aeabi_dcmplt>
 80059de:	2800      	cmp	r0, #0
 80059e0:	d079      	beq.n	8005ad6 <_dtoa_r+0x4de>
 80059e2:	9b03      	ldr	r3, [sp, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d076      	beq.n	8005ad6 <_dtoa_r+0x4de>
 80059e8:	9b02      	ldr	r3, [sp, #8]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	dd36      	ble.n	8005a5c <_dtoa_r+0x464>
 80059ee:	9b00      	ldr	r3, [sp, #0]
 80059f0:	4650      	mov	r0, sl
 80059f2:	4659      	mov	r1, fp
 80059f4:	1e5f      	subs	r7, r3, #1
 80059f6:	2200      	movs	r2, #0
 80059f8:	4b88      	ldr	r3, [pc, #544]	; (8005c1c <_dtoa_r+0x624>)
 80059fa:	f7fa fdfd 	bl	80005f8 <__aeabi_dmul>
 80059fe:	9e02      	ldr	r6, [sp, #8]
 8005a00:	4682      	mov	sl, r0
 8005a02:	468b      	mov	fp, r1
 8005a04:	3501      	adds	r5, #1
 8005a06:	4628      	mov	r0, r5
 8005a08:	f7fa fd8c 	bl	8000524 <__aeabi_i2d>
 8005a0c:	4652      	mov	r2, sl
 8005a0e:	465b      	mov	r3, fp
 8005a10:	f7fa fdf2 	bl	80005f8 <__aeabi_dmul>
 8005a14:	4b82      	ldr	r3, [pc, #520]	; (8005c20 <_dtoa_r+0x628>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	f7fa fc38 	bl	800028c <__adddf3>
 8005a1c:	46d0      	mov	r8, sl
 8005a1e:	46d9      	mov	r9, fp
 8005a20:	4682      	mov	sl, r0
 8005a22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005a26:	2e00      	cmp	r6, #0
 8005a28:	d158      	bne.n	8005adc <_dtoa_r+0x4e4>
 8005a2a:	4b7e      	ldr	r3, [pc, #504]	; (8005c24 <_dtoa_r+0x62c>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	4640      	mov	r0, r8
 8005a30:	4649      	mov	r1, r9
 8005a32:	f7fa fc29 	bl	8000288 <__aeabi_dsub>
 8005a36:	4652      	mov	r2, sl
 8005a38:	465b      	mov	r3, fp
 8005a3a:	4680      	mov	r8, r0
 8005a3c:	4689      	mov	r9, r1
 8005a3e:	f7fb f86b 	bl	8000b18 <__aeabi_dcmpgt>
 8005a42:	2800      	cmp	r0, #0
 8005a44:	f040 8295 	bne.w	8005f72 <_dtoa_r+0x97a>
 8005a48:	4652      	mov	r2, sl
 8005a4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005a4e:	4640      	mov	r0, r8
 8005a50:	4649      	mov	r1, r9
 8005a52:	f7fb f843 	bl	8000adc <__aeabi_dcmplt>
 8005a56:	2800      	cmp	r0, #0
 8005a58:	f040 8289 	bne.w	8005f6e <_dtoa_r+0x976>
 8005a5c:	ec5b ab19 	vmov	sl, fp, d9
 8005a60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f2c0 8148 	blt.w	8005cf8 <_dtoa_r+0x700>
 8005a68:	9a00      	ldr	r2, [sp, #0]
 8005a6a:	2a0e      	cmp	r2, #14
 8005a6c:	f300 8144 	bgt.w	8005cf8 <_dtoa_r+0x700>
 8005a70:	4b67      	ldr	r3, [pc, #412]	; (8005c10 <_dtoa_r+0x618>)
 8005a72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f280 80d5 	bge.w	8005c2c <_dtoa_r+0x634>
 8005a82:	9b03      	ldr	r3, [sp, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f300 80d1 	bgt.w	8005c2c <_dtoa_r+0x634>
 8005a8a:	f040 826f 	bne.w	8005f6c <_dtoa_r+0x974>
 8005a8e:	4b65      	ldr	r3, [pc, #404]	; (8005c24 <_dtoa_r+0x62c>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	4640      	mov	r0, r8
 8005a94:	4649      	mov	r1, r9
 8005a96:	f7fa fdaf 	bl	80005f8 <__aeabi_dmul>
 8005a9a:	4652      	mov	r2, sl
 8005a9c:	465b      	mov	r3, fp
 8005a9e:	f7fb f831 	bl	8000b04 <__aeabi_dcmpge>
 8005aa2:	9e03      	ldr	r6, [sp, #12]
 8005aa4:	4637      	mov	r7, r6
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	f040 8245 	bne.w	8005f36 <_dtoa_r+0x93e>
 8005aac:	9d01      	ldr	r5, [sp, #4]
 8005aae:	2331      	movs	r3, #49	; 0x31
 8005ab0:	f805 3b01 	strb.w	r3, [r5], #1
 8005ab4:	9b00      	ldr	r3, [sp, #0]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	e240      	b.n	8005f3e <_dtoa_r+0x946>
 8005abc:	07f2      	lsls	r2, r6, #31
 8005abe:	d505      	bpl.n	8005acc <_dtoa_r+0x4d4>
 8005ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ac4:	f7fa fd98 	bl	80005f8 <__aeabi_dmul>
 8005ac8:	3501      	adds	r5, #1
 8005aca:	2301      	movs	r3, #1
 8005acc:	1076      	asrs	r6, r6, #1
 8005ace:	3708      	adds	r7, #8
 8005ad0:	e777      	b.n	80059c2 <_dtoa_r+0x3ca>
 8005ad2:	2502      	movs	r5, #2
 8005ad4:	e779      	b.n	80059ca <_dtoa_r+0x3d2>
 8005ad6:	9f00      	ldr	r7, [sp, #0]
 8005ad8:	9e03      	ldr	r6, [sp, #12]
 8005ada:	e794      	b.n	8005a06 <_dtoa_r+0x40e>
 8005adc:	9901      	ldr	r1, [sp, #4]
 8005ade:	4b4c      	ldr	r3, [pc, #304]	; (8005c10 <_dtoa_r+0x618>)
 8005ae0:	4431      	add	r1, r6
 8005ae2:	910d      	str	r1, [sp, #52]	; 0x34
 8005ae4:	9908      	ldr	r1, [sp, #32]
 8005ae6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005aea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005aee:	2900      	cmp	r1, #0
 8005af0:	d043      	beq.n	8005b7a <_dtoa_r+0x582>
 8005af2:	494d      	ldr	r1, [pc, #308]	; (8005c28 <_dtoa_r+0x630>)
 8005af4:	2000      	movs	r0, #0
 8005af6:	f7fa fea9 	bl	800084c <__aeabi_ddiv>
 8005afa:	4652      	mov	r2, sl
 8005afc:	465b      	mov	r3, fp
 8005afe:	f7fa fbc3 	bl	8000288 <__aeabi_dsub>
 8005b02:	9d01      	ldr	r5, [sp, #4]
 8005b04:	4682      	mov	sl, r0
 8005b06:	468b      	mov	fp, r1
 8005b08:	4649      	mov	r1, r9
 8005b0a:	4640      	mov	r0, r8
 8005b0c:	f7fb f824 	bl	8000b58 <__aeabi_d2iz>
 8005b10:	4606      	mov	r6, r0
 8005b12:	f7fa fd07 	bl	8000524 <__aeabi_i2d>
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4640      	mov	r0, r8
 8005b1c:	4649      	mov	r1, r9
 8005b1e:	f7fa fbb3 	bl	8000288 <__aeabi_dsub>
 8005b22:	3630      	adds	r6, #48	; 0x30
 8005b24:	f805 6b01 	strb.w	r6, [r5], #1
 8005b28:	4652      	mov	r2, sl
 8005b2a:	465b      	mov	r3, fp
 8005b2c:	4680      	mov	r8, r0
 8005b2e:	4689      	mov	r9, r1
 8005b30:	f7fa ffd4 	bl	8000adc <__aeabi_dcmplt>
 8005b34:	2800      	cmp	r0, #0
 8005b36:	d163      	bne.n	8005c00 <_dtoa_r+0x608>
 8005b38:	4642      	mov	r2, r8
 8005b3a:	464b      	mov	r3, r9
 8005b3c:	4936      	ldr	r1, [pc, #216]	; (8005c18 <_dtoa_r+0x620>)
 8005b3e:	2000      	movs	r0, #0
 8005b40:	f7fa fba2 	bl	8000288 <__aeabi_dsub>
 8005b44:	4652      	mov	r2, sl
 8005b46:	465b      	mov	r3, fp
 8005b48:	f7fa ffc8 	bl	8000adc <__aeabi_dcmplt>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	f040 80b5 	bne.w	8005cbc <_dtoa_r+0x6c4>
 8005b52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b54:	429d      	cmp	r5, r3
 8005b56:	d081      	beq.n	8005a5c <_dtoa_r+0x464>
 8005b58:	4b30      	ldr	r3, [pc, #192]	; (8005c1c <_dtoa_r+0x624>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	4650      	mov	r0, sl
 8005b5e:	4659      	mov	r1, fp
 8005b60:	f7fa fd4a 	bl	80005f8 <__aeabi_dmul>
 8005b64:	4b2d      	ldr	r3, [pc, #180]	; (8005c1c <_dtoa_r+0x624>)
 8005b66:	4682      	mov	sl, r0
 8005b68:	468b      	mov	fp, r1
 8005b6a:	4640      	mov	r0, r8
 8005b6c:	4649      	mov	r1, r9
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f7fa fd42 	bl	80005f8 <__aeabi_dmul>
 8005b74:	4680      	mov	r8, r0
 8005b76:	4689      	mov	r9, r1
 8005b78:	e7c6      	b.n	8005b08 <_dtoa_r+0x510>
 8005b7a:	4650      	mov	r0, sl
 8005b7c:	4659      	mov	r1, fp
 8005b7e:	f7fa fd3b 	bl	80005f8 <__aeabi_dmul>
 8005b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b84:	9d01      	ldr	r5, [sp, #4]
 8005b86:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b88:	4682      	mov	sl, r0
 8005b8a:	468b      	mov	fp, r1
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	4640      	mov	r0, r8
 8005b90:	f7fa ffe2 	bl	8000b58 <__aeabi_d2iz>
 8005b94:	4606      	mov	r6, r0
 8005b96:	f7fa fcc5 	bl	8000524 <__aeabi_i2d>
 8005b9a:	3630      	adds	r6, #48	; 0x30
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4640      	mov	r0, r8
 8005ba2:	4649      	mov	r1, r9
 8005ba4:	f7fa fb70 	bl	8000288 <__aeabi_dsub>
 8005ba8:	f805 6b01 	strb.w	r6, [r5], #1
 8005bac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bae:	429d      	cmp	r5, r3
 8005bb0:	4680      	mov	r8, r0
 8005bb2:	4689      	mov	r9, r1
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	d124      	bne.n	8005c04 <_dtoa_r+0x60c>
 8005bba:	4b1b      	ldr	r3, [pc, #108]	; (8005c28 <_dtoa_r+0x630>)
 8005bbc:	4650      	mov	r0, sl
 8005bbe:	4659      	mov	r1, fp
 8005bc0:	f7fa fb64 	bl	800028c <__adddf3>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	4640      	mov	r0, r8
 8005bca:	4649      	mov	r1, r9
 8005bcc:	f7fa ffa4 	bl	8000b18 <__aeabi_dcmpgt>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	d173      	bne.n	8005cbc <_dtoa_r+0x6c4>
 8005bd4:	4652      	mov	r2, sl
 8005bd6:	465b      	mov	r3, fp
 8005bd8:	4913      	ldr	r1, [pc, #76]	; (8005c28 <_dtoa_r+0x630>)
 8005bda:	2000      	movs	r0, #0
 8005bdc:	f7fa fb54 	bl	8000288 <__aeabi_dsub>
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4640      	mov	r0, r8
 8005be6:	4649      	mov	r1, r9
 8005be8:	f7fa ff78 	bl	8000adc <__aeabi_dcmplt>
 8005bec:	2800      	cmp	r0, #0
 8005bee:	f43f af35 	beq.w	8005a5c <_dtoa_r+0x464>
 8005bf2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005bf4:	1e6b      	subs	r3, r5, #1
 8005bf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bf8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005bfc:	2b30      	cmp	r3, #48	; 0x30
 8005bfe:	d0f8      	beq.n	8005bf2 <_dtoa_r+0x5fa>
 8005c00:	9700      	str	r7, [sp, #0]
 8005c02:	e049      	b.n	8005c98 <_dtoa_r+0x6a0>
 8005c04:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <_dtoa_r+0x624>)
 8005c06:	f7fa fcf7 	bl	80005f8 <__aeabi_dmul>
 8005c0a:	4680      	mov	r8, r0
 8005c0c:	4689      	mov	r9, r1
 8005c0e:	e7bd      	b.n	8005b8c <_dtoa_r+0x594>
 8005c10:	08007b78 	.word	0x08007b78
 8005c14:	08007b50 	.word	0x08007b50
 8005c18:	3ff00000 	.word	0x3ff00000
 8005c1c:	40240000 	.word	0x40240000
 8005c20:	401c0000 	.word	0x401c0000
 8005c24:	40140000 	.word	0x40140000
 8005c28:	3fe00000 	.word	0x3fe00000
 8005c2c:	9d01      	ldr	r5, [sp, #4]
 8005c2e:	4656      	mov	r6, sl
 8005c30:	465f      	mov	r7, fp
 8005c32:	4642      	mov	r2, r8
 8005c34:	464b      	mov	r3, r9
 8005c36:	4630      	mov	r0, r6
 8005c38:	4639      	mov	r1, r7
 8005c3a:	f7fa fe07 	bl	800084c <__aeabi_ddiv>
 8005c3e:	f7fa ff8b 	bl	8000b58 <__aeabi_d2iz>
 8005c42:	4682      	mov	sl, r0
 8005c44:	f7fa fc6e 	bl	8000524 <__aeabi_i2d>
 8005c48:	4642      	mov	r2, r8
 8005c4a:	464b      	mov	r3, r9
 8005c4c:	f7fa fcd4 	bl	80005f8 <__aeabi_dmul>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4630      	mov	r0, r6
 8005c56:	4639      	mov	r1, r7
 8005c58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005c5c:	f7fa fb14 	bl	8000288 <__aeabi_dsub>
 8005c60:	f805 6b01 	strb.w	r6, [r5], #1
 8005c64:	9e01      	ldr	r6, [sp, #4]
 8005c66:	9f03      	ldr	r7, [sp, #12]
 8005c68:	1bae      	subs	r6, r5, r6
 8005c6a:	42b7      	cmp	r7, r6
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	d135      	bne.n	8005cde <_dtoa_r+0x6e6>
 8005c72:	f7fa fb0b 	bl	800028c <__adddf3>
 8005c76:	4642      	mov	r2, r8
 8005c78:	464b      	mov	r3, r9
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	460f      	mov	r7, r1
 8005c7e:	f7fa ff4b 	bl	8000b18 <__aeabi_dcmpgt>
 8005c82:	b9d0      	cbnz	r0, 8005cba <_dtoa_r+0x6c2>
 8005c84:	4642      	mov	r2, r8
 8005c86:	464b      	mov	r3, r9
 8005c88:	4630      	mov	r0, r6
 8005c8a:	4639      	mov	r1, r7
 8005c8c:	f7fa ff1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c90:	b110      	cbz	r0, 8005c98 <_dtoa_r+0x6a0>
 8005c92:	f01a 0f01 	tst.w	sl, #1
 8005c96:	d110      	bne.n	8005cba <_dtoa_r+0x6c2>
 8005c98:	4620      	mov	r0, r4
 8005c9a:	ee18 1a10 	vmov	r1, s16
 8005c9e:	f000 faf3 	bl	8006288 <_Bfree>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	9800      	ldr	r0, [sp, #0]
 8005ca6:	702b      	strb	r3, [r5, #0]
 8005ca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005caa:	3001      	adds	r0, #1
 8005cac:	6018      	str	r0, [r3, #0]
 8005cae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f43f acf1 	beq.w	8005698 <_dtoa_r+0xa0>
 8005cb6:	601d      	str	r5, [r3, #0]
 8005cb8:	e4ee      	b.n	8005698 <_dtoa_r+0xa0>
 8005cba:	9f00      	ldr	r7, [sp, #0]
 8005cbc:	462b      	mov	r3, r5
 8005cbe:	461d      	mov	r5, r3
 8005cc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cc4:	2a39      	cmp	r2, #57	; 0x39
 8005cc6:	d106      	bne.n	8005cd6 <_dtoa_r+0x6de>
 8005cc8:	9a01      	ldr	r2, [sp, #4]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d1f7      	bne.n	8005cbe <_dtoa_r+0x6c6>
 8005cce:	9901      	ldr	r1, [sp, #4]
 8005cd0:	2230      	movs	r2, #48	; 0x30
 8005cd2:	3701      	adds	r7, #1
 8005cd4:	700a      	strb	r2, [r1, #0]
 8005cd6:	781a      	ldrb	r2, [r3, #0]
 8005cd8:	3201      	adds	r2, #1
 8005cda:	701a      	strb	r2, [r3, #0]
 8005cdc:	e790      	b.n	8005c00 <_dtoa_r+0x608>
 8005cde:	4ba6      	ldr	r3, [pc, #664]	; (8005f78 <_dtoa_r+0x980>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f7fa fc89 	bl	80005f8 <__aeabi_dmul>
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	2300      	movs	r3, #0
 8005cea:	4606      	mov	r6, r0
 8005cec:	460f      	mov	r7, r1
 8005cee:	f7fa feeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	d09d      	beq.n	8005c32 <_dtoa_r+0x63a>
 8005cf6:	e7cf      	b.n	8005c98 <_dtoa_r+0x6a0>
 8005cf8:	9a08      	ldr	r2, [sp, #32]
 8005cfa:	2a00      	cmp	r2, #0
 8005cfc:	f000 80d7 	beq.w	8005eae <_dtoa_r+0x8b6>
 8005d00:	9a06      	ldr	r2, [sp, #24]
 8005d02:	2a01      	cmp	r2, #1
 8005d04:	f300 80ba 	bgt.w	8005e7c <_dtoa_r+0x884>
 8005d08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d0a:	2a00      	cmp	r2, #0
 8005d0c:	f000 80b2 	beq.w	8005e74 <_dtoa_r+0x87c>
 8005d10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d14:	9e07      	ldr	r6, [sp, #28]
 8005d16:	9d04      	ldr	r5, [sp, #16]
 8005d18:	9a04      	ldr	r2, [sp, #16]
 8005d1a:	441a      	add	r2, r3
 8005d1c:	9204      	str	r2, [sp, #16]
 8005d1e:	9a05      	ldr	r2, [sp, #20]
 8005d20:	2101      	movs	r1, #1
 8005d22:	441a      	add	r2, r3
 8005d24:	4620      	mov	r0, r4
 8005d26:	9205      	str	r2, [sp, #20]
 8005d28:	f000 fb66 	bl	80063f8 <__i2b>
 8005d2c:	4607      	mov	r7, r0
 8005d2e:	2d00      	cmp	r5, #0
 8005d30:	dd0c      	ble.n	8005d4c <_dtoa_r+0x754>
 8005d32:	9b05      	ldr	r3, [sp, #20]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	dd09      	ble.n	8005d4c <_dtoa_r+0x754>
 8005d38:	42ab      	cmp	r3, r5
 8005d3a:	9a04      	ldr	r2, [sp, #16]
 8005d3c:	bfa8      	it	ge
 8005d3e:	462b      	movge	r3, r5
 8005d40:	1ad2      	subs	r2, r2, r3
 8005d42:	9204      	str	r2, [sp, #16]
 8005d44:	9a05      	ldr	r2, [sp, #20]
 8005d46:	1aed      	subs	r5, r5, r3
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	9305      	str	r3, [sp, #20]
 8005d4c:	9b07      	ldr	r3, [sp, #28]
 8005d4e:	b31b      	cbz	r3, 8005d98 <_dtoa_r+0x7a0>
 8005d50:	9b08      	ldr	r3, [sp, #32]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 80af 	beq.w	8005eb6 <_dtoa_r+0x8be>
 8005d58:	2e00      	cmp	r6, #0
 8005d5a:	dd13      	ble.n	8005d84 <_dtoa_r+0x78c>
 8005d5c:	4639      	mov	r1, r7
 8005d5e:	4632      	mov	r2, r6
 8005d60:	4620      	mov	r0, r4
 8005d62:	f000 fc09 	bl	8006578 <__pow5mult>
 8005d66:	ee18 2a10 	vmov	r2, s16
 8005d6a:	4601      	mov	r1, r0
 8005d6c:	4607      	mov	r7, r0
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f000 fb58 	bl	8006424 <__multiply>
 8005d74:	ee18 1a10 	vmov	r1, s16
 8005d78:	4680      	mov	r8, r0
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f000 fa84 	bl	8006288 <_Bfree>
 8005d80:	ee08 8a10 	vmov	s16, r8
 8005d84:	9b07      	ldr	r3, [sp, #28]
 8005d86:	1b9a      	subs	r2, r3, r6
 8005d88:	d006      	beq.n	8005d98 <_dtoa_r+0x7a0>
 8005d8a:	ee18 1a10 	vmov	r1, s16
 8005d8e:	4620      	mov	r0, r4
 8005d90:	f000 fbf2 	bl	8006578 <__pow5mult>
 8005d94:	ee08 0a10 	vmov	s16, r0
 8005d98:	2101      	movs	r1, #1
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f000 fb2c 	bl	80063f8 <__i2b>
 8005da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	4606      	mov	r6, r0
 8005da6:	f340 8088 	ble.w	8005eba <_dtoa_r+0x8c2>
 8005daa:	461a      	mov	r2, r3
 8005dac:	4601      	mov	r1, r0
 8005dae:	4620      	mov	r0, r4
 8005db0:	f000 fbe2 	bl	8006578 <__pow5mult>
 8005db4:	9b06      	ldr	r3, [sp, #24]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	4606      	mov	r6, r0
 8005dba:	f340 8081 	ble.w	8005ec0 <_dtoa_r+0x8c8>
 8005dbe:	f04f 0800 	mov.w	r8, #0
 8005dc2:	6933      	ldr	r3, [r6, #16]
 8005dc4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005dc8:	6918      	ldr	r0, [r3, #16]
 8005dca:	f000 fac5 	bl	8006358 <__hi0bits>
 8005dce:	f1c0 0020 	rsb	r0, r0, #32
 8005dd2:	9b05      	ldr	r3, [sp, #20]
 8005dd4:	4418      	add	r0, r3
 8005dd6:	f010 001f 	ands.w	r0, r0, #31
 8005dda:	f000 8092 	beq.w	8005f02 <_dtoa_r+0x90a>
 8005dde:	f1c0 0320 	rsb	r3, r0, #32
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	f340 808a 	ble.w	8005efc <_dtoa_r+0x904>
 8005de8:	f1c0 001c 	rsb	r0, r0, #28
 8005dec:	9b04      	ldr	r3, [sp, #16]
 8005dee:	4403      	add	r3, r0
 8005df0:	9304      	str	r3, [sp, #16]
 8005df2:	9b05      	ldr	r3, [sp, #20]
 8005df4:	4403      	add	r3, r0
 8005df6:	4405      	add	r5, r0
 8005df8:	9305      	str	r3, [sp, #20]
 8005dfa:	9b04      	ldr	r3, [sp, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	dd07      	ble.n	8005e10 <_dtoa_r+0x818>
 8005e00:	ee18 1a10 	vmov	r1, s16
 8005e04:	461a      	mov	r2, r3
 8005e06:	4620      	mov	r0, r4
 8005e08:	f000 fc10 	bl	800662c <__lshift>
 8005e0c:	ee08 0a10 	vmov	s16, r0
 8005e10:	9b05      	ldr	r3, [sp, #20]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	dd05      	ble.n	8005e22 <_dtoa_r+0x82a>
 8005e16:	4631      	mov	r1, r6
 8005e18:	461a      	mov	r2, r3
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f000 fc06 	bl	800662c <__lshift>
 8005e20:	4606      	mov	r6, r0
 8005e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d06e      	beq.n	8005f06 <_dtoa_r+0x90e>
 8005e28:	ee18 0a10 	vmov	r0, s16
 8005e2c:	4631      	mov	r1, r6
 8005e2e:	f000 fc6d 	bl	800670c <__mcmp>
 8005e32:	2800      	cmp	r0, #0
 8005e34:	da67      	bge.n	8005f06 <_dtoa_r+0x90e>
 8005e36:	9b00      	ldr	r3, [sp, #0]
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	ee18 1a10 	vmov	r1, s16
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	220a      	movs	r2, #10
 8005e42:	2300      	movs	r3, #0
 8005e44:	4620      	mov	r0, r4
 8005e46:	f000 fa41 	bl	80062cc <__multadd>
 8005e4a:	9b08      	ldr	r3, [sp, #32]
 8005e4c:	ee08 0a10 	vmov	s16, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 81b1 	beq.w	80061b8 <_dtoa_r+0xbc0>
 8005e56:	2300      	movs	r3, #0
 8005e58:	4639      	mov	r1, r7
 8005e5a:	220a      	movs	r2, #10
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f000 fa35 	bl	80062cc <__multadd>
 8005e62:	9b02      	ldr	r3, [sp, #8]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	4607      	mov	r7, r0
 8005e68:	f300 808e 	bgt.w	8005f88 <_dtoa_r+0x990>
 8005e6c:	9b06      	ldr	r3, [sp, #24]
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	dc51      	bgt.n	8005f16 <_dtoa_r+0x91e>
 8005e72:	e089      	b.n	8005f88 <_dtoa_r+0x990>
 8005e74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e7a:	e74b      	b.n	8005d14 <_dtoa_r+0x71c>
 8005e7c:	9b03      	ldr	r3, [sp, #12]
 8005e7e:	1e5e      	subs	r6, r3, #1
 8005e80:	9b07      	ldr	r3, [sp, #28]
 8005e82:	42b3      	cmp	r3, r6
 8005e84:	bfbf      	itttt	lt
 8005e86:	9b07      	ldrlt	r3, [sp, #28]
 8005e88:	9607      	strlt	r6, [sp, #28]
 8005e8a:	1af2      	sublt	r2, r6, r3
 8005e8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005e8e:	bfb6      	itet	lt
 8005e90:	189b      	addlt	r3, r3, r2
 8005e92:	1b9e      	subge	r6, r3, r6
 8005e94:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005e96:	9b03      	ldr	r3, [sp, #12]
 8005e98:	bfb8      	it	lt
 8005e9a:	2600      	movlt	r6, #0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	bfb7      	itett	lt
 8005ea0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005ea4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005ea8:	1a9d      	sublt	r5, r3, r2
 8005eaa:	2300      	movlt	r3, #0
 8005eac:	e734      	b.n	8005d18 <_dtoa_r+0x720>
 8005eae:	9e07      	ldr	r6, [sp, #28]
 8005eb0:	9d04      	ldr	r5, [sp, #16]
 8005eb2:	9f08      	ldr	r7, [sp, #32]
 8005eb4:	e73b      	b.n	8005d2e <_dtoa_r+0x736>
 8005eb6:	9a07      	ldr	r2, [sp, #28]
 8005eb8:	e767      	b.n	8005d8a <_dtoa_r+0x792>
 8005eba:	9b06      	ldr	r3, [sp, #24]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	dc18      	bgt.n	8005ef2 <_dtoa_r+0x8fa>
 8005ec0:	f1ba 0f00 	cmp.w	sl, #0
 8005ec4:	d115      	bne.n	8005ef2 <_dtoa_r+0x8fa>
 8005ec6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005eca:	b993      	cbnz	r3, 8005ef2 <_dtoa_r+0x8fa>
 8005ecc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005ed0:	0d1b      	lsrs	r3, r3, #20
 8005ed2:	051b      	lsls	r3, r3, #20
 8005ed4:	b183      	cbz	r3, 8005ef8 <_dtoa_r+0x900>
 8005ed6:	9b04      	ldr	r3, [sp, #16]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	9304      	str	r3, [sp, #16]
 8005edc:	9b05      	ldr	r3, [sp, #20]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	9305      	str	r3, [sp, #20]
 8005ee2:	f04f 0801 	mov.w	r8, #1
 8005ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f47f af6a 	bne.w	8005dc2 <_dtoa_r+0x7ca>
 8005eee:	2001      	movs	r0, #1
 8005ef0:	e76f      	b.n	8005dd2 <_dtoa_r+0x7da>
 8005ef2:	f04f 0800 	mov.w	r8, #0
 8005ef6:	e7f6      	b.n	8005ee6 <_dtoa_r+0x8ee>
 8005ef8:	4698      	mov	r8, r3
 8005efa:	e7f4      	b.n	8005ee6 <_dtoa_r+0x8ee>
 8005efc:	f43f af7d 	beq.w	8005dfa <_dtoa_r+0x802>
 8005f00:	4618      	mov	r0, r3
 8005f02:	301c      	adds	r0, #28
 8005f04:	e772      	b.n	8005dec <_dtoa_r+0x7f4>
 8005f06:	9b03      	ldr	r3, [sp, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	dc37      	bgt.n	8005f7c <_dtoa_r+0x984>
 8005f0c:	9b06      	ldr	r3, [sp, #24]
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	dd34      	ble.n	8005f7c <_dtoa_r+0x984>
 8005f12:	9b03      	ldr	r3, [sp, #12]
 8005f14:	9302      	str	r3, [sp, #8]
 8005f16:	9b02      	ldr	r3, [sp, #8]
 8005f18:	b96b      	cbnz	r3, 8005f36 <_dtoa_r+0x93e>
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	2205      	movs	r2, #5
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f000 f9d4 	bl	80062cc <__multadd>
 8005f24:	4601      	mov	r1, r0
 8005f26:	4606      	mov	r6, r0
 8005f28:	ee18 0a10 	vmov	r0, s16
 8005f2c:	f000 fbee 	bl	800670c <__mcmp>
 8005f30:	2800      	cmp	r0, #0
 8005f32:	f73f adbb 	bgt.w	8005aac <_dtoa_r+0x4b4>
 8005f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f38:	9d01      	ldr	r5, [sp, #4]
 8005f3a:	43db      	mvns	r3, r3
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	f04f 0800 	mov.w	r8, #0
 8005f42:	4631      	mov	r1, r6
 8005f44:	4620      	mov	r0, r4
 8005f46:	f000 f99f 	bl	8006288 <_Bfree>
 8005f4a:	2f00      	cmp	r7, #0
 8005f4c:	f43f aea4 	beq.w	8005c98 <_dtoa_r+0x6a0>
 8005f50:	f1b8 0f00 	cmp.w	r8, #0
 8005f54:	d005      	beq.n	8005f62 <_dtoa_r+0x96a>
 8005f56:	45b8      	cmp	r8, r7
 8005f58:	d003      	beq.n	8005f62 <_dtoa_r+0x96a>
 8005f5a:	4641      	mov	r1, r8
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	f000 f993 	bl	8006288 <_Bfree>
 8005f62:	4639      	mov	r1, r7
 8005f64:	4620      	mov	r0, r4
 8005f66:	f000 f98f 	bl	8006288 <_Bfree>
 8005f6a:	e695      	b.n	8005c98 <_dtoa_r+0x6a0>
 8005f6c:	2600      	movs	r6, #0
 8005f6e:	4637      	mov	r7, r6
 8005f70:	e7e1      	b.n	8005f36 <_dtoa_r+0x93e>
 8005f72:	9700      	str	r7, [sp, #0]
 8005f74:	4637      	mov	r7, r6
 8005f76:	e599      	b.n	8005aac <_dtoa_r+0x4b4>
 8005f78:	40240000 	.word	0x40240000
 8005f7c:	9b08      	ldr	r3, [sp, #32]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 80ca 	beq.w	8006118 <_dtoa_r+0xb20>
 8005f84:	9b03      	ldr	r3, [sp, #12]
 8005f86:	9302      	str	r3, [sp, #8]
 8005f88:	2d00      	cmp	r5, #0
 8005f8a:	dd05      	ble.n	8005f98 <_dtoa_r+0x9a0>
 8005f8c:	4639      	mov	r1, r7
 8005f8e:	462a      	mov	r2, r5
 8005f90:	4620      	mov	r0, r4
 8005f92:	f000 fb4b 	bl	800662c <__lshift>
 8005f96:	4607      	mov	r7, r0
 8005f98:	f1b8 0f00 	cmp.w	r8, #0
 8005f9c:	d05b      	beq.n	8006056 <_dtoa_r+0xa5e>
 8005f9e:	6879      	ldr	r1, [r7, #4]
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f000 f931 	bl	8006208 <_Balloc>
 8005fa6:	4605      	mov	r5, r0
 8005fa8:	b928      	cbnz	r0, 8005fb6 <_dtoa_r+0x9be>
 8005faa:	4b87      	ldr	r3, [pc, #540]	; (80061c8 <_dtoa_r+0xbd0>)
 8005fac:	4602      	mov	r2, r0
 8005fae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005fb2:	f7ff bb3b 	b.w	800562c <_dtoa_r+0x34>
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	3202      	adds	r2, #2
 8005fba:	0092      	lsls	r2, r2, #2
 8005fbc:	f107 010c 	add.w	r1, r7, #12
 8005fc0:	300c      	adds	r0, #12
 8005fc2:	f000 f913 	bl	80061ec <memcpy>
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	4629      	mov	r1, r5
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f000 fb2e 	bl	800662c <__lshift>
 8005fd0:	9b01      	ldr	r3, [sp, #4]
 8005fd2:	f103 0901 	add.w	r9, r3, #1
 8005fd6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005fda:	4413      	add	r3, r2
 8005fdc:	9305      	str	r3, [sp, #20]
 8005fde:	f00a 0301 	and.w	r3, sl, #1
 8005fe2:	46b8      	mov	r8, r7
 8005fe4:	9304      	str	r3, [sp, #16]
 8005fe6:	4607      	mov	r7, r0
 8005fe8:	4631      	mov	r1, r6
 8005fea:	ee18 0a10 	vmov	r0, s16
 8005fee:	f7ff fa75 	bl	80054dc <quorem>
 8005ff2:	4641      	mov	r1, r8
 8005ff4:	9002      	str	r0, [sp, #8]
 8005ff6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005ffa:	ee18 0a10 	vmov	r0, s16
 8005ffe:	f000 fb85 	bl	800670c <__mcmp>
 8006002:	463a      	mov	r2, r7
 8006004:	9003      	str	r0, [sp, #12]
 8006006:	4631      	mov	r1, r6
 8006008:	4620      	mov	r0, r4
 800600a:	f000 fb9b 	bl	8006744 <__mdiff>
 800600e:	68c2      	ldr	r2, [r0, #12]
 8006010:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006014:	4605      	mov	r5, r0
 8006016:	bb02      	cbnz	r2, 800605a <_dtoa_r+0xa62>
 8006018:	4601      	mov	r1, r0
 800601a:	ee18 0a10 	vmov	r0, s16
 800601e:	f000 fb75 	bl	800670c <__mcmp>
 8006022:	4602      	mov	r2, r0
 8006024:	4629      	mov	r1, r5
 8006026:	4620      	mov	r0, r4
 8006028:	9207      	str	r2, [sp, #28]
 800602a:	f000 f92d 	bl	8006288 <_Bfree>
 800602e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006032:	ea43 0102 	orr.w	r1, r3, r2
 8006036:	9b04      	ldr	r3, [sp, #16]
 8006038:	430b      	orrs	r3, r1
 800603a:	464d      	mov	r5, r9
 800603c:	d10f      	bne.n	800605e <_dtoa_r+0xa66>
 800603e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006042:	d02a      	beq.n	800609a <_dtoa_r+0xaa2>
 8006044:	9b03      	ldr	r3, [sp, #12]
 8006046:	2b00      	cmp	r3, #0
 8006048:	dd02      	ble.n	8006050 <_dtoa_r+0xa58>
 800604a:	9b02      	ldr	r3, [sp, #8]
 800604c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006050:	f88b a000 	strb.w	sl, [fp]
 8006054:	e775      	b.n	8005f42 <_dtoa_r+0x94a>
 8006056:	4638      	mov	r0, r7
 8006058:	e7ba      	b.n	8005fd0 <_dtoa_r+0x9d8>
 800605a:	2201      	movs	r2, #1
 800605c:	e7e2      	b.n	8006024 <_dtoa_r+0xa2c>
 800605e:	9b03      	ldr	r3, [sp, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	db04      	blt.n	800606e <_dtoa_r+0xa76>
 8006064:	9906      	ldr	r1, [sp, #24]
 8006066:	430b      	orrs	r3, r1
 8006068:	9904      	ldr	r1, [sp, #16]
 800606a:	430b      	orrs	r3, r1
 800606c:	d122      	bne.n	80060b4 <_dtoa_r+0xabc>
 800606e:	2a00      	cmp	r2, #0
 8006070:	ddee      	ble.n	8006050 <_dtoa_r+0xa58>
 8006072:	ee18 1a10 	vmov	r1, s16
 8006076:	2201      	movs	r2, #1
 8006078:	4620      	mov	r0, r4
 800607a:	f000 fad7 	bl	800662c <__lshift>
 800607e:	4631      	mov	r1, r6
 8006080:	ee08 0a10 	vmov	s16, r0
 8006084:	f000 fb42 	bl	800670c <__mcmp>
 8006088:	2800      	cmp	r0, #0
 800608a:	dc03      	bgt.n	8006094 <_dtoa_r+0xa9c>
 800608c:	d1e0      	bne.n	8006050 <_dtoa_r+0xa58>
 800608e:	f01a 0f01 	tst.w	sl, #1
 8006092:	d0dd      	beq.n	8006050 <_dtoa_r+0xa58>
 8006094:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006098:	d1d7      	bne.n	800604a <_dtoa_r+0xa52>
 800609a:	2339      	movs	r3, #57	; 0x39
 800609c:	f88b 3000 	strb.w	r3, [fp]
 80060a0:	462b      	mov	r3, r5
 80060a2:	461d      	mov	r5, r3
 80060a4:	3b01      	subs	r3, #1
 80060a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80060aa:	2a39      	cmp	r2, #57	; 0x39
 80060ac:	d071      	beq.n	8006192 <_dtoa_r+0xb9a>
 80060ae:	3201      	adds	r2, #1
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	e746      	b.n	8005f42 <_dtoa_r+0x94a>
 80060b4:	2a00      	cmp	r2, #0
 80060b6:	dd07      	ble.n	80060c8 <_dtoa_r+0xad0>
 80060b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80060bc:	d0ed      	beq.n	800609a <_dtoa_r+0xaa2>
 80060be:	f10a 0301 	add.w	r3, sl, #1
 80060c2:	f88b 3000 	strb.w	r3, [fp]
 80060c6:	e73c      	b.n	8005f42 <_dtoa_r+0x94a>
 80060c8:	9b05      	ldr	r3, [sp, #20]
 80060ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80060ce:	4599      	cmp	r9, r3
 80060d0:	d047      	beq.n	8006162 <_dtoa_r+0xb6a>
 80060d2:	ee18 1a10 	vmov	r1, s16
 80060d6:	2300      	movs	r3, #0
 80060d8:	220a      	movs	r2, #10
 80060da:	4620      	mov	r0, r4
 80060dc:	f000 f8f6 	bl	80062cc <__multadd>
 80060e0:	45b8      	cmp	r8, r7
 80060e2:	ee08 0a10 	vmov	s16, r0
 80060e6:	f04f 0300 	mov.w	r3, #0
 80060ea:	f04f 020a 	mov.w	r2, #10
 80060ee:	4641      	mov	r1, r8
 80060f0:	4620      	mov	r0, r4
 80060f2:	d106      	bne.n	8006102 <_dtoa_r+0xb0a>
 80060f4:	f000 f8ea 	bl	80062cc <__multadd>
 80060f8:	4680      	mov	r8, r0
 80060fa:	4607      	mov	r7, r0
 80060fc:	f109 0901 	add.w	r9, r9, #1
 8006100:	e772      	b.n	8005fe8 <_dtoa_r+0x9f0>
 8006102:	f000 f8e3 	bl	80062cc <__multadd>
 8006106:	4639      	mov	r1, r7
 8006108:	4680      	mov	r8, r0
 800610a:	2300      	movs	r3, #0
 800610c:	220a      	movs	r2, #10
 800610e:	4620      	mov	r0, r4
 8006110:	f000 f8dc 	bl	80062cc <__multadd>
 8006114:	4607      	mov	r7, r0
 8006116:	e7f1      	b.n	80060fc <_dtoa_r+0xb04>
 8006118:	9b03      	ldr	r3, [sp, #12]
 800611a:	9302      	str	r3, [sp, #8]
 800611c:	9d01      	ldr	r5, [sp, #4]
 800611e:	ee18 0a10 	vmov	r0, s16
 8006122:	4631      	mov	r1, r6
 8006124:	f7ff f9da 	bl	80054dc <quorem>
 8006128:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800612c:	9b01      	ldr	r3, [sp, #4]
 800612e:	f805 ab01 	strb.w	sl, [r5], #1
 8006132:	1aea      	subs	r2, r5, r3
 8006134:	9b02      	ldr	r3, [sp, #8]
 8006136:	4293      	cmp	r3, r2
 8006138:	dd09      	ble.n	800614e <_dtoa_r+0xb56>
 800613a:	ee18 1a10 	vmov	r1, s16
 800613e:	2300      	movs	r3, #0
 8006140:	220a      	movs	r2, #10
 8006142:	4620      	mov	r0, r4
 8006144:	f000 f8c2 	bl	80062cc <__multadd>
 8006148:	ee08 0a10 	vmov	s16, r0
 800614c:	e7e7      	b.n	800611e <_dtoa_r+0xb26>
 800614e:	9b02      	ldr	r3, [sp, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	bfc8      	it	gt
 8006154:	461d      	movgt	r5, r3
 8006156:	9b01      	ldr	r3, [sp, #4]
 8006158:	bfd8      	it	le
 800615a:	2501      	movle	r5, #1
 800615c:	441d      	add	r5, r3
 800615e:	f04f 0800 	mov.w	r8, #0
 8006162:	ee18 1a10 	vmov	r1, s16
 8006166:	2201      	movs	r2, #1
 8006168:	4620      	mov	r0, r4
 800616a:	f000 fa5f 	bl	800662c <__lshift>
 800616e:	4631      	mov	r1, r6
 8006170:	ee08 0a10 	vmov	s16, r0
 8006174:	f000 faca 	bl	800670c <__mcmp>
 8006178:	2800      	cmp	r0, #0
 800617a:	dc91      	bgt.n	80060a0 <_dtoa_r+0xaa8>
 800617c:	d102      	bne.n	8006184 <_dtoa_r+0xb8c>
 800617e:	f01a 0f01 	tst.w	sl, #1
 8006182:	d18d      	bne.n	80060a0 <_dtoa_r+0xaa8>
 8006184:	462b      	mov	r3, r5
 8006186:	461d      	mov	r5, r3
 8006188:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800618c:	2a30      	cmp	r2, #48	; 0x30
 800618e:	d0fa      	beq.n	8006186 <_dtoa_r+0xb8e>
 8006190:	e6d7      	b.n	8005f42 <_dtoa_r+0x94a>
 8006192:	9a01      	ldr	r2, [sp, #4]
 8006194:	429a      	cmp	r2, r3
 8006196:	d184      	bne.n	80060a2 <_dtoa_r+0xaaa>
 8006198:	9b00      	ldr	r3, [sp, #0]
 800619a:	3301      	adds	r3, #1
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	2331      	movs	r3, #49	; 0x31
 80061a0:	7013      	strb	r3, [r2, #0]
 80061a2:	e6ce      	b.n	8005f42 <_dtoa_r+0x94a>
 80061a4:	4b09      	ldr	r3, [pc, #36]	; (80061cc <_dtoa_r+0xbd4>)
 80061a6:	f7ff ba95 	b.w	80056d4 <_dtoa_r+0xdc>
 80061aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f47f aa6e 	bne.w	800568e <_dtoa_r+0x96>
 80061b2:	4b07      	ldr	r3, [pc, #28]	; (80061d0 <_dtoa_r+0xbd8>)
 80061b4:	f7ff ba8e 	b.w	80056d4 <_dtoa_r+0xdc>
 80061b8:	9b02      	ldr	r3, [sp, #8]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	dcae      	bgt.n	800611c <_dtoa_r+0xb24>
 80061be:	9b06      	ldr	r3, [sp, #24]
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	f73f aea8 	bgt.w	8005f16 <_dtoa_r+0x91e>
 80061c6:	e7a9      	b.n	800611c <_dtoa_r+0xb24>
 80061c8:	08007adf 	.word	0x08007adf
 80061cc:	08007a3c 	.word	0x08007a3c
 80061d0:	08007a60 	.word	0x08007a60

080061d4 <_localeconv_r>:
 80061d4:	4800      	ldr	r0, [pc, #0]	; (80061d8 <_localeconv_r+0x4>)
 80061d6:	4770      	bx	lr
 80061d8:	20000168 	.word	0x20000168

080061dc <malloc>:
 80061dc:	4b02      	ldr	r3, [pc, #8]	; (80061e8 <malloc+0xc>)
 80061de:	4601      	mov	r1, r0
 80061e0:	6818      	ldr	r0, [r3, #0]
 80061e2:	f000 bc17 	b.w	8006a14 <_malloc_r>
 80061e6:	bf00      	nop
 80061e8:	20000014 	.word	0x20000014

080061ec <memcpy>:
 80061ec:	440a      	add	r2, r1
 80061ee:	4291      	cmp	r1, r2
 80061f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80061f4:	d100      	bne.n	80061f8 <memcpy+0xc>
 80061f6:	4770      	bx	lr
 80061f8:	b510      	push	{r4, lr}
 80061fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006202:	4291      	cmp	r1, r2
 8006204:	d1f9      	bne.n	80061fa <memcpy+0xe>
 8006206:	bd10      	pop	{r4, pc}

08006208 <_Balloc>:
 8006208:	b570      	push	{r4, r5, r6, lr}
 800620a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800620c:	4604      	mov	r4, r0
 800620e:	460d      	mov	r5, r1
 8006210:	b976      	cbnz	r6, 8006230 <_Balloc+0x28>
 8006212:	2010      	movs	r0, #16
 8006214:	f7ff ffe2 	bl	80061dc <malloc>
 8006218:	4602      	mov	r2, r0
 800621a:	6260      	str	r0, [r4, #36]	; 0x24
 800621c:	b920      	cbnz	r0, 8006228 <_Balloc+0x20>
 800621e:	4b18      	ldr	r3, [pc, #96]	; (8006280 <_Balloc+0x78>)
 8006220:	4818      	ldr	r0, [pc, #96]	; (8006284 <_Balloc+0x7c>)
 8006222:	2166      	movs	r1, #102	; 0x66
 8006224:	f000 fdd6 	bl	8006dd4 <__assert_func>
 8006228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800622c:	6006      	str	r6, [r0, #0]
 800622e:	60c6      	str	r6, [r0, #12]
 8006230:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006232:	68f3      	ldr	r3, [r6, #12]
 8006234:	b183      	cbz	r3, 8006258 <_Balloc+0x50>
 8006236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800623e:	b9b8      	cbnz	r0, 8006270 <_Balloc+0x68>
 8006240:	2101      	movs	r1, #1
 8006242:	fa01 f605 	lsl.w	r6, r1, r5
 8006246:	1d72      	adds	r2, r6, #5
 8006248:	0092      	lsls	r2, r2, #2
 800624a:	4620      	mov	r0, r4
 800624c:	f000 fb60 	bl	8006910 <_calloc_r>
 8006250:	b160      	cbz	r0, 800626c <_Balloc+0x64>
 8006252:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006256:	e00e      	b.n	8006276 <_Balloc+0x6e>
 8006258:	2221      	movs	r2, #33	; 0x21
 800625a:	2104      	movs	r1, #4
 800625c:	4620      	mov	r0, r4
 800625e:	f000 fb57 	bl	8006910 <_calloc_r>
 8006262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006264:	60f0      	str	r0, [r6, #12]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e4      	bne.n	8006236 <_Balloc+0x2e>
 800626c:	2000      	movs	r0, #0
 800626e:	bd70      	pop	{r4, r5, r6, pc}
 8006270:	6802      	ldr	r2, [r0, #0]
 8006272:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006276:	2300      	movs	r3, #0
 8006278:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800627c:	e7f7      	b.n	800626e <_Balloc+0x66>
 800627e:	bf00      	nop
 8006280:	08007a6d 	.word	0x08007a6d
 8006284:	08007af0 	.word	0x08007af0

08006288 <_Bfree>:
 8006288:	b570      	push	{r4, r5, r6, lr}
 800628a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800628c:	4605      	mov	r5, r0
 800628e:	460c      	mov	r4, r1
 8006290:	b976      	cbnz	r6, 80062b0 <_Bfree+0x28>
 8006292:	2010      	movs	r0, #16
 8006294:	f7ff ffa2 	bl	80061dc <malloc>
 8006298:	4602      	mov	r2, r0
 800629a:	6268      	str	r0, [r5, #36]	; 0x24
 800629c:	b920      	cbnz	r0, 80062a8 <_Bfree+0x20>
 800629e:	4b09      	ldr	r3, [pc, #36]	; (80062c4 <_Bfree+0x3c>)
 80062a0:	4809      	ldr	r0, [pc, #36]	; (80062c8 <_Bfree+0x40>)
 80062a2:	218a      	movs	r1, #138	; 0x8a
 80062a4:	f000 fd96 	bl	8006dd4 <__assert_func>
 80062a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062ac:	6006      	str	r6, [r0, #0]
 80062ae:	60c6      	str	r6, [r0, #12]
 80062b0:	b13c      	cbz	r4, 80062c2 <_Bfree+0x3a>
 80062b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80062b4:	6862      	ldr	r2, [r4, #4]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80062bc:	6021      	str	r1, [r4, #0]
 80062be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80062c2:	bd70      	pop	{r4, r5, r6, pc}
 80062c4:	08007a6d 	.word	0x08007a6d
 80062c8:	08007af0 	.word	0x08007af0

080062cc <__multadd>:
 80062cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062d0:	690d      	ldr	r5, [r1, #16]
 80062d2:	4607      	mov	r7, r0
 80062d4:	460c      	mov	r4, r1
 80062d6:	461e      	mov	r6, r3
 80062d8:	f101 0c14 	add.w	ip, r1, #20
 80062dc:	2000      	movs	r0, #0
 80062de:	f8dc 3000 	ldr.w	r3, [ip]
 80062e2:	b299      	uxth	r1, r3
 80062e4:	fb02 6101 	mla	r1, r2, r1, r6
 80062e8:	0c1e      	lsrs	r6, r3, #16
 80062ea:	0c0b      	lsrs	r3, r1, #16
 80062ec:	fb02 3306 	mla	r3, r2, r6, r3
 80062f0:	b289      	uxth	r1, r1
 80062f2:	3001      	adds	r0, #1
 80062f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80062f8:	4285      	cmp	r5, r0
 80062fa:	f84c 1b04 	str.w	r1, [ip], #4
 80062fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006302:	dcec      	bgt.n	80062de <__multadd+0x12>
 8006304:	b30e      	cbz	r6, 800634a <__multadd+0x7e>
 8006306:	68a3      	ldr	r3, [r4, #8]
 8006308:	42ab      	cmp	r3, r5
 800630a:	dc19      	bgt.n	8006340 <__multadd+0x74>
 800630c:	6861      	ldr	r1, [r4, #4]
 800630e:	4638      	mov	r0, r7
 8006310:	3101      	adds	r1, #1
 8006312:	f7ff ff79 	bl	8006208 <_Balloc>
 8006316:	4680      	mov	r8, r0
 8006318:	b928      	cbnz	r0, 8006326 <__multadd+0x5a>
 800631a:	4602      	mov	r2, r0
 800631c:	4b0c      	ldr	r3, [pc, #48]	; (8006350 <__multadd+0x84>)
 800631e:	480d      	ldr	r0, [pc, #52]	; (8006354 <__multadd+0x88>)
 8006320:	21b5      	movs	r1, #181	; 0xb5
 8006322:	f000 fd57 	bl	8006dd4 <__assert_func>
 8006326:	6922      	ldr	r2, [r4, #16]
 8006328:	3202      	adds	r2, #2
 800632a:	f104 010c 	add.w	r1, r4, #12
 800632e:	0092      	lsls	r2, r2, #2
 8006330:	300c      	adds	r0, #12
 8006332:	f7ff ff5b 	bl	80061ec <memcpy>
 8006336:	4621      	mov	r1, r4
 8006338:	4638      	mov	r0, r7
 800633a:	f7ff ffa5 	bl	8006288 <_Bfree>
 800633e:	4644      	mov	r4, r8
 8006340:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006344:	3501      	adds	r5, #1
 8006346:	615e      	str	r6, [r3, #20]
 8006348:	6125      	str	r5, [r4, #16]
 800634a:	4620      	mov	r0, r4
 800634c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006350:	08007adf 	.word	0x08007adf
 8006354:	08007af0 	.word	0x08007af0

08006358 <__hi0bits>:
 8006358:	0c03      	lsrs	r3, r0, #16
 800635a:	041b      	lsls	r3, r3, #16
 800635c:	b9d3      	cbnz	r3, 8006394 <__hi0bits+0x3c>
 800635e:	0400      	lsls	r0, r0, #16
 8006360:	2310      	movs	r3, #16
 8006362:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006366:	bf04      	itt	eq
 8006368:	0200      	lsleq	r0, r0, #8
 800636a:	3308      	addeq	r3, #8
 800636c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006370:	bf04      	itt	eq
 8006372:	0100      	lsleq	r0, r0, #4
 8006374:	3304      	addeq	r3, #4
 8006376:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800637a:	bf04      	itt	eq
 800637c:	0080      	lsleq	r0, r0, #2
 800637e:	3302      	addeq	r3, #2
 8006380:	2800      	cmp	r0, #0
 8006382:	db05      	blt.n	8006390 <__hi0bits+0x38>
 8006384:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006388:	f103 0301 	add.w	r3, r3, #1
 800638c:	bf08      	it	eq
 800638e:	2320      	moveq	r3, #32
 8006390:	4618      	mov	r0, r3
 8006392:	4770      	bx	lr
 8006394:	2300      	movs	r3, #0
 8006396:	e7e4      	b.n	8006362 <__hi0bits+0xa>

08006398 <__lo0bits>:
 8006398:	6803      	ldr	r3, [r0, #0]
 800639a:	f013 0207 	ands.w	r2, r3, #7
 800639e:	4601      	mov	r1, r0
 80063a0:	d00b      	beq.n	80063ba <__lo0bits+0x22>
 80063a2:	07da      	lsls	r2, r3, #31
 80063a4:	d423      	bmi.n	80063ee <__lo0bits+0x56>
 80063a6:	0798      	lsls	r0, r3, #30
 80063a8:	bf49      	itett	mi
 80063aa:	085b      	lsrmi	r3, r3, #1
 80063ac:	089b      	lsrpl	r3, r3, #2
 80063ae:	2001      	movmi	r0, #1
 80063b0:	600b      	strmi	r3, [r1, #0]
 80063b2:	bf5c      	itt	pl
 80063b4:	600b      	strpl	r3, [r1, #0]
 80063b6:	2002      	movpl	r0, #2
 80063b8:	4770      	bx	lr
 80063ba:	b298      	uxth	r0, r3
 80063bc:	b9a8      	cbnz	r0, 80063ea <__lo0bits+0x52>
 80063be:	0c1b      	lsrs	r3, r3, #16
 80063c0:	2010      	movs	r0, #16
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	b90a      	cbnz	r2, 80063ca <__lo0bits+0x32>
 80063c6:	3008      	adds	r0, #8
 80063c8:	0a1b      	lsrs	r3, r3, #8
 80063ca:	071a      	lsls	r2, r3, #28
 80063cc:	bf04      	itt	eq
 80063ce:	091b      	lsreq	r3, r3, #4
 80063d0:	3004      	addeq	r0, #4
 80063d2:	079a      	lsls	r2, r3, #30
 80063d4:	bf04      	itt	eq
 80063d6:	089b      	lsreq	r3, r3, #2
 80063d8:	3002      	addeq	r0, #2
 80063da:	07da      	lsls	r2, r3, #31
 80063dc:	d403      	bmi.n	80063e6 <__lo0bits+0x4e>
 80063de:	085b      	lsrs	r3, r3, #1
 80063e0:	f100 0001 	add.w	r0, r0, #1
 80063e4:	d005      	beq.n	80063f2 <__lo0bits+0x5a>
 80063e6:	600b      	str	r3, [r1, #0]
 80063e8:	4770      	bx	lr
 80063ea:	4610      	mov	r0, r2
 80063ec:	e7e9      	b.n	80063c2 <__lo0bits+0x2a>
 80063ee:	2000      	movs	r0, #0
 80063f0:	4770      	bx	lr
 80063f2:	2020      	movs	r0, #32
 80063f4:	4770      	bx	lr
	...

080063f8 <__i2b>:
 80063f8:	b510      	push	{r4, lr}
 80063fa:	460c      	mov	r4, r1
 80063fc:	2101      	movs	r1, #1
 80063fe:	f7ff ff03 	bl	8006208 <_Balloc>
 8006402:	4602      	mov	r2, r0
 8006404:	b928      	cbnz	r0, 8006412 <__i2b+0x1a>
 8006406:	4b05      	ldr	r3, [pc, #20]	; (800641c <__i2b+0x24>)
 8006408:	4805      	ldr	r0, [pc, #20]	; (8006420 <__i2b+0x28>)
 800640a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800640e:	f000 fce1 	bl	8006dd4 <__assert_func>
 8006412:	2301      	movs	r3, #1
 8006414:	6144      	str	r4, [r0, #20]
 8006416:	6103      	str	r3, [r0, #16]
 8006418:	bd10      	pop	{r4, pc}
 800641a:	bf00      	nop
 800641c:	08007adf 	.word	0x08007adf
 8006420:	08007af0 	.word	0x08007af0

08006424 <__multiply>:
 8006424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006428:	4691      	mov	r9, r2
 800642a:	690a      	ldr	r2, [r1, #16]
 800642c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006430:	429a      	cmp	r2, r3
 8006432:	bfb8      	it	lt
 8006434:	460b      	movlt	r3, r1
 8006436:	460c      	mov	r4, r1
 8006438:	bfbc      	itt	lt
 800643a:	464c      	movlt	r4, r9
 800643c:	4699      	movlt	r9, r3
 800643e:	6927      	ldr	r7, [r4, #16]
 8006440:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006444:	68a3      	ldr	r3, [r4, #8]
 8006446:	6861      	ldr	r1, [r4, #4]
 8006448:	eb07 060a 	add.w	r6, r7, sl
 800644c:	42b3      	cmp	r3, r6
 800644e:	b085      	sub	sp, #20
 8006450:	bfb8      	it	lt
 8006452:	3101      	addlt	r1, #1
 8006454:	f7ff fed8 	bl	8006208 <_Balloc>
 8006458:	b930      	cbnz	r0, 8006468 <__multiply+0x44>
 800645a:	4602      	mov	r2, r0
 800645c:	4b44      	ldr	r3, [pc, #272]	; (8006570 <__multiply+0x14c>)
 800645e:	4845      	ldr	r0, [pc, #276]	; (8006574 <__multiply+0x150>)
 8006460:	f240 115d 	movw	r1, #349	; 0x15d
 8006464:	f000 fcb6 	bl	8006dd4 <__assert_func>
 8006468:	f100 0514 	add.w	r5, r0, #20
 800646c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006470:	462b      	mov	r3, r5
 8006472:	2200      	movs	r2, #0
 8006474:	4543      	cmp	r3, r8
 8006476:	d321      	bcc.n	80064bc <__multiply+0x98>
 8006478:	f104 0314 	add.w	r3, r4, #20
 800647c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006480:	f109 0314 	add.w	r3, r9, #20
 8006484:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006488:	9202      	str	r2, [sp, #8]
 800648a:	1b3a      	subs	r2, r7, r4
 800648c:	3a15      	subs	r2, #21
 800648e:	f022 0203 	bic.w	r2, r2, #3
 8006492:	3204      	adds	r2, #4
 8006494:	f104 0115 	add.w	r1, r4, #21
 8006498:	428f      	cmp	r7, r1
 800649a:	bf38      	it	cc
 800649c:	2204      	movcc	r2, #4
 800649e:	9201      	str	r2, [sp, #4]
 80064a0:	9a02      	ldr	r2, [sp, #8]
 80064a2:	9303      	str	r3, [sp, #12]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d80c      	bhi.n	80064c2 <__multiply+0x9e>
 80064a8:	2e00      	cmp	r6, #0
 80064aa:	dd03      	ble.n	80064b4 <__multiply+0x90>
 80064ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d05a      	beq.n	800656a <__multiply+0x146>
 80064b4:	6106      	str	r6, [r0, #16]
 80064b6:	b005      	add	sp, #20
 80064b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064bc:	f843 2b04 	str.w	r2, [r3], #4
 80064c0:	e7d8      	b.n	8006474 <__multiply+0x50>
 80064c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80064c6:	f1ba 0f00 	cmp.w	sl, #0
 80064ca:	d024      	beq.n	8006516 <__multiply+0xf2>
 80064cc:	f104 0e14 	add.w	lr, r4, #20
 80064d0:	46a9      	mov	r9, r5
 80064d2:	f04f 0c00 	mov.w	ip, #0
 80064d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80064da:	f8d9 1000 	ldr.w	r1, [r9]
 80064de:	fa1f fb82 	uxth.w	fp, r2
 80064e2:	b289      	uxth	r1, r1
 80064e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80064e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80064ec:	f8d9 2000 	ldr.w	r2, [r9]
 80064f0:	4461      	add	r1, ip
 80064f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80064f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80064fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80064fe:	b289      	uxth	r1, r1
 8006500:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006504:	4577      	cmp	r7, lr
 8006506:	f849 1b04 	str.w	r1, [r9], #4
 800650a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800650e:	d8e2      	bhi.n	80064d6 <__multiply+0xb2>
 8006510:	9a01      	ldr	r2, [sp, #4]
 8006512:	f845 c002 	str.w	ip, [r5, r2]
 8006516:	9a03      	ldr	r2, [sp, #12]
 8006518:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800651c:	3304      	adds	r3, #4
 800651e:	f1b9 0f00 	cmp.w	r9, #0
 8006522:	d020      	beq.n	8006566 <__multiply+0x142>
 8006524:	6829      	ldr	r1, [r5, #0]
 8006526:	f104 0c14 	add.w	ip, r4, #20
 800652a:	46ae      	mov	lr, r5
 800652c:	f04f 0a00 	mov.w	sl, #0
 8006530:	f8bc b000 	ldrh.w	fp, [ip]
 8006534:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006538:	fb09 220b 	mla	r2, r9, fp, r2
 800653c:	4492      	add	sl, r2
 800653e:	b289      	uxth	r1, r1
 8006540:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006544:	f84e 1b04 	str.w	r1, [lr], #4
 8006548:	f85c 2b04 	ldr.w	r2, [ip], #4
 800654c:	f8be 1000 	ldrh.w	r1, [lr]
 8006550:	0c12      	lsrs	r2, r2, #16
 8006552:	fb09 1102 	mla	r1, r9, r2, r1
 8006556:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800655a:	4567      	cmp	r7, ip
 800655c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006560:	d8e6      	bhi.n	8006530 <__multiply+0x10c>
 8006562:	9a01      	ldr	r2, [sp, #4]
 8006564:	50a9      	str	r1, [r5, r2]
 8006566:	3504      	adds	r5, #4
 8006568:	e79a      	b.n	80064a0 <__multiply+0x7c>
 800656a:	3e01      	subs	r6, #1
 800656c:	e79c      	b.n	80064a8 <__multiply+0x84>
 800656e:	bf00      	nop
 8006570:	08007adf 	.word	0x08007adf
 8006574:	08007af0 	.word	0x08007af0

08006578 <__pow5mult>:
 8006578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800657c:	4615      	mov	r5, r2
 800657e:	f012 0203 	ands.w	r2, r2, #3
 8006582:	4606      	mov	r6, r0
 8006584:	460f      	mov	r7, r1
 8006586:	d007      	beq.n	8006598 <__pow5mult+0x20>
 8006588:	4c25      	ldr	r4, [pc, #148]	; (8006620 <__pow5mult+0xa8>)
 800658a:	3a01      	subs	r2, #1
 800658c:	2300      	movs	r3, #0
 800658e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006592:	f7ff fe9b 	bl	80062cc <__multadd>
 8006596:	4607      	mov	r7, r0
 8006598:	10ad      	asrs	r5, r5, #2
 800659a:	d03d      	beq.n	8006618 <__pow5mult+0xa0>
 800659c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800659e:	b97c      	cbnz	r4, 80065c0 <__pow5mult+0x48>
 80065a0:	2010      	movs	r0, #16
 80065a2:	f7ff fe1b 	bl	80061dc <malloc>
 80065a6:	4602      	mov	r2, r0
 80065a8:	6270      	str	r0, [r6, #36]	; 0x24
 80065aa:	b928      	cbnz	r0, 80065b8 <__pow5mult+0x40>
 80065ac:	4b1d      	ldr	r3, [pc, #116]	; (8006624 <__pow5mult+0xac>)
 80065ae:	481e      	ldr	r0, [pc, #120]	; (8006628 <__pow5mult+0xb0>)
 80065b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80065b4:	f000 fc0e 	bl	8006dd4 <__assert_func>
 80065b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065bc:	6004      	str	r4, [r0, #0]
 80065be:	60c4      	str	r4, [r0, #12]
 80065c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80065c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80065c8:	b94c      	cbnz	r4, 80065de <__pow5mult+0x66>
 80065ca:	f240 2171 	movw	r1, #625	; 0x271
 80065ce:	4630      	mov	r0, r6
 80065d0:	f7ff ff12 	bl	80063f8 <__i2b>
 80065d4:	2300      	movs	r3, #0
 80065d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80065da:	4604      	mov	r4, r0
 80065dc:	6003      	str	r3, [r0, #0]
 80065de:	f04f 0900 	mov.w	r9, #0
 80065e2:	07eb      	lsls	r3, r5, #31
 80065e4:	d50a      	bpl.n	80065fc <__pow5mult+0x84>
 80065e6:	4639      	mov	r1, r7
 80065e8:	4622      	mov	r2, r4
 80065ea:	4630      	mov	r0, r6
 80065ec:	f7ff ff1a 	bl	8006424 <__multiply>
 80065f0:	4639      	mov	r1, r7
 80065f2:	4680      	mov	r8, r0
 80065f4:	4630      	mov	r0, r6
 80065f6:	f7ff fe47 	bl	8006288 <_Bfree>
 80065fa:	4647      	mov	r7, r8
 80065fc:	106d      	asrs	r5, r5, #1
 80065fe:	d00b      	beq.n	8006618 <__pow5mult+0xa0>
 8006600:	6820      	ldr	r0, [r4, #0]
 8006602:	b938      	cbnz	r0, 8006614 <__pow5mult+0x9c>
 8006604:	4622      	mov	r2, r4
 8006606:	4621      	mov	r1, r4
 8006608:	4630      	mov	r0, r6
 800660a:	f7ff ff0b 	bl	8006424 <__multiply>
 800660e:	6020      	str	r0, [r4, #0]
 8006610:	f8c0 9000 	str.w	r9, [r0]
 8006614:	4604      	mov	r4, r0
 8006616:	e7e4      	b.n	80065e2 <__pow5mult+0x6a>
 8006618:	4638      	mov	r0, r7
 800661a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800661e:	bf00      	nop
 8006620:	08007c40 	.word	0x08007c40
 8006624:	08007a6d 	.word	0x08007a6d
 8006628:	08007af0 	.word	0x08007af0

0800662c <__lshift>:
 800662c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006630:	460c      	mov	r4, r1
 8006632:	6849      	ldr	r1, [r1, #4]
 8006634:	6923      	ldr	r3, [r4, #16]
 8006636:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800663a:	68a3      	ldr	r3, [r4, #8]
 800663c:	4607      	mov	r7, r0
 800663e:	4691      	mov	r9, r2
 8006640:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006644:	f108 0601 	add.w	r6, r8, #1
 8006648:	42b3      	cmp	r3, r6
 800664a:	db0b      	blt.n	8006664 <__lshift+0x38>
 800664c:	4638      	mov	r0, r7
 800664e:	f7ff fddb 	bl	8006208 <_Balloc>
 8006652:	4605      	mov	r5, r0
 8006654:	b948      	cbnz	r0, 800666a <__lshift+0x3e>
 8006656:	4602      	mov	r2, r0
 8006658:	4b2a      	ldr	r3, [pc, #168]	; (8006704 <__lshift+0xd8>)
 800665a:	482b      	ldr	r0, [pc, #172]	; (8006708 <__lshift+0xdc>)
 800665c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006660:	f000 fbb8 	bl	8006dd4 <__assert_func>
 8006664:	3101      	adds	r1, #1
 8006666:	005b      	lsls	r3, r3, #1
 8006668:	e7ee      	b.n	8006648 <__lshift+0x1c>
 800666a:	2300      	movs	r3, #0
 800666c:	f100 0114 	add.w	r1, r0, #20
 8006670:	f100 0210 	add.w	r2, r0, #16
 8006674:	4618      	mov	r0, r3
 8006676:	4553      	cmp	r3, sl
 8006678:	db37      	blt.n	80066ea <__lshift+0xbe>
 800667a:	6920      	ldr	r0, [r4, #16]
 800667c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006680:	f104 0314 	add.w	r3, r4, #20
 8006684:	f019 091f 	ands.w	r9, r9, #31
 8006688:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800668c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006690:	d02f      	beq.n	80066f2 <__lshift+0xc6>
 8006692:	f1c9 0e20 	rsb	lr, r9, #32
 8006696:	468a      	mov	sl, r1
 8006698:	f04f 0c00 	mov.w	ip, #0
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	fa02 f209 	lsl.w	r2, r2, r9
 80066a2:	ea42 020c 	orr.w	r2, r2, ip
 80066a6:	f84a 2b04 	str.w	r2, [sl], #4
 80066aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80066ae:	4298      	cmp	r0, r3
 80066b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80066b4:	d8f2      	bhi.n	800669c <__lshift+0x70>
 80066b6:	1b03      	subs	r3, r0, r4
 80066b8:	3b15      	subs	r3, #21
 80066ba:	f023 0303 	bic.w	r3, r3, #3
 80066be:	3304      	adds	r3, #4
 80066c0:	f104 0215 	add.w	r2, r4, #21
 80066c4:	4290      	cmp	r0, r2
 80066c6:	bf38      	it	cc
 80066c8:	2304      	movcc	r3, #4
 80066ca:	f841 c003 	str.w	ip, [r1, r3]
 80066ce:	f1bc 0f00 	cmp.w	ip, #0
 80066d2:	d001      	beq.n	80066d8 <__lshift+0xac>
 80066d4:	f108 0602 	add.w	r6, r8, #2
 80066d8:	3e01      	subs	r6, #1
 80066da:	4638      	mov	r0, r7
 80066dc:	612e      	str	r6, [r5, #16]
 80066de:	4621      	mov	r1, r4
 80066e0:	f7ff fdd2 	bl	8006288 <_Bfree>
 80066e4:	4628      	mov	r0, r5
 80066e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80066ee:	3301      	adds	r3, #1
 80066f0:	e7c1      	b.n	8006676 <__lshift+0x4a>
 80066f2:	3904      	subs	r1, #4
 80066f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80066f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80066fc:	4298      	cmp	r0, r3
 80066fe:	d8f9      	bhi.n	80066f4 <__lshift+0xc8>
 8006700:	e7ea      	b.n	80066d8 <__lshift+0xac>
 8006702:	bf00      	nop
 8006704:	08007adf 	.word	0x08007adf
 8006708:	08007af0 	.word	0x08007af0

0800670c <__mcmp>:
 800670c:	b530      	push	{r4, r5, lr}
 800670e:	6902      	ldr	r2, [r0, #16]
 8006710:	690c      	ldr	r4, [r1, #16]
 8006712:	1b12      	subs	r2, r2, r4
 8006714:	d10e      	bne.n	8006734 <__mcmp+0x28>
 8006716:	f100 0314 	add.w	r3, r0, #20
 800671a:	3114      	adds	r1, #20
 800671c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006720:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006724:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006728:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800672c:	42a5      	cmp	r5, r4
 800672e:	d003      	beq.n	8006738 <__mcmp+0x2c>
 8006730:	d305      	bcc.n	800673e <__mcmp+0x32>
 8006732:	2201      	movs	r2, #1
 8006734:	4610      	mov	r0, r2
 8006736:	bd30      	pop	{r4, r5, pc}
 8006738:	4283      	cmp	r3, r0
 800673a:	d3f3      	bcc.n	8006724 <__mcmp+0x18>
 800673c:	e7fa      	b.n	8006734 <__mcmp+0x28>
 800673e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006742:	e7f7      	b.n	8006734 <__mcmp+0x28>

08006744 <__mdiff>:
 8006744:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006748:	460c      	mov	r4, r1
 800674a:	4606      	mov	r6, r0
 800674c:	4611      	mov	r1, r2
 800674e:	4620      	mov	r0, r4
 8006750:	4690      	mov	r8, r2
 8006752:	f7ff ffdb 	bl	800670c <__mcmp>
 8006756:	1e05      	subs	r5, r0, #0
 8006758:	d110      	bne.n	800677c <__mdiff+0x38>
 800675a:	4629      	mov	r1, r5
 800675c:	4630      	mov	r0, r6
 800675e:	f7ff fd53 	bl	8006208 <_Balloc>
 8006762:	b930      	cbnz	r0, 8006772 <__mdiff+0x2e>
 8006764:	4b3a      	ldr	r3, [pc, #232]	; (8006850 <__mdiff+0x10c>)
 8006766:	4602      	mov	r2, r0
 8006768:	f240 2132 	movw	r1, #562	; 0x232
 800676c:	4839      	ldr	r0, [pc, #228]	; (8006854 <__mdiff+0x110>)
 800676e:	f000 fb31 	bl	8006dd4 <__assert_func>
 8006772:	2301      	movs	r3, #1
 8006774:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800677c:	bfa4      	itt	ge
 800677e:	4643      	movge	r3, r8
 8006780:	46a0      	movge	r8, r4
 8006782:	4630      	mov	r0, r6
 8006784:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006788:	bfa6      	itte	ge
 800678a:	461c      	movge	r4, r3
 800678c:	2500      	movge	r5, #0
 800678e:	2501      	movlt	r5, #1
 8006790:	f7ff fd3a 	bl	8006208 <_Balloc>
 8006794:	b920      	cbnz	r0, 80067a0 <__mdiff+0x5c>
 8006796:	4b2e      	ldr	r3, [pc, #184]	; (8006850 <__mdiff+0x10c>)
 8006798:	4602      	mov	r2, r0
 800679a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800679e:	e7e5      	b.n	800676c <__mdiff+0x28>
 80067a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80067a4:	6926      	ldr	r6, [r4, #16]
 80067a6:	60c5      	str	r5, [r0, #12]
 80067a8:	f104 0914 	add.w	r9, r4, #20
 80067ac:	f108 0514 	add.w	r5, r8, #20
 80067b0:	f100 0e14 	add.w	lr, r0, #20
 80067b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80067b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80067bc:	f108 0210 	add.w	r2, r8, #16
 80067c0:	46f2      	mov	sl, lr
 80067c2:	2100      	movs	r1, #0
 80067c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80067c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80067cc:	fa1f f883 	uxth.w	r8, r3
 80067d0:	fa11 f18b 	uxtah	r1, r1, fp
 80067d4:	0c1b      	lsrs	r3, r3, #16
 80067d6:	eba1 0808 	sub.w	r8, r1, r8
 80067da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80067de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80067e2:	fa1f f888 	uxth.w	r8, r8
 80067e6:	1419      	asrs	r1, r3, #16
 80067e8:	454e      	cmp	r6, r9
 80067ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80067ee:	f84a 3b04 	str.w	r3, [sl], #4
 80067f2:	d8e7      	bhi.n	80067c4 <__mdiff+0x80>
 80067f4:	1b33      	subs	r3, r6, r4
 80067f6:	3b15      	subs	r3, #21
 80067f8:	f023 0303 	bic.w	r3, r3, #3
 80067fc:	3304      	adds	r3, #4
 80067fe:	3415      	adds	r4, #21
 8006800:	42a6      	cmp	r6, r4
 8006802:	bf38      	it	cc
 8006804:	2304      	movcc	r3, #4
 8006806:	441d      	add	r5, r3
 8006808:	4473      	add	r3, lr
 800680a:	469e      	mov	lr, r3
 800680c:	462e      	mov	r6, r5
 800680e:	4566      	cmp	r6, ip
 8006810:	d30e      	bcc.n	8006830 <__mdiff+0xec>
 8006812:	f10c 0203 	add.w	r2, ip, #3
 8006816:	1b52      	subs	r2, r2, r5
 8006818:	f022 0203 	bic.w	r2, r2, #3
 800681c:	3d03      	subs	r5, #3
 800681e:	45ac      	cmp	ip, r5
 8006820:	bf38      	it	cc
 8006822:	2200      	movcc	r2, #0
 8006824:	441a      	add	r2, r3
 8006826:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800682a:	b17b      	cbz	r3, 800684c <__mdiff+0x108>
 800682c:	6107      	str	r7, [r0, #16]
 800682e:	e7a3      	b.n	8006778 <__mdiff+0x34>
 8006830:	f856 8b04 	ldr.w	r8, [r6], #4
 8006834:	fa11 f288 	uxtah	r2, r1, r8
 8006838:	1414      	asrs	r4, r2, #16
 800683a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800683e:	b292      	uxth	r2, r2
 8006840:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006844:	f84e 2b04 	str.w	r2, [lr], #4
 8006848:	1421      	asrs	r1, r4, #16
 800684a:	e7e0      	b.n	800680e <__mdiff+0xca>
 800684c:	3f01      	subs	r7, #1
 800684e:	e7ea      	b.n	8006826 <__mdiff+0xe2>
 8006850:	08007adf 	.word	0x08007adf
 8006854:	08007af0 	.word	0x08007af0

08006858 <__d2b>:
 8006858:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800685c:	4689      	mov	r9, r1
 800685e:	2101      	movs	r1, #1
 8006860:	ec57 6b10 	vmov	r6, r7, d0
 8006864:	4690      	mov	r8, r2
 8006866:	f7ff fccf 	bl	8006208 <_Balloc>
 800686a:	4604      	mov	r4, r0
 800686c:	b930      	cbnz	r0, 800687c <__d2b+0x24>
 800686e:	4602      	mov	r2, r0
 8006870:	4b25      	ldr	r3, [pc, #148]	; (8006908 <__d2b+0xb0>)
 8006872:	4826      	ldr	r0, [pc, #152]	; (800690c <__d2b+0xb4>)
 8006874:	f240 310a 	movw	r1, #778	; 0x30a
 8006878:	f000 faac 	bl	8006dd4 <__assert_func>
 800687c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006880:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006884:	bb35      	cbnz	r5, 80068d4 <__d2b+0x7c>
 8006886:	2e00      	cmp	r6, #0
 8006888:	9301      	str	r3, [sp, #4]
 800688a:	d028      	beq.n	80068de <__d2b+0x86>
 800688c:	4668      	mov	r0, sp
 800688e:	9600      	str	r6, [sp, #0]
 8006890:	f7ff fd82 	bl	8006398 <__lo0bits>
 8006894:	9900      	ldr	r1, [sp, #0]
 8006896:	b300      	cbz	r0, 80068da <__d2b+0x82>
 8006898:	9a01      	ldr	r2, [sp, #4]
 800689a:	f1c0 0320 	rsb	r3, r0, #32
 800689e:	fa02 f303 	lsl.w	r3, r2, r3
 80068a2:	430b      	orrs	r3, r1
 80068a4:	40c2      	lsrs	r2, r0
 80068a6:	6163      	str	r3, [r4, #20]
 80068a8:	9201      	str	r2, [sp, #4]
 80068aa:	9b01      	ldr	r3, [sp, #4]
 80068ac:	61a3      	str	r3, [r4, #24]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	bf14      	ite	ne
 80068b2:	2202      	movne	r2, #2
 80068b4:	2201      	moveq	r2, #1
 80068b6:	6122      	str	r2, [r4, #16]
 80068b8:	b1d5      	cbz	r5, 80068f0 <__d2b+0x98>
 80068ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80068be:	4405      	add	r5, r0
 80068c0:	f8c9 5000 	str.w	r5, [r9]
 80068c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80068c8:	f8c8 0000 	str.w	r0, [r8]
 80068cc:	4620      	mov	r0, r4
 80068ce:	b003      	add	sp, #12
 80068d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068d8:	e7d5      	b.n	8006886 <__d2b+0x2e>
 80068da:	6161      	str	r1, [r4, #20]
 80068dc:	e7e5      	b.n	80068aa <__d2b+0x52>
 80068de:	a801      	add	r0, sp, #4
 80068e0:	f7ff fd5a 	bl	8006398 <__lo0bits>
 80068e4:	9b01      	ldr	r3, [sp, #4]
 80068e6:	6163      	str	r3, [r4, #20]
 80068e8:	2201      	movs	r2, #1
 80068ea:	6122      	str	r2, [r4, #16]
 80068ec:	3020      	adds	r0, #32
 80068ee:	e7e3      	b.n	80068b8 <__d2b+0x60>
 80068f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80068f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80068f8:	f8c9 0000 	str.w	r0, [r9]
 80068fc:	6918      	ldr	r0, [r3, #16]
 80068fe:	f7ff fd2b 	bl	8006358 <__hi0bits>
 8006902:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006906:	e7df      	b.n	80068c8 <__d2b+0x70>
 8006908:	08007adf 	.word	0x08007adf
 800690c:	08007af0 	.word	0x08007af0

08006910 <_calloc_r>:
 8006910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006912:	fba1 2402 	umull	r2, r4, r1, r2
 8006916:	b94c      	cbnz	r4, 800692c <_calloc_r+0x1c>
 8006918:	4611      	mov	r1, r2
 800691a:	9201      	str	r2, [sp, #4]
 800691c:	f000 f87a 	bl	8006a14 <_malloc_r>
 8006920:	9a01      	ldr	r2, [sp, #4]
 8006922:	4605      	mov	r5, r0
 8006924:	b930      	cbnz	r0, 8006934 <_calloc_r+0x24>
 8006926:	4628      	mov	r0, r5
 8006928:	b003      	add	sp, #12
 800692a:	bd30      	pop	{r4, r5, pc}
 800692c:	220c      	movs	r2, #12
 800692e:	6002      	str	r2, [r0, #0]
 8006930:	2500      	movs	r5, #0
 8006932:	e7f8      	b.n	8006926 <_calloc_r+0x16>
 8006934:	4621      	mov	r1, r4
 8006936:	f7fe f93f 	bl	8004bb8 <memset>
 800693a:	e7f4      	b.n	8006926 <_calloc_r+0x16>

0800693c <_free_r>:
 800693c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800693e:	2900      	cmp	r1, #0
 8006940:	d044      	beq.n	80069cc <_free_r+0x90>
 8006942:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006946:	9001      	str	r0, [sp, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	f1a1 0404 	sub.w	r4, r1, #4
 800694e:	bfb8      	it	lt
 8006950:	18e4      	addlt	r4, r4, r3
 8006952:	f000 fa9b 	bl	8006e8c <__malloc_lock>
 8006956:	4a1e      	ldr	r2, [pc, #120]	; (80069d0 <_free_r+0x94>)
 8006958:	9801      	ldr	r0, [sp, #4]
 800695a:	6813      	ldr	r3, [r2, #0]
 800695c:	b933      	cbnz	r3, 800696c <_free_r+0x30>
 800695e:	6063      	str	r3, [r4, #4]
 8006960:	6014      	str	r4, [r2, #0]
 8006962:	b003      	add	sp, #12
 8006964:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006968:	f000 ba96 	b.w	8006e98 <__malloc_unlock>
 800696c:	42a3      	cmp	r3, r4
 800696e:	d908      	bls.n	8006982 <_free_r+0x46>
 8006970:	6825      	ldr	r5, [r4, #0]
 8006972:	1961      	adds	r1, r4, r5
 8006974:	428b      	cmp	r3, r1
 8006976:	bf01      	itttt	eq
 8006978:	6819      	ldreq	r1, [r3, #0]
 800697a:	685b      	ldreq	r3, [r3, #4]
 800697c:	1949      	addeq	r1, r1, r5
 800697e:	6021      	streq	r1, [r4, #0]
 8006980:	e7ed      	b.n	800695e <_free_r+0x22>
 8006982:	461a      	mov	r2, r3
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	b10b      	cbz	r3, 800698c <_free_r+0x50>
 8006988:	42a3      	cmp	r3, r4
 800698a:	d9fa      	bls.n	8006982 <_free_r+0x46>
 800698c:	6811      	ldr	r1, [r2, #0]
 800698e:	1855      	adds	r5, r2, r1
 8006990:	42a5      	cmp	r5, r4
 8006992:	d10b      	bne.n	80069ac <_free_r+0x70>
 8006994:	6824      	ldr	r4, [r4, #0]
 8006996:	4421      	add	r1, r4
 8006998:	1854      	adds	r4, r2, r1
 800699a:	42a3      	cmp	r3, r4
 800699c:	6011      	str	r1, [r2, #0]
 800699e:	d1e0      	bne.n	8006962 <_free_r+0x26>
 80069a0:	681c      	ldr	r4, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	6053      	str	r3, [r2, #4]
 80069a6:	4421      	add	r1, r4
 80069a8:	6011      	str	r1, [r2, #0]
 80069aa:	e7da      	b.n	8006962 <_free_r+0x26>
 80069ac:	d902      	bls.n	80069b4 <_free_r+0x78>
 80069ae:	230c      	movs	r3, #12
 80069b0:	6003      	str	r3, [r0, #0]
 80069b2:	e7d6      	b.n	8006962 <_free_r+0x26>
 80069b4:	6825      	ldr	r5, [r4, #0]
 80069b6:	1961      	adds	r1, r4, r5
 80069b8:	428b      	cmp	r3, r1
 80069ba:	bf04      	itt	eq
 80069bc:	6819      	ldreq	r1, [r3, #0]
 80069be:	685b      	ldreq	r3, [r3, #4]
 80069c0:	6063      	str	r3, [r4, #4]
 80069c2:	bf04      	itt	eq
 80069c4:	1949      	addeq	r1, r1, r5
 80069c6:	6021      	streq	r1, [r4, #0]
 80069c8:	6054      	str	r4, [r2, #4]
 80069ca:	e7ca      	b.n	8006962 <_free_r+0x26>
 80069cc:	b003      	add	sp, #12
 80069ce:	bd30      	pop	{r4, r5, pc}
 80069d0:	2000036c 	.word	0x2000036c

080069d4 <sbrk_aligned>:
 80069d4:	b570      	push	{r4, r5, r6, lr}
 80069d6:	4e0e      	ldr	r6, [pc, #56]	; (8006a10 <sbrk_aligned+0x3c>)
 80069d8:	460c      	mov	r4, r1
 80069da:	6831      	ldr	r1, [r6, #0]
 80069dc:	4605      	mov	r5, r0
 80069de:	b911      	cbnz	r1, 80069e6 <sbrk_aligned+0x12>
 80069e0:	f000 f9e8 	bl	8006db4 <_sbrk_r>
 80069e4:	6030      	str	r0, [r6, #0]
 80069e6:	4621      	mov	r1, r4
 80069e8:	4628      	mov	r0, r5
 80069ea:	f000 f9e3 	bl	8006db4 <_sbrk_r>
 80069ee:	1c43      	adds	r3, r0, #1
 80069f0:	d00a      	beq.n	8006a08 <sbrk_aligned+0x34>
 80069f2:	1cc4      	adds	r4, r0, #3
 80069f4:	f024 0403 	bic.w	r4, r4, #3
 80069f8:	42a0      	cmp	r0, r4
 80069fa:	d007      	beq.n	8006a0c <sbrk_aligned+0x38>
 80069fc:	1a21      	subs	r1, r4, r0
 80069fe:	4628      	mov	r0, r5
 8006a00:	f000 f9d8 	bl	8006db4 <_sbrk_r>
 8006a04:	3001      	adds	r0, #1
 8006a06:	d101      	bne.n	8006a0c <sbrk_aligned+0x38>
 8006a08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	bd70      	pop	{r4, r5, r6, pc}
 8006a10:	20000370 	.word	0x20000370

08006a14 <_malloc_r>:
 8006a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a18:	1ccd      	adds	r5, r1, #3
 8006a1a:	f025 0503 	bic.w	r5, r5, #3
 8006a1e:	3508      	adds	r5, #8
 8006a20:	2d0c      	cmp	r5, #12
 8006a22:	bf38      	it	cc
 8006a24:	250c      	movcc	r5, #12
 8006a26:	2d00      	cmp	r5, #0
 8006a28:	4607      	mov	r7, r0
 8006a2a:	db01      	blt.n	8006a30 <_malloc_r+0x1c>
 8006a2c:	42a9      	cmp	r1, r5
 8006a2e:	d905      	bls.n	8006a3c <_malloc_r+0x28>
 8006a30:	230c      	movs	r3, #12
 8006a32:	603b      	str	r3, [r7, #0]
 8006a34:	2600      	movs	r6, #0
 8006a36:	4630      	mov	r0, r6
 8006a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a3c:	4e2e      	ldr	r6, [pc, #184]	; (8006af8 <_malloc_r+0xe4>)
 8006a3e:	f000 fa25 	bl	8006e8c <__malloc_lock>
 8006a42:	6833      	ldr	r3, [r6, #0]
 8006a44:	461c      	mov	r4, r3
 8006a46:	bb34      	cbnz	r4, 8006a96 <_malloc_r+0x82>
 8006a48:	4629      	mov	r1, r5
 8006a4a:	4638      	mov	r0, r7
 8006a4c:	f7ff ffc2 	bl	80069d4 <sbrk_aligned>
 8006a50:	1c43      	adds	r3, r0, #1
 8006a52:	4604      	mov	r4, r0
 8006a54:	d14d      	bne.n	8006af2 <_malloc_r+0xde>
 8006a56:	6834      	ldr	r4, [r6, #0]
 8006a58:	4626      	mov	r6, r4
 8006a5a:	2e00      	cmp	r6, #0
 8006a5c:	d140      	bne.n	8006ae0 <_malloc_r+0xcc>
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	4631      	mov	r1, r6
 8006a62:	4638      	mov	r0, r7
 8006a64:	eb04 0803 	add.w	r8, r4, r3
 8006a68:	f000 f9a4 	bl	8006db4 <_sbrk_r>
 8006a6c:	4580      	cmp	r8, r0
 8006a6e:	d13a      	bne.n	8006ae6 <_malloc_r+0xd2>
 8006a70:	6821      	ldr	r1, [r4, #0]
 8006a72:	3503      	adds	r5, #3
 8006a74:	1a6d      	subs	r5, r5, r1
 8006a76:	f025 0503 	bic.w	r5, r5, #3
 8006a7a:	3508      	adds	r5, #8
 8006a7c:	2d0c      	cmp	r5, #12
 8006a7e:	bf38      	it	cc
 8006a80:	250c      	movcc	r5, #12
 8006a82:	4629      	mov	r1, r5
 8006a84:	4638      	mov	r0, r7
 8006a86:	f7ff ffa5 	bl	80069d4 <sbrk_aligned>
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	d02b      	beq.n	8006ae6 <_malloc_r+0xd2>
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	442b      	add	r3, r5
 8006a92:	6023      	str	r3, [r4, #0]
 8006a94:	e00e      	b.n	8006ab4 <_malloc_r+0xa0>
 8006a96:	6822      	ldr	r2, [r4, #0]
 8006a98:	1b52      	subs	r2, r2, r5
 8006a9a:	d41e      	bmi.n	8006ada <_malloc_r+0xc6>
 8006a9c:	2a0b      	cmp	r2, #11
 8006a9e:	d916      	bls.n	8006ace <_malloc_r+0xba>
 8006aa0:	1961      	adds	r1, r4, r5
 8006aa2:	42a3      	cmp	r3, r4
 8006aa4:	6025      	str	r5, [r4, #0]
 8006aa6:	bf18      	it	ne
 8006aa8:	6059      	strne	r1, [r3, #4]
 8006aaa:	6863      	ldr	r3, [r4, #4]
 8006aac:	bf08      	it	eq
 8006aae:	6031      	streq	r1, [r6, #0]
 8006ab0:	5162      	str	r2, [r4, r5]
 8006ab2:	604b      	str	r3, [r1, #4]
 8006ab4:	4638      	mov	r0, r7
 8006ab6:	f104 060b 	add.w	r6, r4, #11
 8006aba:	f000 f9ed 	bl	8006e98 <__malloc_unlock>
 8006abe:	f026 0607 	bic.w	r6, r6, #7
 8006ac2:	1d23      	adds	r3, r4, #4
 8006ac4:	1af2      	subs	r2, r6, r3
 8006ac6:	d0b6      	beq.n	8006a36 <_malloc_r+0x22>
 8006ac8:	1b9b      	subs	r3, r3, r6
 8006aca:	50a3      	str	r3, [r4, r2]
 8006acc:	e7b3      	b.n	8006a36 <_malloc_r+0x22>
 8006ace:	6862      	ldr	r2, [r4, #4]
 8006ad0:	42a3      	cmp	r3, r4
 8006ad2:	bf0c      	ite	eq
 8006ad4:	6032      	streq	r2, [r6, #0]
 8006ad6:	605a      	strne	r2, [r3, #4]
 8006ad8:	e7ec      	b.n	8006ab4 <_malloc_r+0xa0>
 8006ada:	4623      	mov	r3, r4
 8006adc:	6864      	ldr	r4, [r4, #4]
 8006ade:	e7b2      	b.n	8006a46 <_malloc_r+0x32>
 8006ae0:	4634      	mov	r4, r6
 8006ae2:	6876      	ldr	r6, [r6, #4]
 8006ae4:	e7b9      	b.n	8006a5a <_malloc_r+0x46>
 8006ae6:	230c      	movs	r3, #12
 8006ae8:	603b      	str	r3, [r7, #0]
 8006aea:	4638      	mov	r0, r7
 8006aec:	f000 f9d4 	bl	8006e98 <__malloc_unlock>
 8006af0:	e7a1      	b.n	8006a36 <_malloc_r+0x22>
 8006af2:	6025      	str	r5, [r4, #0]
 8006af4:	e7de      	b.n	8006ab4 <_malloc_r+0xa0>
 8006af6:	bf00      	nop
 8006af8:	2000036c 	.word	0x2000036c

08006afc <__ssputs_r>:
 8006afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b00:	688e      	ldr	r6, [r1, #8]
 8006b02:	429e      	cmp	r6, r3
 8006b04:	4682      	mov	sl, r0
 8006b06:	460c      	mov	r4, r1
 8006b08:	4690      	mov	r8, r2
 8006b0a:	461f      	mov	r7, r3
 8006b0c:	d838      	bhi.n	8006b80 <__ssputs_r+0x84>
 8006b0e:	898a      	ldrh	r2, [r1, #12]
 8006b10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b14:	d032      	beq.n	8006b7c <__ssputs_r+0x80>
 8006b16:	6825      	ldr	r5, [r4, #0]
 8006b18:	6909      	ldr	r1, [r1, #16]
 8006b1a:	eba5 0901 	sub.w	r9, r5, r1
 8006b1e:	6965      	ldr	r5, [r4, #20]
 8006b20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b28:	3301      	adds	r3, #1
 8006b2a:	444b      	add	r3, r9
 8006b2c:	106d      	asrs	r5, r5, #1
 8006b2e:	429d      	cmp	r5, r3
 8006b30:	bf38      	it	cc
 8006b32:	461d      	movcc	r5, r3
 8006b34:	0553      	lsls	r3, r2, #21
 8006b36:	d531      	bpl.n	8006b9c <__ssputs_r+0xa0>
 8006b38:	4629      	mov	r1, r5
 8006b3a:	f7ff ff6b 	bl	8006a14 <_malloc_r>
 8006b3e:	4606      	mov	r6, r0
 8006b40:	b950      	cbnz	r0, 8006b58 <__ssputs_r+0x5c>
 8006b42:	230c      	movs	r3, #12
 8006b44:	f8ca 3000 	str.w	r3, [sl]
 8006b48:	89a3      	ldrh	r3, [r4, #12]
 8006b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b4e:	81a3      	strh	r3, [r4, #12]
 8006b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b58:	6921      	ldr	r1, [r4, #16]
 8006b5a:	464a      	mov	r2, r9
 8006b5c:	f7ff fb46 	bl	80061ec <memcpy>
 8006b60:	89a3      	ldrh	r3, [r4, #12]
 8006b62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b6a:	81a3      	strh	r3, [r4, #12]
 8006b6c:	6126      	str	r6, [r4, #16]
 8006b6e:	6165      	str	r5, [r4, #20]
 8006b70:	444e      	add	r6, r9
 8006b72:	eba5 0509 	sub.w	r5, r5, r9
 8006b76:	6026      	str	r6, [r4, #0]
 8006b78:	60a5      	str	r5, [r4, #8]
 8006b7a:	463e      	mov	r6, r7
 8006b7c:	42be      	cmp	r6, r7
 8006b7e:	d900      	bls.n	8006b82 <__ssputs_r+0x86>
 8006b80:	463e      	mov	r6, r7
 8006b82:	6820      	ldr	r0, [r4, #0]
 8006b84:	4632      	mov	r2, r6
 8006b86:	4641      	mov	r1, r8
 8006b88:	f000 f966 	bl	8006e58 <memmove>
 8006b8c:	68a3      	ldr	r3, [r4, #8]
 8006b8e:	1b9b      	subs	r3, r3, r6
 8006b90:	60a3      	str	r3, [r4, #8]
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	4433      	add	r3, r6
 8006b96:	6023      	str	r3, [r4, #0]
 8006b98:	2000      	movs	r0, #0
 8006b9a:	e7db      	b.n	8006b54 <__ssputs_r+0x58>
 8006b9c:	462a      	mov	r2, r5
 8006b9e:	f000 f981 	bl	8006ea4 <_realloc_r>
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	d1e1      	bne.n	8006b6c <__ssputs_r+0x70>
 8006ba8:	6921      	ldr	r1, [r4, #16]
 8006baa:	4650      	mov	r0, sl
 8006bac:	f7ff fec6 	bl	800693c <_free_r>
 8006bb0:	e7c7      	b.n	8006b42 <__ssputs_r+0x46>
	...

08006bb4 <_svfiprintf_r>:
 8006bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb8:	4698      	mov	r8, r3
 8006bba:	898b      	ldrh	r3, [r1, #12]
 8006bbc:	061b      	lsls	r3, r3, #24
 8006bbe:	b09d      	sub	sp, #116	; 0x74
 8006bc0:	4607      	mov	r7, r0
 8006bc2:	460d      	mov	r5, r1
 8006bc4:	4614      	mov	r4, r2
 8006bc6:	d50e      	bpl.n	8006be6 <_svfiprintf_r+0x32>
 8006bc8:	690b      	ldr	r3, [r1, #16]
 8006bca:	b963      	cbnz	r3, 8006be6 <_svfiprintf_r+0x32>
 8006bcc:	2140      	movs	r1, #64	; 0x40
 8006bce:	f7ff ff21 	bl	8006a14 <_malloc_r>
 8006bd2:	6028      	str	r0, [r5, #0]
 8006bd4:	6128      	str	r0, [r5, #16]
 8006bd6:	b920      	cbnz	r0, 8006be2 <_svfiprintf_r+0x2e>
 8006bd8:	230c      	movs	r3, #12
 8006bda:	603b      	str	r3, [r7, #0]
 8006bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006be0:	e0d1      	b.n	8006d86 <_svfiprintf_r+0x1d2>
 8006be2:	2340      	movs	r3, #64	; 0x40
 8006be4:	616b      	str	r3, [r5, #20]
 8006be6:	2300      	movs	r3, #0
 8006be8:	9309      	str	r3, [sp, #36]	; 0x24
 8006bea:	2320      	movs	r3, #32
 8006bec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bf4:	2330      	movs	r3, #48	; 0x30
 8006bf6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006da0 <_svfiprintf_r+0x1ec>
 8006bfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bfe:	f04f 0901 	mov.w	r9, #1
 8006c02:	4623      	mov	r3, r4
 8006c04:	469a      	mov	sl, r3
 8006c06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c0a:	b10a      	cbz	r2, 8006c10 <_svfiprintf_r+0x5c>
 8006c0c:	2a25      	cmp	r2, #37	; 0x25
 8006c0e:	d1f9      	bne.n	8006c04 <_svfiprintf_r+0x50>
 8006c10:	ebba 0b04 	subs.w	fp, sl, r4
 8006c14:	d00b      	beq.n	8006c2e <_svfiprintf_r+0x7a>
 8006c16:	465b      	mov	r3, fp
 8006c18:	4622      	mov	r2, r4
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	4638      	mov	r0, r7
 8006c1e:	f7ff ff6d 	bl	8006afc <__ssputs_r>
 8006c22:	3001      	adds	r0, #1
 8006c24:	f000 80aa 	beq.w	8006d7c <_svfiprintf_r+0x1c8>
 8006c28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c2a:	445a      	add	r2, fp
 8006c2c:	9209      	str	r2, [sp, #36]	; 0x24
 8006c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 80a2 	beq.w	8006d7c <_svfiprintf_r+0x1c8>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c42:	f10a 0a01 	add.w	sl, sl, #1
 8006c46:	9304      	str	r3, [sp, #16]
 8006c48:	9307      	str	r3, [sp, #28]
 8006c4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c4e:	931a      	str	r3, [sp, #104]	; 0x68
 8006c50:	4654      	mov	r4, sl
 8006c52:	2205      	movs	r2, #5
 8006c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c58:	4851      	ldr	r0, [pc, #324]	; (8006da0 <_svfiprintf_r+0x1ec>)
 8006c5a:	f7f9 fac1 	bl	80001e0 <memchr>
 8006c5e:	9a04      	ldr	r2, [sp, #16]
 8006c60:	b9d8      	cbnz	r0, 8006c9a <_svfiprintf_r+0xe6>
 8006c62:	06d0      	lsls	r0, r2, #27
 8006c64:	bf44      	itt	mi
 8006c66:	2320      	movmi	r3, #32
 8006c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c6c:	0711      	lsls	r1, r2, #28
 8006c6e:	bf44      	itt	mi
 8006c70:	232b      	movmi	r3, #43	; 0x2b
 8006c72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c76:	f89a 3000 	ldrb.w	r3, [sl]
 8006c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c7c:	d015      	beq.n	8006caa <_svfiprintf_r+0xf6>
 8006c7e:	9a07      	ldr	r2, [sp, #28]
 8006c80:	4654      	mov	r4, sl
 8006c82:	2000      	movs	r0, #0
 8006c84:	f04f 0c0a 	mov.w	ip, #10
 8006c88:	4621      	mov	r1, r4
 8006c8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c8e:	3b30      	subs	r3, #48	; 0x30
 8006c90:	2b09      	cmp	r3, #9
 8006c92:	d94e      	bls.n	8006d32 <_svfiprintf_r+0x17e>
 8006c94:	b1b0      	cbz	r0, 8006cc4 <_svfiprintf_r+0x110>
 8006c96:	9207      	str	r2, [sp, #28]
 8006c98:	e014      	b.n	8006cc4 <_svfiprintf_r+0x110>
 8006c9a:	eba0 0308 	sub.w	r3, r0, r8
 8006c9e:	fa09 f303 	lsl.w	r3, r9, r3
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	9304      	str	r3, [sp, #16]
 8006ca6:	46a2      	mov	sl, r4
 8006ca8:	e7d2      	b.n	8006c50 <_svfiprintf_r+0x9c>
 8006caa:	9b03      	ldr	r3, [sp, #12]
 8006cac:	1d19      	adds	r1, r3, #4
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	9103      	str	r1, [sp, #12]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	bfbb      	ittet	lt
 8006cb6:	425b      	neglt	r3, r3
 8006cb8:	f042 0202 	orrlt.w	r2, r2, #2
 8006cbc:	9307      	strge	r3, [sp, #28]
 8006cbe:	9307      	strlt	r3, [sp, #28]
 8006cc0:	bfb8      	it	lt
 8006cc2:	9204      	strlt	r2, [sp, #16]
 8006cc4:	7823      	ldrb	r3, [r4, #0]
 8006cc6:	2b2e      	cmp	r3, #46	; 0x2e
 8006cc8:	d10c      	bne.n	8006ce4 <_svfiprintf_r+0x130>
 8006cca:	7863      	ldrb	r3, [r4, #1]
 8006ccc:	2b2a      	cmp	r3, #42	; 0x2a
 8006cce:	d135      	bne.n	8006d3c <_svfiprintf_r+0x188>
 8006cd0:	9b03      	ldr	r3, [sp, #12]
 8006cd2:	1d1a      	adds	r2, r3, #4
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	9203      	str	r2, [sp, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	bfb8      	it	lt
 8006cdc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006ce0:	3402      	adds	r4, #2
 8006ce2:	9305      	str	r3, [sp, #20]
 8006ce4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006db0 <_svfiprintf_r+0x1fc>
 8006ce8:	7821      	ldrb	r1, [r4, #0]
 8006cea:	2203      	movs	r2, #3
 8006cec:	4650      	mov	r0, sl
 8006cee:	f7f9 fa77 	bl	80001e0 <memchr>
 8006cf2:	b140      	cbz	r0, 8006d06 <_svfiprintf_r+0x152>
 8006cf4:	2340      	movs	r3, #64	; 0x40
 8006cf6:	eba0 000a 	sub.w	r0, r0, sl
 8006cfa:	fa03 f000 	lsl.w	r0, r3, r0
 8006cfe:	9b04      	ldr	r3, [sp, #16]
 8006d00:	4303      	orrs	r3, r0
 8006d02:	3401      	adds	r4, #1
 8006d04:	9304      	str	r3, [sp, #16]
 8006d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d0a:	4826      	ldr	r0, [pc, #152]	; (8006da4 <_svfiprintf_r+0x1f0>)
 8006d0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d10:	2206      	movs	r2, #6
 8006d12:	f7f9 fa65 	bl	80001e0 <memchr>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	d038      	beq.n	8006d8c <_svfiprintf_r+0x1d8>
 8006d1a:	4b23      	ldr	r3, [pc, #140]	; (8006da8 <_svfiprintf_r+0x1f4>)
 8006d1c:	bb1b      	cbnz	r3, 8006d66 <_svfiprintf_r+0x1b2>
 8006d1e:	9b03      	ldr	r3, [sp, #12]
 8006d20:	3307      	adds	r3, #7
 8006d22:	f023 0307 	bic.w	r3, r3, #7
 8006d26:	3308      	adds	r3, #8
 8006d28:	9303      	str	r3, [sp, #12]
 8006d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d2c:	4433      	add	r3, r6
 8006d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d30:	e767      	b.n	8006c02 <_svfiprintf_r+0x4e>
 8006d32:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d36:	460c      	mov	r4, r1
 8006d38:	2001      	movs	r0, #1
 8006d3a:	e7a5      	b.n	8006c88 <_svfiprintf_r+0xd4>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	3401      	adds	r4, #1
 8006d40:	9305      	str	r3, [sp, #20]
 8006d42:	4619      	mov	r1, r3
 8006d44:	f04f 0c0a 	mov.w	ip, #10
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d4e:	3a30      	subs	r2, #48	; 0x30
 8006d50:	2a09      	cmp	r2, #9
 8006d52:	d903      	bls.n	8006d5c <_svfiprintf_r+0x1a8>
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d0c5      	beq.n	8006ce4 <_svfiprintf_r+0x130>
 8006d58:	9105      	str	r1, [sp, #20]
 8006d5a:	e7c3      	b.n	8006ce4 <_svfiprintf_r+0x130>
 8006d5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d60:	4604      	mov	r4, r0
 8006d62:	2301      	movs	r3, #1
 8006d64:	e7f0      	b.n	8006d48 <_svfiprintf_r+0x194>
 8006d66:	ab03      	add	r3, sp, #12
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	462a      	mov	r2, r5
 8006d6c:	4b0f      	ldr	r3, [pc, #60]	; (8006dac <_svfiprintf_r+0x1f8>)
 8006d6e:	a904      	add	r1, sp, #16
 8006d70:	4638      	mov	r0, r7
 8006d72:	f7fd ffc9 	bl	8004d08 <_printf_float>
 8006d76:	1c42      	adds	r2, r0, #1
 8006d78:	4606      	mov	r6, r0
 8006d7a:	d1d6      	bne.n	8006d2a <_svfiprintf_r+0x176>
 8006d7c:	89ab      	ldrh	r3, [r5, #12]
 8006d7e:	065b      	lsls	r3, r3, #25
 8006d80:	f53f af2c 	bmi.w	8006bdc <_svfiprintf_r+0x28>
 8006d84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d86:	b01d      	add	sp, #116	; 0x74
 8006d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8c:	ab03      	add	r3, sp, #12
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	462a      	mov	r2, r5
 8006d92:	4b06      	ldr	r3, [pc, #24]	; (8006dac <_svfiprintf_r+0x1f8>)
 8006d94:	a904      	add	r1, sp, #16
 8006d96:	4638      	mov	r0, r7
 8006d98:	f7fe fa5a 	bl	8005250 <_printf_i>
 8006d9c:	e7eb      	b.n	8006d76 <_svfiprintf_r+0x1c2>
 8006d9e:	bf00      	nop
 8006da0:	08007c4c 	.word	0x08007c4c
 8006da4:	08007c56 	.word	0x08007c56
 8006da8:	08004d09 	.word	0x08004d09
 8006dac:	08006afd 	.word	0x08006afd
 8006db0:	08007c52 	.word	0x08007c52

08006db4 <_sbrk_r>:
 8006db4:	b538      	push	{r3, r4, r5, lr}
 8006db6:	4d06      	ldr	r5, [pc, #24]	; (8006dd0 <_sbrk_r+0x1c>)
 8006db8:	2300      	movs	r3, #0
 8006dba:	4604      	mov	r4, r0
 8006dbc:	4608      	mov	r0, r1
 8006dbe:	602b      	str	r3, [r5, #0]
 8006dc0:	f7fa fc28 	bl	8001614 <_sbrk>
 8006dc4:	1c43      	adds	r3, r0, #1
 8006dc6:	d102      	bne.n	8006dce <_sbrk_r+0x1a>
 8006dc8:	682b      	ldr	r3, [r5, #0]
 8006dca:	b103      	cbz	r3, 8006dce <_sbrk_r+0x1a>
 8006dcc:	6023      	str	r3, [r4, #0]
 8006dce:	bd38      	pop	{r3, r4, r5, pc}
 8006dd0:	20000374 	.word	0x20000374

08006dd4 <__assert_func>:
 8006dd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006dd6:	4614      	mov	r4, r2
 8006dd8:	461a      	mov	r2, r3
 8006dda:	4b09      	ldr	r3, [pc, #36]	; (8006e00 <__assert_func+0x2c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4605      	mov	r5, r0
 8006de0:	68d8      	ldr	r0, [r3, #12]
 8006de2:	b14c      	cbz	r4, 8006df8 <__assert_func+0x24>
 8006de4:	4b07      	ldr	r3, [pc, #28]	; (8006e04 <__assert_func+0x30>)
 8006de6:	9100      	str	r1, [sp, #0]
 8006de8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006dec:	4906      	ldr	r1, [pc, #24]	; (8006e08 <__assert_func+0x34>)
 8006dee:	462b      	mov	r3, r5
 8006df0:	f000 f80e 	bl	8006e10 <fiprintf>
 8006df4:	f000 faac 	bl	8007350 <abort>
 8006df8:	4b04      	ldr	r3, [pc, #16]	; (8006e0c <__assert_func+0x38>)
 8006dfa:	461c      	mov	r4, r3
 8006dfc:	e7f3      	b.n	8006de6 <__assert_func+0x12>
 8006dfe:	bf00      	nop
 8006e00:	20000014 	.word	0x20000014
 8006e04:	08007c5d 	.word	0x08007c5d
 8006e08:	08007c6a 	.word	0x08007c6a
 8006e0c:	08007c98 	.word	0x08007c98

08006e10 <fiprintf>:
 8006e10:	b40e      	push	{r1, r2, r3}
 8006e12:	b503      	push	{r0, r1, lr}
 8006e14:	4601      	mov	r1, r0
 8006e16:	ab03      	add	r3, sp, #12
 8006e18:	4805      	ldr	r0, [pc, #20]	; (8006e30 <fiprintf+0x20>)
 8006e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e1e:	6800      	ldr	r0, [r0, #0]
 8006e20:	9301      	str	r3, [sp, #4]
 8006e22:	f000 f897 	bl	8006f54 <_vfiprintf_r>
 8006e26:	b002      	add	sp, #8
 8006e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e2c:	b003      	add	sp, #12
 8006e2e:	4770      	bx	lr
 8006e30:	20000014 	.word	0x20000014

08006e34 <__ascii_mbtowc>:
 8006e34:	b082      	sub	sp, #8
 8006e36:	b901      	cbnz	r1, 8006e3a <__ascii_mbtowc+0x6>
 8006e38:	a901      	add	r1, sp, #4
 8006e3a:	b142      	cbz	r2, 8006e4e <__ascii_mbtowc+0x1a>
 8006e3c:	b14b      	cbz	r3, 8006e52 <__ascii_mbtowc+0x1e>
 8006e3e:	7813      	ldrb	r3, [r2, #0]
 8006e40:	600b      	str	r3, [r1, #0]
 8006e42:	7812      	ldrb	r2, [r2, #0]
 8006e44:	1e10      	subs	r0, r2, #0
 8006e46:	bf18      	it	ne
 8006e48:	2001      	movne	r0, #1
 8006e4a:	b002      	add	sp, #8
 8006e4c:	4770      	bx	lr
 8006e4e:	4610      	mov	r0, r2
 8006e50:	e7fb      	b.n	8006e4a <__ascii_mbtowc+0x16>
 8006e52:	f06f 0001 	mvn.w	r0, #1
 8006e56:	e7f8      	b.n	8006e4a <__ascii_mbtowc+0x16>

08006e58 <memmove>:
 8006e58:	4288      	cmp	r0, r1
 8006e5a:	b510      	push	{r4, lr}
 8006e5c:	eb01 0402 	add.w	r4, r1, r2
 8006e60:	d902      	bls.n	8006e68 <memmove+0x10>
 8006e62:	4284      	cmp	r4, r0
 8006e64:	4623      	mov	r3, r4
 8006e66:	d807      	bhi.n	8006e78 <memmove+0x20>
 8006e68:	1e43      	subs	r3, r0, #1
 8006e6a:	42a1      	cmp	r1, r4
 8006e6c:	d008      	beq.n	8006e80 <memmove+0x28>
 8006e6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e76:	e7f8      	b.n	8006e6a <memmove+0x12>
 8006e78:	4402      	add	r2, r0
 8006e7a:	4601      	mov	r1, r0
 8006e7c:	428a      	cmp	r2, r1
 8006e7e:	d100      	bne.n	8006e82 <memmove+0x2a>
 8006e80:	bd10      	pop	{r4, pc}
 8006e82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e8a:	e7f7      	b.n	8006e7c <memmove+0x24>

08006e8c <__malloc_lock>:
 8006e8c:	4801      	ldr	r0, [pc, #4]	; (8006e94 <__malloc_lock+0x8>)
 8006e8e:	f000 bc1f 	b.w	80076d0 <__retarget_lock_acquire_recursive>
 8006e92:	bf00      	nop
 8006e94:	20000378 	.word	0x20000378

08006e98 <__malloc_unlock>:
 8006e98:	4801      	ldr	r0, [pc, #4]	; (8006ea0 <__malloc_unlock+0x8>)
 8006e9a:	f000 bc1a 	b.w	80076d2 <__retarget_lock_release_recursive>
 8006e9e:	bf00      	nop
 8006ea0:	20000378 	.word	0x20000378

08006ea4 <_realloc_r>:
 8006ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea8:	4680      	mov	r8, r0
 8006eaa:	4614      	mov	r4, r2
 8006eac:	460e      	mov	r6, r1
 8006eae:	b921      	cbnz	r1, 8006eba <_realloc_r+0x16>
 8006eb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb4:	4611      	mov	r1, r2
 8006eb6:	f7ff bdad 	b.w	8006a14 <_malloc_r>
 8006eba:	b92a      	cbnz	r2, 8006ec8 <_realloc_r+0x24>
 8006ebc:	f7ff fd3e 	bl	800693c <_free_r>
 8006ec0:	4625      	mov	r5, r4
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ec8:	f000 fc6a 	bl	80077a0 <_malloc_usable_size_r>
 8006ecc:	4284      	cmp	r4, r0
 8006ece:	4607      	mov	r7, r0
 8006ed0:	d802      	bhi.n	8006ed8 <_realloc_r+0x34>
 8006ed2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006ed6:	d812      	bhi.n	8006efe <_realloc_r+0x5a>
 8006ed8:	4621      	mov	r1, r4
 8006eda:	4640      	mov	r0, r8
 8006edc:	f7ff fd9a 	bl	8006a14 <_malloc_r>
 8006ee0:	4605      	mov	r5, r0
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	d0ed      	beq.n	8006ec2 <_realloc_r+0x1e>
 8006ee6:	42bc      	cmp	r4, r7
 8006ee8:	4622      	mov	r2, r4
 8006eea:	4631      	mov	r1, r6
 8006eec:	bf28      	it	cs
 8006eee:	463a      	movcs	r2, r7
 8006ef0:	f7ff f97c 	bl	80061ec <memcpy>
 8006ef4:	4631      	mov	r1, r6
 8006ef6:	4640      	mov	r0, r8
 8006ef8:	f7ff fd20 	bl	800693c <_free_r>
 8006efc:	e7e1      	b.n	8006ec2 <_realloc_r+0x1e>
 8006efe:	4635      	mov	r5, r6
 8006f00:	e7df      	b.n	8006ec2 <_realloc_r+0x1e>

08006f02 <__sfputc_r>:
 8006f02:	6893      	ldr	r3, [r2, #8]
 8006f04:	3b01      	subs	r3, #1
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	b410      	push	{r4}
 8006f0a:	6093      	str	r3, [r2, #8]
 8006f0c:	da08      	bge.n	8006f20 <__sfputc_r+0x1e>
 8006f0e:	6994      	ldr	r4, [r2, #24]
 8006f10:	42a3      	cmp	r3, r4
 8006f12:	db01      	blt.n	8006f18 <__sfputc_r+0x16>
 8006f14:	290a      	cmp	r1, #10
 8006f16:	d103      	bne.n	8006f20 <__sfputc_r+0x1e>
 8006f18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f1c:	f000 b94a 	b.w	80071b4 <__swbuf_r>
 8006f20:	6813      	ldr	r3, [r2, #0]
 8006f22:	1c58      	adds	r0, r3, #1
 8006f24:	6010      	str	r0, [r2, #0]
 8006f26:	7019      	strb	r1, [r3, #0]
 8006f28:	4608      	mov	r0, r1
 8006f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <__sfputs_r>:
 8006f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f32:	4606      	mov	r6, r0
 8006f34:	460f      	mov	r7, r1
 8006f36:	4614      	mov	r4, r2
 8006f38:	18d5      	adds	r5, r2, r3
 8006f3a:	42ac      	cmp	r4, r5
 8006f3c:	d101      	bne.n	8006f42 <__sfputs_r+0x12>
 8006f3e:	2000      	movs	r0, #0
 8006f40:	e007      	b.n	8006f52 <__sfputs_r+0x22>
 8006f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f46:	463a      	mov	r2, r7
 8006f48:	4630      	mov	r0, r6
 8006f4a:	f7ff ffda 	bl	8006f02 <__sfputc_r>
 8006f4e:	1c43      	adds	r3, r0, #1
 8006f50:	d1f3      	bne.n	8006f3a <__sfputs_r+0xa>
 8006f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006f54 <_vfiprintf_r>:
 8006f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f58:	460d      	mov	r5, r1
 8006f5a:	b09d      	sub	sp, #116	; 0x74
 8006f5c:	4614      	mov	r4, r2
 8006f5e:	4698      	mov	r8, r3
 8006f60:	4606      	mov	r6, r0
 8006f62:	b118      	cbz	r0, 8006f6c <_vfiprintf_r+0x18>
 8006f64:	6983      	ldr	r3, [r0, #24]
 8006f66:	b90b      	cbnz	r3, 8006f6c <_vfiprintf_r+0x18>
 8006f68:	f000 fb14 	bl	8007594 <__sinit>
 8006f6c:	4b89      	ldr	r3, [pc, #548]	; (8007194 <_vfiprintf_r+0x240>)
 8006f6e:	429d      	cmp	r5, r3
 8006f70:	d11b      	bne.n	8006faa <_vfiprintf_r+0x56>
 8006f72:	6875      	ldr	r5, [r6, #4]
 8006f74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f76:	07d9      	lsls	r1, r3, #31
 8006f78:	d405      	bmi.n	8006f86 <_vfiprintf_r+0x32>
 8006f7a:	89ab      	ldrh	r3, [r5, #12]
 8006f7c:	059a      	lsls	r2, r3, #22
 8006f7e:	d402      	bmi.n	8006f86 <_vfiprintf_r+0x32>
 8006f80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f82:	f000 fba5 	bl	80076d0 <__retarget_lock_acquire_recursive>
 8006f86:	89ab      	ldrh	r3, [r5, #12]
 8006f88:	071b      	lsls	r3, r3, #28
 8006f8a:	d501      	bpl.n	8006f90 <_vfiprintf_r+0x3c>
 8006f8c:	692b      	ldr	r3, [r5, #16]
 8006f8e:	b9eb      	cbnz	r3, 8006fcc <_vfiprintf_r+0x78>
 8006f90:	4629      	mov	r1, r5
 8006f92:	4630      	mov	r0, r6
 8006f94:	f000 f96e 	bl	8007274 <__swsetup_r>
 8006f98:	b1c0      	cbz	r0, 8006fcc <_vfiprintf_r+0x78>
 8006f9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f9c:	07dc      	lsls	r4, r3, #31
 8006f9e:	d50e      	bpl.n	8006fbe <_vfiprintf_r+0x6a>
 8006fa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fa4:	b01d      	add	sp, #116	; 0x74
 8006fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006faa:	4b7b      	ldr	r3, [pc, #492]	; (8007198 <_vfiprintf_r+0x244>)
 8006fac:	429d      	cmp	r5, r3
 8006fae:	d101      	bne.n	8006fb4 <_vfiprintf_r+0x60>
 8006fb0:	68b5      	ldr	r5, [r6, #8]
 8006fb2:	e7df      	b.n	8006f74 <_vfiprintf_r+0x20>
 8006fb4:	4b79      	ldr	r3, [pc, #484]	; (800719c <_vfiprintf_r+0x248>)
 8006fb6:	429d      	cmp	r5, r3
 8006fb8:	bf08      	it	eq
 8006fba:	68f5      	ldreq	r5, [r6, #12]
 8006fbc:	e7da      	b.n	8006f74 <_vfiprintf_r+0x20>
 8006fbe:	89ab      	ldrh	r3, [r5, #12]
 8006fc0:	0598      	lsls	r0, r3, #22
 8006fc2:	d4ed      	bmi.n	8006fa0 <_vfiprintf_r+0x4c>
 8006fc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fc6:	f000 fb84 	bl	80076d2 <__retarget_lock_release_recursive>
 8006fca:	e7e9      	b.n	8006fa0 <_vfiprintf_r+0x4c>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	9309      	str	r3, [sp, #36]	; 0x24
 8006fd0:	2320      	movs	r3, #32
 8006fd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fda:	2330      	movs	r3, #48	; 0x30
 8006fdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80071a0 <_vfiprintf_r+0x24c>
 8006fe0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fe4:	f04f 0901 	mov.w	r9, #1
 8006fe8:	4623      	mov	r3, r4
 8006fea:	469a      	mov	sl, r3
 8006fec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ff0:	b10a      	cbz	r2, 8006ff6 <_vfiprintf_r+0xa2>
 8006ff2:	2a25      	cmp	r2, #37	; 0x25
 8006ff4:	d1f9      	bne.n	8006fea <_vfiprintf_r+0x96>
 8006ff6:	ebba 0b04 	subs.w	fp, sl, r4
 8006ffa:	d00b      	beq.n	8007014 <_vfiprintf_r+0xc0>
 8006ffc:	465b      	mov	r3, fp
 8006ffe:	4622      	mov	r2, r4
 8007000:	4629      	mov	r1, r5
 8007002:	4630      	mov	r0, r6
 8007004:	f7ff ff94 	bl	8006f30 <__sfputs_r>
 8007008:	3001      	adds	r0, #1
 800700a:	f000 80aa 	beq.w	8007162 <_vfiprintf_r+0x20e>
 800700e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007010:	445a      	add	r2, fp
 8007012:	9209      	str	r2, [sp, #36]	; 0x24
 8007014:	f89a 3000 	ldrb.w	r3, [sl]
 8007018:	2b00      	cmp	r3, #0
 800701a:	f000 80a2 	beq.w	8007162 <_vfiprintf_r+0x20e>
 800701e:	2300      	movs	r3, #0
 8007020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007024:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007028:	f10a 0a01 	add.w	sl, sl, #1
 800702c:	9304      	str	r3, [sp, #16]
 800702e:	9307      	str	r3, [sp, #28]
 8007030:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007034:	931a      	str	r3, [sp, #104]	; 0x68
 8007036:	4654      	mov	r4, sl
 8007038:	2205      	movs	r2, #5
 800703a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800703e:	4858      	ldr	r0, [pc, #352]	; (80071a0 <_vfiprintf_r+0x24c>)
 8007040:	f7f9 f8ce 	bl	80001e0 <memchr>
 8007044:	9a04      	ldr	r2, [sp, #16]
 8007046:	b9d8      	cbnz	r0, 8007080 <_vfiprintf_r+0x12c>
 8007048:	06d1      	lsls	r1, r2, #27
 800704a:	bf44      	itt	mi
 800704c:	2320      	movmi	r3, #32
 800704e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007052:	0713      	lsls	r3, r2, #28
 8007054:	bf44      	itt	mi
 8007056:	232b      	movmi	r3, #43	; 0x2b
 8007058:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800705c:	f89a 3000 	ldrb.w	r3, [sl]
 8007060:	2b2a      	cmp	r3, #42	; 0x2a
 8007062:	d015      	beq.n	8007090 <_vfiprintf_r+0x13c>
 8007064:	9a07      	ldr	r2, [sp, #28]
 8007066:	4654      	mov	r4, sl
 8007068:	2000      	movs	r0, #0
 800706a:	f04f 0c0a 	mov.w	ip, #10
 800706e:	4621      	mov	r1, r4
 8007070:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007074:	3b30      	subs	r3, #48	; 0x30
 8007076:	2b09      	cmp	r3, #9
 8007078:	d94e      	bls.n	8007118 <_vfiprintf_r+0x1c4>
 800707a:	b1b0      	cbz	r0, 80070aa <_vfiprintf_r+0x156>
 800707c:	9207      	str	r2, [sp, #28]
 800707e:	e014      	b.n	80070aa <_vfiprintf_r+0x156>
 8007080:	eba0 0308 	sub.w	r3, r0, r8
 8007084:	fa09 f303 	lsl.w	r3, r9, r3
 8007088:	4313      	orrs	r3, r2
 800708a:	9304      	str	r3, [sp, #16]
 800708c:	46a2      	mov	sl, r4
 800708e:	e7d2      	b.n	8007036 <_vfiprintf_r+0xe2>
 8007090:	9b03      	ldr	r3, [sp, #12]
 8007092:	1d19      	adds	r1, r3, #4
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	9103      	str	r1, [sp, #12]
 8007098:	2b00      	cmp	r3, #0
 800709a:	bfbb      	ittet	lt
 800709c:	425b      	neglt	r3, r3
 800709e:	f042 0202 	orrlt.w	r2, r2, #2
 80070a2:	9307      	strge	r3, [sp, #28]
 80070a4:	9307      	strlt	r3, [sp, #28]
 80070a6:	bfb8      	it	lt
 80070a8:	9204      	strlt	r2, [sp, #16]
 80070aa:	7823      	ldrb	r3, [r4, #0]
 80070ac:	2b2e      	cmp	r3, #46	; 0x2e
 80070ae:	d10c      	bne.n	80070ca <_vfiprintf_r+0x176>
 80070b0:	7863      	ldrb	r3, [r4, #1]
 80070b2:	2b2a      	cmp	r3, #42	; 0x2a
 80070b4:	d135      	bne.n	8007122 <_vfiprintf_r+0x1ce>
 80070b6:	9b03      	ldr	r3, [sp, #12]
 80070b8:	1d1a      	adds	r2, r3, #4
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	9203      	str	r2, [sp, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	bfb8      	it	lt
 80070c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80070c6:	3402      	adds	r4, #2
 80070c8:	9305      	str	r3, [sp, #20]
 80070ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80071b0 <_vfiprintf_r+0x25c>
 80070ce:	7821      	ldrb	r1, [r4, #0]
 80070d0:	2203      	movs	r2, #3
 80070d2:	4650      	mov	r0, sl
 80070d4:	f7f9 f884 	bl	80001e0 <memchr>
 80070d8:	b140      	cbz	r0, 80070ec <_vfiprintf_r+0x198>
 80070da:	2340      	movs	r3, #64	; 0x40
 80070dc:	eba0 000a 	sub.w	r0, r0, sl
 80070e0:	fa03 f000 	lsl.w	r0, r3, r0
 80070e4:	9b04      	ldr	r3, [sp, #16]
 80070e6:	4303      	orrs	r3, r0
 80070e8:	3401      	adds	r4, #1
 80070ea:	9304      	str	r3, [sp, #16]
 80070ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070f0:	482c      	ldr	r0, [pc, #176]	; (80071a4 <_vfiprintf_r+0x250>)
 80070f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070f6:	2206      	movs	r2, #6
 80070f8:	f7f9 f872 	bl	80001e0 <memchr>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	d03f      	beq.n	8007180 <_vfiprintf_r+0x22c>
 8007100:	4b29      	ldr	r3, [pc, #164]	; (80071a8 <_vfiprintf_r+0x254>)
 8007102:	bb1b      	cbnz	r3, 800714c <_vfiprintf_r+0x1f8>
 8007104:	9b03      	ldr	r3, [sp, #12]
 8007106:	3307      	adds	r3, #7
 8007108:	f023 0307 	bic.w	r3, r3, #7
 800710c:	3308      	adds	r3, #8
 800710e:	9303      	str	r3, [sp, #12]
 8007110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007112:	443b      	add	r3, r7
 8007114:	9309      	str	r3, [sp, #36]	; 0x24
 8007116:	e767      	b.n	8006fe8 <_vfiprintf_r+0x94>
 8007118:	fb0c 3202 	mla	r2, ip, r2, r3
 800711c:	460c      	mov	r4, r1
 800711e:	2001      	movs	r0, #1
 8007120:	e7a5      	b.n	800706e <_vfiprintf_r+0x11a>
 8007122:	2300      	movs	r3, #0
 8007124:	3401      	adds	r4, #1
 8007126:	9305      	str	r3, [sp, #20]
 8007128:	4619      	mov	r1, r3
 800712a:	f04f 0c0a 	mov.w	ip, #10
 800712e:	4620      	mov	r0, r4
 8007130:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007134:	3a30      	subs	r2, #48	; 0x30
 8007136:	2a09      	cmp	r2, #9
 8007138:	d903      	bls.n	8007142 <_vfiprintf_r+0x1ee>
 800713a:	2b00      	cmp	r3, #0
 800713c:	d0c5      	beq.n	80070ca <_vfiprintf_r+0x176>
 800713e:	9105      	str	r1, [sp, #20]
 8007140:	e7c3      	b.n	80070ca <_vfiprintf_r+0x176>
 8007142:	fb0c 2101 	mla	r1, ip, r1, r2
 8007146:	4604      	mov	r4, r0
 8007148:	2301      	movs	r3, #1
 800714a:	e7f0      	b.n	800712e <_vfiprintf_r+0x1da>
 800714c:	ab03      	add	r3, sp, #12
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	462a      	mov	r2, r5
 8007152:	4b16      	ldr	r3, [pc, #88]	; (80071ac <_vfiprintf_r+0x258>)
 8007154:	a904      	add	r1, sp, #16
 8007156:	4630      	mov	r0, r6
 8007158:	f7fd fdd6 	bl	8004d08 <_printf_float>
 800715c:	4607      	mov	r7, r0
 800715e:	1c78      	adds	r0, r7, #1
 8007160:	d1d6      	bne.n	8007110 <_vfiprintf_r+0x1bc>
 8007162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007164:	07d9      	lsls	r1, r3, #31
 8007166:	d405      	bmi.n	8007174 <_vfiprintf_r+0x220>
 8007168:	89ab      	ldrh	r3, [r5, #12]
 800716a:	059a      	lsls	r2, r3, #22
 800716c:	d402      	bmi.n	8007174 <_vfiprintf_r+0x220>
 800716e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007170:	f000 faaf 	bl	80076d2 <__retarget_lock_release_recursive>
 8007174:	89ab      	ldrh	r3, [r5, #12]
 8007176:	065b      	lsls	r3, r3, #25
 8007178:	f53f af12 	bmi.w	8006fa0 <_vfiprintf_r+0x4c>
 800717c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800717e:	e711      	b.n	8006fa4 <_vfiprintf_r+0x50>
 8007180:	ab03      	add	r3, sp, #12
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	462a      	mov	r2, r5
 8007186:	4b09      	ldr	r3, [pc, #36]	; (80071ac <_vfiprintf_r+0x258>)
 8007188:	a904      	add	r1, sp, #16
 800718a:	4630      	mov	r0, r6
 800718c:	f7fe f860 	bl	8005250 <_printf_i>
 8007190:	e7e4      	b.n	800715c <_vfiprintf_r+0x208>
 8007192:	bf00      	nop
 8007194:	08007dc4 	.word	0x08007dc4
 8007198:	08007de4 	.word	0x08007de4
 800719c:	08007da4 	.word	0x08007da4
 80071a0:	08007c4c 	.word	0x08007c4c
 80071a4:	08007c56 	.word	0x08007c56
 80071a8:	08004d09 	.word	0x08004d09
 80071ac:	08006f31 	.word	0x08006f31
 80071b0:	08007c52 	.word	0x08007c52

080071b4 <__swbuf_r>:
 80071b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b6:	460e      	mov	r6, r1
 80071b8:	4614      	mov	r4, r2
 80071ba:	4605      	mov	r5, r0
 80071bc:	b118      	cbz	r0, 80071c6 <__swbuf_r+0x12>
 80071be:	6983      	ldr	r3, [r0, #24]
 80071c0:	b90b      	cbnz	r3, 80071c6 <__swbuf_r+0x12>
 80071c2:	f000 f9e7 	bl	8007594 <__sinit>
 80071c6:	4b21      	ldr	r3, [pc, #132]	; (800724c <__swbuf_r+0x98>)
 80071c8:	429c      	cmp	r4, r3
 80071ca:	d12b      	bne.n	8007224 <__swbuf_r+0x70>
 80071cc:	686c      	ldr	r4, [r5, #4]
 80071ce:	69a3      	ldr	r3, [r4, #24]
 80071d0:	60a3      	str	r3, [r4, #8]
 80071d2:	89a3      	ldrh	r3, [r4, #12]
 80071d4:	071a      	lsls	r2, r3, #28
 80071d6:	d52f      	bpl.n	8007238 <__swbuf_r+0x84>
 80071d8:	6923      	ldr	r3, [r4, #16]
 80071da:	b36b      	cbz	r3, 8007238 <__swbuf_r+0x84>
 80071dc:	6923      	ldr	r3, [r4, #16]
 80071de:	6820      	ldr	r0, [r4, #0]
 80071e0:	1ac0      	subs	r0, r0, r3
 80071e2:	6963      	ldr	r3, [r4, #20]
 80071e4:	b2f6      	uxtb	r6, r6
 80071e6:	4283      	cmp	r3, r0
 80071e8:	4637      	mov	r7, r6
 80071ea:	dc04      	bgt.n	80071f6 <__swbuf_r+0x42>
 80071ec:	4621      	mov	r1, r4
 80071ee:	4628      	mov	r0, r5
 80071f0:	f000 f93c 	bl	800746c <_fflush_r>
 80071f4:	bb30      	cbnz	r0, 8007244 <__swbuf_r+0x90>
 80071f6:	68a3      	ldr	r3, [r4, #8]
 80071f8:	3b01      	subs	r3, #1
 80071fa:	60a3      	str	r3, [r4, #8]
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	1c5a      	adds	r2, r3, #1
 8007200:	6022      	str	r2, [r4, #0]
 8007202:	701e      	strb	r6, [r3, #0]
 8007204:	6963      	ldr	r3, [r4, #20]
 8007206:	3001      	adds	r0, #1
 8007208:	4283      	cmp	r3, r0
 800720a:	d004      	beq.n	8007216 <__swbuf_r+0x62>
 800720c:	89a3      	ldrh	r3, [r4, #12]
 800720e:	07db      	lsls	r3, r3, #31
 8007210:	d506      	bpl.n	8007220 <__swbuf_r+0x6c>
 8007212:	2e0a      	cmp	r6, #10
 8007214:	d104      	bne.n	8007220 <__swbuf_r+0x6c>
 8007216:	4621      	mov	r1, r4
 8007218:	4628      	mov	r0, r5
 800721a:	f000 f927 	bl	800746c <_fflush_r>
 800721e:	b988      	cbnz	r0, 8007244 <__swbuf_r+0x90>
 8007220:	4638      	mov	r0, r7
 8007222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007224:	4b0a      	ldr	r3, [pc, #40]	; (8007250 <__swbuf_r+0x9c>)
 8007226:	429c      	cmp	r4, r3
 8007228:	d101      	bne.n	800722e <__swbuf_r+0x7a>
 800722a:	68ac      	ldr	r4, [r5, #8]
 800722c:	e7cf      	b.n	80071ce <__swbuf_r+0x1a>
 800722e:	4b09      	ldr	r3, [pc, #36]	; (8007254 <__swbuf_r+0xa0>)
 8007230:	429c      	cmp	r4, r3
 8007232:	bf08      	it	eq
 8007234:	68ec      	ldreq	r4, [r5, #12]
 8007236:	e7ca      	b.n	80071ce <__swbuf_r+0x1a>
 8007238:	4621      	mov	r1, r4
 800723a:	4628      	mov	r0, r5
 800723c:	f000 f81a 	bl	8007274 <__swsetup_r>
 8007240:	2800      	cmp	r0, #0
 8007242:	d0cb      	beq.n	80071dc <__swbuf_r+0x28>
 8007244:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007248:	e7ea      	b.n	8007220 <__swbuf_r+0x6c>
 800724a:	bf00      	nop
 800724c:	08007dc4 	.word	0x08007dc4
 8007250:	08007de4 	.word	0x08007de4
 8007254:	08007da4 	.word	0x08007da4

08007258 <__ascii_wctomb>:
 8007258:	b149      	cbz	r1, 800726e <__ascii_wctomb+0x16>
 800725a:	2aff      	cmp	r2, #255	; 0xff
 800725c:	bf85      	ittet	hi
 800725e:	238a      	movhi	r3, #138	; 0x8a
 8007260:	6003      	strhi	r3, [r0, #0]
 8007262:	700a      	strbls	r2, [r1, #0]
 8007264:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007268:	bf98      	it	ls
 800726a:	2001      	movls	r0, #1
 800726c:	4770      	bx	lr
 800726e:	4608      	mov	r0, r1
 8007270:	4770      	bx	lr
	...

08007274 <__swsetup_r>:
 8007274:	4b32      	ldr	r3, [pc, #200]	; (8007340 <__swsetup_r+0xcc>)
 8007276:	b570      	push	{r4, r5, r6, lr}
 8007278:	681d      	ldr	r5, [r3, #0]
 800727a:	4606      	mov	r6, r0
 800727c:	460c      	mov	r4, r1
 800727e:	b125      	cbz	r5, 800728a <__swsetup_r+0x16>
 8007280:	69ab      	ldr	r3, [r5, #24]
 8007282:	b913      	cbnz	r3, 800728a <__swsetup_r+0x16>
 8007284:	4628      	mov	r0, r5
 8007286:	f000 f985 	bl	8007594 <__sinit>
 800728a:	4b2e      	ldr	r3, [pc, #184]	; (8007344 <__swsetup_r+0xd0>)
 800728c:	429c      	cmp	r4, r3
 800728e:	d10f      	bne.n	80072b0 <__swsetup_r+0x3c>
 8007290:	686c      	ldr	r4, [r5, #4]
 8007292:	89a3      	ldrh	r3, [r4, #12]
 8007294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007298:	0719      	lsls	r1, r3, #28
 800729a:	d42c      	bmi.n	80072f6 <__swsetup_r+0x82>
 800729c:	06dd      	lsls	r5, r3, #27
 800729e:	d411      	bmi.n	80072c4 <__swsetup_r+0x50>
 80072a0:	2309      	movs	r3, #9
 80072a2:	6033      	str	r3, [r6, #0]
 80072a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80072a8:	81a3      	strh	r3, [r4, #12]
 80072aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072ae:	e03e      	b.n	800732e <__swsetup_r+0xba>
 80072b0:	4b25      	ldr	r3, [pc, #148]	; (8007348 <__swsetup_r+0xd4>)
 80072b2:	429c      	cmp	r4, r3
 80072b4:	d101      	bne.n	80072ba <__swsetup_r+0x46>
 80072b6:	68ac      	ldr	r4, [r5, #8]
 80072b8:	e7eb      	b.n	8007292 <__swsetup_r+0x1e>
 80072ba:	4b24      	ldr	r3, [pc, #144]	; (800734c <__swsetup_r+0xd8>)
 80072bc:	429c      	cmp	r4, r3
 80072be:	bf08      	it	eq
 80072c0:	68ec      	ldreq	r4, [r5, #12]
 80072c2:	e7e6      	b.n	8007292 <__swsetup_r+0x1e>
 80072c4:	0758      	lsls	r0, r3, #29
 80072c6:	d512      	bpl.n	80072ee <__swsetup_r+0x7a>
 80072c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072ca:	b141      	cbz	r1, 80072de <__swsetup_r+0x6a>
 80072cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072d0:	4299      	cmp	r1, r3
 80072d2:	d002      	beq.n	80072da <__swsetup_r+0x66>
 80072d4:	4630      	mov	r0, r6
 80072d6:	f7ff fb31 	bl	800693c <_free_r>
 80072da:	2300      	movs	r3, #0
 80072dc:	6363      	str	r3, [r4, #52]	; 0x34
 80072de:	89a3      	ldrh	r3, [r4, #12]
 80072e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80072e4:	81a3      	strh	r3, [r4, #12]
 80072e6:	2300      	movs	r3, #0
 80072e8:	6063      	str	r3, [r4, #4]
 80072ea:	6923      	ldr	r3, [r4, #16]
 80072ec:	6023      	str	r3, [r4, #0]
 80072ee:	89a3      	ldrh	r3, [r4, #12]
 80072f0:	f043 0308 	orr.w	r3, r3, #8
 80072f4:	81a3      	strh	r3, [r4, #12]
 80072f6:	6923      	ldr	r3, [r4, #16]
 80072f8:	b94b      	cbnz	r3, 800730e <__swsetup_r+0x9a>
 80072fa:	89a3      	ldrh	r3, [r4, #12]
 80072fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007304:	d003      	beq.n	800730e <__swsetup_r+0x9a>
 8007306:	4621      	mov	r1, r4
 8007308:	4630      	mov	r0, r6
 800730a:	f000 fa09 	bl	8007720 <__smakebuf_r>
 800730e:	89a0      	ldrh	r0, [r4, #12]
 8007310:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007314:	f010 0301 	ands.w	r3, r0, #1
 8007318:	d00a      	beq.n	8007330 <__swsetup_r+0xbc>
 800731a:	2300      	movs	r3, #0
 800731c:	60a3      	str	r3, [r4, #8]
 800731e:	6963      	ldr	r3, [r4, #20]
 8007320:	425b      	negs	r3, r3
 8007322:	61a3      	str	r3, [r4, #24]
 8007324:	6923      	ldr	r3, [r4, #16]
 8007326:	b943      	cbnz	r3, 800733a <__swsetup_r+0xc6>
 8007328:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800732c:	d1ba      	bne.n	80072a4 <__swsetup_r+0x30>
 800732e:	bd70      	pop	{r4, r5, r6, pc}
 8007330:	0781      	lsls	r1, r0, #30
 8007332:	bf58      	it	pl
 8007334:	6963      	ldrpl	r3, [r4, #20]
 8007336:	60a3      	str	r3, [r4, #8]
 8007338:	e7f4      	b.n	8007324 <__swsetup_r+0xb0>
 800733a:	2000      	movs	r0, #0
 800733c:	e7f7      	b.n	800732e <__swsetup_r+0xba>
 800733e:	bf00      	nop
 8007340:	20000014 	.word	0x20000014
 8007344:	08007dc4 	.word	0x08007dc4
 8007348:	08007de4 	.word	0x08007de4
 800734c:	08007da4 	.word	0x08007da4

08007350 <abort>:
 8007350:	b508      	push	{r3, lr}
 8007352:	2006      	movs	r0, #6
 8007354:	f000 fa54 	bl	8007800 <raise>
 8007358:	2001      	movs	r0, #1
 800735a:	f7fa f8e3 	bl	8001524 <_exit>
	...

08007360 <__sflush_r>:
 8007360:	898a      	ldrh	r2, [r1, #12]
 8007362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007366:	4605      	mov	r5, r0
 8007368:	0710      	lsls	r0, r2, #28
 800736a:	460c      	mov	r4, r1
 800736c:	d458      	bmi.n	8007420 <__sflush_r+0xc0>
 800736e:	684b      	ldr	r3, [r1, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	dc05      	bgt.n	8007380 <__sflush_r+0x20>
 8007374:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007376:	2b00      	cmp	r3, #0
 8007378:	dc02      	bgt.n	8007380 <__sflush_r+0x20>
 800737a:	2000      	movs	r0, #0
 800737c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007380:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007382:	2e00      	cmp	r6, #0
 8007384:	d0f9      	beq.n	800737a <__sflush_r+0x1a>
 8007386:	2300      	movs	r3, #0
 8007388:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800738c:	682f      	ldr	r7, [r5, #0]
 800738e:	602b      	str	r3, [r5, #0]
 8007390:	d032      	beq.n	80073f8 <__sflush_r+0x98>
 8007392:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007394:	89a3      	ldrh	r3, [r4, #12]
 8007396:	075a      	lsls	r2, r3, #29
 8007398:	d505      	bpl.n	80073a6 <__sflush_r+0x46>
 800739a:	6863      	ldr	r3, [r4, #4]
 800739c:	1ac0      	subs	r0, r0, r3
 800739e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073a0:	b10b      	cbz	r3, 80073a6 <__sflush_r+0x46>
 80073a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073a4:	1ac0      	subs	r0, r0, r3
 80073a6:	2300      	movs	r3, #0
 80073a8:	4602      	mov	r2, r0
 80073aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073ac:	6a21      	ldr	r1, [r4, #32]
 80073ae:	4628      	mov	r0, r5
 80073b0:	47b0      	blx	r6
 80073b2:	1c43      	adds	r3, r0, #1
 80073b4:	89a3      	ldrh	r3, [r4, #12]
 80073b6:	d106      	bne.n	80073c6 <__sflush_r+0x66>
 80073b8:	6829      	ldr	r1, [r5, #0]
 80073ba:	291d      	cmp	r1, #29
 80073bc:	d82c      	bhi.n	8007418 <__sflush_r+0xb8>
 80073be:	4a2a      	ldr	r2, [pc, #168]	; (8007468 <__sflush_r+0x108>)
 80073c0:	40ca      	lsrs	r2, r1
 80073c2:	07d6      	lsls	r6, r2, #31
 80073c4:	d528      	bpl.n	8007418 <__sflush_r+0xb8>
 80073c6:	2200      	movs	r2, #0
 80073c8:	6062      	str	r2, [r4, #4]
 80073ca:	04d9      	lsls	r1, r3, #19
 80073cc:	6922      	ldr	r2, [r4, #16]
 80073ce:	6022      	str	r2, [r4, #0]
 80073d0:	d504      	bpl.n	80073dc <__sflush_r+0x7c>
 80073d2:	1c42      	adds	r2, r0, #1
 80073d4:	d101      	bne.n	80073da <__sflush_r+0x7a>
 80073d6:	682b      	ldr	r3, [r5, #0]
 80073d8:	b903      	cbnz	r3, 80073dc <__sflush_r+0x7c>
 80073da:	6560      	str	r0, [r4, #84]	; 0x54
 80073dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073de:	602f      	str	r7, [r5, #0]
 80073e0:	2900      	cmp	r1, #0
 80073e2:	d0ca      	beq.n	800737a <__sflush_r+0x1a>
 80073e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073e8:	4299      	cmp	r1, r3
 80073ea:	d002      	beq.n	80073f2 <__sflush_r+0x92>
 80073ec:	4628      	mov	r0, r5
 80073ee:	f7ff faa5 	bl	800693c <_free_r>
 80073f2:	2000      	movs	r0, #0
 80073f4:	6360      	str	r0, [r4, #52]	; 0x34
 80073f6:	e7c1      	b.n	800737c <__sflush_r+0x1c>
 80073f8:	6a21      	ldr	r1, [r4, #32]
 80073fa:	2301      	movs	r3, #1
 80073fc:	4628      	mov	r0, r5
 80073fe:	47b0      	blx	r6
 8007400:	1c41      	adds	r1, r0, #1
 8007402:	d1c7      	bne.n	8007394 <__sflush_r+0x34>
 8007404:	682b      	ldr	r3, [r5, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d0c4      	beq.n	8007394 <__sflush_r+0x34>
 800740a:	2b1d      	cmp	r3, #29
 800740c:	d001      	beq.n	8007412 <__sflush_r+0xb2>
 800740e:	2b16      	cmp	r3, #22
 8007410:	d101      	bne.n	8007416 <__sflush_r+0xb6>
 8007412:	602f      	str	r7, [r5, #0]
 8007414:	e7b1      	b.n	800737a <__sflush_r+0x1a>
 8007416:	89a3      	ldrh	r3, [r4, #12]
 8007418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800741c:	81a3      	strh	r3, [r4, #12]
 800741e:	e7ad      	b.n	800737c <__sflush_r+0x1c>
 8007420:	690f      	ldr	r7, [r1, #16]
 8007422:	2f00      	cmp	r7, #0
 8007424:	d0a9      	beq.n	800737a <__sflush_r+0x1a>
 8007426:	0793      	lsls	r3, r2, #30
 8007428:	680e      	ldr	r6, [r1, #0]
 800742a:	bf08      	it	eq
 800742c:	694b      	ldreq	r3, [r1, #20]
 800742e:	600f      	str	r7, [r1, #0]
 8007430:	bf18      	it	ne
 8007432:	2300      	movne	r3, #0
 8007434:	eba6 0807 	sub.w	r8, r6, r7
 8007438:	608b      	str	r3, [r1, #8]
 800743a:	f1b8 0f00 	cmp.w	r8, #0
 800743e:	dd9c      	ble.n	800737a <__sflush_r+0x1a>
 8007440:	6a21      	ldr	r1, [r4, #32]
 8007442:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007444:	4643      	mov	r3, r8
 8007446:	463a      	mov	r2, r7
 8007448:	4628      	mov	r0, r5
 800744a:	47b0      	blx	r6
 800744c:	2800      	cmp	r0, #0
 800744e:	dc06      	bgt.n	800745e <__sflush_r+0xfe>
 8007450:	89a3      	ldrh	r3, [r4, #12]
 8007452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007456:	81a3      	strh	r3, [r4, #12]
 8007458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800745c:	e78e      	b.n	800737c <__sflush_r+0x1c>
 800745e:	4407      	add	r7, r0
 8007460:	eba8 0800 	sub.w	r8, r8, r0
 8007464:	e7e9      	b.n	800743a <__sflush_r+0xda>
 8007466:	bf00      	nop
 8007468:	20400001 	.word	0x20400001

0800746c <_fflush_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	690b      	ldr	r3, [r1, #16]
 8007470:	4605      	mov	r5, r0
 8007472:	460c      	mov	r4, r1
 8007474:	b913      	cbnz	r3, 800747c <_fflush_r+0x10>
 8007476:	2500      	movs	r5, #0
 8007478:	4628      	mov	r0, r5
 800747a:	bd38      	pop	{r3, r4, r5, pc}
 800747c:	b118      	cbz	r0, 8007486 <_fflush_r+0x1a>
 800747e:	6983      	ldr	r3, [r0, #24]
 8007480:	b90b      	cbnz	r3, 8007486 <_fflush_r+0x1a>
 8007482:	f000 f887 	bl	8007594 <__sinit>
 8007486:	4b14      	ldr	r3, [pc, #80]	; (80074d8 <_fflush_r+0x6c>)
 8007488:	429c      	cmp	r4, r3
 800748a:	d11b      	bne.n	80074c4 <_fflush_r+0x58>
 800748c:	686c      	ldr	r4, [r5, #4]
 800748e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d0ef      	beq.n	8007476 <_fflush_r+0xa>
 8007496:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007498:	07d0      	lsls	r0, r2, #31
 800749a:	d404      	bmi.n	80074a6 <_fflush_r+0x3a>
 800749c:	0599      	lsls	r1, r3, #22
 800749e:	d402      	bmi.n	80074a6 <_fflush_r+0x3a>
 80074a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074a2:	f000 f915 	bl	80076d0 <__retarget_lock_acquire_recursive>
 80074a6:	4628      	mov	r0, r5
 80074a8:	4621      	mov	r1, r4
 80074aa:	f7ff ff59 	bl	8007360 <__sflush_r>
 80074ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074b0:	07da      	lsls	r2, r3, #31
 80074b2:	4605      	mov	r5, r0
 80074b4:	d4e0      	bmi.n	8007478 <_fflush_r+0xc>
 80074b6:	89a3      	ldrh	r3, [r4, #12]
 80074b8:	059b      	lsls	r3, r3, #22
 80074ba:	d4dd      	bmi.n	8007478 <_fflush_r+0xc>
 80074bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074be:	f000 f908 	bl	80076d2 <__retarget_lock_release_recursive>
 80074c2:	e7d9      	b.n	8007478 <_fflush_r+0xc>
 80074c4:	4b05      	ldr	r3, [pc, #20]	; (80074dc <_fflush_r+0x70>)
 80074c6:	429c      	cmp	r4, r3
 80074c8:	d101      	bne.n	80074ce <_fflush_r+0x62>
 80074ca:	68ac      	ldr	r4, [r5, #8]
 80074cc:	e7df      	b.n	800748e <_fflush_r+0x22>
 80074ce:	4b04      	ldr	r3, [pc, #16]	; (80074e0 <_fflush_r+0x74>)
 80074d0:	429c      	cmp	r4, r3
 80074d2:	bf08      	it	eq
 80074d4:	68ec      	ldreq	r4, [r5, #12]
 80074d6:	e7da      	b.n	800748e <_fflush_r+0x22>
 80074d8:	08007dc4 	.word	0x08007dc4
 80074dc:	08007de4 	.word	0x08007de4
 80074e0:	08007da4 	.word	0x08007da4

080074e4 <std>:
 80074e4:	2300      	movs	r3, #0
 80074e6:	b510      	push	{r4, lr}
 80074e8:	4604      	mov	r4, r0
 80074ea:	e9c0 3300 	strd	r3, r3, [r0]
 80074ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074f2:	6083      	str	r3, [r0, #8]
 80074f4:	8181      	strh	r1, [r0, #12]
 80074f6:	6643      	str	r3, [r0, #100]	; 0x64
 80074f8:	81c2      	strh	r2, [r0, #14]
 80074fa:	6183      	str	r3, [r0, #24]
 80074fc:	4619      	mov	r1, r3
 80074fe:	2208      	movs	r2, #8
 8007500:	305c      	adds	r0, #92	; 0x5c
 8007502:	f7fd fb59 	bl	8004bb8 <memset>
 8007506:	4b05      	ldr	r3, [pc, #20]	; (800751c <std+0x38>)
 8007508:	6263      	str	r3, [r4, #36]	; 0x24
 800750a:	4b05      	ldr	r3, [pc, #20]	; (8007520 <std+0x3c>)
 800750c:	62a3      	str	r3, [r4, #40]	; 0x28
 800750e:	4b05      	ldr	r3, [pc, #20]	; (8007524 <std+0x40>)
 8007510:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007512:	4b05      	ldr	r3, [pc, #20]	; (8007528 <std+0x44>)
 8007514:	6224      	str	r4, [r4, #32]
 8007516:	6323      	str	r3, [r4, #48]	; 0x30
 8007518:	bd10      	pop	{r4, pc}
 800751a:	bf00      	nop
 800751c:	08007839 	.word	0x08007839
 8007520:	0800785b 	.word	0x0800785b
 8007524:	08007893 	.word	0x08007893
 8007528:	080078b7 	.word	0x080078b7

0800752c <_cleanup_r>:
 800752c:	4901      	ldr	r1, [pc, #4]	; (8007534 <_cleanup_r+0x8>)
 800752e:	f000 b8af 	b.w	8007690 <_fwalk_reent>
 8007532:	bf00      	nop
 8007534:	0800746d 	.word	0x0800746d

08007538 <__sfmoreglue>:
 8007538:	b570      	push	{r4, r5, r6, lr}
 800753a:	2268      	movs	r2, #104	; 0x68
 800753c:	1e4d      	subs	r5, r1, #1
 800753e:	4355      	muls	r5, r2
 8007540:	460e      	mov	r6, r1
 8007542:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007546:	f7ff fa65 	bl	8006a14 <_malloc_r>
 800754a:	4604      	mov	r4, r0
 800754c:	b140      	cbz	r0, 8007560 <__sfmoreglue+0x28>
 800754e:	2100      	movs	r1, #0
 8007550:	e9c0 1600 	strd	r1, r6, [r0]
 8007554:	300c      	adds	r0, #12
 8007556:	60a0      	str	r0, [r4, #8]
 8007558:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800755c:	f7fd fb2c 	bl	8004bb8 <memset>
 8007560:	4620      	mov	r0, r4
 8007562:	bd70      	pop	{r4, r5, r6, pc}

08007564 <__sfp_lock_acquire>:
 8007564:	4801      	ldr	r0, [pc, #4]	; (800756c <__sfp_lock_acquire+0x8>)
 8007566:	f000 b8b3 	b.w	80076d0 <__retarget_lock_acquire_recursive>
 800756a:	bf00      	nop
 800756c:	20000379 	.word	0x20000379

08007570 <__sfp_lock_release>:
 8007570:	4801      	ldr	r0, [pc, #4]	; (8007578 <__sfp_lock_release+0x8>)
 8007572:	f000 b8ae 	b.w	80076d2 <__retarget_lock_release_recursive>
 8007576:	bf00      	nop
 8007578:	20000379 	.word	0x20000379

0800757c <__sinit_lock_acquire>:
 800757c:	4801      	ldr	r0, [pc, #4]	; (8007584 <__sinit_lock_acquire+0x8>)
 800757e:	f000 b8a7 	b.w	80076d0 <__retarget_lock_acquire_recursive>
 8007582:	bf00      	nop
 8007584:	2000037a 	.word	0x2000037a

08007588 <__sinit_lock_release>:
 8007588:	4801      	ldr	r0, [pc, #4]	; (8007590 <__sinit_lock_release+0x8>)
 800758a:	f000 b8a2 	b.w	80076d2 <__retarget_lock_release_recursive>
 800758e:	bf00      	nop
 8007590:	2000037a 	.word	0x2000037a

08007594 <__sinit>:
 8007594:	b510      	push	{r4, lr}
 8007596:	4604      	mov	r4, r0
 8007598:	f7ff fff0 	bl	800757c <__sinit_lock_acquire>
 800759c:	69a3      	ldr	r3, [r4, #24]
 800759e:	b11b      	cbz	r3, 80075a8 <__sinit+0x14>
 80075a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075a4:	f7ff bff0 	b.w	8007588 <__sinit_lock_release>
 80075a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80075ac:	6523      	str	r3, [r4, #80]	; 0x50
 80075ae:	4b13      	ldr	r3, [pc, #76]	; (80075fc <__sinit+0x68>)
 80075b0:	4a13      	ldr	r2, [pc, #76]	; (8007600 <__sinit+0x6c>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80075b6:	42a3      	cmp	r3, r4
 80075b8:	bf04      	itt	eq
 80075ba:	2301      	moveq	r3, #1
 80075bc:	61a3      	streq	r3, [r4, #24]
 80075be:	4620      	mov	r0, r4
 80075c0:	f000 f820 	bl	8007604 <__sfp>
 80075c4:	6060      	str	r0, [r4, #4]
 80075c6:	4620      	mov	r0, r4
 80075c8:	f000 f81c 	bl	8007604 <__sfp>
 80075cc:	60a0      	str	r0, [r4, #8]
 80075ce:	4620      	mov	r0, r4
 80075d0:	f000 f818 	bl	8007604 <__sfp>
 80075d4:	2200      	movs	r2, #0
 80075d6:	60e0      	str	r0, [r4, #12]
 80075d8:	2104      	movs	r1, #4
 80075da:	6860      	ldr	r0, [r4, #4]
 80075dc:	f7ff ff82 	bl	80074e4 <std>
 80075e0:	68a0      	ldr	r0, [r4, #8]
 80075e2:	2201      	movs	r2, #1
 80075e4:	2109      	movs	r1, #9
 80075e6:	f7ff ff7d 	bl	80074e4 <std>
 80075ea:	68e0      	ldr	r0, [r4, #12]
 80075ec:	2202      	movs	r2, #2
 80075ee:	2112      	movs	r1, #18
 80075f0:	f7ff ff78 	bl	80074e4 <std>
 80075f4:	2301      	movs	r3, #1
 80075f6:	61a3      	str	r3, [r4, #24]
 80075f8:	e7d2      	b.n	80075a0 <__sinit+0xc>
 80075fa:	bf00      	nop
 80075fc:	08007a28 	.word	0x08007a28
 8007600:	0800752d 	.word	0x0800752d

08007604 <__sfp>:
 8007604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007606:	4607      	mov	r7, r0
 8007608:	f7ff ffac 	bl	8007564 <__sfp_lock_acquire>
 800760c:	4b1e      	ldr	r3, [pc, #120]	; (8007688 <__sfp+0x84>)
 800760e:	681e      	ldr	r6, [r3, #0]
 8007610:	69b3      	ldr	r3, [r6, #24]
 8007612:	b913      	cbnz	r3, 800761a <__sfp+0x16>
 8007614:	4630      	mov	r0, r6
 8007616:	f7ff ffbd 	bl	8007594 <__sinit>
 800761a:	3648      	adds	r6, #72	; 0x48
 800761c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007620:	3b01      	subs	r3, #1
 8007622:	d503      	bpl.n	800762c <__sfp+0x28>
 8007624:	6833      	ldr	r3, [r6, #0]
 8007626:	b30b      	cbz	r3, 800766c <__sfp+0x68>
 8007628:	6836      	ldr	r6, [r6, #0]
 800762a:	e7f7      	b.n	800761c <__sfp+0x18>
 800762c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007630:	b9d5      	cbnz	r5, 8007668 <__sfp+0x64>
 8007632:	4b16      	ldr	r3, [pc, #88]	; (800768c <__sfp+0x88>)
 8007634:	60e3      	str	r3, [r4, #12]
 8007636:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800763a:	6665      	str	r5, [r4, #100]	; 0x64
 800763c:	f000 f847 	bl	80076ce <__retarget_lock_init_recursive>
 8007640:	f7ff ff96 	bl	8007570 <__sfp_lock_release>
 8007644:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007648:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800764c:	6025      	str	r5, [r4, #0]
 800764e:	61a5      	str	r5, [r4, #24]
 8007650:	2208      	movs	r2, #8
 8007652:	4629      	mov	r1, r5
 8007654:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007658:	f7fd faae 	bl	8004bb8 <memset>
 800765c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007660:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007664:	4620      	mov	r0, r4
 8007666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007668:	3468      	adds	r4, #104	; 0x68
 800766a:	e7d9      	b.n	8007620 <__sfp+0x1c>
 800766c:	2104      	movs	r1, #4
 800766e:	4638      	mov	r0, r7
 8007670:	f7ff ff62 	bl	8007538 <__sfmoreglue>
 8007674:	4604      	mov	r4, r0
 8007676:	6030      	str	r0, [r6, #0]
 8007678:	2800      	cmp	r0, #0
 800767a:	d1d5      	bne.n	8007628 <__sfp+0x24>
 800767c:	f7ff ff78 	bl	8007570 <__sfp_lock_release>
 8007680:	230c      	movs	r3, #12
 8007682:	603b      	str	r3, [r7, #0]
 8007684:	e7ee      	b.n	8007664 <__sfp+0x60>
 8007686:	bf00      	nop
 8007688:	08007a28 	.word	0x08007a28
 800768c:	ffff0001 	.word	0xffff0001

08007690 <_fwalk_reent>:
 8007690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007694:	4606      	mov	r6, r0
 8007696:	4688      	mov	r8, r1
 8007698:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800769c:	2700      	movs	r7, #0
 800769e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076a2:	f1b9 0901 	subs.w	r9, r9, #1
 80076a6:	d505      	bpl.n	80076b4 <_fwalk_reent+0x24>
 80076a8:	6824      	ldr	r4, [r4, #0]
 80076aa:	2c00      	cmp	r4, #0
 80076ac:	d1f7      	bne.n	800769e <_fwalk_reent+0xe>
 80076ae:	4638      	mov	r0, r7
 80076b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076b4:	89ab      	ldrh	r3, [r5, #12]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d907      	bls.n	80076ca <_fwalk_reent+0x3a>
 80076ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076be:	3301      	adds	r3, #1
 80076c0:	d003      	beq.n	80076ca <_fwalk_reent+0x3a>
 80076c2:	4629      	mov	r1, r5
 80076c4:	4630      	mov	r0, r6
 80076c6:	47c0      	blx	r8
 80076c8:	4307      	orrs	r7, r0
 80076ca:	3568      	adds	r5, #104	; 0x68
 80076cc:	e7e9      	b.n	80076a2 <_fwalk_reent+0x12>

080076ce <__retarget_lock_init_recursive>:
 80076ce:	4770      	bx	lr

080076d0 <__retarget_lock_acquire_recursive>:
 80076d0:	4770      	bx	lr

080076d2 <__retarget_lock_release_recursive>:
 80076d2:	4770      	bx	lr

080076d4 <__swhatbuf_r>:
 80076d4:	b570      	push	{r4, r5, r6, lr}
 80076d6:	460e      	mov	r6, r1
 80076d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076dc:	2900      	cmp	r1, #0
 80076de:	b096      	sub	sp, #88	; 0x58
 80076e0:	4614      	mov	r4, r2
 80076e2:	461d      	mov	r5, r3
 80076e4:	da08      	bge.n	80076f8 <__swhatbuf_r+0x24>
 80076e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	602a      	str	r2, [r5, #0]
 80076ee:	061a      	lsls	r2, r3, #24
 80076f0:	d410      	bmi.n	8007714 <__swhatbuf_r+0x40>
 80076f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076f6:	e00e      	b.n	8007716 <__swhatbuf_r+0x42>
 80076f8:	466a      	mov	r2, sp
 80076fa:	f000 f903 	bl	8007904 <_fstat_r>
 80076fe:	2800      	cmp	r0, #0
 8007700:	dbf1      	blt.n	80076e6 <__swhatbuf_r+0x12>
 8007702:	9a01      	ldr	r2, [sp, #4]
 8007704:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007708:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800770c:	425a      	negs	r2, r3
 800770e:	415a      	adcs	r2, r3
 8007710:	602a      	str	r2, [r5, #0]
 8007712:	e7ee      	b.n	80076f2 <__swhatbuf_r+0x1e>
 8007714:	2340      	movs	r3, #64	; 0x40
 8007716:	2000      	movs	r0, #0
 8007718:	6023      	str	r3, [r4, #0]
 800771a:	b016      	add	sp, #88	; 0x58
 800771c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007720 <__smakebuf_r>:
 8007720:	898b      	ldrh	r3, [r1, #12]
 8007722:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007724:	079d      	lsls	r5, r3, #30
 8007726:	4606      	mov	r6, r0
 8007728:	460c      	mov	r4, r1
 800772a:	d507      	bpl.n	800773c <__smakebuf_r+0x1c>
 800772c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007730:	6023      	str	r3, [r4, #0]
 8007732:	6123      	str	r3, [r4, #16]
 8007734:	2301      	movs	r3, #1
 8007736:	6163      	str	r3, [r4, #20]
 8007738:	b002      	add	sp, #8
 800773a:	bd70      	pop	{r4, r5, r6, pc}
 800773c:	ab01      	add	r3, sp, #4
 800773e:	466a      	mov	r2, sp
 8007740:	f7ff ffc8 	bl	80076d4 <__swhatbuf_r>
 8007744:	9900      	ldr	r1, [sp, #0]
 8007746:	4605      	mov	r5, r0
 8007748:	4630      	mov	r0, r6
 800774a:	f7ff f963 	bl	8006a14 <_malloc_r>
 800774e:	b948      	cbnz	r0, 8007764 <__smakebuf_r+0x44>
 8007750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007754:	059a      	lsls	r2, r3, #22
 8007756:	d4ef      	bmi.n	8007738 <__smakebuf_r+0x18>
 8007758:	f023 0303 	bic.w	r3, r3, #3
 800775c:	f043 0302 	orr.w	r3, r3, #2
 8007760:	81a3      	strh	r3, [r4, #12]
 8007762:	e7e3      	b.n	800772c <__smakebuf_r+0xc>
 8007764:	4b0d      	ldr	r3, [pc, #52]	; (800779c <__smakebuf_r+0x7c>)
 8007766:	62b3      	str	r3, [r6, #40]	; 0x28
 8007768:	89a3      	ldrh	r3, [r4, #12]
 800776a:	6020      	str	r0, [r4, #0]
 800776c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007770:	81a3      	strh	r3, [r4, #12]
 8007772:	9b00      	ldr	r3, [sp, #0]
 8007774:	6163      	str	r3, [r4, #20]
 8007776:	9b01      	ldr	r3, [sp, #4]
 8007778:	6120      	str	r0, [r4, #16]
 800777a:	b15b      	cbz	r3, 8007794 <__smakebuf_r+0x74>
 800777c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007780:	4630      	mov	r0, r6
 8007782:	f000 f8d1 	bl	8007928 <_isatty_r>
 8007786:	b128      	cbz	r0, 8007794 <__smakebuf_r+0x74>
 8007788:	89a3      	ldrh	r3, [r4, #12]
 800778a:	f023 0303 	bic.w	r3, r3, #3
 800778e:	f043 0301 	orr.w	r3, r3, #1
 8007792:	81a3      	strh	r3, [r4, #12]
 8007794:	89a0      	ldrh	r0, [r4, #12]
 8007796:	4305      	orrs	r5, r0
 8007798:	81a5      	strh	r5, [r4, #12]
 800779a:	e7cd      	b.n	8007738 <__smakebuf_r+0x18>
 800779c:	0800752d 	.word	0x0800752d

080077a0 <_malloc_usable_size_r>:
 80077a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077a4:	1f18      	subs	r0, r3, #4
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	bfbc      	itt	lt
 80077aa:	580b      	ldrlt	r3, [r1, r0]
 80077ac:	18c0      	addlt	r0, r0, r3
 80077ae:	4770      	bx	lr

080077b0 <_raise_r>:
 80077b0:	291f      	cmp	r1, #31
 80077b2:	b538      	push	{r3, r4, r5, lr}
 80077b4:	4604      	mov	r4, r0
 80077b6:	460d      	mov	r5, r1
 80077b8:	d904      	bls.n	80077c4 <_raise_r+0x14>
 80077ba:	2316      	movs	r3, #22
 80077bc:	6003      	str	r3, [r0, #0]
 80077be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077c2:	bd38      	pop	{r3, r4, r5, pc}
 80077c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80077c6:	b112      	cbz	r2, 80077ce <_raise_r+0x1e>
 80077c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80077cc:	b94b      	cbnz	r3, 80077e2 <_raise_r+0x32>
 80077ce:	4620      	mov	r0, r4
 80077d0:	f000 f830 	bl	8007834 <_getpid_r>
 80077d4:	462a      	mov	r2, r5
 80077d6:	4601      	mov	r1, r0
 80077d8:	4620      	mov	r0, r4
 80077da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077de:	f000 b817 	b.w	8007810 <_kill_r>
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d00a      	beq.n	80077fc <_raise_r+0x4c>
 80077e6:	1c59      	adds	r1, r3, #1
 80077e8:	d103      	bne.n	80077f2 <_raise_r+0x42>
 80077ea:	2316      	movs	r3, #22
 80077ec:	6003      	str	r3, [r0, #0]
 80077ee:	2001      	movs	r0, #1
 80077f0:	e7e7      	b.n	80077c2 <_raise_r+0x12>
 80077f2:	2400      	movs	r4, #0
 80077f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80077f8:	4628      	mov	r0, r5
 80077fa:	4798      	blx	r3
 80077fc:	2000      	movs	r0, #0
 80077fe:	e7e0      	b.n	80077c2 <_raise_r+0x12>

08007800 <raise>:
 8007800:	4b02      	ldr	r3, [pc, #8]	; (800780c <raise+0xc>)
 8007802:	4601      	mov	r1, r0
 8007804:	6818      	ldr	r0, [r3, #0]
 8007806:	f7ff bfd3 	b.w	80077b0 <_raise_r>
 800780a:	bf00      	nop
 800780c:	20000014 	.word	0x20000014

08007810 <_kill_r>:
 8007810:	b538      	push	{r3, r4, r5, lr}
 8007812:	4d07      	ldr	r5, [pc, #28]	; (8007830 <_kill_r+0x20>)
 8007814:	2300      	movs	r3, #0
 8007816:	4604      	mov	r4, r0
 8007818:	4608      	mov	r0, r1
 800781a:	4611      	mov	r1, r2
 800781c:	602b      	str	r3, [r5, #0]
 800781e:	f7f9 fe71 	bl	8001504 <_kill>
 8007822:	1c43      	adds	r3, r0, #1
 8007824:	d102      	bne.n	800782c <_kill_r+0x1c>
 8007826:	682b      	ldr	r3, [r5, #0]
 8007828:	b103      	cbz	r3, 800782c <_kill_r+0x1c>
 800782a:	6023      	str	r3, [r4, #0]
 800782c:	bd38      	pop	{r3, r4, r5, pc}
 800782e:	bf00      	nop
 8007830:	20000374 	.word	0x20000374

08007834 <_getpid_r>:
 8007834:	f7f9 be5e 	b.w	80014f4 <_getpid>

08007838 <__sread>:
 8007838:	b510      	push	{r4, lr}
 800783a:	460c      	mov	r4, r1
 800783c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007840:	f000 f894 	bl	800796c <_read_r>
 8007844:	2800      	cmp	r0, #0
 8007846:	bfab      	itete	ge
 8007848:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800784a:	89a3      	ldrhlt	r3, [r4, #12]
 800784c:	181b      	addge	r3, r3, r0
 800784e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007852:	bfac      	ite	ge
 8007854:	6563      	strge	r3, [r4, #84]	; 0x54
 8007856:	81a3      	strhlt	r3, [r4, #12]
 8007858:	bd10      	pop	{r4, pc}

0800785a <__swrite>:
 800785a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800785e:	461f      	mov	r7, r3
 8007860:	898b      	ldrh	r3, [r1, #12]
 8007862:	05db      	lsls	r3, r3, #23
 8007864:	4605      	mov	r5, r0
 8007866:	460c      	mov	r4, r1
 8007868:	4616      	mov	r6, r2
 800786a:	d505      	bpl.n	8007878 <__swrite+0x1e>
 800786c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007870:	2302      	movs	r3, #2
 8007872:	2200      	movs	r2, #0
 8007874:	f000 f868 	bl	8007948 <_lseek_r>
 8007878:	89a3      	ldrh	r3, [r4, #12]
 800787a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800787e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007882:	81a3      	strh	r3, [r4, #12]
 8007884:	4632      	mov	r2, r6
 8007886:	463b      	mov	r3, r7
 8007888:	4628      	mov	r0, r5
 800788a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800788e:	f000 b817 	b.w	80078c0 <_write_r>

08007892 <__sseek>:
 8007892:	b510      	push	{r4, lr}
 8007894:	460c      	mov	r4, r1
 8007896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800789a:	f000 f855 	bl	8007948 <_lseek_r>
 800789e:	1c43      	adds	r3, r0, #1
 80078a0:	89a3      	ldrh	r3, [r4, #12]
 80078a2:	bf15      	itete	ne
 80078a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80078a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078ae:	81a3      	strheq	r3, [r4, #12]
 80078b0:	bf18      	it	ne
 80078b2:	81a3      	strhne	r3, [r4, #12]
 80078b4:	bd10      	pop	{r4, pc}

080078b6 <__sclose>:
 80078b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ba:	f000 b813 	b.w	80078e4 <_close_r>
	...

080078c0 <_write_r>:
 80078c0:	b538      	push	{r3, r4, r5, lr}
 80078c2:	4d07      	ldr	r5, [pc, #28]	; (80078e0 <_write_r+0x20>)
 80078c4:	4604      	mov	r4, r0
 80078c6:	4608      	mov	r0, r1
 80078c8:	4611      	mov	r1, r2
 80078ca:	2200      	movs	r2, #0
 80078cc:	602a      	str	r2, [r5, #0]
 80078ce:	461a      	mov	r2, r3
 80078d0:	f7f9 fe4f 	bl	8001572 <_write>
 80078d4:	1c43      	adds	r3, r0, #1
 80078d6:	d102      	bne.n	80078de <_write_r+0x1e>
 80078d8:	682b      	ldr	r3, [r5, #0]
 80078da:	b103      	cbz	r3, 80078de <_write_r+0x1e>
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	bd38      	pop	{r3, r4, r5, pc}
 80078e0:	20000374 	.word	0x20000374

080078e4 <_close_r>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	4d06      	ldr	r5, [pc, #24]	; (8007900 <_close_r+0x1c>)
 80078e8:	2300      	movs	r3, #0
 80078ea:	4604      	mov	r4, r0
 80078ec:	4608      	mov	r0, r1
 80078ee:	602b      	str	r3, [r5, #0]
 80078f0:	f7f9 fe5b 	bl	80015aa <_close>
 80078f4:	1c43      	adds	r3, r0, #1
 80078f6:	d102      	bne.n	80078fe <_close_r+0x1a>
 80078f8:	682b      	ldr	r3, [r5, #0]
 80078fa:	b103      	cbz	r3, 80078fe <_close_r+0x1a>
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	bd38      	pop	{r3, r4, r5, pc}
 8007900:	20000374 	.word	0x20000374

08007904 <_fstat_r>:
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	4d07      	ldr	r5, [pc, #28]	; (8007924 <_fstat_r+0x20>)
 8007908:	2300      	movs	r3, #0
 800790a:	4604      	mov	r4, r0
 800790c:	4608      	mov	r0, r1
 800790e:	4611      	mov	r1, r2
 8007910:	602b      	str	r3, [r5, #0]
 8007912:	f7f9 fe56 	bl	80015c2 <_fstat>
 8007916:	1c43      	adds	r3, r0, #1
 8007918:	d102      	bne.n	8007920 <_fstat_r+0x1c>
 800791a:	682b      	ldr	r3, [r5, #0]
 800791c:	b103      	cbz	r3, 8007920 <_fstat_r+0x1c>
 800791e:	6023      	str	r3, [r4, #0]
 8007920:	bd38      	pop	{r3, r4, r5, pc}
 8007922:	bf00      	nop
 8007924:	20000374 	.word	0x20000374

08007928 <_isatty_r>:
 8007928:	b538      	push	{r3, r4, r5, lr}
 800792a:	4d06      	ldr	r5, [pc, #24]	; (8007944 <_isatty_r+0x1c>)
 800792c:	2300      	movs	r3, #0
 800792e:	4604      	mov	r4, r0
 8007930:	4608      	mov	r0, r1
 8007932:	602b      	str	r3, [r5, #0]
 8007934:	f7f9 fe55 	bl	80015e2 <_isatty>
 8007938:	1c43      	adds	r3, r0, #1
 800793a:	d102      	bne.n	8007942 <_isatty_r+0x1a>
 800793c:	682b      	ldr	r3, [r5, #0]
 800793e:	b103      	cbz	r3, 8007942 <_isatty_r+0x1a>
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	bd38      	pop	{r3, r4, r5, pc}
 8007944:	20000374 	.word	0x20000374

08007948 <_lseek_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	4d07      	ldr	r5, [pc, #28]	; (8007968 <_lseek_r+0x20>)
 800794c:	4604      	mov	r4, r0
 800794e:	4608      	mov	r0, r1
 8007950:	4611      	mov	r1, r2
 8007952:	2200      	movs	r2, #0
 8007954:	602a      	str	r2, [r5, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	f7f9 fe4e 	bl	80015f8 <_lseek>
 800795c:	1c43      	adds	r3, r0, #1
 800795e:	d102      	bne.n	8007966 <_lseek_r+0x1e>
 8007960:	682b      	ldr	r3, [r5, #0]
 8007962:	b103      	cbz	r3, 8007966 <_lseek_r+0x1e>
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	bd38      	pop	{r3, r4, r5, pc}
 8007968:	20000374 	.word	0x20000374

0800796c <_read_r>:
 800796c:	b538      	push	{r3, r4, r5, lr}
 800796e:	4d07      	ldr	r5, [pc, #28]	; (800798c <_read_r+0x20>)
 8007970:	4604      	mov	r4, r0
 8007972:	4608      	mov	r0, r1
 8007974:	4611      	mov	r1, r2
 8007976:	2200      	movs	r2, #0
 8007978:	602a      	str	r2, [r5, #0]
 800797a:	461a      	mov	r2, r3
 800797c:	f7f9 fddc 	bl	8001538 <_read>
 8007980:	1c43      	adds	r3, r0, #1
 8007982:	d102      	bne.n	800798a <_read_r+0x1e>
 8007984:	682b      	ldr	r3, [r5, #0]
 8007986:	b103      	cbz	r3, 800798a <_read_r+0x1e>
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	bd38      	pop	{r3, r4, r5, pc}
 800798c:	20000374 	.word	0x20000374

08007990 <_init>:
 8007990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007992:	bf00      	nop
 8007994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007996:	bc08      	pop	{r3}
 8007998:	469e      	mov	lr, r3
 800799a:	4770      	bx	lr

0800799c <_fini>:
 800799c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799e:	bf00      	nop
 80079a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079a2:	bc08      	pop	{r3}
 80079a4:	469e      	mov	lr, r3
 80079a6:	4770      	bx	lr
