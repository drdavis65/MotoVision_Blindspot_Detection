
MotoVision_Senior_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007840  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  080079d0  080079d0  000179d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e54  08007e54  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007e54  08007e54  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e54  08007e54  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e54  08007e54  00017e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e58  08007e58  00017e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00000118  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002fc  200002fc  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d2b1  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c1d  00000000  00000000  0002d4c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a68  00000000  00000000  0002f0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009b0  00000000  00000000  0002fb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b6d1  00000000  00000000  00030500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000deaf  00000000  00000000  0004bbd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d509  00000000  00000000  00059a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f6f89  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bec  00000000  00000000  000f6fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079b8 	.word	0x080079b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	080079b8 	.word	0x080079b8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <CheckDevice>:
uint8_t distance_low;
uint8_t distance_high;
uint16_t distanceL = 0;
uint16_t distanceR = 0;

HAL_StatusTypeDef CheckDevice(uint8_t lidarAddr){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b0a4      	sub	sp, #144	; 0x90
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
	char msg[128];

	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, lidarAddr << 1, 10, HAL_MAX_DELAY);
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	b299      	uxth	r1, r3
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bbe:	220a      	movs	r2, #10
 8000bc0:	481c      	ldr	r0, [pc, #112]	; (8000c34 <CheckDevice+0x8c>)
 8000bc2:	f001 fb93 	bl	80022ec <HAL_I2C_IsDeviceReady>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if(ret == HAL_OK)
 8000bcc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d114      	bne.n	8000bfe <CheckDevice+0x56>
	{
	  sprintf(msg, "Device is ready.\r\n");
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	4917      	ldr	r1, [pc, #92]	; (8000c38 <CheckDevice+0x90>)
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f004 fc74 	bl	80054c8 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff faf3 	bl	80001d0 <strlen>
 8000bea:	4603      	mov	r3, r0
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	f107 010c 	add.w	r1, r7, #12
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bf6:	4811      	ldr	r0, [pc, #68]	; (8000c3c <CheckDevice+0x94>)
 8000bf8:	f003 fbf4 	bl	80043e4 <HAL_UART_Transmit>
 8000bfc:	e013      	b.n	8000c26 <CheckDevice+0x7e>
	}
	else
	{
	  sprintf(msg, "Device is not connected.\r\n");
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	490f      	ldr	r1, [pc, #60]	; (8000c40 <CheckDevice+0x98>)
 8000c04:	4618      	mov	r0, r3
 8000c06:	f004 fc5f 	bl	80054c8 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fade 	bl	80001d0 <strlen>
 8000c14:	4603      	mov	r3, r0
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	f107 010c 	add.w	r1, r7, #12
 8000c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c20:	4806      	ldr	r0, [pc, #24]	; (8000c3c <CheckDevice+0x94>)
 8000c22:	f003 fbdf 	bl	80043e4 <HAL_UART_Transmit>
	}
	return ret;
 8000c26:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3790      	adds	r7, #144	; 0x90
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000200 	.word	0x20000200
 8000c38:	080079d0 	.word	0x080079d0
 8000c3c:	20000254 	.word	0x20000254
 8000c40:	080079e4 	.word	0x080079e4

08000c44 <configureLidarAddress>:

void configureLidarAddress(uint8_t lidarliteAddress, uint8_t newAddress, uint8_t disableDefault)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b088      	sub	sp, #32
 8000c48:	af04      	add	r7, sp, #16
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	71bb      	strb	r3, [r7, #6]
 8000c52:	4613      	mov	r3, r2
 8000c54:	717b      	strb	r3, [r7, #5]
	uint8_t dataBytes[5];
    // Enable flash storage
    dataBytes[0] = 0x11;
 8000c56:	2311      	movs	r3, #17
 8000c58:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Mem_Write(&hi2c1, lidarliteAddress << 1, 0xEA, 1, dataBytes, 1, HAL_MAX_DELAY);
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	b299      	uxth	r1, r3
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c66:	9302      	str	r3, [sp, #8]
 8000c68:	2301      	movs	r3, #1
 8000c6a:	9301      	str	r3, [sp, #4]
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	2301      	movs	r3, #1
 8000c74:	22ea      	movs	r2, #234	; 0xea
 8000c76:	4832      	ldr	r0, [pc, #200]	; (8000d40 <configureLidarAddress+0xfc>)
 8000c78:	f001 f90a 	bl	8001e90 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8000c7c:	2064      	movs	r0, #100	; 0x64
 8000c7e:	f000 fdb7 	bl	80017f0 <HAL_Delay>

    // Read 4-byte device serial number
    HAL_I2C_Mem_Read(&hi2c1, lidarliteAddress << 1, 0x16, 1, dataBytes, 4, HAL_MAX_DELAY);
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	b299      	uxth	r1, r3
 8000c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c8e:	9302      	str	r3, [sp, #8]
 8000c90:	2304      	movs	r3, #4
 8000c92:	9301      	str	r3, [sp, #4]
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	2216      	movs	r2, #22
 8000c9e:	4828      	ldr	r0, [pc, #160]	; (8000d40 <configureLidarAddress+0xfc>)
 8000ca0:	f001 fa0a 	bl	80020b8 <HAL_I2C_Mem_Read>

    // Append the desired I2C address to the end of the serial number byte array
    dataBytes[4] = newAddress;
 8000ca4:	79bb      	ldrb	r3, [r7, #6]
 8000ca6:	733b      	strb	r3, [r7, #12]

    // Write the serial number and new address in one 5-byte transaction
    HAL_I2C_Mem_Write(&hi2c1, lidarliteAddress << 1, 0x16, 1, dataBytes, 5, HAL_MAX_DELAY);
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	b299      	uxth	r1, r3
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cb4:	9302      	str	r3, [sp, #8]
 8000cb6:	2305      	movs	r3, #5
 8000cb8:	9301      	str	r3, [sp, #4]
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	2216      	movs	r2, #22
 8000cc4:	481e      	ldr	r0, [pc, #120]	; (8000d40 <configureLidarAddress+0xfc>)
 8000cc6:	f001 f8e3 	bl	8001e90 <HAL_I2C_Mem_Write>

    // Wait for the I2C peripheral to be restarted with new device address
    HAL_Delay(100);
 8000cca:	2064      	movs	r0, #100	; 0x64
 8000ccc:	f000 fd90 	bl	80017f0 <HAL_Delay>

    // If desired, disable default I2C device address (using the new I2C device address)
    if (disableDefault)
 8000cd0:	797b      	ldrb	r3, [r7, #5]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d015      	beq.n	8000d02 <configureLidarAddress+0xbe>
    {
        dataBytes[0] = 0x01; // set bit to disable default address
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	723b      	strb	r3, [r7, #8]
        HAL_I2C_Mem_Write(&hi2c1, newAddress << 1, 0x1b, 1, dataBytes, 1, HAL_MAX_DELAY);
 8000cda:	79bb      	ldrb	r3, [r7, #6]
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	b299      	uxth	r1, r3
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ce6:	9302      	str	r3, [sp, #8]
 8000ce8:	2301      	movs	r3, #1
 8000cea:	9301      	str	r3, [sp, #4]
 8000cec:	f107 0308 	add.w	r3, r7, #8
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	221b      	movs	r2, #27
 8000cf6:	4812      	ldr	r0, [pc, #72]	; (8000d40 <configureLidarAddress+0xfc>)
 8000cf8:	f001 f8ca 	bl	8001e90 <HAL_I2C_Mem_Write>

        // Wait for the I2C peripheral to be restarted with new device address
        HAL_Delay(100);
 8000cfc:	2064      	movs	r0, #100	; 0x64
 8000cfe:	f000 fd77 	bl	80017f0 <HAL_Delay>
    }

    // Disable flash storage
    dataBytes[0] = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Mem_Write(&hi2c1, newAddress << 1, 0xEA, 1, dataBytes, 1, HAL_MAX_DELAY);
 8000d06:	79bb      	ldrb	r3, [r7, #6]
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	b299      	uxth	r1, r3
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d12:	9302      	str	r3, [sp, #8]
 8000d14:	2301      	movs	r3, #1
 8000d16:	9301      	str	r3, [sp, #4]
 8000d18:	f107 0308 	add.w	r3, r7, #8
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	2301      	movs	r3, #1
 8000d20:	22ea      	movs	r2, #234	; 0xea
 8000d22:	4807      	ldr	r0, [pc, #28]	; (8000d40 <configureLidarAddress+0xfc>)
 8000d24:	f001 f8b4 	bl	8001e90 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8000d28:	2064      	movs	r0, #100	; 0x64
 8000d2a:	f000 fd61 	bl	80017f0 <HAL_Delay>
    CheckDevice(newAddress);
 8000d2e:	79bb      	ldrb	r3, [r7, #6]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff39 	bl	8000ba8 <CheckDevice>
}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000200 	.word	0x20000200

08000d44 <GetDistance>:

uint16_t GetDistance(uint8_t lidarAddr){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af04      	add	r7, sp, #16
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
	uint32_t startTick = HAL_GetTick(); // Get current tick for timeout
 8000d4e:	f000 fd43 	bl	80017d8 <HAL_GetTick>
 8000d52:	60f8      	str	r0, [r7, #12]

	// 1. Write 0x04 to register 0x00.
	HAL_I2C_Mem_Write(&hi2c1, lidarAddr << 1, ACQ_COMMAND, 1, &TAKE_DIST, 1, HAL_MAX_DELAY);
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	b299      	uxth	r1, r3
 8000d5c:	4b30      	ldr	r3, [pc, #192]	; (8000e20 <GetDistance+0xdc>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d66:	9302      	str	r3, [sp, #8]
 8000d68:	2301      	movs	r3, #1
 8000d6a:	9301      	str	r3, [sp, #4]
 8000d6c:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <GetDistance+0xe0>)
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	2301      	movs	r3, #1
 8000d72:	482d      	ldr	r0, [pc, #180]	; (8000e28 <GetDistance+0xe4>)
 8000d74:	f001 f88c 	bl	8001e90 <HAL_I2C_Mem_Write>


	do { // 2. Read register 0x01.
	  HAL_I2C_Mem_Read(&hi2c1, lidarAddr << 1, STATUS_REG, 1, &status, 1, HAL_MAX_DELAY);
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	b299      	uxth	r1, r3
 8000d80:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <GetDistance+0xe8>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d8a:	9302      	str	r3, [sp, #8]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	9301      	str	r3, [sp, #4]
 8000d90:	4b27      	ldr	r3, [pc, #156]	; (8000e30 <GetDistance+0xec>)
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	2301      	movs	r3, #1
 8000d96:	4824      	ldr	r0, [pc, #144]	; (8000e28 <GetDistance+0xe4>)
 8000d98:	f001 f98e 	bl	80020b8 <HAL_I2C_Mem_Read>

	  if((HAL_GetTick() - startTick) > TIMEOUT_MS) {// Handle timeout
 8000d9c:	f000 fd1c 	bl	80017d8 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000daa:	d901      	bls.n	8000db0 <GetDistance+0x6c>
	  	    return 0;  // return invalid distance value
 8000dac:	2300      	movs	r3, #0
 8000dae:	e033      	b.n	8000e18 <GetDistance+0xd4>
	  }

	} while (status & 0x01); // 3. Repeat step 2 until bit 0 (LSB) goes low.
 8000db0:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <GetDistance+0xec>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1dd      	bne.n	8000d78 <GetDistance+0x34>


	// 4. Read two bytes from 0x10 (low byte 0x10 then high byte 0x11) to obtain the 16-bit measured distance in centimeters.
	HAL_I2C_Mem_Read(&hi2c1, lidarAddr << 1, DISTANCE_REG_LOW, 1, &distance_low, 1, HAL_MAX_DELAY);
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	b299      	uxth	r1, r3
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <GetDistance+0xf0>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dce:	9302      	str	r3, [sp, #8]
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	9301      	str	r3, [sp, #4]
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <GetDistance+0xf4>)
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	2301      	movs	r3, #1
 8000dda:	4813      	ldr	r0, [pc, #76]	; (8000e28 <GetDistance+0xe4>)
 8000ddc:	f001 f96c 	bl	80020b8 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, lidarAddr << 1, DISTANCE_REG_HIGH, 1, &distance_high, 1, HAL_MAX_DELAY);
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	b299      	uxth	r1, r3
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <GetDistance+0xf8>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000df2:	9302      	str	r3, [sp, #8]
 8000df4:	2301      	movs	r3, #1
 8000df6:	9301      	str	r3, [sp, #4]
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <GetDistance+0xfc>)
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	480a      	ldr	r0, [pc, #40]	; (8000e28 <GetDistance+0xe4>)
 8000e00:	f001 f95a 	bl	80020b8 <HAL_I2C_Mem_Read>

	return (((uint16_t)distance_high << 8) | distance_low);
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <GetDistance+0xfc>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	b21a      	sxth	r2, r3
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <GetDistance+0xf4>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b21b      	sxth	r3, r3
 8000e12:	4313      	orrs	r3, r2
 8000e14:	b21b      	sxth	r3, r3
 8000e16:	b29b      	uxth	r3, r3
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	200002dc 	.word	0x200002dc
 8000e24:	20000002 	.word	0x20000002
 8000e28:	20000200 	.word	0x20000200
 8000e2c:	20000005 	.word	0x20000005
 8000e30:	200002dd 	.word	0x200002dd
 8000e34:	20000003 	.word	0x20000003
 8000e38:	200002de 	.word	0x200002de
 8000e3c:	20000004 	.word	0x20000004
 8000e40:	200002df 	.word	0x200002df

08000e44 <L_RED_LED>:
#ifndef INC_RGB_LED_H_
#define INC_RGB_LED_H_

#include "stm32f3xx_hal_conf.h"

void L_RED_LED() {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, L_RED_Pin, GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e50:	f000 ff76 	bl	8001d40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, L_GREEN_Pin, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2108      	movs	r1, #8
 8000e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5c:	f000 ff70 	bl	8001d40 <HAL_GPIO_WritePin>
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <L_YELLOW_LED>:
void L_GREEN_LED() {
	HAL_GPIO_WritePin(GPIOA, L_RED_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOA, L_GREEN_Pin, GPIO_PIN_SET);
}
void L_YELLOW_LED() {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, L_RED_Pin, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2102      	movs	r1, #2
 8000e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e70:	f000 ff66 	bl	8001d40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, L_GREEN_Pin, GPIO_PIN_SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2108      	movs	r1, #8
 8000e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7c:	f000 ff60 	bl	8001d40 <HAL_GPIO_WritePin>
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <L_OFF_LED>:
void L_OFF_LED() {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, L_RED_Pin, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2102      	movs	r1, #2
 8000e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e90:	f000 ff56 	bl	8001d40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, L_GREEN_Pin, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2108      	movs	r1, #8
 8000e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9c:	f000 ff50 	bl	8001d40 <HAL_GPIO_WritePin>
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <R_RED_LED>:

void R_RED_LED() {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, R_RED_Pin, GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2120      	movs	r1, #32
 8000eac:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <R_RED_LED+0x20>)
 8000eae:	f000 ff47 	bl	8001d40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, R_GREEN_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebc:	f000 ff40 	bl	8001d40 <HAL_GPIO_WritePin>
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	48000400 	.word	0x48000400

08000ec8 <R_YELLOW_LED>:
void R_GREEN_LED() {
	HAL_GPIO_WritePin(GPIOB, R_RED_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOA, R_GREEN_Pin, GPIO_PIN_SET);
}
void R_YELLOW_LED() {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, R_RED_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2120      	movs	r1, #32
 8000ed0:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <R_YELLOW_LED+0x20>)
 8000ed2:	f000 ff35 	bl	8001d40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, R_GREEN_Pin, GPIO_PIN_SET);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee0:	f000 ff2e 	bl	8001d40 <HAL_GPIO_WritePin>
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	48000400 	.word	0x48000400

08000eec <R_OFF_LED>:
void R_OFF_LED() {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, R_RED_Pin, GPIO_PIN_RESET);	//red pin
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2120      	movs	r1, #32
 8000ef4:	4805      	ldr	r0, [pc, #20]	; (8000f0c <R_OFF_LED+0x20>)
 8000ef6:	f000 ff23 	bl	8001d40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, R_GREEN_Pin, GPIO_PIN_RESET); 	//green pin
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f04:	f000 ff1c 	bl	8001d40 <HAL_GPIO_WritePin>
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	48000400 	.word	0x48000400

08000f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0a2      	sub	sp, #136	; 0x88
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f16:	f000 fc05 	bl	8001724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1a:	f000 f8e9 	bl	80010f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1e:	f000 f9a7 	bl	8001270 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f22:	f000 f975 	bl	8001210 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f26:	f000 f935 	bl	8001194 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  char msg[128];
  configureLidarAddress(LIDAR_ADDR2, LIDAR_ADDR2, 1);
 8000f2a:	4b68      	ldr	r3, [pc, #416]	; (80010cc <main+0x1bc>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	4a67      	ldr	r2, [pc, #412]	; (80010cc <main+0x1bc>)
 8000f30:	7811      	ldrb	r1, [r2, #0]
 8000f32:	2201      	movs	r2, #1
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fe85 	bl	8000c44 <configureLidarAddress>

  while(CheckDevice(LIDAR_ADDR1) != HAL_OK) {
 8000f3a:	e010      	b.n	8000f5e <main+0x4e>
	  sprintf(msg, "device 1\r\n");
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	4964      	ldr	r1, [pc, #400]	; (80010d0 <main+0x1c0>)
 8000f40:	4618      	mov	r0, r3
 8000f42:	f004 fac1 	bl	80054c8 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff f941 	bl	80001d0 <strlen>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	1d39      	adds	r1, r7, #4
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f58:	485e      	ldr	r0, [pc, #376]	; (80010d4 <main+0x1c4>)
 8000f5a:	f003 fa43 	bl	80043e4 <HAL_UART_Transmit>
  while(CheckDevice(LIDAR_ADDR1) != HAL_OK) {
 8000f5e:	4b5e      	ldr	r3, [pc, #376]	; (80010d8 <main+0x1c8>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fe20 	bl	8000ba8 <CheckDevice>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1e6      	bne.n	8000f3c <main+0x2c>
  }
  R_RED_LED();
 8000f6e:	f7ff ff99 	bl	8000ea4 <R_RED_LED>
  HAL_Delay(100);
 8000f72:	2064      	movs	r0, #100	; 0x64
 8000f74:	f000 fc3c 	bl	80017f0 <HAL_Delay>
  R_OFF_LED();
 8000f78:	f7ff ffb8 	bl	8000eec <R_OFF_LED>
  HAL_Delay(100);
 8000f7c:	2064      	movs	r0, #100	; 0x64
 8000f7e:	f000 fc37 	bl	80017f0 <HAL_Delay>
  R_RED_LED();
 8000f82:	f7ff ff8f 	bl	8000ea4 <R_RED_LED>
  HAL_Delay(100);
 8000f86:	2064      	movs	r0, #100	; 0x64
 8000f88:	f000 fc32 	bl	80017f0 <HAL_Delay>
  R_OFF_LED();
 8000f8c:	f7ff ffae 	bl	8000eec <R_OFF_LED>
  HAL_Delay(100);
 8000f90:	2064      	movs	r0, #100	; 0x64
 8000f92:	f000 fc2d 	bl	80017f0 <HAL_Delay>

  while(CheckDevice(LIDAR_ADDR2) != HAL_OK) {
 8000f96:	e010      	b.n	8000fba <main+0xaa>
	  sprintf(msg, "device 2\r\n");
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	4950      	ldr	r1, [pc, #320]	; (80010dc <main+0x1cc>)
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f004 fa93 	bl	80054c8 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff f913 	bl	80001d0 <strlen>
 8000faa:	4603      	mov	r3, r0
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	1d39      	adds	r1, r7, #4
 8000fb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fb4:	4847      	ldr	r0, [pc, #284]	; (80010d4 <main+0x1c4>)
 8000fb6:	f003 fa15 	bl	80043e4 <HAL_UART_Transmit>
  while(CheckDevice(LIDAR_ADDR2) != HAL_OK) {
 8000fba:	4b44      	ldr	r3, [pc, #272]	; (80010cc <main+0x1bc>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fdf2 	bl	8000ba8 <CheckDevice>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1e6      	bne.n	8000f98 <main+0x88>
  }
  L_RED_LED();
 8000fca:	f7ff ff3b 	bl	8000e44 <L_RED_LED>
  HAL_Delay(100);
 8000fce:	2064      	movs	r0, #100	; 0x64
 8000fd0:	f000 fc0e 	bl	80017f0 <HAL_Delay>
  L_OFF_LED();
 8000fd4:	f7ff ff56 	bl	8000e84 <L_OFF_LED>
  HAL_Delay(100);
 8000fd8:	2064      	movs	r0, #100	; 0x64
 8000fda:	f000 fc09 	bl	80017f0 <HAL_Delay>
  L_RED_LED();
 8000fde:	f7ff ff31 	bl	8000e44 <L_RED_LED>
  HAL_Delay(100);
 8000fe2:	2064      	movs	r0, #100	; 0x64
 8000fe4:	f000 fc04 	bl	80017f0 <HAL_Delay>
  L_OFF_LED();
 8000fe8:	f7ff ff4c 	bl	8000e84 <L_OFF_LED>
  HAL_Delay(100);
 8000fec:	2064      	movs	r0, #100	; 0x64
 8000fee:	f000 fbff 	bl	80017f0 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  tempR = GetDistance(LIDAR_ADDR1);
 8000ff2:	4b39      	ldr	r3, [pc, #228]	; (80010d8 <main+0x1c8>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fea4 	bl	8000d44 <GetDistance>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	  if(tempR > 5)
 8001002:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001006:	2b05      	cmp	r3, #5
 8001008:	d903      	bls.n	8001012 <main+0x102>
		  distanceR = tempR;
 800100a:	4a35      	ldr	r2, [pc, #212]	; (80010e0 <main+0x1d0>)
 800100c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001010:	8013      	strh	r3, [r2, #0]
	  if(distanceR < 100)
 8001012:	4b33      	ldr	r3, [pc, #204]	; (80010e0 <main+0x1d0>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	2b63      	cmp	r3, #99	; 0x63
 8001018:	d802      	bhi.n	8001020 <main+0x110>
		  R_RED_LED();
 800101a:	f7ff ff43 	bl	8000ea4 <R_RED_LED>
 800101e:	e008      	b.n	8001032 <main+0x122>
	  else if(distanceR > 200)
 8001020:	4b2f      	ldr	r3, [pc, #188]	; (80010e0 <main+0x1d0>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	2bc8      	cmp	r3, #200	; 0xc8
 8001026:	d902      	bls.n	800102e <main+0x11e>
		  R_OFF_LED();
 8001028:	f7ff ff60 	bl	8000eec <R_OFF_LED>
 800102c:	e001      	b.n	8001032 <main+0x122>
	  else
		  R_YELLOW_LED();
 800102e:	f7ff ff4b 	bl	8000ec8 <R_YELLOW_LED>
	  //HAL_Delay(100);
	  tempL = GetDistance(LIDAR_ADDR2);
 8001032:	4b26      	ldr	r3, [pc, #152]	; (80010cc <main+0x1bc>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fe84 	bl	8000d44 <GetDistance>
 800103c:	4603      	mov	r3, r0
 800103e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	  if(tempL > 5)
 8001042:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8001046:	2b05      	cmp	r3, #5
 8001048:	d903      	bls.n	8001052 <main+0x142>
		  distanceL = tempL;
 800104a:	4a26      	ldr	r2, [pc, #152]	; (80010e4 <main+0x1d4>)
 800104c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8001050:	8013      	strh	r3, [r2, #0]
	  if(distanceL < 100)
 8001052:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <main+0x1d4>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	2b63      	cmp	r3, #99	; 0x63
 8001058:	d802      	bhi.n	8001060 <main+0x150>
		  L_RED_LED();
 800105a:	f7ff fef3 	bl	8000e44 <L_RED_LED>
 800105e:	e008      	b.n	8001072 <main+0x162>
	  else if(distanceL > 200)
 8001060:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <main+0x1d4>)
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	2bc8      	cmp	r3, #200	; 0xc8
 8001066:	d902      	bls.n	800106e <main+0x15e>
		  L_OFF_LED();
 8001068:	f7ff ff0c 	bl	8000e84 <L_OFF_LED>
 800106c:	e001      	b.n	8001072 <main+0x162>
	  else
		  L_YELLOW_LED();
 800106e:	f7ff fef9 	bl	8000e64 <L_YELLOW_LED>
	  //HAL_Delay(100);


	  sprintf(msg, "distance L: %d\r\n", distanceL);
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <main+0x1d4>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	491b      	ldr	r1, [pc, #108]	; (80010e8 <main+0x1d8>)
 800107c:	4618      	mov	r0, r3
 800107e:	f004 fa23 	bl	80054c8 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff f8a3 	bl	80001d0 <strlen>
 800108a:	4603      	mov	r3, r0
 800108c:	b29a      	uxth	r2, r3
 800108e:	1d39      	adds	r1, r7, #4
 8001090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001094:	480f      	ldr	r0, [pc, #60]	; (80010d4 <main+0x1c4>)
 8001096:	f003 f9a5 	bl	80043e4 <HAL_UART_Transmit>

	  sprintf(msg, "distance R: %d\r\n", distanceR);
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <main+0x1d0>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	4912      	ldr	r1, [pc, #72]	; (80010ec <main+0x1dc>)
 80010a4:	4618      	mov	r0, r3
 80010a6:	f004 fa0f 	bl	80054c8 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff f88f 	bl	80001d0 <strlen>
 80010b2:	4603      	mov	r3, r0
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	1d39      	adds	r1, r7, #4
 80010b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <main+0x1c4>)
 80010be:	f003 f991 	bl	80043e4 <HAL_UART_Transmit>

	  HAL_Delay(100);
 80010c2:	2064      	movs	r0, #100	; 0x64
 80010c4:	f000 fb94 	bl	80017f0 <HAL_Delay>
	  tempR = GetDistance(LIDAR_ADDR1);
 80010c8:	e793      	b.n	8000ff2 <main+0xe2>
 80010ca:	bf00      	nop
 80010cc:	20000001 	.word	0x20000001
 80010d0:	08007a00 	.word	0x08007a00
 80010d4:	20000254 	.word	0x20000254
 80010d8:	20000000 	.word	0x20000000
 80010dc:	08007a0c 	.word	0x08007a0c
 80010e0:	200002e2 	.word	0x200002e2
 80010e4:	200002e0 	.word	0x200002e0
 80010e8:	08007a18 	.word	0x08007a18
 80010ec:	08007a2c 	.word	0x08007a2c

080010f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b096      	sub	sp, #88	; 0x58
 80010f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010fa:	2228      	movs	r2, #40	; 0x28
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 fd70 	bl	8004be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]
 8001122:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001124:	2302      	movs	r3, #2
 8001126:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001128:	2301      	movs	r3, #1
 800112a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800112c:	2310      	movs	r3, #16
 800112e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001130:	2300      	movs	r3, #0
 8001132:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001134:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fd6b 	bl	8002c14 <HAL_RCC_OscConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001144:	f000 f8f6 	bl	8001334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001148:	230f      	movs	r3, #15
 800114a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f002 fd94 	bl	8003c90 <HAL_RCC_ClockConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800116e:	f000 f8e1 	bl	8001334 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001172:	2320      	movs	r3, #32
 8001174:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	4618      	mov	r0, r3
 800117e:	f002 ffbd 	bl	80040fc <HAL_RCCEx_PeriphCLKConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001188:	f000 f8d4 	bl	8001334 <Error_Handler>
  }
}
 800118c:	bf00      	nop
 800118e:	3758      	adds	r7, #88	; 0x58
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <MX_I2C1_Init+0x74>)
 800119a:	4a1c      	ldr	r2, [pc, #112]	; (800120c <MX_I2C1_Init+0x78>)
 800119c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_I2C1_Init+0x74>)
 80011a0:	f240 220b 	movw	r2, #523	; 0x20b
 80011a4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 196;
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <MX_I2C1_Init+0x74>)
 80011a8:	22c4      	movs	r2, #196	; 0xc4
 80011aa:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <MX_I2C1_Init+0x74>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <MX_I2C1_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <MX_I2C1_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <MX_I2C1_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <MX_I2C1_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_I2C1_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011d0:	480d      	ldr	r0, [pc, #52]	; (8001208 <MX_I2C1_Init+0x74>)
 80011d2:	f000 fdcd 	bl	8001d70 <HAL_I2C_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011dc:	f000 f8aa 	bl	8001334 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011e0:	2100      	movs	r1, #0
 80011e2:	4809      	ldr	r0, [pc, #36]	; (8001208 <MX_I2C1_Init+0x74>)
 80011e4:	f001 fc5e 	bl	8002aa4 <HAL_I2CEx_ConfigAnalogFilter>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80011ee:	f000 f8a1 	bl	8001334 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011f2:	2100      	movs	r1, #0
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <MX_I2C1_Init+0x74>)
 80011f6:	f001 fca0 	bl	8002b3a <HAL_I2CEx_ConfigDigitalFilter>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001200:	f000 f898 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000200 	.word	0x20000200
 800120c:	40005400 	.word	0x40005400

08001210 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <MX_USART2_UART_Init+0x58>)
 8001216:	4a15      	ldr	r2, [pc, #84]	; (800126c <MX_USART2_UART_Init+0x5c>)
 8001218:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <MX_USART2_UART_Init+0x58>)
 800121c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001220:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_USART2_UART_Init+0x58>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_USART2_UART_Init+0x58>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_USART2_UART_Init+0x58>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_USART2_UART_Init+0x58>)
 8001236:	220c      	movs	r2, #12
 8001238:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_USART2_UART_Init+0x58>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_USART2_UART_Init+0x58>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_USART2_UART_Init+0x58>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_USART2_UART_Init+0x58>)
 800124e:	2200      	movs	r2, #0
 8001250:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_USART2_UART_Init+0x58>)
 8001254:	f003 f878 	bl	8004348 <HAL_UART_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800125e:	f000 f869 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000254 	.word	0x20000254
 800126c:	40004400 	.word	0x40004400

08001270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001286:	4b29      	ldr	r3, [pc, #164]	; (800132c <MX_GPIO_Init+0xbc>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	4a28      	ldr	r2, [pc, #160]	; (800132c <MX_GPIO_Init+0xbc>)
 800128c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001290:	6153      	str	r3, [r2, #20]
 8001292:	4b26      	ldr	r3, [pc, #152]	; (800132c <MX_GPIO_Init+0xbc>)
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	4b23      	ldr	r3, [pc, #140]	; (800132c <MX_GPIO_Init+0xbc>)
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	4a22      	ldr	r2, [pc, #136]	; (800132c <MX_GPIO_Init+0xbc>)
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a8:	6153      	str	r3, [r2, #20]
 80012aa:	4b20      	ldr	r3, [pc, #128]	; (800132c <MX_GPIO_Init+0xbc>)
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	4b1d      	ldr	r3, [pc, #116]	; (800132c <MX_GPIO_Init+0xbc>)
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	4a1c      	ldr	r2, [pc, #112]	; (800132c <MX_GPIO_Init+0xbc>)
 80012bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c0:	6153      	str	r3, [r2, #20]
 80012c2:	4b1a      	ldr	r3, [pc, #104]	; (800132c <MX_GPIO_Init+0xbc>)
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L_RED_Pin|L_GREEN_Pin|R_GREEN_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f640 010a 	movw	r1, #2058	; 0x80a
 80012d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d8:	f000 fd32 	bl	8001d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R_RED_GPIO_Port, R_RED_Pin, GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	2120      	movs	r1, #32
 80012e0:	4813      	ldr	r0, [pc, #76]	; (8001330 <MX_GPIO_Init+0xc0>)
 80012e2:	f000 fd2d 	bl	8001d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L_RED_Pin L_GREEN_Pin R_GREEN_Pin */
  GPIO_InitStruct.Pin = L_RED_Pin|L_GREEN_Pin|R_GREEN_Pin;
 80012e6:	f640 030a 	movw	r3, #2058	; 0x80a
 80012ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ec:	2301      	movs	r3, #1
 80012ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	4619      	mov	r1, r3
 80012fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001302:	f000 fbab 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : R_RED_Pin */
  GPIO_InitStruct.Pin = R_RED_Pin;
 8001306:	2320      	movs	r3, #32
 8001308:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130a:	2301      	movs	r3, #1
 800130c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(R_RED_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	4619      	mov	r1, r3
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <MX_GPIO_Init+0xc0>)
 800131e:	f000 fb9d 	bl	8001a5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001322:	bf00      	nop
 8001324:	3720      	adds	r7, #32
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000
 8001330:	48000400 	.word	0x48000400

08001334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001338:	b672      	cpsid	i
}
 800133a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800133c:	e7fe      	b.n	800133c <Error_Handler+0x8>
	...

08001340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <HAL_MspInit+0x44>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <HAL_MspInit+0x44>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6193      	str	r3, [r2, #24]
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <HAL_MspInit+0x44>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <HAL_MspInit+0x44>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	4a08      	ldr	r2, [pc, #32]	; (8001384 <HAL_MspInit+0x44>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001368:	61d3      	str	r3, [r2, #28]
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_MspInit+0x44>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000

08001388 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a1f      	ldr	r2, [pc, #124]	; (8001424 <HAL_I2C_MspInit+0x9c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d137      	bne.n	800141a <HAL_I2C_MspInit+0x92>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <HAL_I2C_MspInit+0xa0>)
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	4a1e      	ldr	r2, [pc, #120]	; (8001428 <HAL_I2C_MspInit+0xa0>)
 80013b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b4:	6153      	str	r3, [r2, #20]
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <HAL_I2C_MspInit+0xa0>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013c2:	23c0      	movs	r3, #192	; 0xc0
 80013c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c6:	2312      	movs	r3, #18
 80013c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013d2:	2304      	movs	r3, #4
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	4813      	ldr	r0, [pc, #76]	; (800142c <HAL_I2C_MspInit+0xa4>)
 80013de:	f000 fb3d 	bl	8001a5c <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 80013e2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80013e6:	f001 fbf5 	bl	8002bd4 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 80013ea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80013ee:	f001 fbf1 	bl	8002bd4 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <HAL_I2C_MspInit+0xa0>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	4a0c      	ldr	r2, [pc, #48]	; (8001428 <HAL_I2C_MspInit+0xa0>)
 80013f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013fc:	61d3      	str	r3, [r2, #28]
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_I2C_MspInit+0xa0>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	201f      	movs	r0, #31
 8001410:	f000 faed 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001414:	201f      	movs	r0, #31
 8001416:	f000 fb06 	bl	8001a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800141a:	bf00      	nop
 800141c:	3728      	adds	r7, #40	; 0x28
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40005400 	.word	0x40005400
 8001428:	40021000 	.word	0x40021000
 800142c:	48000400 	.word	0x48000400

08001430 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a18      	ldr	r2, [pc, #96]	; (80014b0 <HAL_UART_MspInit+0x80>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d129      	bne.n	80014a6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_UART_MspInit+0x84>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <HAL_UART_MspInit+0x84>)
 8001458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800145c:	61d3      	str	r3, [r2, #28]
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_UART_MspInit+0x84>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_UART_MspInit+0x84>)
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	4a11      	ldr	r2, [pc, #68]	; (80014b4 <HAL_UART_MspInit+0x84>)
 8001470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001474:	6153      	str	r3, [r2, #20]
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_UART_MspInit+0x84>)
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001482:	f248 0304 	movw	r3, #32772	; 0x8004
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001494:	2307      	movs	r3, #7
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a2:	f000 fadb 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014a6:	bf00      	nop
 80014a8:	3728      	adds	r7, #40	; 0x28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40004400 	.word	0x40004400
 80014b4:	40021000 	.word	0x40021000

080014b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <NMI_Handler+0x4>

080014be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <HardFault_Handler+0x4>

080014c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <MemManage_Handler+0x4>

080014ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <BusFault_Handler+0x4>

080014d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <UsageFault_Handler+0x4>

080014d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001504:	f000 f954 	bl	80017b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}

0800150c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <I2C1_EV_IRQHandler+0x10>)
 8001512:	f000 fff4 	bl	80024fe <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000200 	.word	0x20000200

08001520 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return 1;
 8001524:	2301      	movs	r3, #1
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <_kill>:

int _kill(int pid, int sig)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800153a:	f003 fb29 	bl	8004b90 <__errno>
 800153e:	4603      	mov	r3, r0
 8001540:	2216      	movs	r2, #22
 8001542:	601a      	str	r2, [r3, #0]
  return -1;
 8001544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <_exit>:

void _exit (int status)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001558:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ffe7 	bl	8001530 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001562:	e7fe      	b.n	8001562 <_exit+0x12>

08001564 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	e00a      	b.n	800158c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001576:	f3af 8000 	nop.w
 800157a:	4601      	mov	r1, r0
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	60ba      	str	r2, [r7, #8]
 8001582:	b2ca      	uxtb	r2, r1
 8001584:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3301      	adds	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	429a      	cmp	r2, r3
 8001592:	dbf0      	blt.n	8001576 <_read+0x12>
  }

  return len;
 8001594:	687b      	ldr	r3, [r7, #4]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	60f8      	str	r0, [r7, #12]
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	e009      	b.n	80015c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	60ba      	str	r2, [r7, #8]
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3301      	adds	r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dbf1      	blt.n	80015b0 <_write+0x12>
  }
  return len;
 80015cc:	687b      	ldr	r3, [r7, #4]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <_close>:

int _close(int file)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015fe:	605a      	str	r2, [r3, #4]
  return 0;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_isatty>:

int _isatty(int file)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001616:	2301      	movs	r3, #1
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001648:	4a14      	ldr	r2, [pc, #80]	; (800169c <_sbrk+0x5c>)
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <_sbrk+0x60>)
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <_sbrk+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <_sbrk+0x64>)
 800165e:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <_sbrk+0x68>)
 8001660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	429a      	cmp	r2, r3
 800166e:	d207      	bcs.n	8001680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001670:	f003 fa8e 	bl	8004b90 <__errno>
 8001674:	4603      	mov	r3, r0
 8001676:	220c      	movs	r2, #12
 8001678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800167a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800167e:	e009      	b.n	8001694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001686:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <_sbrk+0x64>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <_sbrk+0x64>)
 8001690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20003000 	.word	0x20003000
 80016a0:	00000400 	.word	0x00000400
 80016a4:	200002e4 	.word	0x200002e4
 80016a8:	20000300 	.word	0x20000300

080016ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <SystemInit+0x20>)
 80016b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016b6:	4a05      	ldr	r2, [pc, #20]	; (80016cc <SystemInit+0x20>)
 80016b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001708 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80016d4:	f7ff ffea 	bl	80016ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d8:	480c      	ldr	r0, [pc, #48]	; (800170c <LoopForever+0x6>)
  ldr r1, =_edata
 80016da:	490d      	ldr	r1, [pc, #52]	; (8001710 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016dc:	4a0d      	ldr	r2, [pc, #52]	; (8001714 <LoopForever+0xe>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e0:	e002      	b.n	80016e8 <LoopCopyDataInit>

080016e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e6:	3304      	adds	r3, #4

080016e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ec:	d3f9      	bcc.n	80016e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016f0:	4c0a      	ldr	r4, [pc, #40]	; (800171c <LoopForever+0x16>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f4:	e001      	b.n	80016fa <LoopFillZerobss>

080016f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f8:	3204      	adds	r2, #4

080016fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016fc:	d3fb      	bcc.n	80016f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016fe:	f003 fa4d 	bl	8004b9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001702:	f7ff fc05 	bl	8000f10 <main>

08001706 <LoopForever>:

LoopForever:
    b LoopForever
 8001706:	e7fe      	b.n	8001706 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001708:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800170c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001710:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001714:	08007e5c 	.word	0x08007e5c
  ldr r2, =_sbss
 8001718:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800171c:	200002fc 	.word	0x200002fc

08001720 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <ADC1_2_IRQHandler>
	...

08001724 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_Init+0x28>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a07      	ldr	r2, [pc, #28]	; (800174c <HAL_Init+0x28>)
 800172e:	f043 0310 	orr.w	r3, r3, #16
 8001732:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001734:	2003      	movs	r0, #3
 8001736:	f000 f94f 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173a:	2000      	movs	r0, #0
 800173c:	f000 f808 	bl	8001750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001740:	f7ff fdfe 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40022000 	.word	0x40022000

08001750 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_InitTick+0x54>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_InitTick+0x58>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001766:	fbb3 f3f1 	udiv	r3, r3, r1
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f967 	bl	8001a42 <HAL_SYSTICK_Config>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e00e      	b.n	800179c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d80a      	bhi.n	800179a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800178c:	f000 f92f 	bl	80019ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001790:	4a06      	ldr	r2, [pc, #24]	; (80017ac <HAL_InitTick+0x5c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000008 	.word	0x20000008
 80017a8:	20000010 	.word	0x20000010
 80017ac:	2000000c 	.word	0x2000000c

080017b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_IncTick+0x20>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_IncTick+0x24>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <HAL_IncTick+0x24>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000010 	.word	0x20000010
 80017d4:	200002e8 	.word	0x200002e8

080017d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return uwTick;  
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <HAL_GetTick+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	200002e8 	.word	0x200002e8

080017f0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f8:	f7ff ffee 	bl	80017d8 <HAL_GetTick>
 80017fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001808:	d005      	beq.n	8001816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800180a:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <HAL_Delay+0x44>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4413      	add	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001816:	bf00      	nop
 8001818:	f7ff ffde 	bl	80017d8 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	429a      	cmp	r2, r3
 8001826:	d8f7      	bhi.n	8001818 <HAL_Delay+0x28>
  {
  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000010 	.word	0x20000010

08001838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001854:	4013      	ands	r3, r2
 8001856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001860:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186a:	4a04      	ldr	r2, [pc, #16]	; (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	60d3      	str	r3, [r2, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001884:	4b04      	ldr	r3, [pc, #16]	; (8001898 <__NVIC_GetPriorityGrouping+0x18>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	f003 0307 	and.w	r3, r3, #7
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	db0b      	blt.n	80018c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	f003 021f 	and.w	r2, r3, #31
 80018b4:	4907      	ldr	r1, [pc, #28]	; (80018d4 <__NVIC_EnableIRQ+0x38>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	095b      	lsrs	r3, r3, #5
 80018bc:	2001      	movs	r0, #1
 80018be:	fa00 f202 	lsl.w	r2, r0, r2
 80018c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000e100 	.word	0xe000e100

080018d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	db0a      	blt.n	8001902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	490c      	ldr	r1, [pc, #48]	; (8001924 <__NVIC_SetPriority+0x4c>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	0112      	lsls	r2, r2, #4
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	440b      	add	r3, r1
 80018fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001900:	e00a      	b.n	8001918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4908      	ldr	r1, [pc, #32]	; (8001928 <__NVIC_SetPriority+0x50>)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	3b04      	subs	r3, #4
 8001910:	0112      	lsls	r2, r2, #4
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	440b      	add	r3, r1
 8001916:	761a      	strb	r2, [r3, #24]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000e100 	.word	0xe000e100
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	; 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f1c3 0307 	rsb	r3, r3, #7
 8001946:	2b04      	cmp	r3, #4
 8001948:	bf28      	it	cs
 800194a:	2304      	movcs	r3, #4
 800194c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3304      	adds	r3, #4
 8001952:	2b06      	cmp	r3, #6
 8001954:	d902      	bls.n	800195c <NVIC_EncodePriority+0x30>
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3b03      	subs	r3, #3
 800195a:	e000      	b.n	800195e <NVIC_EncodePriority+0x32>
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	401a      	ands	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001974:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43d9      	mvns	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	4313      	orrs	r3, r2
         );
}
 8001986:	4618      	mov	r0, r3
 8001988:	3724      	adds	r7, #36	; 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a4:	d301      	bcc.n	80019aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00f      	b.n	80019ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <SysTick_Config+0x40>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b2:	210f      	movs	r1, #15
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019b8:	f7ff ff8e 	bl	80018d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <SysTick_Config+0x40>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c2:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <SysTick_Config+0x40>)
 80019c4:	2207      	movs	r2, #7
 80019c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	e000e010 	.word	0xe000e010

080019d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff29 	bl	8001838 <__NVIC_SetPriorityGrouping>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a00:	f7ff ff3e 	bl	8001880 <__NVIC_GetPriorityGrouping>
 8001a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	6978      	ldr	r0, [r7, #20]
 8001a0c:	f7ff ff8e 	bl	800192c <NVIC_EncodePriority>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff5d 	bl	80018d8 <__NVIC_SetPriority>
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff31 	bl	800189c <__NVIC_EnableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffa2 	bl	8001994 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6a:	e14e      	b.n	8001d0a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2101      	movs	r1, #1
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8140 	beq.w	8001d04 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d005      	beq.n	8001a9c <HAL_GPIO_Init+0x40>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d130      	bne.n	8001afe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	091b      	lsrs	r3, r3, #4
 8001ae8:	f003 0201 	and.w	r2, r3, #1
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d017      	beq.n	8001b3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	2203      	movs	r2, #3
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d123      	bne.n	8001b8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	08da      	lsrs	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3208      	adds	r2, #8
 8001b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	691a      	ldr	r2, [r3, #16]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	08da      	lsrs	r2, r3, #3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3208      	adds	r2, #8
 8001b88:	6939      	ldr	r1, [r7, #16]
 8001b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	2203      	movs	r2, #3
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 0203 	and.w	r2, r3, #3
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 809a 	beq.w	8001d04 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd0:	4b55      	ldr	r3, [pc, #340]	; (8001d28 <HAL_GPIO_Init+0x2cc>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	4a54      	ldr	r2, [pc, #336]	; (8001d28 <HAL_GPIO_Init+0x2cc>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6193      	str	r3, [r2, #24]
 8001bdc:	4b52      	ldr	r3, [pc, #328]	; (8001d28 <HAL_GPIO_Init+0x2cc>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001be8:	4a50      	ldr	r2, [pc, #320]	; (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	3302      	adds	r3, #2
 8001bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	220f      	movs	r2, #15
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c12:	d013      	beq.n	8001c3c <HAL_GPIO_Init+0x1e0>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a46      	ldr	r2, [pc, #280]	; (8001d30 <HAL_GPIO_Init+0x2d4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d00d      	beq.n	8001c38 <HAL_GPIO_Init+0x1dc>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a45      	ldr	r2, [pc, #276]	; (8001d34 <HAL_GPIO_Init+0x2d8>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d007      	beq.n	8001c34 <HAL_GPIO_Init+0x1d8>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a44      	ldr	r2, [pc, #272]	; (8001d38 <HAL_GPIO_Init+0x2dc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d101      	bne.n	8001c30 <HAL_GPIO_Init+0x1d4>
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e006      	b.n	8001c3e <HAL_GPIO_Init+0x1e2>
 8001c30:	2305      	movs	r3, #5
 8001c32:	e004      	b.n	8001c3e <HAL_GPIO_Init+0x1e2>
 8001c34:	2302      	movs	r3, #2
 8001c36:	e002      	b.n	8001c3e <HAL_GPIO_Init+0x1e2>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <HAL_GPIO_Init+0x1e2>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	f002 0203 	and.w	r2, r2, #3
 8001c44:	0092      	lsls	r2, r2, #2
 8001c46:	4093      	lsls	r3, r2
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c4e:	4937      	ldr	r1, [pc, #220]	; (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	089b      	lsrs	r3, r3, #2
 8001c54:	3302      	adds	r3, #2
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c5c:	4b37      	ldr	r3, [pc, #220]	; (8001d3c <HAL_GPIO_Init+0x2e0>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c80:	4a2e      	ldr	r2, [pc, #184]	; (8001d3c <HAL_GPIO_Init+0x2e0>)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c86:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <HAL_GPIO_Init+0x2e0>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001caa:	4a24      	ldr	r2, [pc, #144]	; (8001d3c <HAL_GPIO_Init+0x2e0>)
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cb0:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <HAL_GPIO_Init+0x2e0>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cd4:	4a19      	ldr	r2, [pc, #100]	; (8001d3c <HAL_GPIO_Init+0x2e0>)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_GPIO_Init+0x2e0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001cfe:	4a0f      	ldr	r2, [pc, #60]	; (8001d3c <HAL_GPIO_Init+0x2e0>)
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	3301      	adds	r3, #1
 8001d08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f47f aea9 	bne.w	8001a6c <HAL_GPIO_Init+0x10>
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	bf00      	nop
 8001d1e:	371c      	adds	r7, #28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40010000 	.word	0x40010000
 8001d30:	48000400 	.word	0x48000400
 8001d34:	48000800 	.word	0x48000800
 8001d38:	48000c00 	.word	0x48000c00
 8001d3c:	40010400 	.word	0x40010400

08001d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	807b      	strh	r3, [r7, #2]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d50:	787b      	ldrb	r3, [r7, #1]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d56:	887a      	ldrh	r2, [r7, #2]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d5c:	e002      	b.n	8001d64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d5e:	887a      	ldrh	r2, [r7, #2]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e081      	b.n	8001e86 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d106      	bne.n	8001d9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff faf6 	bl	8001388 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2224      	movs	r2, #36	; 0x24
 8001da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0201 	bic.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d107      	bne.n	8001dea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	e006      	b.n	8001df8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001df6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d104      	bne.n	8001e0a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69d9      	ldr	r1, [r3, #28]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1a      	ldr	r2, [r3, #32]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2220      	movs	r2, #32
 8001e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af02      	add	r7, sp, #8
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	4608      	mov	r0, r1
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	817b      	strh	r3, [r7, #10]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	813b      	strh	r3, [r7, #8]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b20      	cmp	r3, #32
 8001eb4:	f040 80f9 	bne.w	80020aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d002      	beq.n	8001ec4 <HAL_I2C_Mem_Write+0x34>
 8001ebe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d105      	bne.n	8001ed0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0ed      	b.n	80020ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_I2C_Mem_Write+0x4e>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e0e6      	b.n	80020ac <HAL_I2C_Mem_Write+0x21c>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ee6:	f7ff fc77 	bl	80017d8 <HAL_GetTick>
 8001eea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	2319      	movs	r3, #25
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f000 fbe7 	bl	80026cc <I2C_WaitOnFlagUntilTimeout>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0d1      	b.n	80020ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2221      	movs	r2, #33	; 0x21
 8001f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2240      	movs	r2, #64	; 0x40
 8001f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6a3a      	ldr	r2, [r7, #32]
 8001f22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f30:	88f8      	ldrh	r0, [r7, #6]
 8001f32:	893a      	ldrh	r2, [r7, #8]
 8001f34:	8979      	ldrh	r1, [r7, #10]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	9301      	str	r3, [sp, #4]
 8001f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	4603      	mov	r3, r0
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f000 faf7 	bl	8002534 <I2C_RequestMemoryWrite>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0a9      	b.n	80020ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	2bff      	cmp	r3, #255	; 0xff
 8001f60:	d90e      	bls.n	8001f80 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	22ff      	movs	r2, #255	; 0xff
 8001f66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	8979      	ldrh	r1, [r7, #10]
 8001f70:	2300      	movs	r3, #0
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 fd61 	bl	8002a40 <I2C_TransferConfig>
 8001f7e:	e00f      	b.n	8001fa0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	8979      	ldrh	r1, [r7, #10]
 8001f92:	2300      	movs	r3, #0
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 fd50 	bl	8002a40 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 fbe0 	bl	800276a <I2C_WaitOnTXISFlagUntilTimeout>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e07b      	b.n	80020ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	781a      	ldrb	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d034      	beq.n	8002058 <HAL_I2C_Mem_Write+0x1c8>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d130      	bne.n	8002058 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2180      	movs	r1, #128	; 0x80
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 fb63 	bl	80026cc <I2C_WaitOnFlagUntilTimeout>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e04d      	b.n	80020ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002014:	b29b      	uxth	r3, r3
 8002016:	2bff      	cmp	r3, #255	; 0xff
 8002018:	d90e      	bls.n	8002038 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	22ff      	movs	r2, #255	; 0xff
 800201e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002024:	b2da      	uxtb	r2, r3
 8002026:	8979      	ldrh	r1, [r7, #10]
 8002028:	2300      	movs	r3, #0
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 fd05 	bl	8002a40 <I2C_TransferConfig>
 8002036:	e00f      	b.n	8002058 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203c:	b29a      	uxth	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002046:	b2da      	uxtb	r2, r3
 8002048:	8979      	ldrh	r1, [r7, #10]
 800204a:	2300      	movs	r3, #0
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 fcf4 	bl	8002a40 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205c:	b29b      	uxth	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d19e      	bne.n	8001fa0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 fbc6 	bl	80027f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e01a      	b.n	80020ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2220      	movs	r2, #32
 800207c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6859      	ldr	r1, [r3, #4]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <HAL_I2C_Mem_Write+0x224>)
 800208a:	400b      	ands	r3, r1
 800208c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2220      	movs	r2, #32
 8002092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	e000      	b.n	80020ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80020aa:	2302      	movs	r3, #2
  }
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	fe00e800 	.word	0xfe00e800

080020b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af02      	add	r7, sp, #8
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	4608      	mov	r0, r1
 80020c2:	4611      	mov	r1, r2
 80020c4:	461a      	mov	r2, r3
 80020c6:	4603      	mov	r3, r0
 80020c8:	817b      	strh	r3, [r7, #10]
 80020ca:	460b      	mov	r3, r1
 80020cc:	813b      	strh	r3, [r7, #8]
 80020ce:	4613      	mov	r3, r2
 80020d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b20      	cmp	r3, #32
 80020dc:	f040 80fd 	bne.w	80022da <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <HAL_I2C_Mem_Read+0x34>
 80020e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d105      	bne.n	80020f8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0f1      	b.n	80022dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_I2C_Mem_Read+0x4e>
 8002102:	2302      	movs	r3, #2
 8002104:	e0ea      	b.n	80022dc <HAL_I2C_Mem_Read+0x224>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800210e:	f7ff fb63 	bl	80017d8 <HAL_GetTick>
 8002112:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	2319      	movs	r3, #25
 800211a:	2201      	movs	r2, #1
 800211c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f000 fad3 	bl	80026cc <I2C_WaitOnFlagUntilTimeout>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0d5      	b.n	80022dc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2222      	movs	r2, #34	; 0x22
 8002134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2240      	movs	r2, #64	; 0x40
 800213c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6a3a      	ldr	r2, [r7, #32]
 800214a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002150:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002158:	88f8      	ldrh	r0, [r7, #6]
 800215a:	893a      	ldrh	r2, [r7, #8]
 800215c:	8979      	ldrh	r1, [r7, #10]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	4603      	mov	r3, r0
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 fa37 	bl	80025dc <I2C_RequestMemoryRead>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0ad      	b.n	80022dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002184:	b29b      	uxth	r3, r3
 8002186:	2bff      	cmp	r3, #255	; 0xff
 8002188:	d90e      	bls.n	80021a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	22ff      	movs	r2, #255	; 0xff
 800218e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002194:	b2da      	uxtb	r2, r3
 8002196:	8979      	ldrh	r1, [r7, #10]
 8002198:	4b52      	ldr	r3, [pc, #328]	; (80022e4 <HAL_I2C_Mem_Read+0x22c>)
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 fc4d 	bl	8002a40 <I2C_TransferConfig>
 80021a6:	e00f      	b.n	80021c8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	8979      	ldrh	r1, [r7, #10]
 80021ba:	4b4a      	ldr	r3, [pc, #296]	; (80022e4 <HAL_I2C_Mem_Read+0x22c>)
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 fc3c 	bl	8002a40 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ce:	2200      	movs	r2, #0
 80021d0:	2104      	movs	r1, #4
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 fa7a 	bl	80026cc <I2C_WaitOnFlagUntilTimeout>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e07c      	b.n	80022dc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fe:	3b01      	subs	r3, #1
 8002200:	b29a      	uxth	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220a:	b29b      	uxth	r3, r3
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002218:	b29b      	uxth	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d034      	beq.n	8002288 <HAL_I2C_Mem_Read+0x1d0>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002222:	2b00      	cmp	r3, #0
 8002224:	d130      	bne.n	8002288 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222c:	2200      	movs	r2, #0
 800222e:	2180      	movs	r1, #128	; 0x80
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 fa4b 	bl	80026cc <I2C_WaitOnFlagUntilTimeout>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e04d      	b.n	80022dc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002244:	b29b      	uxth	r3, r3
 8002246:	2bff      	cmp	r3, #255	; 0xff
 8002248:	d90e      	bls.n	8002268 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	22ff      	movs	r2, #255	; 0xff
 800224e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002254:	b2da      	uxtb	r2, r3
 8002256:	8979      	ldrh	r1, [r7, #10]
 8002258:	2300      	movs	r3, #0
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 fbed 	bl	8002a40 <I2C_TransferConfig>
 8002266:	e00f      	b.n	8002288 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002276:	b2da      	uxtb	r2, r3
 8002278:	8979      	ldrh	r1, [r7, #10]
 800227a:	2300      	movs	r3, #0
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 fbdc 	bl	8002a40 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d19a      	bne.n	80021c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 faae 	bl	80027f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e01a      	b.n	80022dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2220      	movs	r2, #32
 80022ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6859      	ldr	r1, [r3, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_I2C_Mem_Read+0x230>)
 80022ba:	400b      	ands	r3, r1
 80022bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2220      	movs	r2, #32
 80022c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	e000      	b.n	80022dc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80022da:	2302      	movs	r3, #2
  }
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	80002400 	.word	0x80002400
 80022e8:	fe00e800 	.word	0xfe00e800

080022ec <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	; 0x28
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	460b      	mov	r3, r1
 80022fa:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b20      	cmp	r3, #32
 800230a:	f040 80f3 	bne.w	80024f4 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800231c:	d101      	bne.n	8002322 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800231e:	2302      	movs	r3, #2
 8002320:	e0e9      	b.n	80024f6 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_I2C_IsDeviceReady+0x44>
 800232c:	2302      	movs	r3, #2
 800232e:	e0e2      	b.n	80024f6 <HAL_I2C_IsDeviceReady+0x20a>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2224      	movs	r2, #36	; 0x24
 800233c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d107      	bne.n	800235e <HAL_I2C_IsDeviceReady+0x72>
 800234e:	897b      	ldrh	r3, [r7, #10]
 8002350:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002354:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002358:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800235c:	e006      	b.n	800236c <HAL_I2C_IsDeviceReady+0x80>
 800235e:	897b      	ldrh	r3, [r7, #10]
 8002360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002364:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002368:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002372:	f7ff fa31 	bl	80017d8 <HAL_GetTick>
 8002376:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	f003 0320 	and.w	r3, r3, #32
 8002382:	2b20      	cmp	r3, #32
 8002384:	bf0c      	ite	eq
 8002386:	2301      	moveq	r3, #1
 8002388:	2300      	movne	r3, #0
 800238a:	b2db      	uxtb	r3, r3
 800238c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	2b10      	cmp	r3, #16
 800239a:	bf0c      	ite	eq
 800239c:	2301      	moveq	r3, #1
 800239e:	2300      	movne	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80023a4:	e034      	b.n	8002410 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023ac:	d01a      	beq.n	80023e4 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023ae:	f7ff fa13 	bl	80017d8 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d302      	bcc.n	80023c4 <HAL_I2C_IsDeviceReady+0xd8>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10f      	bne.n	80023e4 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d0:	f043 0220 	orr.w	r2, r3, #32
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e088      	b.n	80024f6 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f003 0320 	and.w	r3, r3, #32
 80023ee:	2b20      	cmp	r3, #32
 80023f0:	bf0c      	ite	eq
 80023f2:	2301      	moveq	r3, #1
 80023f4:	2300      	movne	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	2b10      	cmp	r3, #16
 8002406:	bf0c      	ite	eq
 8002408:	2301      	moveq	r3, #1
 800240a:	2300      	movne	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002410:	7ffb      	ldrb	r3, [r7, #31]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d102      	bne.n	800241c <HAL_I2C_IsDeviceReady+0x130>
 8002416:	7fbb      	ldrb	r3, [r7, #30]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0c4      	beq.n	80023a6 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b10      	cmp	r3, #16
 8002428:	d01a      	beq.n	8002460 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	2200      	movs	r2, #0
 8002432:	2120      	movs	r1, #32
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f949 	bl	80026cc <I2C_WaitOnFlagUntilTimeout>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e058      	b.n	80024f6 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2220      	movs	r2, #32
 800244a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2220      	movs	r2, #32
 8002450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	e04a      	b.n	80024f6 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	2200      	movs	r2, #0
 8002468:	2120      	movs	r1, #32
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f92e 	bl	80026cc <I2C_WaitOnFlagUntilTimeout>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e03d      	b.n	80024f6 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2210      	movs	r2, #16
 8002480:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2220      	movs	r2, #32
 8002488:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	429a      	cmp	r2, r3
 8002490:	d118      	bne.n	80024c4 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024a0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	2200      	movs	r2, #0
 80024aa:	2120      	movs	r1, #32
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 f90d 	bl	80026cc <I2C_WaitOnFlagUntilTimeout>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e01c      	b.n	80024f6 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2220      	movs	r2, #32
 80024c2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	3301      	adds	r3, #1
 80024c8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	f63f af39 	bhi.w	8002346 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e0:	f043 0220 	orr.w	r2, r3, #32
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80024f4:	2302      	movs	r3, #2
  }
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3720      	adds	r7, #32
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b084      	sub	sp, #16
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251a:	2b00      	cmp	r3, #0
 800251c:	d005      	beq.n	800252a <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	68f9      	ldr	r1, [r7, #12]
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	4798      	blx	r3
  }
}
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af02      	add	r7, sp, #8
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	4608      	mov	r0, r1
 800253e:	4611      	mov	r1, r2
 8002540:	461a      	mov	r2, r3
 8002542:	4603      	mov	r3, r0
 8002544:	817b      	strh	r3, [r7, #10]
 8002546:	460b      	mov	r3, r1
 8002548:	813b      	strh	r3, [r7, #8]
 800254a:	4613      	mov	r3, r2
 800254c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800254e:	88fb      	ldrh	r3, [r7, #6]
 8002550:	b2da      	uxtb	r2, r3
 8002552:	8979      	ldrh	r1, [r7, #10]
 8002554:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <I2C_RequestMemoryWrite+0xa4>)
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 fa6f 	bl	8002a40 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	69b9      	ldr	r1, [r7, #24]
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 f8ff 	bl	800276a <I2C_WaitOnTXISFlagUntilTimeout>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e02c      	b.n	80025d0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d105      	bne.n	8002588 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800257c:	893b      	ldrh	r3, [r7, #8]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	629a      	str	r2, [r3, #40]	; 0x28
 8002586:	e015      	b.n	80025b4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002588:	893b      	ldrh	r3, [r7, #8]
 800258a:	0a1b      	lsrs	r3, r3, #8
 800258c:	b29b      	uxth	r3, r3
 800258e:	b2da      	uxtb	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002596:	69fa      	ldr	r2, [r7, #28]
 8002598:	69b9      	ldr	r1, [r7, #24]
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f8e5 	bl	800276a <I2C_WaitOnTXISFlagUntilTimeout>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e012      	b.n	80025d0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025aa:	893b      	ldrh	r3, [r7, #8]
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	2200      	movs	r2, #0
 80025bc:	2180      	movs	r1, #128	; 0x80
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f884 	bl	80026cc <I2C_WaitOnFlagUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	80002000 	.word	0x80002000

080025dc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	4608      	mov	r0, r1
 80025e6:	4611      	mov	r1, r2
 80025e8:	461a      	mov	r2, r3
 80025ea:	4603      	mov	r3, r0
 80025ec:	817b      	strh	r3, [r7, #10]
 80025ee:	460b      	mov	r3, r1
 80025f0:	813b      	strh	r3, [r7, #8]
 80025f2:	4613      	mov	r3, r2
 80025f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	8979      	ldrh	r1, [r7, #10]
 80025fc:	4b20      	ldr	r3, [pc, #128]	; (8002680 <I2C_RequestMemoryRead+0xa4>)
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2300      	movs	r3, #0
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 fa1c 	bl	8002a40 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002608:	69fa      	ldr	r2, [r7, #28]
 800260a:	69b9      	ldr	r1, [r7, #24]
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 f8ac 	bl	800276a <I2C_WaitOnTXISFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e02c      	b.n	8002676 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800261c:	88fb      	ldrh	r3, [r7, #6]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d105      	bne.n	800262e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002622:	893b      	ldrh	r3, [r7, #8]
 8002624:	b2da      	uxtb	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	629a      	str	r2, [r3, #40]	; 0x28
 800262c:	e015      	b.n	800265a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800262e:	893b      	ldrh	r3, [r7, #8]
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	b29b      	uxth	r3, r3
 8002634:	b2da      	uxtb	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800263c:	69fa      	ldr	r2, [r7, #28]
 800263e:	69b9      	ldr	r1, [r7, #24]
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f892 	bl	800276a <I2C_WaitOnTXISFlagUntilTimeout>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e012      	b.n	8002676 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002650:	893b      	ldrh	r3, [r7, #8]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	2200      	movs	r2, #0
 8002662:	2140      	movs	r1, #64	; 0x40
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f831 	bl	80026cc <I2C_WaitOnFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	80002000 	.word	0x80002000

08002684 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b02      	cmp	r3, #2
 8002698:	d103      	bne.n	80026a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2200      	movs	r2, #0
 80026a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d007      	beq.n	80026c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699a      	ldr	r2, [r3, #24]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	619a      	str	r2, [r3, #24]
  }
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	4613      	mov	r3, r2
 80026da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026dc:	e031      	b.n	8002742 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026e4:	d02d      	beq.n	8002742 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e6:	f7ff f877 	bl	80017d8 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d302      	bcc.n	80026fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d122      	bne.n	8002742 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699a      	ldr	r2, [r3, #24]
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	4013      	ands	r3, r2
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	429a      	cmp	r2, r3
 800270a:	bf0c      	ite	eq
 800270c:	2301      	moveq	r3, #1
 800270e:	2300      	movne	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	461a      	mov	r2, r3
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	429a      	cmp	r2, r3
 8002718:	d113      	bne.n	8002742 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	f043 0220 	orr.w	r2, r3, #32
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2220      	movs	r2, #32
 800272a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e00f      	b.n	8002762 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699a      	ldr	r2, [r3, #24]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4013      	ands	r3, r2
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	429a      	cmp	r2, r3
 8002750:	bf0c      	ite	eq
 8002752:	2301      	moveq	r3, #1
 8002754:	2300      	movne	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	429a      	cmp	r2, r3
 800275e:	d0be      	beq.n	80026de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002776:	e033      	b.n	80027e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	68b9      	ldr	r1, [r7, #8]
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 f87f 	bl	8002880 <I2C_IsErrorOccurred>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e031      	b.n	80027f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002792:	d025      	beq.n	80027e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002794:	f7ff f820 	bl	80017d8 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d302      	bcc.n	80027aa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d11a      	bne.n	80027e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d013      	beq.n	80027e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f043 0220 	orr.w	r2, r3, #32
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e007      	b.n	80027f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d1c4      	bne.n	8002778 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002804:	e02f      	b.n	8002866 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f838 	bl	8002880 <I2C_IsErrorOccurred>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e02d      	b.n	8002876 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800281a:	f7fe ffdd 	bl	80017d8 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	429a      	cmp	r2, r3
 8002828:	d302      	bcc.n	8002830 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d11a      	bne.n	8002866 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	f003 0320 	and.w	r3, r3, #32
 800283a:	2b20      	cmp	r3, #32
 800283c:	d013      	beq.n	8002866 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	f043 0220 	orr.w	r2, r3, #32
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e007      	b.n	8002876 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	f003 0320 	and.w	r3, r3, #32
 8002870:	2b20      	cmp	r3, #32
 8002872:	d1c8      	bne.n	8002806 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	; 0x28
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800289a:	2300      	movs	r3, #0
 800289c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d068      	beq.n	800297e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2210      	movs	r2, #16
 80028b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028b4:	e049      	b.n	800294a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028bc:	d045      	beq.n	800294a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028be:	f7fe ff8b 	bl	80017d8 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d302      	bcc.n	80028d4 <I2C_IsErrorOccurred+0x54>
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d13a      	bne.n	800294a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f6:	d121      	bne.n	800293c <I2C_IsErrorOccurred+0xbc>
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028fe:	d01d      	beq.n	800293c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002900:	7cfb      	ldrb	r3, [r7, #19]
 8002902:	2b20      	cmp	r3, #32
 8002904:	d01a      	beq.n	800293c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002914:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002916:	f7fe ff5f 	bl	80017d8 <HAL_GetTick>
 800291a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800291c:	e00e      	b.n	800293c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800291e:	f7fe ff5b 	bl	80017d8 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b19      	cmp	r3, #25
 800292a:	d907      	bls.n	800293c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	f043 0320 	orr.w	r3, r3, #32
 8002932:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800293a:	e006      	b.n	800294a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	f003 0320 	and.w	r3, r3, #32
 8002946:	2b20      	cmp	r3, #32
 8002948:	d1e9      	bne.n	800291e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b20      	cmp	r3, #32
 8002956:	d003      	beq.n	8002960 <I2C_IsErrorOccurred+0xe0>
 8002958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0aa      	beq.n	80028b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002964:	2b00      	cmp	r3, #0
 8002966:	d103      	bne.n	8002970 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2220      	movs	r2, #32
 800296e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	f043 0304 	orr.w	r3, r3, #4
 8002976:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00b      	beq.n	80029a8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00b      	beq.n	80029ca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	f043 0308 	orr.w	r3, r3, #8
 80029b8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00b      	beq.n	80029ec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	f043 0302 	orr.w	r3, r3, #2
 80029da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80029ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d01c      	beq.n	8002a2e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f7ff fe45 	bl	8002684 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6859      	ldr	r1, [r3, #4]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b0d      	ldr	r3, [pc, #52]	; (8002a3c <I2C_IsErrorOccurred+0x1bc>)
 8002a06:	400b      	ands	r3, r1
 8002a08:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	431a      	orrs	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002a2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3728      	adds	r7, #40	; 0x28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	fe00e800 	.word	0xfe00e800

08002a40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	607b      	str	r3, [r7, #4]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	817b      	strh	r3, [r7, #10]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a52:	897b      	ldrh	r3, [r7, #10]
 8002a54:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a58:	7a7b      	ldrb	r3, [r7, #9]
 8002a5a:	041b      	lsls	r3, r3, #16
 8002a5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a60:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a6e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	0d5b      	lsrs	r3, r3, #21
 8002a7a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a7e:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <I2C_TransferConfig+0x60>)
 8002a80:	430b      	orrs	r3, r1
 8002a82:	43db      	mvns	r3, r3
 8002a84:	ea02 0103 	and.w	r1, r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a92:	bf00      	nop
 8002a94:	371c      	adds	r7, #28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	03ff63ff 	.word	0x03ff63ff

08002aa4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b20      	cmp	r3, #32
 8002ab8:	d138      	bne.n	8002b2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e032      	b.n	8002b2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2224      	movs	r2, #36	; 0x24
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002af6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6819      	ldr	r1, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0201 	orr.w	r2, r2, #1
 8002b16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	e000      	b.n	8002b2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b2c:	2302      	movs	r3, #2
  }
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b085      	sub	sp, #20
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	d139      	bne.n	8002bc4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e033      	b.n	8002bc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2224      	movs	r2, #36	; 0x24
 8002b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0201 	bic.w	r2, r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	021b      	lsls	r3, r3, #8
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e000      	b.n	8002bc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bc4:	2302      	movs	r3, #2
  }
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
	...

08002bd4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6193      	str	r3, [r2, #24]
 8002be8:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4905      	ldr	r1, [pc, #20]	; (8002c10 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	600b      	str	r3, [r1, #0]
}
 8002c00:	bf00      	nop
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40010000 	.word	0x40010000

08002c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c24:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d102      	bne.n	8002c3a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	f001 b823 	b.w	8003c80 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 817d 	beq.w	8002f4a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c50:	4bbc      	ldr	r3, [pc, #752]	; (8002f44 <HAL_RCC_OscConfig+0x330>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 030c 	and.w	r3, r3, #12
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d00c      	beq.n	8002c76 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c5c:	4bb9      	ldr	r3, [pc, #740]	; (8002f44 <HAL_RCC_OscConfig+0x330>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 030c 	and.w	r3, r3, #12
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d15c      	bne.n	8002d22 <HAL_RCC_OscConfig+0x10e>
 8002c68:	4bb6      	ldr	r3, [pc, #728]	; (8002f44 <HAL_RCC_OscConfig+0x330>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c74:	d155      	bne.n	8002d22 <HAL_RCC_OscConfig+0x10e>
 8002c76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c7a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c8a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	095b      	lsrs	r3, r3, #5
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d102      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x94>
 8002ca2:	4ba8      	ldr	r3, [pc, #672]	; (8002f44 <HAL_RCC_OscConfig+0x330>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	e015      	b.n	8002cd4 <HAL_RCC_OscConfig+0xc0>
 8002ca8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cac:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002cb4:	fa93 f3a3 	rbit	r3, r3
 8002cb8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002cbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cc0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002cc4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002cd0:	4b9c      	ldr	r3, [pc, #624]	; (8002f44 <HAL_RCC_OscConfig+0x330>)
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cd8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002cdc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002ce0:	fa92 f2a2 	rbit	r2, r2
 8002ce4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002ce8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002cec:	fab2 f282 	clz	r2, r2
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	f042 0220 	orr.w	r2, r2, #32
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	f002 021f 	and.w	r2, r2, #31
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 811f 	beq.w	8002f48 <HAL_RCC_OscConfig+0x334>
 8002d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f040 8116 	bne.w	8002f48 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	f000 bfaf 	b.w	8003c80 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d32:	d106      	bne.n	8002d42 <HAL_RCC_OscConfig+0x12e>
 8002d34:	4b83      	ldr	r3, [pc, #524]	; (8002f44 <HAL_RCC_OscConfig+0x330>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a82      	ldr	r2, [pc, #520]	; (8002f44 <HAL_RCC_OscConfig+0x330>)
 8002d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	e036      	b.n	8002db0 <HAL_RCC_OscConfig+0x19c>
 8002d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x158>
 8002d52:	4b7c      	ldr	r3, [pc, #496]	; (8002f44 <HAL_RCC_OscConfig+0x330>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a7b      	ldr	r2, [pc, #492]	; (8002f44 <HAL_RCC_OscConfig+0x330>)
 8002d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	4b79      	ldr	r3, [pc, #484]	; (8002f44 <HAL_RCC_OscConfig+0x330>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a78      	ldr	r2, [pc, #480]	; (8002f44 <HAL_RCC_OscConfig+0x330>)
 8002d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	e021      	b.n	8002db0 <HAL_RCC_OscConfig+0x19c>
 8002d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCC_OscConfig+0x184>
 8002d7e:	4b71      	ldr	r3, [pc, #452]	; (8002f44 <HAL_RCC_OscConfig+0x330>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a70      	ldr	r2, [pc, #448]	; (8002f44 <HAL_RCC_OscConfig+0x330>)
 8002d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	4b6e      	ldr	r3, [pc, #440]	; (8002f44 <HAL_RCC_OscConfig+0x330>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a6d      	ldr	r2, [pc, #436]	; (8002f44 <HAL_RCC_OscConfig+0x330>)
 8002d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e00b      	b.n	8002db0 <HAL_RCC_OscConfig+0x19c>
 8002d98:	4b6a      	ldr	r3, [pc, #424]	; (8002f44 <HAL_RCC_OscConfig+0x330>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a69      	ldr	r2, [pc, #420]	; (8002f44 <HAL_RCC_OscConfig+0x330>)
 8002d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	4b67      	ldr	r3, [pc, #412]	; (8002f44 <HAL_RCC_OscConfig+0x330>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a66      	ldr	r2, [pc, #408]	; (8002f44 <HAL_RCC_OscConfig+0x330>)
 8002daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dae:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002db0:	4b64      	ldr	r3, [pc, #400]	; (8002f44 <HAL_RCC_OscConfig+0x330>)
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	f023 020f 	bic.w	r2, r3, #15
 8002db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	495f      	ldr	r1, [pc, #380]	; (8002f44 <HAL_RCC_OscConfig+0x330>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d059      	beq.n	8002e8e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dda:	f7fe fcfd 	bl	80017d8 <HAL_GetTick>
 8002dde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	e00a      	b.n	8002dfa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de4:	f7fe fcf8 	bl	80017d8 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b64      	cmp	r3, #100	; 0x64
 8002df2:	d902      	bls.n	8002dfa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	f000 bf43 	b.w	8003c80 <HAL_RCC_OscConfig+0x106c>
 8002dfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dfe:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002e0e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	095b      	lsrs	r3, r3, #5
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d102      	bne.n	8002e2c <HAL_RCC_OscConfig+0x218>
 8002e26:	4b47      	ldr	r3, [pc, #284]	; (8002f44 <HAL_RCC_OscConfig+0x330>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	e015      	b.n	8002e58 <HAL_RCC_OscConfig+0x244>
 8002e2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e30:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e34:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002e38:	fa93 f3a3 	rbit	r3, r3
 8002e3c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002e40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e44:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002e48:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002e54:	4b3b      	ldr	r3, [pc, #236]	; (8002f44 <HAL_RCC_OscConfig+0x330>)
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e5c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002e60:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002e64:	fa92 f2a2 	rbit	r2, r2
 8002e68:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002e6c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002e70:	fab2 f282 	clz	r2, r2
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	f042 0220 	orr.w	r2, r2, #32
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	f002 021f 	and.w	r2, r2, #31
 8002e80:	2101      	movs	r1, #1
 8002e82:	fa01 f202 	lsl.w	r2, r1, r2
 8002e86:	4013      	ands	r3, r2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0ab      	beq.n	8002de4 <HAL_RCC_OscConfig+0x1d0>
 8002e8c:	e05d      	b.n	8002f4a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8e:	f7fe fca3 	bl	80017d8 <HAL_GetTick>
 8002e92:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e98:	f7fe fc9e 	bl	80017d8 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b64      	cmp	r3, #100	; 0x64
 8002ea6:	d902      	bls.n	8002eae <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	f000 bee9 	b.w	8003c80 <HAL_RCC_OscConfig+0x106c>
 8002eae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eb2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002eba:	fa93 f3a3 	rbit	r3, r3
 8002ebe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002ec2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec6:	fab3 f383 	clz	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d102      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x2cc>
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <HAL_RCC_OscConfig+0x330>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	e015      	b.n	8002f0c <HAL_RCC_OscConfig+0x2f8>
 8002ee0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ee4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002ef4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ef8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002efc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002f00:	fa93 f3a3 	rbit	r3, r3
 8002f04:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002f08:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <HAL_RCC_OscConfig+0x330>)
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f10:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002f14:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002f18:	fa92 f2a2 	rbit	r2, r2
 8002f1c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002f20:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002f24:	fab2 f282 	clz	r2, r2
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	f042 0220 	orr.w	r2, r2, #32
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	f002 021f 	and.w	r2, r2, #31
 8002f34:	2101      	movs	r1, #1
 8002f36:	fa01 f202 	lsl.w	r2, r1, r2
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1ab      	bne.n	8002e98 <HAL_RCC_OscConfig+0x284>
 8002f40:	e003      	b.n	8002f4a <HAL_RCC_OscConfig+0x336>
 8002f42:	bf00      	nop
 8002f44:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 817d 	beq.w	800325a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f60:	4ba6      	ldr	r3, [pc, #664]	; (80031fc <HAL_RCC_OscConfig+0x5e8>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 030c 	and.w	r3, r3, #12
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00b      	beq.n	8002f84 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f6c:	4ba3      	ldr	r3, [pc, #652]	; (80031fc <HAL_RCC_OscConfig+0x5e8>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 030c 	and.w	r3, r3, #12
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d172      	bne.n	800305e <HAL_RCC_OscConfig+0x44a>
 8002f78:	4ba0      	ldr	r3, [pc, #640]	; (80031fc <HAL_RCC_OscConfig+0x5e8>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d16c      	bne.n	800305e <HAL_RCC_OscConfig+0x44a>
 8002f84:	2302      	movs	r3, #2
 8002f86:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002f96:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9a:	fab3 f383 	clz	r3, r3
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	095b      	lsrs	r3, r3, #5
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d102      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x3a0>
 8002fae:	4b93      	ldr	r3, [pc, #588]	; (80031fc <HAL_RCC_OscConfig+0x5e8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	e013      	b.n	8002fdc <HAL_RCC_OscConfig+0x3c8>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fba:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002fbe:	fa93 f3a3 	rbit	r3, r3
 8002fc2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002fcc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fd0:	fa93 f3a3 	rbit	r3, r3
 8002fd4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002fd8:	4b88      	ldr	r3, [pc, #544]	; (80031fc <HAL_RCC_OscConfig+0x5e8>)
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	2202      	movs	r2, #2
 8002fde:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002fe2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002fe6:	fa92 f2a2 	rbit	r2, r2
 8002fea:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002fee:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002ff2:	fab2 f282 	clz	r2, r2
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	f042 0220 	orr.w	r2, r2, #32
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	f002 021f 	and.w	r2, r2, #31
 8003002:	2101      	movs	r1, #1
 8003004:	fa01 f202 	lsl.w	r2, r1, r2
 8003008:	4013      	ands	r3, r2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_RCC_OscConfig+0x410>
 800300e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003012:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d002      	beq.n	8003024 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	f000 be2e 	b.w	8003c80 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003024:	4b75      	ldr	r3, [pc, #468]	; (80031fc <HAL_RCC_OscConfig+0x5e8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800302c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003030:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	21f8      	movs	r1, #248	; 0xf8
 800303a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003042:	fa91 f1a1 	rbit	r1, r1
 8003046:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800304a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800304e:	fab1 f181 	clz	r1, r1
 8003052:	b2c9      	uxtb	r1, r1
 8003054:	408b      	lsls	r3, r1
 8003056:	4969      	ldr	r1, [pc, #420]	; (80031fc <HAL_RCC_OscConfig+0x5e8>)
 8003058:	4313      	orrs	r3, r2
 800305a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305c:	e0fd      	b.n	800325a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800305e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003062:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 8088 	beq.w	8003180 <HAL_RCC_OscConfig+0x56c>
 8003070:	2301      	movs	r3, #1
 8003072:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003082:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003086:	fab3 f383 	clz	r3, r3
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003090:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	461a      	mov	r2, r3
 8003098:	2301      	movs	r3, #1
 800309a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fe fb9c 	bl	80017d8 <HAL_GetTick>
 80030a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a4:	e00a      	b.n	80030bc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a6:	f7fe fb97 	bl	80017d8 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d902      	bls.n	80030bc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	f000 bde2 	b.w	8003c80 <HAL_RCC_OscConfig+0x106c>
 80030bc:	2302      	movs	r3, #2
 80030be:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80030ce:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d2:	fab3 f383 	clz	r3, r3
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	095b      	lsrs	r3, r3, #5
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d102      	bne.n	80030ec <HAL_RCC_OscConfig+0x4d8>
 80030e6:	4b45      	ldr	r3, [pc, #276]	; (80031fc <HAL_RCC_OscConfig+0x5e8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	e013      	b.n	8003114 <HAL_RCC_OscConfig+0x500>
 80030ec:	2302      	movs	r3, #2
 80030ee:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80030fe:	2302      	movs	r3, #2
 8003100:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003104:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003110:	4b3a      	ldr	r3, [pc, #232]	; (80031fc <HAL_RCC_OscConfig+0x5e8>)
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	2202      	movs	r2, #2
 8003116:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800311a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800311e:	fa92 f2a2 	rbit	r2, r2
 8003122:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003126:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800312a:	fab2 f282 	clz	r2, r2
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	f042 0220 	orr.w	r2, r2, #32
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	f002 021f 	and.w	r2, r2, #31
 800313a:	2101      	movs	r1, #1
 800313c:	fa01 f202 	lsl.w	r2, r1, r2
 8003140:	4013      	ands	r3, r2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0af      	beq.n	80030a6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003146:	4b2d      	ldr	r3, [pc, #180]	; (80031fc <HAL_RCC_OscConfig+0x5e8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800314e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003152:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	21f8      	movs	r1, #248	; 0xf8
 800315c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003160:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003164:	fa91 f1a1 	rbit	r1, r1
 8003168:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800316c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003170:	fab1 f181 	clz	r1, r1
 8003174:	b2c9      	uxtb	r1, r1
 8003176:	408b      	lsls	r3, r1
 8003178:	4920      	ldr	r1, [pc, #128]	; (80031fc <HAL_RCC_OscConfig+0x5e8>)
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]
 800317e:	e06c      	b.n	800325a <HAL_RCC_OscConfig+0x646>
 8003180:	2301      	movs	r3, #1
 8003182:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003186:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800318a:	fa93 f3a3 	rbit	r3, r3
 800318e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003192:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003196:	fab3 f383 	clz	r3, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	461a      	mov	r2, r3
 80031a8:	2300      	movs	r3, #0
 80031aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fe fb14 	bl	80017d8 <HAL_GetTick>
 80031b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b4:	e00a      	b.n	80031cc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b6:	f7fe fb0f 	bl	80017d8 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d902      	bls.n	80031cc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	f000 bd5a 	b.w	8003c80 <HAL_RCC_OscConfig+0x106c>
 80031cc:	2302      	movs	r3, #2
 80031ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80031d6:	fa93 f3a3 	rbit	r3, r3
 80031da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80031de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e2:	fab3 f383 	clz	r3, r3
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	f043 0301 	orr.w	r3, r3, #1
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d104      	bne.n	8003200 <HAL_RCC_OscConfig+0x5ec>
 80031f6:	4b01      	ldr	r3, [pc, #4]	; (80031fc <HAL_RCC_OscConfig+0x5e8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	e015      	b.n	8003228 <HAL_RCC_OscConfig+0x614>
 80031fc:	40021000 	.word	0x40021000
 8003200:	2302      	movs	r3, #2
 8003202:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003206:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800320a:	fa93 f3a3 	rbit	r3, r3
 800320e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003212:	2302      	movs	r3, #2
 8003214:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003218:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800321c:	fa93 f3a3 	rbit	r3, r3
 8003220:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003224:	4bc8      	ldr	r3, [pc, #800]	; (8003548 <HAL_RCC_OscConfig+0x934>)
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	2202      	movs	r2, #2
 800322a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800322e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003232:	fa92 f2a2 	rbit	r2, r2
 8003236:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800323a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800323e:	fab2 f282 	clz	r2, r2
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	f042 0220 	orr.w	r2, r2, #32
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	f002 021f 	and.w	r2, r2, #31
 800324e:	2101      	movs	r1, #1
 8003250:	fa01 f202 	lsl.w	r2, r1, r2
 8003254:	4013      	ands	r3, r2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1ad      	bne.n	80031b6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800325a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 8110 	beq.w	8003490 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003274:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d079      	beq.n	8003374 <HAL_RCC_OscConfig+0x760>
 8003280:	2301      	movs	r3, #1
 8003282:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003292:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	4bab      	ldr	r3, [pc, #684]	; (800354c <HAL_RCC_OscConfig+0x938>)
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	461a      	mov	r2, r3
 80032a6:	2301      	movs	r3, #1
 80032a8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032aa:	f7fe fa95 	bl	80017d8 <HAL_GetTick>
 80032ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b2:	e00a      	b.n	80032ca <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b4:	f7fe fa90 	bl	80017d8 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d902      	bls.n	80032ca <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	f000 bcdb 	b.w	8003c80 <HAL_RCC_OscConfig+0x106c>
 80032ca:	2302      	movs	r3, #2
 80032cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80032d4:	fa93 f3a3 	rbit	r3, r3
 80032d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80032dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80032e4:	2202      	movs	r2, #2
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	fa93 f2a3 	rbit	r2, r3
 80032f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003304:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003308:	2202      	movs	r2, #2
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	fa93 f2a3 	rbit	r2, r3
 800331a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003322:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003324:	4b88      	ldr	r3, [pc, #544]	; (8003548 <HAL_RCC_OscConfig+0x934>)
 8003326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003330:	2102      	movs	r1, #2
 8003332:	6019      	str	r1, [r3, #0]
 8003334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003338:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	fa93 f1a3 	rbit	r1, r3
 8003342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003346:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800334a:	6019      	str	r1, [r3, #0]
  return result;
 800334c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003350:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	fab3 f383 	clz	r3, r3
 800335a:	b2db      	uxtb	r3, r3
 800335c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003360:	b2db      	uxtb	r3, r3
 8003362:	f003 031f 	and.w	r3, r3, #31
 8003366:	2101      	movs	r1, #1
 8003368:	fa01 f303 	lsl.w	r3, r1, r3
 800336c:	4013      	ands	r3, r2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0a0      	beq.n	80032b4 <HAL_RCC_OscConfig+0x6a0>
 8003372:	e08d      	b.n	8003490 <HAL_RCC_OscConfig+0x87c>
 8003374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003378:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800337c:	2201      	movs	r2, #1
 800337e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003384:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	fa93 f2a3 	rbit	r2, r3
 800338e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003392:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003396:	601a      	str	r2, [r3, #0]
  return result;
 8003398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80033a0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033a2:	fab3 f383 	clz	r3, r3
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	461a      	mov	r2, r3
 80033aa:	4b68      	ldr	r3, [pc, #416]	; (800354c <HAL_RCC_OscConfig+0x938>)
 80033ac:	4413      	add	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	461a      	mov	r2, r3
 80033b2:	2300      	movs	r3, #0
 80033b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b6:	f7fe fa0f 	bl	80017d8 <HAL_GetTick>
 80033ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033c0:	f7fe fa0a 	bl	80017d8 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d902      	bls.n	80033d6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	f000 bc55 	b.w	8003c80 <HAL_RCC_OscConfig+0x106c>
 80033d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033da:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80033de:	2202      	movs	r2, #2
 80033e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	fa93 f2a3 	rbit	r2, r3
 80033f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003402:	2202      	movs	r2, #2
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	fa93 f2a3 	rbit	r2, r3
 8003414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003418:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003422:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003426:	2202      	movs	r2, #2
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	fa93 f2a3 	rbit	r2, r3
 8003438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003440:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003442:	4b41      	ldr	r3, [pc, #260]	; (8003548 <HAL_RCC_OscConfig+0x934>)
 8003444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800344e:	2102      	movs	r1, #2
 8003450:	6019      	str	r1, [r3, #0]
 8003452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003456:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	fa93 f1a3 	rbit	r1, r3
 8003460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003464:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003468:	6019      	str	r1, [r3, #0]
  return result;
 800346a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	fab3 f383 	clz	r3, r3
 8003478:	b2db      	uxtb	r3, r3
 800347a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	2101      	movs	r1, #1
 8003486:	fa01 f303 	lsl.w	r3, r1, r3
 800348a:	4013      	ands	r3, r2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d197      	bne.n	80033c0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003494:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 81a1 	beq.w	80037e8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034a6:	2300      	movs	r3, #0
 80034a8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ac:	4b26      	ldr	r3, [pc, #152]	; (8003548 <HAL_RCC_OscConfig+0x934>)
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d116      	bne.n	80034e6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b8:	4b23      	ldr	r3, [pc, #140]	; (8003548 <HAL_RCC_OscConfig+0x934>)
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	4a22      	ldr	r2, [pc, #136]	; (8003548 <HAL_RCC_OscConfig+0x934>)
 80034be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c2:	61d3      	str	r3, [r2, #28]
 80034c4:	4b20      	ldr	r3, [pc, #128]	; (8003548 <HAL_RCC_OscConfig+0x934>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80034cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034da:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80034de:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80034e0:	2301      	movs	r3, #1
 80034e2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e6:	4b1a      	ldr	r3, [pc, #104]	; (8003550 <HAL_RCC_OscConfig+0x93c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d11a      	bne.n	8003528 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034f2:	4b17      	ldr	r3, [pc, #92]	; (8003550 <HAL_RCC_OscConfig+0x93c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a16      	ldr	r2, [pc, #88]	; (8003550 <HAL_RCC_OscConfig+0x93c>)
 80034f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034fe:	f7fe f96b 	bl	80017d8 <HAL_GetTick>
 8003502:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003506:	e009      	b.n	800351c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003508:	f7fe f966 	bl	80017d8 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b64      	cmp	r3, #100	; 0x64
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e3b1      	b.n	8003c80 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351c:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <HAL_RCC_OscConfig+0x93c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0ef      	beq.n	8003508 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800352c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d10d      	bne.n	8003554 <HAL_RCC_OscConfig+0x940>
 8003538:	4b03      	ldr	r3, [pc, #12]	; (8003548 <HAL_RCC_OscConfig+0x934>)
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	4a02      	ldr	r2, [pc, #8]	; (8003548 <HAL_RCC_OscConfig+0x934>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6213      	str	r3, [r2, #32]
 8003544:	e03c      	b.n	80035c0 <HAL_RCC_OscConfig+0x9ac>
 8003546:	bf00      	nop
 8003548:	40021000 	.word	0x40021000
 800354c:	10908120 	.word	0x10908120
 8003550:	40007000 	.word	0x40007000
 8003554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003558:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10c      	bne.n	800357e <HAL_RCC_OscConfig+0x96a>
 8003564:	4bc1      	ldr	r3, [pc, #772]	; (800386c <HAL_RCC_OscConfig+0xc58>)
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	4ac0      	ldr	r2, [pc, #768]	; (800386c <HAL_RCC_OscConfig+0xc58>)
 800356a:	f023 0301 	bic.w	r3, r3, #1
 800356e:	6213      	str	r3, [r2, #32]
 8003570:	4bbe      	ldr	r3, [pc, #760]	; (800386c <HAL_RCC_OscConfig+0xc58>)
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	4abd      	ldr	r2, [pc, #756]	; (800386c <HAL_RCC_OscConfig+0xc58>)
 8003576:	f023 0304 	bic.w	r3, r3, #4
 800357a:	6213      	str	r3, [r2, #32]
 800357c:	e020      	b.n	80035c0 <HAL_RCC_OscConfig+0x9ac>
 800357e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003582:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	2b05      	cmp	r3, #5
 800358c:	d10c      	bne.n	80035a8 <HAL_RCC_OscConfig+0x994>
 800358e:	4bb7      	ldr	r3, [pc, #732]	; (800386c <HAL_RCC_OscConfig+0xc58>)
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	4ab6      	ldr	r2, [pc, #728]	; (800386c <HAL_RCC_OscConfig+0xc58>)
 8003594:	f043 0304 	orr.w	r3, r3, #4
 8003598:	6213      	str	r3, [r2, #32]
 800359a:	4bb4      	ldr	r3, [pc, #720]	; (800386c <HAL_RCC_OscConfig+0xc58>)
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	4ab3      	ldr	r2, [pc, #716]	; (800386c <HAL_RCC_OscConfig+0xc58>)
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	6213      	str	r3, [r2, #32]
 80035a6:	e00b      	b.n	80035c0 <HAL_RCC_OscConfig+0x9ac>
 80035a8:	4bb0      	ldr	r3, [pc, #704]	; (800386c <HAL_RCC_OscConfig+0xc58>)
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	4aaf      	ldr	r2, [pc, #700]	; (800386c <HAL_RCC_OscConfig+0xc58>)
 80035ae:	f023 0301 	bic.w	r3, r3, #1
 80035b2:	6213      	str	r3, [r2, #32]
 80035b4:	4bad      	ldr	r3, [pc, #692]	; (800386c <HAL_RCC_OscConfig+0xc58>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	4aac      	ldr	r2, [pc, #688]	; (800386c <HAL_RCC_OscConfig+0xc58>)
 80035ba:	f023 0304 	bic.w	r3, r3, #4
 80035be:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 8081 	beq.w	80036d4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d2:	f7fe f901 	bl	80017d8 <HAL_GetTick>
 80035d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035da:	e00b      	b.n	80035f4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035dc:	f7fe f8fc 	bl	80017d8 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e345      	b.n	8003c80 <HAL_RCC_OscConfig+0x106c>
 80035f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80035fc:	2202      	movs	r2, #2
 80035fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003604:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	fa93 f2a3 	rbit	r2, r3
 800360e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003612:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003620:	2202      	movs	r2, #2
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003628:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	fa93 f2a3 	rbit	r2, r3
 8003632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003636:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800363a:	601a      	str	r2, [r3, #0]
  return result;
 800363c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003640:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003644:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003646:	fab3 f383 	clz	r3, r3
 800364a:	b2db      	uxtb	r3, r3
 800364c:	095b      	lsrs	r3, r3, #5
 800364e:	b2db      	uxtb	r3, r3
 8003650:	f043 0302 	orr.w	r3, r3, #2
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d102      	bne.n	8003660 <HAL_RCC_OscConfig+0xa4c>
 800365a:	4b84      	ldr	r3, [pc, #528]	; (800386c <HAL_RCC_OscConfig+0xc58>)
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	e013      	b.n	8003688 <HAL_RCC_OscConfig+0xa74>
 8003660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003664:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003668:	2202      	movs	r2, #2
 800366a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003670:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	fa93 f2a3 	rbit	r2, r3
 800367a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	4b79      	ldr	r3, [pc, #484]	; (800386c <HAL_RCC_OscConfig+0xc58>)
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800368c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003690:	2102      	movs	r1, #2
 8003692:	6011      	str	r1, [r2, #0]
 8003694:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003698:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	fa92 f1a2 	rbit	r1, r2
 80036a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036a6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80036aa:	6011      	str	r1, [r2, #0]
  return result;
 80036ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036b0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80036b4:	6812      	ldr	r2, [r2, #0]
 80036b6:	fab2 f282 	clz	r2, r2
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036c0:	b2d2      	uxtb	r2, r2
 80036c2:	f002 021f 	and.w	r2, r2, #31
 80036c6:	2101      	movs	r1, #1
 80036c8:	fa01 f202 	lsl.w	r2, r1, r2
 80036cc:	4013      	ands	r3, r2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d084      	beq.n	80035dc <HAL_RCC_OscConfig+0x9c8>
 80036d2:	e07f      	b.n	80037d4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d4:	f7fe f880 	bl	80017d8 <HAL_GetTick>
 80036d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036dc:	e00b      	b.n	80036f6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036de:	f7fe f87b 	bl	80017d8 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e2c4      	b.n	8003c80 <HAL_RCC_OscConfig+0x106c>
 80036f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80036fe:	2202      	movs	r2, #2
 8003700:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003706:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	fa93 f2a3 	rbit	r2, r3
 8003710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003714:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800371e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003722:	2202      	movs	r2, #2
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800372a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	fa93 f2a3 	rbit	r2, r3
 8003734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003738:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800373c:	601a      	str	r2, [r3, #0]
  return result;
 800373e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003742:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003746:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003748:	fab3 f383 	clz	r3, r3
 800374c:	b2db      	uxtb	r3, r3
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	b2db      	uxtb	r3, r3
 8003752:	f043 0302 	orr.w	r3, r3, #2
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d102      	bne.n	8003762 <HAL_RCC_OscConfig+0xb4e>
 800375c:	4b43      	ldr	r3, [pc, #268]	; (800386c <HAL_RCC_OscConfig+0xc58>)
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	e013      	b.n	800378a <HAL_RCC_OscConfig+0xb76>
 8003762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003766:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800376a:	2202      	movs	r2, #2
 800376c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003772:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	fa93 f2a3 	rbit	r2, r3
 800377c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003780:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	4b39      	ldr	r3, [pc, #228]	; (800386c <HAL_RCC_OscConfig+0xc58>)
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800378e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003792:	2102      	movs	r1, #2
 8003794:	6011      	str	r1, [r2, #0]
 8003796:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800379a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	fa92 f1a2 	rbit	r1, r2
 80037a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037a8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80037ac:	6011      	str	r1, [r2, #0]
  return result;
 80037ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037b2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	fab2 f282 	clz	r2, r2
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	f002 021f 	and.w	r2, r2, #31
 80037c8:	2101      	movs	r1, #1
 80037ca:	fa01 f202 	lsl.w	r2, r1, r2
 80037ce:	4013      	ands	r3, r2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d184      	bne.n	80036de <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037d4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d105      	bne.n	80037e8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037dc:	4b23      	ldr	r3, [pc, #140]	; (800386c <HAL_RCC_OscConfig+0xc58>)
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	4a22      	ldr	r2, [pc, #136]	; (800386c <HAL_RCC_OscConfig+0xc58>)
 80037e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 8242 	beq.w	8003c7e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037fa:	4b1c      	ldr	r3, [pc, #112]	; (800386c <HAL_RCC_OscConfig+0xc58>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	2b08      	cmp	r3, #8
 8003804:	f000 8213 	beq.w	8003c2e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	2b02      	cmp	r3, #2
 8003816:	f040 8162 	bne.w	8003ade <HAL_RCC_OscConfig+0xeca>
 800381a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800381e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003822:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	fa93 f2a3 	rbit	r2, r3
 8003836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800383a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800383e:	601a      	str	r2, [r3, #0]
  return result;
 8003840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003844:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003848:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384a:	fab3 f383 	clz	r3, r3
 800384e:	b2db      	uxtb	r3, r3
 8003850:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003854:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	461a      	mov	r2, r3
 800385c:	2300      	movs	r3, #0
 800385e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003860:	f7fd ffba 	bl	80017d8 <HAL_GetTick>
 8003864:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003868:	e00c      	b.n	8003884 <HAL_RCC_OscConfig+0xc70>
 800386a:	bf00      	nop
 800386c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003870:	f7fd ffb2 	bl	80017d8 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e1fd      	b.n	8003c80 <HAL_RCC_OscConfig+0x106c>
 8003884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003888:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800388c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003890:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003896:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	fa93 f2a3 	rbit	r2, r3
 80038a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80038a8:	601a      	str	r2, [r3, #0]
  return result;
 80038aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ae:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80038b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b4:	fab3 f383 	clz	r3, r3
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d102      	bne.n	80038ce <HAL_RCC_OscConfig+0xcba>
 80038c8:	4bb0      	ldr	r3, [pc, #704]	; (8003b8c <HAL_RCC_OscConfig+0xf78>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	e027      	b.n	800391e <HAL_RCC_OscConfig+0xd0a>
 80038ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80038d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	fa93 f2a3 	rbit	r2, r3
 80038ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ee:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80038fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003906:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	fa93 f2a3 	rbit	r2, r3
 8003910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003914:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	4b9c      	ldr	r3, [pc, #624]	; (8003b8c <HAL_RCC_OscConfig+0xf78>)
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003922:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003926:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800392a:	6011      	str	r1, [r2, #0]
 800392c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003930:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003934:	6812      	ldr	r2, [r2, #0]
 8003936:	fa92 f1a2 	rbit	r1, r2
 800393a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800393e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003942:	6011      	str	r1, [r2, #0]
  return result;
 8003944:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003948:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800394c:	6812      	ldr	r2, [r2, #0]
 800394e:	fab2 f282 	clz	r2, r2
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	f042 0220 	orr.w	r2, r2, #32
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	f002 021f 	and.w	r2, r2, #31
 800395e:	2101      	movs	r1, #1
 8003960:	fa01 f202 	lsl.w	r2, r1, r2
 8003964:	4013      	ands	r3, r2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d182      	bne.n	8003870 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800396a:	4b88      	ldr	r3, [pc, #544]	; (8003b8c <HAL_RCC_OscConfig+0xf78>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003976:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800397e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003982:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	430b      	orrs	r3, r1
 800398c:	497f      	ldr	r1, [pc, #508]	; (8003b8c <HAL_RCC_OscConfig+0xf78>)
 800398e:	4313      	orrs	r3, r2
 8003990:	604b      	str	r3, [r1, #4]
 8003992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003996:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800399a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800399e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	fa93 f2a3 	rbit	r2, r3
 80039ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80039b6:	601a      	str	r2, [r3, #0]
  return result;
 80039b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039bc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80039c0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039c2:	fab3 f383 	clz	r3, r3
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	461a      	mov	r2, r3
 80039d4:	2301      	movs	r3, #1
 80039d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d8:	f7fd fefe 	bl	80017d8 <HAL_GetTick>
 80039dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039e0:	e009      	b.n	80039f6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e2:	f7fd fef9 	bl	80017d8 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e144      	b.n	8003c80 <HAL_RCC_OscConfig+0x106c>
 80039f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039fa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80039fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a08:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	fa93 f2a3 	rbit	r2, r3
 8003a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a16:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003a1a:	601a      	str	r2, [r3, #0]
  return result;
 8003a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a20:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003a24:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a26:	fab3 f383 	clz	r3, r3
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	095b      	lsrs	r3, r3, #5
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d102      	bne.n	8003a40 <HAL_RCC_OscConfig+0xe2c>
 8003a3a:	4b54      	ldr	r3, [pc, #336]	; (8003b8c <HAL_RCC_OscConfig+0xf78>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	e027      	b.n	8003a90 <HAL_RCC_OscConfig+0xe7c>
 8003a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a44:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003a48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a52:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	fa93 f2a3 	rbit	r2, r3
 8003a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a60:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a6a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003a6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a78:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	fa93 f2a3 	rbit	r2, r3
 8003a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a86:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	4b3f      	ldr	r3, [pc, #252]	; (8003b8c <HAL_RCC_OscConfig+0xf78>)
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a94:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003a98:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a9c:	6011      	str	r1, [r2, #0]
 8003a9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003aa2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	fa92 f1a2 	rbit	r1, r2
 8003aac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ab0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003ab4:	6011      	str	r1, [r2, #0]
  return result;
 8003ab6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003aba:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	fab2 f282 	clz	r2, r2
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	f042 0220 	orr.w	r2, r2, #32
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	f002 021f 	and.w	r2, r2, #31
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d082      	beq.n	80039e2 <HAL_RCC_OscConfig+0xdce>
 8003adc:	e0cf      	b.n	8003c7e <HAL_RCC_OscConfig+0x106a>
 8003ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003ae6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003aea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	fa93 f2a3 	rbit	r2, r3
 8003afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003afe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003b02:	601a      	str	r2, [r3, #0]
  return result;
 8003b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b08:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003b0c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b0e:	fab3 f383 	clz	r3, r3
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	461a      	mov	r2, r3
 8003b20:	2300      	movs	r3, #0
 8003b22:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b24:	f7fd fe58 	bl	80017d8 <HAL_GetTick>
 8003b28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b2c:	e009      	b.n	8003b42 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b2e:	f7fd fe53 	bl	80017d8 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e09e      	b.n	8003c80 <HAL_RCC_OscConfig+0x106c>
 8003b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b46:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003b4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b54:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	fa93 f2a3 	rbit	r2, r3
 8003b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b62:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003b66:	601a      	str	r2, [r3, #0]
  return result;
 8003b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003b70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b72:	fab3 f383 	clz	r3, r3
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	f043 0301 	orr.w	r3, r3, #1
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d104      	bne.n	8003b90 <HAL_RCC_OscConfig+0xf7c>
 8003b86:	4b01      	ldr	r3, [pc, #4]	; (8003b8c <HAL_RCC_OscConfig+0xf78>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	e029      	b.n	8003be0 <HAL_RCC_OscConfig+0xfcc>
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b94:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003b98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	fa93 f2a3 	rbit	r2, r3
 8003bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bba:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003bbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	fa93 f2a3 	rbit	r2, r3
 8003bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	4b2b      	ldr	r3, [pc, #172]	; (8003c8c <HAL_RCC_OscConfig+0x1078>)
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003be4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003be8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003bec:	6011      	str	r1, [r2, #0]
 8003bee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bf2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003bf6:	6812      	ldr	r2, [r2, #0]
 8003bf8:	fa92 f1a2 	rbit	r1, r2
 8003bfc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c00:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003c04:	6011      	str	r1, [r2, #0]
  return result;
 8003c06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c0a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	fab2 f282 	clz	r2, r2
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	f042 0220 	orr.w	r2, r2, #32
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	f002 021f 	and.w	r2, r2, #31
 8003c20:	2101      	movs	r1, #1
 8003c22:	fa01 f202 	lsl.w	r2, r1, r2
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d180      	bne.n	8003b2e <HAL_RCC_OscConfig+0xf1a>
 8003c2c:	e027      	b.n	8003c7e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e01e      	b.n	8003c80 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c42:	4b12      	ldr	r3, [pc, #72]	; (8003c8c <HAL_RCC_OscConfig+0x1078>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c4a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003c4e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d10b      	bne.n	8003c7a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003c62:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003c66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d001      	beq.n	8003c7e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40021000 	.word	0x40021000

08003c90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b09e      	sub	sp, #120	; 0x78
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e162      	b.n	8003f6e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca8:	4b90      	ldr	r3, [pc, #576]	; (8003eec <HAL_RCC_ClockConfig+0x25c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d910      	bls.n	8003cd8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb6:	4b8d      	ldr	r3, [pc, #564]	; (8003eec <HAL_RCC_ClockConfig+0x25c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f023 0207 	bic.w	r2, r3, #7
 8003cbe:	498b      	ldr	r1, [pc, #556]	; (8003eec <HAL_RCC_ClockConfig+0x25c>)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc6:	4b89      	ldr	r3, [pc, #548]	; (8003eec <HAL_RCC_ClockConfig+0x25c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e14a      	b.n	8003f6e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce4:	4b82      	ldr	r3, [pc, #520]	; (8003ef0 <HAL_RCC_ClockConfig+0x260>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	497f      	ldr	r1, [pc, #508]	; (8003ef0 <HAL_RCC_ClockConfig+0x260>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 80dc 	beq.w	8003ebc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d13c      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xf6>
 8003d0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d10:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d14:	fa93 f3a3 	rbit	r3, r3
 8003d18:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1c:	fab3 f383 	clz	r3, r3
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d102      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xa6>
 8003d30:	4b6f      	ldr	r3, [pc, #444]	; (8003ef0 <HAL_RCC_ClockConfig+0x260>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	e00f      	b.n	8003d56 <HAL_RCC_ClockConfig+0xc6>
 8003d36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d3e:	fa93 f3a3 	rbit	r3, r3
 8003d42:	667b      	str	r3, [r7, #100]	; 0x64
 8003d44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d48:	663b      	str	r3, [r7, #96]	; 0x60
 8003d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d4c:	fa93 f3a3 	rbit	r3, r3
 8003d50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d52:	4b67      	ldr	r3, [pc, #412]	; (8003ef0 <HAL_RCC_ClockConfig+0x260>)
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d5a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d5e:	fa92 f2a2 	rbit	r2, r2
 8003d62:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003d64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d66:	fab2 f282 	clz	r2, r2
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	f042 0220 	orr.w	r2, r2, #32
 8003d70:	b2d2      	uxtb	r2, r2
 8003d72:	f002 021f 	and.w	r2, r2, #31
 8003d76:	2101      	movs	r1, #1
 8003d78:	fa01 f202 	lsl.w	r2, r1, r2
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d17b      	bne.n	8003e7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e0f3      	b.n	8003f6e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d13c      	bne.n	8003e08 <HAL_RCC_ClockConfig+0x178>
 8003d8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d96:	fa93 f3a3 	rbit	r3, r3
 8003d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d9e:	fab3 f383 	clz	r3, r3
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d102      	bne.n	8003db8 <HAL_RCC_ClockConfig+0x128>
 8003db2:	4b4f      	ldr	r3, [pc, #316]	; (8003ef0 <HAL_RCC_ClockConfig+0x260>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	e00f      	b.n	8003dd8 <HAL_RCC_ClockConfig+0x148>
 8003db8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dbc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dc0:	fa93 f3a3 	rbit	r3, r3
 8003dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8003dc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dca:	643b      	str	r3, [r7, #64]	; 0x40
 8003dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dce:	fa93 f3a3 	rbit	r3, r3
 8003dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dd4:	4b46      	ldr	r3, [pc, #280]	; (8003ef0 <HAL_RCC_ClockConfig+0x260>)
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ddc:	63ba      	str	r2, [r7, #56]	; 0x38
 8003dde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003de0:	fa92 f2a2 	rbit	r2, r2
 8003de4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003de6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003de8:	fab2 f282 	clz	r2, r2
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	f042 0220 	orr.w	r2, r2, #32
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	f002 021f 	and.w	r2, r2, #31
 8003df8:	2101      	movs	r1, #1
 8003dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d13a      	bne.n	8003e7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0b2      	b.n	8003f6e <HAL_RCC_ClockConfig+0x2de>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0e:	fa93 f3a3 	rbit	r3, r3
 8003e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e16:	fab3 f383 	clz	r3, r3
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	095b      	lsrs	r3, r3, #5
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d102      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x1a0>
 8003e2a:	4b31      	ldr	r3, [pc, #196]	; (8003ef0 <HAL_RCC_ClockConfig+0x260>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	e00d      	b.n	8003e4c <HAL_RCC_ClockConfig+0x1bc>
 8003e30:	2302      	movs	r3, #2
 8003e32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e36:	fa93 f3a3 	rbit	r3, r3
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	623b      	str	r3, [r7, #32]
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	fa93 f3a3 	rbit	r3, r3
 8003e46:	61fb      	str	r3, [r7, #28]
 8003e48:	4b29      	ldr	r3, [pc, #164]	; (8003ef0 <HAL_RCC_ClockConfig+0x260>)
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	61ba      	str	r2, [r7, #24]
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	fa92 f2a2 	rbit	r2, r2
 8003e56:	617a      	str	r2, [r7, #20]
  return result;
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	fab2 f282 	clz	r2, r2
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	f042 0220 	orr.w	r2, r2, #32
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	f002 021f 	and.w	r2, r2, #31
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e70:	4013      	ands	r3, r2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e079      	b.n	8003f6e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e7a:	4b1d      	ldr	r3, [pc, #116]	; (8003ef0 <HAL_RCC_ClockConfig+0x260>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f023 0203 	bic.w	r2, r3, #3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	491a      	ldr	r1, [pc, #104]	; (8003ef0 <HAL_RCC_ClockConfig+0x260>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e8c:	f7fd fca4 	bl	80017d8 <HAL_GetTick>
 8003e90:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e92:	e00a      	b.n	8003eaa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e94:	f7fd fca0 	bl	80017d8 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e061      	b.n	8003f6e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eaa:	4b11      	ldr	r3, [pc, #68]	; (8003ef0 <HAL_RCC_ClockConfig+0x260>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f003 020c 	and.w	r2, r3, #12
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d1eb      	bne.n	8003e94 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <HAL_RCC_ClockConfig+0x25c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d214      	bcs.n	8003ef4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b08      	ldr	r3, [pc, #32]	; (8003eec <HAL_RCC_ClockConfig+0x25c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f023 0207 	bic.w	r2, r3, #7
 8003ed2:	4906      	ldr	r1, [pc, #24]	; (8003eec <HAL_RCC_ClockConfig+0x25c>)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eda:	4b04      	ldr	r3, [pc, #16]	; (8003eec <HAL_RCC_ClockConfig+0x25c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d005      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e040      	b.n	8003f6e <HAL_RCC_ClockConfig+0x2de>
 8003eec:	40022000 	.word	0x40022000
 8003ef0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f00:	4b1d      	ldr	r3, [pc, #116]	; (8003f78 <HAL_RCC_ClockConfig+0x2e8>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	491a      	ldr	r1, [pc, #104]	; (8003f78 <HAL_RCC_ClockConfig+0x2e8>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d009      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f1e:	4b16      	ldr	r3, [pc, #88]	; (8003f78 <HAL_RCC_ClockConfig+0x2e8>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	4912      	ldr	r1, [pc, #72]	; (8003f78 <HAL_RCC_ClockConfig+0x2e8>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003f32:	f000 f829 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 8003f36:	4601      	mov	r1, r0
 8003f38:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <HAL_RCC_ClockConfig+0x2e8>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f40:	22f0      	movs	r2, #240	; 0xf0
 8003f42:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	fa92 f2a2 	rbit	r2, r2
 8003f4a:	60fa      	str	r2, [r7, #12]
  return result;
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	fab2 f282 	clz	r2, r2
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	40d3      	lsrs	r3, r2
 8003f56:	4a09      	ldr	r2, [pc, #36]	; (8003f7c <HAL_RCC_ClockConfig+0x2ec>)
 8003f58:	5cd3      	ldrb	r3, [r2, r3]
 8003f5a:	fa21 f303 	lsr.w	r3, r1, r3
 8003f5e:	4a08      	ldr	r2, [pc, #32]	; (8003f80 <HAL_RCC_ClockConfig+0x2f0>)
 8003f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003f62:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <HAL_RCC_ClockConfig+0x2f4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fd fbf2 	bl	8001750 <HAL_InitTick>
  
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3778      	adds	r7, #120	; 0x78
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	08007a40 	.word	0x08007a40
 8003f80:	20000008 	.word	0x20000008
 8003f84:	2000000c 	.word	0x2000000c

08003f88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b08b      	sub	sp, #44	; 0x2c
 8003f8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61fb      	str	r3, [r7, #28]
 8003f92:	2300      	movs	r3, #0
 8003f94:	61bb      	str	r3, [r7, #24]
 8003f96:	2300      	movs	r3, #0
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003fa2:	4b29      	ldr	r3, [pc, #164]	; (8004048 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f003 030c 	and.w	r3, r3, #12
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d002      	beq.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x30>
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d003      	beq.n	8003fbe <HAL_RCC_GetSysClockFreq+0x36>
 8003fb6:	e03c      	b.n	8004032 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fb8:	4b24      	ldr	r3, [pc, #144]	; (800404c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003fba:	623b      	str	r3, [r7, #32]
      break;
 8003fbc:	e03c      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003fc4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003fc8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	fa92 f2a2 	rbit	r2, r2
 8003fd0:	607a      	str	r2, [r7, #4]
  return result;
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	fab2 f282 	clz	r2, r2
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	40d3      	lsrs	r3, r2
 8003fdc:	4a1c      	ldr	r2, [pc, #112]	; (8004050 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003fde:	5cd3      	ldrb	r3, [r2, r3]
 8003fe0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003fe2:	4b19      	ldr	r3, [pc, #100]	; (8004048 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	220f      	movs	r2, #15
 8003fec:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	fa92 f2a2 	rbit	r2, r2
 8003ff4:	60fa      	str	r2, [r7, #12]
  return result;
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	fab2 f282 	clz	r2, r2
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	40d3      	lsrs	r3, r2
 8004000:	4a14      	ldr	r2, [pc, #80]	; (8004054 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004002:	5cd3      	ldrb	r3, [r2, r3]
 8004004:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004010:	4a0e      	ldr	r2, [pc, #56]	; (800404c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	fbb2 f2f3 	udiv	r2, r2, r3
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	fb02 f303 	mul.w	r3, r2, r3
 800401e:	627b      	str	r3, [r7, #36]	; 0x24
 8004020:	e004      	b.n	800402c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	4a0c      	ldr	r2, [pc, #48]	; (8004058 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004026:	fb02 f303 	mul.w	r3, r2, r3
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	623b      	str	r3, [r7, #32]
      break;
 8004030:	e002      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004032:	4b06      	ldr	r3, [pc, #24]	; (800404c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004034:	623b      	str	r3, [r7, #32]
      break;
 8004036:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004038:	6a3b      	ldr	r3, [r7, #32]
}
 800403a:	4618      	mov	r0, r3
 800403c:	372c      	adds	r7, #44	; 0x2c
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40021000 	.word	0x40021000
 800404c:	007a1200 	.word	0x007a1200
 8004050:	08007a58 	.word	0x08007a58
 8004054:	08007a68 	.word	0x08007a68
 8004058:	003d0900 	.word	0x003d0900

0800405c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004060:	4b03      	ldr	r3, [pc, #12]	; (8004070 <HAL_RCC_GetHCLKFreq+0x14>)
 8004062:	681b      	ldr	r3, [r3, #0]
}
 8004064:	4618      	mov	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	20000008 	.word	0x20000008

08004074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800407a:	f7ff ffef 	bl	800405c <HAL_RCC_GetHCLKFreq>
 800407e:	4601      	mov	r1, r0
 8004080:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004088:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800408c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	fa92 f2a2 	rbit	r2, r2
 8004094:	603a      	str	r2, [r7, #0]
  return result;
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	fab2 f282 	clz	r2, r2
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	40d3      	lsrs	r3, r2
 80040a0:	4a04      	ldr	r2, [pc, #16]	; (80040b4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80040a2:	5cd3      	ldrb	r3, [r2, r3]
 80040a4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80040a8:	4618      	mov	r0, r3
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40021000 	.word	0x40021000
 80040b4:	08007a50 	.word	0x08007a50

080040b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80040be:	f7ff ffcd 	bl	800405c <HAL_RCC_GetHCLKFreq>
 80040c2:	4601      	mov	r1, r0
 80040c4:	4b0b      	ldr	r3, [pc, #44]	; (80040f4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80040cc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80040d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	fa92 f2a2 	rbit	r2, r2
 80040d8:	603a      	str	r2, [r7, #0]
  return result;
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	fab2 f282 	clz	r2, r2
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	40d3      	lsrs	r3, r2
 80040e4:	4a04      	ldr	r2, [pc, #16]	; (80040f8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80040e6:	5cd3      	ldrb	r3, [r2, r3]
 80040e8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80040ec:	4618      	mov	r0, r3
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40021000 	.word	0x40021000
 80040f8:	08007a50 	.word	0x08007a50

080040fc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b092      	sub	sp, #72	; 0x48
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800410c:	2300      	movs	r3, #0
 800410e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 80cd 	beq.w	80042ba <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004120:	4b86      	ldr	r3, [pc, #536]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10e      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800412c:	4b83      	ldr	r3, [pc, #524]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	4a82      	ldr	r2, [pc, #520]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004136:	61d3      	str	r3, [r2, #28]
 8004138:	4b80      	ldr	r3, [pc, #512]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004144:	2301      	movs	r3, #1
 8004146:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414a:	4b7d      	ldr	r3, [pc, #500]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004152:	2b00      	cmp	r3, #0
 8004154:	d118      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004156:	4b7a      	ldr	r3, [pc, #488]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a79      	ldr	r2, [pc, #484]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800415c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004160:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004162:	f7fd fb39 	bl	80017d8 <HAL_GetTick>
 8004166:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004168:	e008      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800416a:	f7fd fb35 	bl	80017d8 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b64      	cmp	r3, #100	; 0x64
 8004176:	d901      	bls.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e0db      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417c:	4b70      	ldr	r3, [pc, #448]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0f0      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004188:	4b6c      	ldr	r3, [pc, #432]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004190:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004194:	2b00      	cmp	r3, #0
 8004196:	d07d      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d076      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041a6:	4b65      	ldr	r3, [pc, #404]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041b4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	fa93 f3a3 	rbit	r3, r3
 80041bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80041be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041c0:	fab3 f383 	clz	r3, r3
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	461a      	mov	r2, r3
 80041c8:	4b5e      	ldr	r3, [pc, #376]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80041ca:	4413      	add	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	461a      	mov	r2, r3
 80041d0:	2301      	movs	r3, #1
 80041d2:	6013      	str	r3, [r2, #0]
 80041d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041dc:	fa93 f3a3 	rbit	r3, r3
 80041e0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80041e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041e4:	fab3 f383 	clz	r3, r3
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	461a      	mov	r2, r3
 80041ec:	4b55      	ldr	r3, [pc, #340]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80041ee:	4413      	add	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	461a      	mov	r2, r3
 80041f4:	2300      	movs	r3, #0
 80041f6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041f8:	4a50      	ldr	r2, [pc, #320]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041fc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d045      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004208:	f7fd fae6 	bl	80017d8 <HAL_GetTick>
 800420c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800420e:	e00a      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004210:	f7fd fae2 	bl	80017d8 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f241 3288 	movw	r2, #5000	; 0x1388
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e086      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004226:	2302      	movs	r3, #2
 8004228:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422c:	fa93 f3a3 	rbit	r3, r3
 8004230:	627b      	str	r3, [r7, #36]	; 0x24
 8004232:	2302      	movs	r3, #2
 8004234:	623b      	str	r3, [r7, #32]
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	fa93 f3a3 	rbit	r3, r3
 800423c:	61fb      	str	r3, [r7, #28]
  return result;
 800423e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004240:	fab3 f383 	clz	r3, r3
 8004244:	b2db      	uxtb	r3, r3
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	b2db      	uxtb	r3, r3
 800424a:	f043 0302 	orr.w	r3, r3, #2
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d102      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004254:	4b39      	ldr	r3, [pc, #228]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	e007      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800425a:	2302      	movs	r3, #2
 800425c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	fa93 f3a3 	rbit	r3, r3
 8004264:	617b      	str	r3, [r7, #20]
 8004266:	4b35      	ldr	r3, [pc, #212]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	2202      	movs	r2, #2
 800426c:	613a      	str	r2, [r7, #16]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	fa92 f2a2 	rbit	r2, r2
 8004274:	60fa      	str	r2, [r7, #12]
  return result;
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	fab2 f282 	clz	r2, r2
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	f002 021f 	and.w	r2, r2, #31
 8004288:	2101      	movs	r1, #1
 800428a:	fa01 f202 	lsl.w	r2, r1, r2
 800428e:	4013      	ands	r3, r2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0bd      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004294:	4b29      	ldr	r3, [pc, #164]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	4926      	ldr	r1, [pc, #152]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d105      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ae:	4b23      	ldr	r3, [pc, #140]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	4a22      	ldr	r2, [pc, #136]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d008      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042c6:	4b1d      	ldr	r3, [pc, #116]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	f023 0203 	bic.w	r2, r3, #3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	491a      	ldr	r1, [pc, #104]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d008      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042e4:	4b15      	ldr	r3, [pc, #84]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e8:	f023 0210 	bic.w	r2, r3, #16
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	4912      	ldr	r1, [pc, #72]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d008      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004302:	4b0e      	ldr	r3, [pc, #56]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	490b      	ldr	r1, [pc, #44]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004310:	4313      	orrs	r3, r2
 8004312:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004320:	4b06      	ldr	r3, [pc, #24]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004324:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	4903      	ldr	r1, [pc, #12]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800432e:	4313      	orrs	r3, r2
 8004330:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3748      	adds	r7, #72	; 0x48
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40021000 	.word	0x40021000
 8004340:	40007000 	.word	0x40007000
 8004344:	10908100 	.word	0x10908100

08004348 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e040      	b.n	80043dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fd f860 	bl	8001430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2224      	movs	r2, #36	; 0x24
 8004374:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0201 	bic.w	r2, r2, #1
 8004384:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f8b6 	bl	80044f8 <UART_SetConfig>
 800438c:	4603      	mov	r3, r0
 800438e:	2b01      	cmp	r3, #1
 8004390:	d101      	bne.n	8004396 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e022      	b.n	80043dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f9e0 	bl	8004764 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fa67 	bl	80048a8 <UART_CheckIdleState>
 80043da:	4603      	mov	r3, r0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08a      	sub	sp, #40	; 0x28
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	603b      	str	r3, [r7, #0]
 80043f0:	4613      	mov	r3, r2
 80043f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	d178      	bne.n	80044ee <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <HAL_UART_Transmit+0x24>
 8004402:	88fb      	ldrh	r3, [r7, #6]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e071      	b.n	80044f0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2221      	movs	r2, #33	; 0x21
 8004418:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800441a:	f7fd f9dd 	bl	80017d8 <HAL_GetTick>
 800441e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	88fa      	ldrh	r2, [r7, #6]
 8004424:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	88fa      	ldrh	r2, [r7, #6]
 800442c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004438:	d108      	bne.n	800444c <HAL_UART_Transmit+0x68>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d104      	bne.n	800444c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004442:	2300      	movs	r3, #0
 8004444:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	61bb      	str	r3, [r7, #24]
 800444a:	e003      	b.n	8004454 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004450:	2300      	movs	r3, #0
 8004452:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004454:	e030      	b.n	80044b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2200      	movs	r2, #0
 800445e:	2180      	movs	r1, #128	; 0x80
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 fac9 	bl	80049f8 <UART_WaitOnFlagUntilTimeout>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d004      	beq.n	8004476 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e03c      	b.n	80044f0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10b      	bne.n	8004494 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	881a      	ldrh	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004488:	b292      	uxth	r2, r2
 800448a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	3302      	adds	r3, #2
 8004490:	61bb      	str	r3, [r7, #24]
 8004492:	e008      	b.n	80044a6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	781a      	ldrb	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	b292      	uxth	r2, r2
 800449e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	3301      	adds	r3, #1
 80044a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1c8      	bne.n	8004456 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	2200      	movs	r2, #0
 80044cc:	2140      	movs	r1, #64	; 0x40
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 fa92 	bl	80049f8 <UART_WaitOnFlagUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d004      	beq.n	80044e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2220      	movs	r2, #32
 80044de:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e005      	b.n	80044f0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2220      	movs	r2, #32
 80044e8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80044ea:	2300      	movs	r3, #0
 80044ec:	e000      	b.n	80044f0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80044ee:	2302      	movs	r3, #2
  }
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3720      	adds	r7, #32
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004500:	2300      	movs	r3, #0
 8004502:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	4313      	orrs	r3, r2
 800451a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	4b8a      	ldr	r3, [pc, #552]	; (800474c <UART_SetConfig+0x254>)
 8004524:	4013      	ands	r3, r2
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6812      	ldr	r2, [r2, #0]
 800452a:	6979      	ldr	r1, [r7, #20]
 800452c:	430b      	orrs	r3, r1
 800452e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	430a      	orrs	r2, r1
 8004568:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a78      	ldr	r2, [pc, #480]	; (8004750 <UART_SetConfig+0x258>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d120      	bne.n	80045b6 <UART_SetConfig+0xbe>
 8004574:	4b77      	ldr	r3, [pc, #476]	; (8004754 <UART_SetConfig+0x25c>)
 8004576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004578:	f003 0303 	and.w	r3, r3, #3
 800457c:	2b03      	cmp	r3, #3
 800457e:	d817      	bhi.n	80045b0 <UART_SetConfig+0xb8>
 8004580:	a201      	add	r2, pc, #4	; (adr r2, 8004588 <UART_SetConfig+0x90>)
 8004582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004586:	bf00      	nop
 8004588:	08004599 	.word	0x08004599
 800458c:	080045a5 	.word	0x080045a5
 8004590:	080045ab 	.word	0x080045ab
 8004594:	0800459f 	.word	0x0800459f
 8004598:	2300      	movs	r3, #0
 800459a:	77fb      	strb	r3, [r7, #31]
 800459c:	e01d      	b.n	80045da <UART_SetConfig+0xe2>
 800459e:	2302      	movs	r3, #2
 80045a0:	77fb      	strb	r3, [r7, #31]
 80045a2:	e01a      	b.n	80045da <UART_SetConfig+0xe2>
 80045a4:	2304      	movs	r3, #4
 80045a6:	77fb      	strb	r3, [r7, #31]
 80045a8:	e017      	b.n	80045da <UART_SetConfig+0xe2>
 80045aa:	2308      	movs	r3, #8
 80045ac:	77fb      	strb	r3, [r7, #31]
 80045ae:	e014      	b.n	80045da <UART_SetConfig+0xe2>
 80045b0:	2310      	movs	r3, #16
 80045b2:	77fb      	strb	r3, [r7, #31]
 80045b4:	e011      	b.n	80045da <UART_SetConfig+0xe2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a67      	ldr	r2, [pc, #412]	; (8004758 <UART_SetConfig+0x260>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d102      	bne.n	80045c6 <UART_SetConfig+0xce>
 80045c0:	2300      	movs	r3, #0
 80045c2:	77fb      	strb	r3, [r7, #31]
 80045c4:	e009      	b.n	80045da <UART_SetConfig+0xe2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a64      	ldr	r2, [pc, #400]	; (800475c <UART_SetConfig+0x264>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d102      	bne.n	80045d6 <UART_SetConfig+0xde>
 80045d0:	2300      	movs	r3, #0
 80045d2:	77fb      	strb	r3, [r7, #31]
 80045d4:	e001      	b.n	80045da <UART_SetConfig+0xe2>
 80045d6:	2310      	movs	r3, #16
 80045d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045e2:	d15a      	bne.n	800469a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80045e4:	7ffb      	ldrb	r3, [r7, #31]
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	d827      	bhi.n	800463a <UART_SetConfig+0x142>
 80045ea:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <UART_SetConfig+0xf8>)
 80045ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f0:	08004615 	.word	0x08004615
 80045f4:	0800461d 	.word	0x0800461d
 80045f8:	08004625 	.word	0x08004625
 80045fc:	0800463b 	.word	0x0800463b
 8004600:	0800462b 	.word	0x0800462b
 8004604:	0800463b 	.word	0x0800463b
 8004608:	0800463b 	.word	0x0800463b
 800460c:	0800463b 	.word	0x0800463b
 8004610:	08004633 	.word	0x08004633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004614:	f7ff fd2e 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 8004618:	61b8      	str	r0, [r7, #24]
        break;
 800461a:	e013      	b.n	8004644 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800461c:	f7ff fd4c 	bl	80040b8 <HAL_RCC_GetPCLK2Freq>
 8004620:	61b8      	str	r0, [r7, #24]
        break;
 8004622:	e00f      	b.n	8004644 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004624:	4b4e      	ldr	r3, [pc, #312]	; (8004760 <UART_SetConfig+0x268>)
 8004626:	61bb      	str	r3, [r7, #24]
        break;
 8004628:	e00c      	b.n	8004644 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800462a:	f7ff fcad 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 800462e:	61b8      	str	r0, [r7, #24]
        break;
 8004630:	e008      	b.n	8004644 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004636:	61bb      	str	r3, [r7, #24]
        break;
 8004638:	e004      	b.n	8004644 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	77bb      	strb	r3, [r7, #30]
        break;
 8004642:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d074      	beq.n	8004734 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	005a      	lsls	r2, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	085b      	lsrs	r3, r3, #1
 8004654:	441a      	add	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	fbb2 f3f3 	udiv	r3, r2, r3
 800465e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	2b0f      	cmp	r3, #15
 8004664:	d916      	bls.n	8004694 <UART_SetConfig+0x19c>
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800466c:	d212      	bcs.n	8004694 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	b29b      	uxth	r3, r3
 8004672:	f023 030f 	bic.w	r3, r3, #15
 8004676:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	085b      	lsrs	r3, r3, #1
 800467c:	b29b      	uxth	r3, r3
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	b29a      	uxth	r2, r3
 8004684:	89fb      	ldrh	r3, [r7, #14]
 8004686:	4313      	orrs	r3, r2
 8004688:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	89fa      	ldrh	r2, [r7, #14]
 8004690:	60da      	str	r2, [r3, #12]
 8004692:	e04f      	b.n	8004734 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	77bb      	strb	r3, [r7, #30]
 8004698:	e04c      	b.n	8004734 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800469a:	7ffb      	ldrb	r3, [r7, #31]
 800469c:	2b08      	cmp	r3, #8
 800469e:	d828      	bhi.n	80046f2 <UART_SetConfig+0x1fa>
 80046a0:	a201      	add	r2, pc, #4	; (adr r2, 80046a8 <UART_SetConfig+0x1b0>)
 80046a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a6:	bf00      	nop
 80046a8:	080046cd 	.word	0x080046cd
 80046ac:	080046d5 	.word	0x080046d5
 80046b0:	080046dd 	.word	0x080046dd
 80046b4:	080046f3 	.word	0x080046f3
 80046b8:	080046e3 	.word	0x080046e3
 80046bc:	080046f3 	.word	0x080046f3
 80046c0:	080046f3 	.word	0x080046f3
 80046c4:	080046f3 	.word	0x080046f3
 80046c8:	080046eb 	.word	0x080046eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046cc:	f7ff fcd2 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 80046d0:	61b8      	str	r0, [r7, #24]
        break;
 80046d2:	e013      	b.n	80046fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046d4:	f7ff fcf0 	bl	80040b8 <HAL_RCC_GetPCLK2Freq>
 80046d8:	61b8      	str	r0, [r7, #24]
        break;
 80046da:	e00f      	b.n	80046fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046dc:	4b20      	ldr	r3, [pc, #128]	; (8004760 <UART_SetConfig+0x268>)
 80046de:	61bb      	str	r3, [r7, #24]
        break;
 80046e0:	e00c      	b.n	80046fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046e2:	f7ff fc51 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 80046e6:	61b8      	str	r0, [r7, #24]
        break;
 80046e8:	e008      	b.n	80046fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ee:	61bb      	str	r3, [r7, #24]
        break;
 80046f0:	e004      	b.n	80046fc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	77bb      	strb	r3, [r7, #30]
        break;
 80046fa:	bf00      	nop
    }

    if (pclk != 0U)
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d018      	beq.n	8004734 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	085a      	lsrs	r2, r3, #1
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	441a      	add	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	fbb2 f3f3 	udiv	r3, r2, r3
 8004714:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	2b0f      	cmp	r3, #15
 800471a:	d909      	bls.n	8004730 <UART_SetConfig+0x238>
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004722:	d205      	bcs.n	8004730 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	b29a      	uxth	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	60da      	str	r2, [r3, #12]
 800472e:	e001      	b.n	8004734 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004740:	7fbb      	ldrb	r3, [r7, #30]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3720      	adds	r7, #32
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	efff69f3 	.word	0xefff69f3
 8004750:	40013800 	.word	0x40013800
 8004754:	40021000 	.word	0x40021000
 8004758:	40004400 	.word	0x40004400
 800475c:	40004800 	.word	0x40004800
 8004760:	007a1200 	.word	0x007a1200

08004764 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004840:	2b00      	cmp	r3, #0
 8004842:	d01a      	beq.n	800487a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004862:	d10a      	bne.n	800487a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	605a      	str	r2, [r3, #4]
  }
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b098      	sub	sp, #96	; 0x60
 80048ac:	af02      	add	r7, sp, #8
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048b8:	f7fc ff8e 	bl	80017d8 <HAL_GetTick>
 80048bc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0308 	and.w	r3, r3, #8
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d12e      	bne.n	800492a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048d4:	2200      	movs	r2, #0
 80048d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f88c 	bl	80049f8 <UART_WaitOnFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d021      	beq.n	800492a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ee:	e853 3f00 	ldrex	r3, [r3]
 80048f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048fa:	653b      	str	r3, [r7, #80]	; 0x50
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	461a      	mov	r2, r3
 8004902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004904:	647b      	str	r3, [r7, #68]	; 0x44
 8004906:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004908:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800490a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800490c:	e841 2300 	strex	r3, r2, [r1]
 8004910:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1e6      	bne.n	80048e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2220      	movs	r2, #32
 800491c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e062      	b.n	80049f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b04      	cmp	r3, #4
 8004936:	d149      	bne.n	80049cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004938:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004940:	2200      	movs	r2, #0
 8004942:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f856 	bl	80049f8 <UART_WaitOnFlagUntilTimeout>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d03c      	beq.n	80049cc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	e853 3f00 	ldrex	r3, [r3]
 800495e:	623b      	str	r3, [r7, #32]
   return(result);
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	461a      	mov	r2, r3
 800496e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004970:	633b      	str	r3, [r7, #48]	; 0x30
 8004972:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004974:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004978:	e841 2300 	strex	r3, r2, [r1]
 800497c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e6      	bne.n	8004952 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3308      	adds	r3, #8
 800498a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	e853 3f00 	ldrex	r3, [r3]
 8004992:	60fb      	str	r3, [r7, #12]
   return(result);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0301 	bic.w	r3, r3, #1
 800499a:	64bb      	str	r3, [r7, #72]	; 0x48
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3308      	adds	r3, #8
 80049a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049a4:	61fa      	str	r2, [r7, #28]
 80049a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a8:	69b9      	ldr	r1, [r7, #24]
 80049aa:	69fa      	ldr	r2, [r7, #28]
 80049ac:	e841 2300 	strex	r3, r2, [r1]
 80049b0:	617b      	str	r3, [r7, #20]
   return(result);
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1e5      	bne.n	8004984 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e011      	b.n	80049f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2220      	movs	r2, #32
 80049d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3758      	adds	r7, #88	; 0x58
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	603b      	str	r3, [r7, #0]
 8004a04:	4613      	mov	r3, r2
 8004a06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a08:	e049      	b.n	8004a9e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a10:	d045      	beq.n	8004a9e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a12:	f7fc fee1 	bl	80017d8 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d302      	bcc.n	8004a28 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e048      	b.n	8004abe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d031      	beq.n	8004a9e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d110      	bne.n	8004a6a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 f838 	bl	8004ac6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2208      	movs	r2, #8
 8004a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e029      	b.n	8004abe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a78:	d111      	bne.n	8004a9e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 f81e 	bl	8004ac6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e00f      	b.n	8004abe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69da      	ldr	r2, [r3, #28]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	bf0c      	ite	eq
 8004aae:	2301      	moveq	r3, #1
 8004ab0:	2300      	movne	r3, #0
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	79fb      	ldrb	r3, [r7, #7]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d0a6      	beq.n	8004a0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b095      	sub	sp, #84	; 0x54
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ad6:	e853 3f00 	ldrex	r3, [r3]
 8004ada:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ade:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aec:	643b      	str	r3, [r7, #64]	; 0x40
 8004aee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004af2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e6      	bne.n	8004ace <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3308      	adds	r3, #8
 8004b06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	e853 3f00 	ldrex	r3, [r3]
 8004b0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	f023 0301 	bic.w	r3, r3, #1
 8004b16:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3308      	adds	r3, #8
 8004b1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b28:	e841 2300 	strex	r3, r2, [r1]
 8004b2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e5      	bne.n	8004b00 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d118      	bne.n	8004b6e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	e853 3f00 	ldrex	r3, [r3]
 8004b48:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	f023 0310 	bic.w	r3, r3, #16
 8004b50:	647b      	str	r3, [r7, #68]	; 0x44
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b5a:	61bb      	str	r3, [r7, #24]
 8004b5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5e:	6979      	ldr	r1, [r7, #20]
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	e841 2300 	strex	r3, r2, [r1]
 8004b66:	613b      	str	r3, [r7, #16]
   return(result);
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1e6      	bne.n	8004b3c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004b82:	bf00      	nop
 8004b84:	3754      	adds	r7, #84	; 0x54
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
	...

08004b90 <__errno>:
 8004b90:	4b01      	ldr	r3, [pc, #4]	; (8004b98 <__errno+0x8>)
 8004b92:	6818      	ldr	r0, [r3, #0]
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	20000014 	.word	0x20000014

08004b9c <__libc_init_array>:
 8004b9c:	b570      	push	{r4, r5, r6, lr}
 8004b9e:	4d0d      	ldr	r5, [pc, #52]	; (8004bd4 <__libc_init_array+0x38>)
 8004ba0:	4c0d      	ldr	r4, [pc, #52]	; (8004bd8 <__libc_init_array+0x3c>)
 8004ba2:	1b64      	subs	r4, r4, r5
 8004ba4:	10a4      	asrs	r4, r4, #2
 8004ba6:	2600      	movs	r6, #0
 8004ba8:	42a6      	cmp	r6, r4
 8004baa:	d109      	bne.n	8004bc0 <__libc_init_array+0x24>
 8004bac:	4d0b      	ldr	r5, [pc, #44]	; (8004bdc <__libc_init_array+0x40>)
 8004bae:	4c0c      	ldr	r4, [pc, #48]	; (8004be0 <__libc_init_array+0x44>)
 8004bb0:	f002 ff02 	bl	80079b8 <_init>
 8004bb4:	1b64      	subs	r4, r4, r5
 8004bb6:	10a4      	asrs	r4, r4, #2
 8004bb8:	2600      	movs	r6, #0
 8004bba:	42a6      	cmp	r6, r4
 8004bbc:	d105      	bne.n	8004bca <__libc_init_array+0x2e>
 8004bbe:	bd70      	pop	{r4, r5, r6, pc}
 8004bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bc4:	4798      	blx	r3
 8004bc6:	3601      	adds	r6, #1
 8004bc8:	e7ee      	b.n	8004ba8 <__libc_init_array+0xc>
 8004bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bce:	4798      	blx	r3
 8004bd0:	3601      	adds	r6, #1
 8004bd2:	e7f2      	b.n	8004bba <__libc_init_array+0x1e>
 8004bd4:	08007e54 	.word	0x08007e54
 8004bd8:	08007e54 	.word	0x08007e54
 8004bdc:	08007e54 	.word	0x08007e54
 8004be0:	08007e58 	.word	0x08007e58

08004be4 <memset>:
 8004be4:	4402      	add	r2, r0
 8004be6:	4603      	mov	r3, r0
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d100      	bne.n	8004bee <memset+0xa>
 8004bec:	4770      	bx	lr
 8004bee:	f803 1b01 	strb.w	r1, [r3], #1
 8004bf2:	e7f9      	b.n	8004be8 <memset+0x4>

08004bf4 <__cvt>:
 8004bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf8:	ec55 4b10 	vmov	r4, r5, d0
 8004bfc:	2d00      	cmp	r5, #0
 8004bfe:	460e      	mov	r6, r1
 8004c00:	4619      	mov	r1, r3
 8004c02:	462b      	mov	r3, r5
 8004c04:	bfbb      	ittet	lt
 8004c06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004c0a:	461d      	movlt	r5, r3
 8004c0c:	2300      	movge	r3, #0
 8004c0e:	232d      	movlt	r3, #45	; 0x2d
 8004c10:	700b      	strb	r3, [r1, #0]
 8004c12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004c18:	4691      	mov	r9, r2
 8004c1a:	f023 0820 	bic.w	r8, r3, #32
 8004c1e:	bfbc      	itt	lt
 8004c20:	4622      	movlt	r2, r4
 8004c22:	4614      	movlt	r4, r2
 8004c24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c28:	d005      	beq.n	8004c36 <__cvt+0x42>
 8004c2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004c2e:	d100      	bne.n	8004c32 <__cvt+0x3e>
 8004c30:	3601      	adds	r6, #1
 8004c32:	2102      	movs	r1, #2
 8004c34:	e000      	b.n	8004c38 <__cvt+0x44>
 8004c36:	2103      	movs	r1, #3
 8004c38:	ab03      	add	r3, sp, #12
 8004c3a:	9301      	str	r3, [sp, #4]
 8004c3c:	ab02      	add	r3, sp, #8
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	ec45 4b10 	vmov	d0, r4, r5
 8004c44:	4653      	mov	r3, sl
 8004c46:	4632      	mov	r2, r6
 8004c48:	f000 fcea 	bl	8005620 <_dtoa_r>
 8004c4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c50:	4607      	mov	r7, r0
 8004c52:	d102      	bne.n	8004c5a <__cvt+0x66>
 8004c54:	f019 0f01 	tst.w	r9, #1
 8004c58:	d022      	beq.n	8004ca0 <__cvt+0xac>
 8004c5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c5e:	eb07 0906 	add.w	r9, r7, r6
 8004c62:	d110      	bne.n	8004c86 <__cvt+0x92>
 8004c64:	783b      	ldrb	r3, [r7, #0]
 8004c66:	2b30      	cmp	r3, #48	; 0x30
 8004c68:	d10a      	bne.n	8004c80 <__cvt+0x8c>
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	4620      	mov	r0, r4
 8004c70:	4629      	mov	r1, r5
 8004c72:	f7fb ff29 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c76:	b918      	cbnz	r0, 8004c80 <__cvt+0x8c>
 8004c78:	f1c6 0601 	rsb	r6, r6, #1
 8004c7c:	f8ca 6000 	str.w	r6, [sl]
 8004c80:	f8da 3000 	ldr.w	r3, [sl]
 8004c84:	4499      	add	r9, r3
 8004c86:	2200      	movs	r2, #0
 8004c88:	2300      	movs	r3, #0
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	4629      	mov	r1, r5
 8004c8e:	f7fb ff1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c92:	b108      	cbz	r0, 8004c98 <__cvt+0xa4>
 8004c94:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c98:	2230      	movs	r2, #48	; 0x30
 8004c9a:	9b03      	ldr	r3, [sp, #12]
 8004c9c:	454b      	cmp	r3, r9
 8004c9e:	d307      	bcc.n	8004cb0 <__cvt+0xbc>
 8004ca0:	9b03      	ldr	r3, [sp, #12]
 8004ca2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ca4:	1bdb      	subs	r3, r3, r7
 8004ca6:	4638      	mov	r0, r7
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	b004      	add	sp, #16
 8004cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb0:	1c59      	adds	r1, r3, #1
 8004cb2:	9103      	str	r1, [sp, #12]
 8004cb4:	701a      	strb	r2, [r3, #0]
 8004cb6:	e7f0      	b.n	8004c9a <__cvt+0xa6>

08004cb8 <__exponent>:
 8004cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2900      	cmp	r1, #0
 8004cbe:	bfb8      	it	lt
 8004cc0:	4249      	neglt	r1, r1
 8004cc2:	f803 2b02 	strb.w	r2, [r3], #2
 8004cc6:	bfb4      	ite	lt
 8004cc8:	222d      	movlt	r2, #45	; 0x2d
 8004cca:	222b      	movge	r2, #43	; 0x2b
 8004ccc:	2909      	cmp	r1, #9
 8004cce:	7042      	strb	r2, [r0, #1]
 8004cd0:	dd2a      	ble.n	8004d28 <__exponent+0x70>
 8004cd2:	f10d 0407 	add.w	r4, sp, #7
 8004cd6:	46a4      	mov	ip, r4
 8004cd8:	270a      	movs	r7, #10
 8004cda:	46a6      	mov	lr, r4
 8004cdc:	460a      	mov	r2, r1
 8004cde:	fb91 f6f7 	sdiv	r6, r1, r7
 8004ce2:	fb07 1516 	mls	r5, r7, r6, r1
 8004ce6:	3530      	adds	r5, #48	; 0x30
 8004ce8:	2a63      	cmp	r2, #99	; 0x63
 8004cea:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004cee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004cf2:	4631      	mov	r1, r6
 8004cf4:	dcf1      	bgt.n	8004cda <__exponent+0x22>
 8004cf6:	3130      	adds	r1, #48	; 0x30
 8004cf8:	f1ae 0502 	sub.w	r5, lr, #2
 8004cfc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004d00:	1c44      	adds	r4, r0, #1
 8004d02:	4629      	mov	r1, r5
 8004d04:	4561      	cmp	r1, ip
 8004d06:	d30a      	bcc.n	8004d1e <__exponent+0x66>
 8004d08:	f10d 0209 	add.w	r2, sp, #9
 8004d0c:	eba2 020e 	sub.w	r2, r2, lr
 8004d10:	4565      	cmp	r5, ip
 8004d12:	bf88      	it	hi
 8004d14:	2200      	movhi	r2, #0
 8004d16:	4413      	add	r3, r2
 8004d18:	1a18      	subs	r0, r3, r0
 8004d1a:	b003      	add	sp, #12
 8004d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d22:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004d26:	e7ed      	b.n	8004d04 <__exponent+0x4c>
 8004d28:	2330      	movs	r3, #48	; 0x30
 8004d2a:	3130      	adds	r1, #48	; 0x30
 8004d2c:	7083      	strb	r3, [r0, #2]
 8004d2e:	70c1      	strb	r1, [r0, #3]
 8004d30:	1d03      	adds	r3, r0, #4
 8004d32:	e7f1      	b.n	8004d18 <__exponent+0x60>

08004d34 <_printf_float>:
 8004d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d38:	ed2d 8b02 	vpush	{d8}
 8004d3c:	b08d      	sub	sp, #52	; 0x34
 8004d3e:	460c      	mov	r4, r1
 8004d40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004d44:	4616      	mov	r6, r2
 8004d46:	461f      	mov	r7, r3
 8004d48:	4605      	mov	r5, r0
 8004d4a:	f001 fa57 	bl	80061fc <_localeconv_r>
 8004d4e:	f8d0 a000 	ldr.w	sl, [r0]
 8004d52:	4650      	mov	r0, sl
 8004d54:	f7fb fa3c 	bl	80001d0 <strlen>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	930a      	str	r3, [sp, #40]	; 0x28
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	9305      	str	r3, [sp, #20]
 8004d60:	f8d8 3000 	ldr.w	r3, [r8]
 8004d64:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004d68:	3307      	adds	r3, #7
 8004d6a:	f023 0307 	bic.w	r3, r3, #7
 8004d6e:	f103 0208 	add.w	r2, r3, #8
 8004d72:	f8c8 2000 	str.w	r2, [r8]
 8004d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004d7e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004d82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d86:	9307      	str	r3, [sp, #28]
 8004d88:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d8c:	ee08 0a10 	vmov	s16, r0
 8004d90:	4b9f      	ldr	r3, [pc, #636]	; (8005010 <_printf_float+0x2dc>)
 8004d92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d9a:	f7fb fec7 	bl	8000b2c <__aeabi_dcmpun>
 8004d9e:	bb88      	cbnz	r0, 8004e04 <_printf_float+0xd0>
 8004da0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004da4:	4b9a      	ldr	r3, [pc, #616]	; (8005010 <_printf_float+0x2dc>)
 8004da6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004daa:	f7fb fea1 	bl	8000af0 <__aeabi_dcmple>
 8004dae:	bb48      	cbnz	r0, 8004e04 <_printf_float+0xd0>
 8004db0:	2200      	movs	r2, #0
 8004db2:	2300      	movs	r3, #0
 8004db4:	4640      	mov	r0, r8
 8004db6:	4649      	mov	r1, r9
 8004db8:	f7fb fe90 	bl	8000adc <__aeabi_dcmplt>
 8004dbc:	b110      	cbz	r0, 8004dc4 <_printf_float+0x90>
 8004dbe:	232d      	movs	r3, #45	; 0x2d
 8004dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dc4:	4b93      	ldr	r3, [pc, #588]	; (8005014 <_printf_float+0x2e0>)
 8004dc6:	4894      	ldr	r0, [pc, #592]	; (8005018 <_printf_float+0x2e4>)
 8004dc8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004dcc:	bf94      	ite	ls
 8004dce:	4698      	movls	r8, r3
 8004dd0:	4680      	movhi	r8, r0
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	6123      	str	r3, [r4, #16]
 8004dd6:	9b05      	ldr	r3, [sp, #20]
 8004dd8:	f023 0204 	bic.w	r2, r3, #4
 8004ddc:	6022      	str	r2, [r4, #0]
 8004dde:	f04f 0900 	mov.w	r9, #0
 8004de2:	9700      	str	r7, [sp, #0]
 8004de4:	4633      	mov	r3, r6
 8004de6:	aa0b      	add	r2, sp, #44	; 0x2c
 8004de8:	4621      	mov	r1, r4
 8004dea:	4628      	mov	r0, r5
 8004dec:	f000 f9d8 	bl	80051a0 <_printf_common>
 8004df0:	3001      	adds	r0, #1
 8004df2:	f040 8090 	bne.w	8004f16 <_printf_float+0x1e2>
 8004df6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dfa:	b00d      	add	sp, #52	; 0x34
 8004dfc:	ecbd 8b02 	vpop	{d8}
 8004e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e04:	4642      	mov	r2, r8
 8004e06:	464b      	mov	r3, r9
 8004e08:	4640      	mov	r0, r8
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	f7fb fe8e 	bl	8000b2c <__aeabi_dcmpun>
 8004e10:	b140      	cbz	r0, 8004e24 <_printf_float+0xf0>
 8004e12:	464b      	mov	r3, r9
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	bfbc      	itt	lt
 8004e18:	232d      	movlt	r3, #45	; 0x2d
 8004e1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004e1e:	487f      	ldr	r0, [pc, #508]	; (800501c <_printf_float+0x2e8>)
 8004e20:	4b7f      	ldr	r3, [pc, #508]	; (8005020 <_printf_float+0x2ec>)
 8004e22:	e7d1      	b.n	8004dc8 <_printf_float+0x94>
 8004e24:	6863      	ldr	r3, [r4, #4]
 8004e26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004e2a:	9206      	str	r2, [sp, #24]
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	d13f      	bne.n	8004eb0 <_printf_float+0x17c>
 8004e30:	2306      	movs	r3, #6
 8004e32:	6063      	str	r3, [r4, #4]
 8004e34:	9b05      	ldr	r3, [sp, #20]
 8004e36:	6861      	ldr	r1, [r4, #4]
 8004e38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	9303      	str	r3, [sp, #12]
 8004e40:	ab0a      	add	r3, sp, #40	; 0x28
 8004e42:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004e46:	ab09      	add	r3, sp, #36	; 0x24
 8004e48:	ec49 8b10 	vmov	d0, r8, r9
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	6022      	str	r2, [r4, #0]
 8004e50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e54:	4628      	mov	r0, r5
 8004e56:	f7ff fecd 	bl	8004bf4 <__cvt>
 8004e5a:	9b06      	ldr	r3, [sp, #24]
 8004e5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e5e:	2b47      	cmp	r3, #71	; 0x47
 8004e60:	4680      	mov	r8, r0
 8004e62:	d108      	bne.n	8004e76 <_printf_float+0x142>
 8004e64:	1cc8      	adds	r0, r1, #3
 8004e66:	db02      	blt.n	8004e6e <_printf_float+0x13a>
 8004e68:	6863      	ldr	r3, [r4, #4]
 8004e6a:	4299      	cmp	r1, r3
 8004e6c:	dd41      	ble.n	8004ef2 <_printf_float+0x1be>
 8004e6e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004e72:	fa5f fb8b 	uxtb.w	fp, fp
 8004e76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004e7a:	d820      	bhi.n	8004ebe <_printf_float+0x18a>
 8004e7c:	3901      	subs	r1, #1
 8004e7e:	465a      	mov	r2, fp
 8004e80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e84:	9109      	str	r1, [sp, #36]	; 0x24
 8004e86:	f7ff ff17 	bl	8004cb8 <__exponent>
 8004e8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e8c:	1813      	adds	r3, r2, r0
 8004e8e:	2a01      	cmp	r2, #1
 8004e90:	4681      	mov	r9, r0
 8004e92:	6123      	str	r3, [r4, #16]
 8004e94:	dc02      	bgt.n	8004e9c <_printf_float+0x168>
 8004e96:	6822      	ldr	r2, [r4, #0]
 8004e98:	07d2      	lsls	r2, r2, #31
 8004e9a:	d501      	bpl.n	8004ea0 <_printf_float+0x16c>
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	6123      	str	r3, [r4, #16]
 8004ea0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d09c      	beq.n	8004de2 <_printf_float+0xae>
 8004ea8:	232d      	movs	r3, #45	; 0x2d
 8004eaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eae:	e798      	b.n	8004de2 <_printf_float+0xae>
 8004eb0:	9a06      	ldr	r2, [sp, #24]
 8004eb2:	2a47      	cmp	r2, #71	; 0x47
 8004eb4:	d1be      	bne.n	8004e34 <_printf_float+0x100>
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1bc      	bne.n	8004e34 <_printf_float+0x100>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e7b9      	b.n	8004e32 <_printf_float+0xfe>
 8004ebe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004ec2:	d118      	bne.n	8004ef6 <_printf_float+0x1c2>
 8004ec4:	2900      	cmp	r1, #0
 8004ec6:	6863      	ldr	r3, [r4, #4]
 8004ec8:	dd0b      	ble.n	8004ee2 <_printf_float+0x1ae>
 8004eca:	6121      	str	r1, [r4, #16]
 8004ecc:	b913      	cbnz	r3, 8004ed4 <_printf_float+0x1a0>
 8004ece:	6822      	ldr	r2, [r4, #0]
 8004ed0:	07d0      	lsls	r0, r2, #31
 8004ed2:	d502      	bpl.n	8004eda <_printf_float+0x1a6>
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	440b      	add	r3, r1
 8004ed8:	6123      	str	r3, [r4, #16]
 8004eda:	65a1      	str	r1, [r4, #88]	; 0x58
 8004edc:	f04f 0900 	mov.w	r9, #0
 8004ee0:	e7de      	b.n	8004ea0 <_printf_float+0x16c>
 8004ee2:	b913      	cbnz	r3, 8004eea <_printf_float+0x1b6>
 8004ee4:	6822      	ldr	r2, [r4, #0]
 8004ee6:	07d2      	lsls	r2, r2, #31
 8004ee8:	d501      	bpl.n	8004eee <_printf_float+0x1ba>
 8004eea:	3302      	adds	r3, #2
 8004eec:	e7f4      	b.n	8004ed8 <_printf_float+0x1a4>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e7f2      	b.n	8004ed8 <_printf_float+0x1a4>
 8004ef2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ef8:	4299      	cmp	r1, r3
 8004efa:	db05      	blt.n	8004f08 <_printf_float+0x1d4>
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	6121      	str	r1, [r4, #16]
 8004f00:	07d8      	lsls	r0, r3, #31
 8004f02:	d5ea      	bpl.n	8004eda <_printf_float+0x1a6>
 8004f04:	1c4b      	adds	r3, r1, #1
 8004f06:	e7e7      	b.n	8004ed8 <_printf_float+0x1a4>
 8004f08:	2900      	cmp	r1, #0
 8004f0a:	bfd4      	ite	le
 8004f0c:	f1c1 0202 	rsble	r2, r1, #2
 8004f10:	2201      	movgt	r2, #1
 8004f12:	4413      	add	r3, r2
 8004f14:	e7e0      	b.n	8004ed8 <_printf_float+0x1a4>
 8004f16:	6823      	ldr	r3, [r4, #0]
 8004f18:	055a      	lsls	r2, r3, #21
 8004f1a:	d407      	bmi.n	8004f2c <_printf_float+0x1f8>
 8004f1c:	6923      	ldr	r3, [r4, #16]
 8004f1e:	4642      	mov	r2, r8
 8004f20:	4631      	mov	r1, r6
 8004f22:	4628      	mov	r0, r5
 8004f24:	47b8      	blx	r7
 8004f26:	3001      	adds	r0, #1
 8004f28:	d12c      	bne.n	8004f84 <_printf_float+0x250>
 8004f2a:	e764      	b.n	8004df6 <_printf_float+0xc2>
 8004f2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f30:	f240 80e0 	bls.w	80050f4 <_printf_float+0x3c0>
 8004f34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f38:	2200      	movs	r2, #0
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f7fb fdc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f40:	2800      	cmp	r0, #0
 8004f42:	d034      	beq.n	8004fae <_printf_float+0x27a>
 8004f44:	4a37      	ldr	r2, [pc, #220]	; (8005024 <_printf_float+0x2f0>)
 8004f46:	2301      	movs	r3, #1
 8004f48:	4631      	mov	r1, r6
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	47b8      	blx	r7
 8004f4e:	3001      	adds	r0, #1
 8004f50:	f43f af51 	beq.w	8004df6 <_printf_float+0xc2>
 8004f54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	db02      	blt.n	8004f62 <_printf_float+0x22e>
 8004f5c:	6823      	ldr	r3, [r4, #0]
 8004f5e:	07d8      	lsls	r0, r3, #31
 8004f60:	d510      	bpl.n	8004f84 <_printf_float+0x250>
 8004f62:	ee18 3a10 	vmov	r3, s16
 8004f66:	4652      	mov	r2, sl
 8004f68:	4631      	mov	r1, r6
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	47b8      	blx	r7
 8004f6e:	3001      	adds	r0, #1
 8004f70:	f43f af41 	beq.w	8004df6 <_printf_float+0xc2>
 8004f74:	f04f 0800 	mov.w	r8, #0
 8004f78:	f104 091a 	add.w	r9, r4, #26
 8004f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	4543      	cmp	r3, r8
 8004f82:	dc09      	bgt.n	8004f98 <_printf_float+0x264>
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	079b      	lsls	r3, r3, #30
 8004f88:	f100 8105 	bmi.w	8005196 <_printf_float+0x462>
 8004f8c:	68e0      	ldr	r0, [r4, #12]
 8004f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f90:	4298      	cmp	r0, r3
 8004f92:	bfb8      	it	lt
 8004f94:	4618      	movlt	r0, r3
 8004f96:	e730      	b.n	8004dfa <_printf_float+0xc6>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	464a      	mov	r2, r9
 8004f9c:	4631      	mov	r1, r6
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	47b8      	blx	r7
 8004fa2:	3001      	adds	r0, #1
 8004fa4:	f43f af27 	beq.w	8004df6 <_printf_float+0xc2>
 8004fa8:	f108 0801 	add.w	r8, r8, #1
 8004fac:	e7e6      	b.n	8004f7c <_printf_float+0x248>
 8004fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	dc39      	bgt.n	8005028 <_printf_float+0x2f4>
 8004fb4:	4a1b      	ldr	r2, [pc, #108]	; (8005024 <_printf_float+0x2f0>)
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	4631      	mov	r1, r6
 8004fba:	4628      	mov	r0, r5
 8004fbc:	47b8      	blx	r7
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	f43f af19 	beq.w	8004df6 <_printf_float+0xc2>
 8004fc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	d102      	bne.n	8004fd2 <_printf_float+0x29e>
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	07d9      	lsls	r1, r3, #31
 8004fd0:	d5d8      	bpl.n	8004f84 <_printf_float+0x250>
 8004fd2:	ee18 3a10 	vmov	r3, s16
 8004fd6:	4652      	mov	r2, sl
 8004fd8:	4631      	mov	r1, r6
 8004fda:	4628      	mov	r0, r5
 8004fdc:	47b8      	blx	r7
 8004fde:	3001      	adds	r0, #1
 8004fe0:	f43f af09 	beq.w	8004df6 <_printf_float+0xc2>
 8004fe4:	f04f 0900 	mov.w	r9, #0
 8004fe8:	f104 0a1a 	add.w	sl, r4, #26
 8004fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fee:	425b      	negs	r3, r3
 8004ff0:	454b      	cmp	r3, r9
 8004ff2:	dc01      	bgt.n	8004ff8 <_printf_float+0x2c4>
 8004ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ff6:	e792      	b.n	8004f1e <_printf_float+0x1ea>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	4652      	mov	r2, sl
 8004ffc:	4631      	mov	r1, r6
 8004ffe:	4628      	mov	r0, r5
 8005000:	47b8      	blx	r7
 8005002:	3001      	adds	r0, #1
 8005004:	f43f aef7 	beq.w	8004df6 <_printf_float+0xc2>
 8005008:	f109 0901 	add.w	r9, r9, #1
 800500c:	e7ee      	b.n	8004fec <_printf_float+0x2b8>
 800500e:	bf00      	nop
 8005010:	7fefffff 	.word	0x7fefffff
 8005014:	08007a7c 	.word	0x08007a7c
 8005018:	08007a80 	.word	0x08007a80
 800501c:	08007a88 	.word	0x08007a88
 8005020:	08007a84 	.word	0x08007a84
 8005024:	08007a8c 	.word	0x08007a8c
 8005028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800502a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800502c:	429a      	cmp	r2, r3
 800502e:	bfa8      	it	ge
 8005030:	461a      	movge	r2, r3
 8005032:	2a00      	cmp	r2, #0
 8005034:	4691      	mov	r9, r2
 8005036:	dc37      	bgt.n	80050a8 <_printf_float+0x374>
 8005038:	f04f 0b00 	mov.w	fp, #0
 800503c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005040:	f104 021a 	add.w	r2, r4, #26
 8005044:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005046:	9305      	str	r3, [sp, #20]
 8005048:	eba3 0309 	sub.w	r3, r3, r9
 800504c:	455b      	cmp	r3, fp
 800504e:	dc33      	bgt.n	80050b8 <_printf_float+0x384>
 8005050:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005054:	429a      	cmp	r2, r3
 8005056:	db3b      	blt.n	80050d0 <_printf_float+0x39c>
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	07da      	lsls	r2, r3, #31
 800505c:	d438      	bmi.n	80050d0 <_printf_float+0x39c>
 800505e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005060:	9a05      	ldr	r2, [sp, #20]
 8005062:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005064:	1a9a      	subs	r2, r3, r2
 8005066:	eba3 0901 	sub.w	r9, r3, r1
 800506a:	4591      	cmp	r9, r2
 800506c:	bfa8      	it	ge
 800506e:	4691      	movge	r9, r2
 8005070:	f1b9 0f00 	cmp.w	r9, #0
 8005074:	dc35      	bgt.n	80050e2 <_printf_float+0x3ae>
 8005076:	f04f 0800 	mov.w	r8, #0
 800507a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800507e:	f104 0a1a 	add.w	sl, r4, #26
 8005082:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005086:	1a9b      	subs	r3, r3, r2
 8005088:	eba3 0309 	sub.w	r3, r3, r9
 800508c:	4543      	cmp	r3, r8
 800508e:	f77f af79 	ble.w	8004f84 <_printf_float+0x250>
 8005092:	2301      	movs	r3, #1
 8005094:	4652      	mov	r2, sl
 8005096:	4631      	mov	r1, r6
 8005098:	4628      	mov	r0, r5
 800509a:	47b8      	blx	r7
 800509c:	3001      	adds	r0, #1
 800509e:	f43f aeaa 	beq.w	8004df6 <_printf_float+0xc2>
 80050a2:	f108 0801 	add.w	r8, r8, #1
 80050a6:	e7ec      	b.n	8005082 <_printf_float+0x34e>
 80050a8:	4613      	mov	r3, r2
 80050aa:	4631      	mov	r1, r6
 80050ac:	4642      	mov	r2, r8
 80050ae:	4628      	mov	r0, r5
 80050b0:	47b8      	blx	r7
 80050b2:	3001      	adds	r0, #1
 80050b4:	d1c0      	bne.n	8005038 <_printf_float+0x304>
 80050b6:	e69e      	b.n	8004df6 <_printf_float+0xc2>
 80050b8:	2301      	movs	r3, #1
 80050ba:	4631      	mov	r1, r6
 80050bc:	4628      	mov	r0, r5
 80050be:	9205      	str	r2, [sp, #20]
 80050c0:	47b8      	blx	r7
 80050c2:	3001      	adds	r0, #1
 80050c4:	f43f ae97 	beq.w	8004df6 <_printf_float+0xc2>
 80050c8:	9a05      	ldr	r2, [sp, #20]
 80050ca:	f10b 0b01 	add.w	fp, fp, #1
 80050ce:	e7b9      	b.n	8005044 <_printf_float+0x310>
 80050d0:	ee18 3a10 	vmov	r3, s16
 80050d4:	4652      	mov	r2, sl
 80050d6:	4631      	mov	r1, r6
 80050d8:	4628      	mov	r0, r5
 80050da:	47b8      	blx	r7
 80050dc:	3001      	adds	r0, #1
 80050de:	d1be      	bne.n	800505e <_printf_float+0x32a>
 80050e0:	e689      	b.n	8004df6 <_printf_float+0xc2>
 80050e2:	9a05      	ldr	r2, [sp, #20]
 80050e4:	464b      	mov	r3, r9
 80050e6:	4442      	add	r2, r8
 80050e8:	4631      	mov	r1, r6
 80050ea:	4628      	mov	r0, r5
 80050ec:	47b8      	blx	r7
 80050ee:	3001      	adds	r0, #1
 80050f0:	d1c1      	bne.n	8005076 <_printf_float+0x342>
 80050f2:	e680      	b.n	8004df6 <_printf_float+0xc2>
 80050f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050f6:	2a01      	cmp	r2, #1
 80050f8:	dc01      	bgt.n	80050fe <_printf_float+0x3ca>
 80050fa:	07db      	lsls	r3, r3, #31
 80050fc:	d538      	bpl.n	8005170 <_printf_float+0x43c>
 80050fe:	2301      	movs	r3, #1
 8005100:	4642      	mov	r2, r8
 8005102:	4631      	mov	r1, r6
 8005104:	4628      	mov	r0, r5
 8005106:	47b8      	blx	r7
 8005108:	3001      	adds	r0, #1
 800510a:	f43f ae74 	beq.w	8004df6 <_printf_float+0xc2>
 800510e:	ee18 3a10 	vmov	r3, s16
 8005112:	4652      	mov	r2, sl
 8005114:	4631      	mov	r1, r6
 8005116:	4628      	mov	r0, r5
 8005118:	47b8      	blx	r7
 800511a:	3001      	adds	r0, #1
 800511c:	f43f ae6b 	beq.w	8004df6 <_printf_float+0xc2>
 8005120:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005124:	2200      	movs	r2, #0
 8005126:	2300      	movs	r3, #0
 8005128:	f7fb fcce 	bl	8000ac8 <__aeabi_dcmpeq>
 800512c:	b9d8      	cbnz	r0, 8005166 <_printf_float+0x432>
 800512e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005130:	f108 0201 	add.w	r2, r8, #1
 8005134:	3b01      	subs	r3, #1
 8005136:	4631      	mov	r1, r6
 8005138:	4628      	mov	r0, r5
 800513a:	47b8      	blx	r7
 800513c:	3001      	adds	r0, #1
 800513e:	d10e      	bne.n	800515e <_printf_float+0x42a>
 8005140:	e659      	b.n	8004df6 <_printf_float+0xc2>
 8005142:	2301      	movs	r3, #1
 8005144:	4652      	mov	r2, sl
 8005146:	4631      	mov	r1, r6
 8005148:	4628      	mov	r0, r5
 800514a:	47b8      	blx	r7
 800514c:	3001      	adds	r0, #1
 800514e:	f43f ae52 	beq.w	8004df6 <_printf_float+0xc2>
 8005152:	f108 0801 	add.w	r8, r8, #1
 8005156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005158:	3b01      	subs	r3, #1
 800515a:	4543      	cmp	r3, r8
 800515c:	dcf1      	bgt.n	8005142 <_printf_float+0x40e>
 800515e:	464b      	mov	r3, r9
 8005160:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005164:	e6dc      	b.n	8004f20 <_printf_float+0x1ec>
 8005166:	f04f 0800 	mov.w	r8, #0
 800516a:	f104 0a1a 	add.w	sl, r4, #26
 800516e:	e7f2      	b.n	8005156 <_printf_float+0x422>
 8005170:	2301      	movs	r3, #1
 8005172:	4642      	mov	r2, r8
 8005174:	e7df      	b.n	8005136 <_printf_float+0x402>
 8005176:	2301      	movs	r3, #1
 8005178:	464a      	mov	r2, r9
 800517a:	4631      	mov	r1, r6
 800517c:	4628      	mov	r0, r5
 800517e:	47b8      	blx	r7
 8005180:	3001      	adds	r0, #1
 8005182:	f43f ae38 	beq.w	8004df6 <_printf_float+0xc2>
 8005186:	f108 0801 	add.w	r8, r8, #1
 800518a:	68e3      	ldr	r3, [r4, #12]
 800518c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800518e:	1a5b      	subs	r3, r3, r1
 8005190:	4543      	cmp	r3, r8
 8005192:	dcf0      	bgt.n	8005176 <_printf_float+0x442>
 8005194:	e6fa      	b.n	8004f8c <_printf_float+0x258>
 8005196:	f04f 0800 	mov.w	r8, #0
 800519a:	f104 0919 	add.w	r9, r4, #25
 800519e:	e7f4      	b.n	800518a <_printf_float+0x456>

080051a0 <_printf_common>:
 80051a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051a4:	4616      	mov	r6, r2
 80051a6:	4699      	mov	r9, r3
 80051a8:	688a      	ldr	r2, [r1, #8]
 80051aa:	690b      	ldr	r3, [r1, #16]
 80051ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051b0:	4293      	cmp	r3, r2
 80051b2:	bfb8      	it	lt
 80051b4:	4613      	movlt	r3, r2
 80051b6:	6033      	str	r3, [r6, #0]
 80051b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051bc:	4607      	mov	r7, r0
 80051be:	460c      	mov	r4, r1
 80051c0:	b10a      	cbz	r2, 80051c6 <_printf_common+0x26>
 80051c2:	3301      	adds	r3, #1
 80051c4:	6033      	str	r3, [r6, #0]
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	0699      	lsls	r1, r3, #26
 80051ca:	bf42      	ittt	mi
 80051cc:	6833      	ldrmi	r3, [r6, #0]
 80051ce:	3302      	addmi	r3, #2
 80051d0:	6033      	strmi	r3, [r6, #0]
 80051d2:	6825      	ldr	r5, [r4, #0]
 80051d4:	f015 0506 	ands.w	r5, r5, #6
 80051d8:	d106      	bne.n	80051e8 <_printf_common+0x48>
 80051da:	f104 0a19 	add.w	sl, r4, #25
 80051de:	68e3      	ldr	r3, [r4, #12]
 80051e0:	6832      	ldr	r2, [r6, #0]
 80051e2:	1a9b      	subs	r3, r3, r2
 80051e4:	42ab      	cmp	r3, r5
 80051e6:	dc26      	bgt.n	8005236 <_printf_common+0x96>
 80051e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051ec:	1e13      	subs	r3, r2, #0
 80051ee:	6822      	ldr	r2, [r4, #0]
 80051f0:	bf18      	it	ne
 80051f2:	2301      	movne	r3, #1
 80051f4:	0692      	lsls	r2, r2, #26
 80051f6:	d42b      	bmi.n	8005250 <_printf_common+0xb0>
 80051f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051fc:	4649      	mov	r1, r9
 80051fe:	4638      	mov	r0, r7
 8005200:	47c0      	blx	r8
 8005202:	3001      	adds	r0, #1
 8005204:	d01e      	beq.n	8005244 <_printf_common+0xa4>
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	68e5      	ldr	r5, [r4, #12]
 800520a:	6832      	ldr	r2, [r6, #0]
 800520c:	f003 0306 	and.w	r3, r3, #6
 8005210:	2b04      	cmp	r3, #4
 8005212:	bf08      	it	eq
 8005214:	1aad      	subeq	r5, r5, r2
 8005216:	68a3      	ldr	r3, [r4, #8]
 8005218:	6922      	ldr	r2, [r4, #16]
 800521a:	bf0c      	ite	eq
 800521c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005220:	2500      	movne	r5, #0
 8005222:	4293      	cmp	r3, r2
 8005224:	bfc4      	itt	gt
 8005226:	1a9b      	subgt	r3, r3, r2
 8005228:	18ed      	addgt	r5, r5, r3
 800522a:	2600      	movs	r6, #0
 800522c:	341a      	adds	r4, #26
 800522e:	42b5      	cmp	r5, r6
 8005230:	d11a      	bne.n	8005268 <_printf_common+0xc8>
 8005232:	2000      	movs	r0, #0
 8005234:	e008      	b.n	8005248 <_printf_common+0xa8>
 8005236:	2301      	movs	r3, #1
 8005238:	4652      	mov	r2, sl
 800523a:	4649      	mov	r1, r9
 800523c:	4638      	mov	r0, r7
 800523e:	47c0      	blx	r8
 8005240:	3001      	adds	r0, #1
 8005242:	d103      	bne.n	800524c <_printf_common+0xac>
 8005244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800524c:	3501      	adds	r5, #1
 800524e:	e7c6      	b.n	80051de <_printf_common+0x3e>
 8005250:	18e1      	adds	r1, r4, r3
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	2030      	movs	r0, #48	; 0x30
 8005256:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800525a:	4422      	add	r2, r4
 800525c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005260:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005264:	3302      	adds	r3, #2
 8005266:	e7c7      	b.n	80051f8 <_printf_common+0x58>
 8005268:	2301      	movs	r3, #1
 800526a:	4622      	mov	r2, r4
 800526c:	4649      	mov	r1, r9
 800526e:	4638      	mov	r0, r7
 8005270:	47c0      	blx	r8
 8005272:	3001      	adds	r0, #1
 8005274:	d0e6      	beq.n	8005244 <_printf_common+0xa4>
 8005276:	3601      	adds	r6, #1
 8005278:	e7d9      	b.n	800522e <_printf_common+0x8e>
	...

0800527c <_printf_i>:
 800527c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005280:	7e0f      	ldrb	r7, [r1, #24]
 8005282:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005284:	2f78      	cmp	r7, #120	; 0x78
 8005286:	4691      	mov	r9, r2
 8005288:	4680      	mov	r8, r0
 800528a:	460c      	mov	r4, r1
 800528c:	469a      	mov	sl, r3
 800528e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005292:	d807      	bhi.n	80052a4 <_printf_i+0x28>
 8005294:	2f62      	cmp	r7, #98	; 0x62
 8005296:	d80a      	bhi.n	80052ae <_printf_i+0x32>
 8005298:	2f00      	cmp	r7, #0
 800529a:	f000 80d8 	beq.w	800544e <_printf_i+0x1d2>
 800529e:	2f58      	cmp	r7, #88	; 0x58
 80052a0:	f000 80a3 	beq.w	80053ea <_printf_i+0x16e>
 80052a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052ac:	e03a      	b.n	8005324 <_printf_i+0xa8>
 80052ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052b2:	2b15      	cmp	r3, #21
 80052b4:	d8f6      	bhi.n	80052a4 <_printf_i+0x28>
 80052b6:	a101      	add	r1, pc, #4	; (adr r1, 80052bc <_printf_i+0x40>)
 80052b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052bc:	08005315 	.word	0x08005315
 80052c0:	08005329 	.word	0x08005329
 80052c4:	080052a5 	.word	0x080052a5
 80052c8:	080052a5 	.word	0x080052a5
 80052cc:	080052a5 	.word	0x080052a5
 80052d0:	080052a5 	.word	0x080052a5
 80052d4:	08005329 	.word	0x08005329
 80052d8:	080052a5 	.word	0x080052a5
 80052dc:	080052a5 	.word	0x080052a5
 80052e0:	080052a5 	.word	0x080052a5
 80052e4:	080052a5 	.word	0x080052a5
 80052e8:	08005435 	.word	0x08005435
 80052ec:	08005359 	.word	0x08005359
 80052f0:	08005417 	.word	0x08005417
 80052f4:	080052a5 	.word	0x080052a5
 80052f8:	080052a5 	.word	0x080052a5
 80052fc:	08005457 	.word	0x08005457
 8005300:	080052a5 	.word	0x080052a5
 8005304:	08005359 	.word	0x08005359
 8005308:	080052a5 	.word	0x080052a5
 800530c:	080052a5 	.word	0x080052a5
 8005310:	0800541f 	.word	0x0800541f
 8005314:	682b      	ldr	r3, [r5, #0]
 8005316:	1d1a      	adds	r2, r3, #4
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	602a      	str	r2, [r5, #0]
 800531c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005320:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005324:	2301      	movs	r3, #1
 8005326:	e0a3      	b.n	8005470 <_printf_i+0x1f4>
 8005328:	6820      	ldr	r0, [r4, #0]
 800532a:	6829      	ldr	r1, [r5, #0]
 800532c:	0606      	lsls	r6, r0, #24
 800532e:	f101 0304 	add.w	r3, r1, #4
 8005332:	d50a      	bpl.n	800534a <_printf_i+0xce>
 8005334:	680e      	ldr	r6, [r1, #0]
 8005336:	602b      	str	r3, [r5, #0]
 8005338:	2e00      	cmp	r6, #0
 800533a:	da03      	bge.n	8005344 <_printf_i+0xc8>
 800533c:	232d      	movs	r3, #45	; 0x2d
 800533e:	4276      	negs	r6, r6
 8005340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005344:	485e      	ldr	r0, [pc, #376]	; (80054c0 <_printf_i+0x244>)
 8005346:	230a      	movs	r3, #10
 8005348:	e019      	b.n	800537e <_printf_i+0x102>
 800534a:	680e      	ldr	r6, [r1, #0]
 800534c:	602b      	str	r3, [r5, #0]
 800534e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005352:	bf18      	it	ne
 8005354:	b236      	sxthne	r6, r6
 8005356:	e7ef      	b.n	8005338 <_printf_i+0xbc>
 8005358:	682b      	ldr	r3, [r5, #0]
 800535a:	6820      	ldr	r0, [r4, #0]
 800535c:	1d19      	adds	r1, r3, #4
 800535e:	6029      	str	r1, [r5, #0]
 8005360:	0601      	lsls	r1, r0, #24
 8005362:	d501      	bpl.n	8005368 <_printf_i+0xec>
 8005364:	681e      	ldr	r6, [r3, #0]
 8005366:	e002      	b.n	800536e <_printf_i+0xf2>
 8005368:	0646      	lsls	r6, r0, #25
 800536a:	d5fb      	bpl.n	8005364 <_printf_i+0xe8>
 800536c:	881e      	ldrh	r6, [r3, #0]
 800536e:	4854      	ldr	r0, [pc, #336]	; (80054c0 <_printf_i+0x244>)
 8005370:	2f6f      	cmp	r7, #111	; 0x6f
 8005372:	bf0c      	ite	eq
 8005374:	2308      	moveq	r3, #8
 8005376:	230a      	movne	r3, #10
 8005378:	2100      	movs	r1, #0
 800537a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800537e:	6865      	ldr	r5, [r4, #4]
 8005380:	60a5      	str	r5, [r4, #8]
 8005382:	2d00      	cmp	r5, #0
 8005384:	bfa2      	ittt	ge
 8005386:	6821      	ldrge	r1, [r4, #0]
 8005388:	f021 0104 	bicge.w	r1, r1, #4
 800538c:	6021      	strge	r1, [r4, #0]
 800538e:	b90e      	cbnz	r6, 8005394 <_printf_i+0x118>
 8005390:	2d00      	cmp	r5, #0
 8005392:	d04d      	beq.n	8005430 <_printf_i+0x1b4>
 8005394:	4615      	mov	r5, r2
 8005396:	fbb6 f1f3 	udiv	r1, r6, r3
 800539a:	fb03 6711 	mls	r7, r3, r1, r6
 800539e:	5dc7      	ldrb	r7, [r0, r7]
 80053a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053a4:	4637      	mov	r7, r6
 80053a6:	42bb      	cmp	r3, r7
 80053a8:	460e      	mov	r6, r1
 80053aa:	d9f4      	bls.n	8005396 <_printf_i+0x11a>
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d10b      	bne.n	80053c8 <_printf_i+0x14c>
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	07de      	lsls	r6, r3, #31
 80053b4:	d508      	bpl.n	80053c8 <_printf_i+0x14c>
 80053b6:	6923      	ldr	r3, [r4, #16]
 80053b8:	6861      	ldr	r1, [r4, #4]
 80053ba:	4299      	cmp	r1, r3
 80053bc:	bfde      	ittt	le
 80053be:	2330      	movle	r3, #48	; 0x30
 80053c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053c4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80053c8:	1b52      	subs	r2, r2, r5
 80053ca:	6122      	str	r2, [r4, #16]
 80053cc:	f8cd a000 	str.w	sl, [sp]
 80053d0:	464b      	mov	r3, r9
 80053d2:	aa03      	add	r2, sp, #12
 80053d4:	4621      	mov	r1, r4
 80053d6:	4640      	mov	r0, r8
 80053d8:	f7ff fee2 	bl	80051a0 <_printf_common>
 80053dc:	3001      	adds	r0, #1
 80053de:	d14c      	bne.n	800547a <_printf_i+0x1fe>
 80053e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053e4:	b004      	add	sp, #16
 80053e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ea:	4835      	ldr	r0, [pc, #212]	; (80054c0 <_printf_i+0x244>)
 80053ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80053f0:	6829      	ldr	r1, [r5, #0]
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80053f8:	6029      	str	r1, [r5, #0]
 80053fa:	061d      	lsls	r5, r3, #24
 80053fc:	d514      	bpl.n	8005428 <_printf_i+0x1ac>
 80053fe:	07df      	lsls	r7, r3, #31
 8005400:	bf44      	itt	mi
 8005402:	f043 0320 	orrmi.w	r3, r3, #32
 8005406:	6023      	strmi	r3, [r4, #0]
 8005408:	b91e      	cbnz	r6, 8005412 <_printf_i+0x196>
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	f023 0320 	bic.w	r3, r3, #32
 8005410:	6023      	str	r3, [r4, #0]
 8005412:	2310      	movs	r3, #16
 8005414:	e7b0      	b.n	8005378 <_printf_i+0xfc>
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	f043 0320 	orr.w	r3, r3, #32
 800541c:	6023      	str	r3, [r4, #0]
 800541e:	2378      	movs	r3, #120	; 0x78
 8005420:	4828      	ldr	r0, [pc, #160]	; (80054c4 <_printf_i+0x248>)
 8005422:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005426:	e7e3      	b.n	80053f0 <_printf_i+0x174>
 8005428:	0659      	lsls	r1, r3, #25
 800542a:	bf48      	it	mi
 800542c:	b2b6      	uxthmi	r6, r6
 800542e:	e7e6      	b.n	80053fe <_printf_i+0x182>
 8005430:	4615      	mov	r5, r2
 8005432:	e7bb      	b.n	80053ac <_printf_i+0x130>
 8005434:	682b      	ldr	r3, [r5, #0]
 8005436:	6826      	ldr	r6, [r4, #0]
 8005438:	6961      	ldr	r1, [r4, #20]
 800543a:	1d18      	adds	r0, r3, #4
 800543c:	6028      	str	r0, [r5, #0]
 800543e:	0635      	lsls	r5, r6, #24
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	d501      	bpl.n	8005448 <_printf_i+0x1cc>
 8005444:	6019      	str	r1, [r3, #0]
 8005446:	e002      	b.n	800544e <_printf_i+0x1d2>
 8005448:	0670      	lsls	r0, r6, #25
 800544a:	d5fb      	bpl.n	8005444 <_printf_i+0x1c8>
 800544c:	8019      	strh	r1, [r3, #0]
 800544e:	2300      	movs	r3, #0
 8005450:	6123      	str	r3, [r4, #16]
 8005452:	4615      	mov	r5, r2
 8005454:	e7ba      	b.n	80053cc <_printf_i+0x150>
 8005456:	682b      	ldr	r3, [r5, #0]
 8005458:	1d1a      	adds	r2, r3, #4
 800545a:	602a      	str	r2, [r5, #0]
 800545c:	681d      	ldr	r5, [r3, #0]
 800545e:	6862      	ldr	r2, [r4, #4]
 8005460:	2100      	movs	r1, #0
 8005462:	4628      	mov	r0, r5
 8005464:	f7fa febc 	bl	80001e0 <memchr>
 8005468:	b108      	cbz	r0, 800546e <_printf_i+0x1f2>
 800546a:	1b40      	subs	r0, r0, r5
 800546c:	6060      	str	r0, [r4, #4]
 800546e:	6863      	ldr	r3, [r4, #4]
 8005470:	6123      	str	r3, [r4, #16]
 8005472:	2300      	movs	r3, #0
 8005474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005478:	e7a8      	b.n	80053cc <_printf_i+0x150>
 800547a:	6923      	ldr	r3, [r4, #16]
 800547c:	462a      	mov	r2, r5
 800547e:	4649      	mov	r1, r9
 8005480:	4640      	mov	r0, r8
 8005482:	47d0      	blx	sl
 8005484:	3001      	adds	r0, #1
 8005486:	d0ab      	beq.n	80053e0 <_printf_i+0x164>
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	079b      	lsls	r3, r3, #30
 800548c:	d413      	bmi.n	80054b6 <_printf_i+0x23a>
 800548e:	68e0      	ldr	r0, [r4, #12]
 8005490:	9b03      	ldr	r3, [sp, #12]
 8005492:	4298      	cmp	r0, r3
 8005494:	bfb8      	it	lt
 8005496:	4618      	movlt	r0, r3
 8005498:	e7a4      	b.n	80053e4 <_printf_i+0x168>
 800549a:	2301      	movs	r3, #1
 800549c:	4632      	mov	r2, r6
 800549e:	4649      	mov	r1, r9
 80054a0:	4640      	mov	r0, r8
 80054a2:	47d0      	blx	sl
 80054a4:	3001      	adds	r0, #1
 80054a6:	d09b      	beq.n	80053e0 <_printf_i+0x164>
 80054a8:	3501      	adds	r5, #1
 80054aa:	68e3      	ldr	r3, [r4, #12]
 80054ac:	9903      	ldr	r1, [sp, #12]
 80054ae:	1a5b      	subs	r3, r3, r1
 80054b0:	42ab      	cmp	r3, r5
 80054b2:	dcf2      	bgt.n	800549a <_printf_i+0x21e>
 80054b4:	e7eb      	b.n	800548e <_printf_i+0x212>
 80054b6:	2500      	movs	r5, #0
 80054b8:	f104 0619 	add.w	r6, r4, #25
 80054bc:	e7f5      	b.n	80054aa <_printf_i+0x22e>
 80054be:	bf00      	nop
 80054c0:	08007a8e 	.word	0x08007a8e
 80054c4:	08007a9f 	.word	0x08007a9f

080054c8 <siprintf>:
 80054c8:	b40e      	push	{r1, r2, r3}
 80054ca:	b500      	push	{lr}
 80054cc:	b09c      	sub	sp, #112	; 0x70
 80054ce:	ab1d      	add	r3, sp, #116	; 0x74
 80054d0:	9002      	str	r0, [sp, #8]
 80054d2:	9006      	str	r0, [sp, #24]
 80054d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054d8:	4809      	ldr	r0, [pc, #36]	; (8005500 <siprintf+0x38>)
 80054da:	9107      	str	r1, [sp, #28]
 80054dc:	9104      	str	r1, [sp, #16]
 80054de:	4909      	ldr	r1, [pc, #36]	; (8005504 <siprintf+0x3c>)
 80054e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80054e4:	9105      	str	r1, [sp, #20]
 80054e6:	6800      	ldr	r0, [r0, #0]
 80054e8:	9301      	str	r3, [sp, #4]
 80054ea:	a902      	add	r1, sp, #8
 80054ec:	f001 fb76 	bl	8006bdc <_svfiprintf_r>
 80054f0:	9b02      	ldr	r3, [sp, #8]
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	b01c      	add	sp, #112	; 0x70
 80054f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80054fc:	b003      	add	sp, #12
 80054fe:	4770      	bx	lr
 8005500:	20000014 	.word	0x20000014
 8005504:	ffff0208 	.word	0xffff0208

08005508 <quorem>:
 8005508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800550c:	6903      	ldr	r3, [r0, #16]
 800550e:	690c      	ldr	r4, [r1, #16]
 8005510:	42a3      	cmp	r3, r4
 8005512:	4607      	mov	r7, r0
 8005514:	f2c0 8081 	blt.w	800561a <quorem+0x112>
 8005518:	3c01      	subs	r4, #1
 800551a:	f101 0814 	add.w	r8, r1, #20
 800551e:	f100 0514 	add.w	r5, r0, #20
 8005522:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005526:	9301      	str	r3, [sp, #4]
 8005528:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800552c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005530:	3301      	adds	r3, #1
 8005532:	429a      	cmp	r2, r3
 8005534:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005538:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800553c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005540:	d331      	bcc.n	80055a6 <quorem+0x9e>
 8005542:	f04f 0e00 	mov.w	lr, #0
 8005546:	4640      	mov	r0, r8
 8005548:	46ac      	mov	ip, r5
 800554a:	46f2      	mov	sl, lr
 800554c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005550:	b293      	uxth	r3, r2
 8005552:	fb06 e303 	mla	r3, r6, r3, lr
 8005556:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800555a:	b29b      	uxth	r3, r3
 800555c:	ebaa 0303 	sub.w	r3, sl, r3
 8005560:	f8dc a000 	ldr.w	sl, [ip]
 8005564:	0c12      	lsrs	r2, r2, #16
 8005566:	fa13 f38a 	uxtah	r3, r3, sl
 800556a:	fb06 e202 	mla	r2, r6, r2, lr
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	9b00      	ldr	r3, [sp, #0]
 8005572:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005576:	b292      	uxth	r2, r2
 8005578:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800557c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005580:	f8bd 3000 	ldrh.w	r3, [sp]
 8005584:	4581      	cmp	r9, r0
 8005586:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800558a:	f84c 3b04 	str.w	r3, [ip], #4
 800558e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005592:	d2db      	bcs.n	800554c <quorem+0x44>
 8005594:	f855 300b 	ldr.w	r3, [r5, fp]
 8005598:	b92b      	cbnz	r3, 80055a6 <quorem+0x9e>
 800559a:	9b01      	ldr	r3, [sp, #4]
 800559c:	3b04      	subs	r3, #4
 800559e:	429d      	cmp	r5, r3
 80055a0:	461a      	mov	r2, r3
 80055a2:	d32e      	bcc.n	8005602 <quorem+0xfa>
 80055a4:	613c      	str	r4, [r7, #16]
 80055a6:	4638      	mov	r0, r7
 80055a8:	f001 f8c4 	bl	8006734 <__mcmp>
 80055ac:	2800      	cmp	r0, #0
 80055ae:	db24      	blt.n	80055fa <quorem+0xf2>
 80055b0:	3601      	adds	r6, #1
 80055b2:	4628      	mov	r0, r5
 80055b4:	f04f 0c00 	mov.w	ip, #0
 80055b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80055bc:	f8d0 e000 	ldr.w	lr, [r0]
 80055c0:	b293      	uxth	r3, r2
 80055c2:	ebac 0303 	sub.w	r3, ip, r3
 80055c6:	0c12      	lsrs	r2, r2, #16
 80055c8:	fa13 f38e 	uxtah	r3, r3, lr
 80055cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80055d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055da:	45c1      	cmp	r9, r8
 80055dc:	f840 3b04 	str.w	r3, [r0], #4
 80055e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80055e4:	d2e8      	bcs.n	80055b8 <quorem+0xb0>
 80055e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055ee:	b922      	cbnz	r2, 80055fa <quorem+0xf2>
 80055f0:	3b04      	subs	r3, #4
 80055f2:	429d      	cmp	r5, r3
 80055f4:	461a      	mov	r2, r3
 80055f6:	d30a      	bcc.n	800560e <quorem+0x106>
 80055f8:	613c      	str	r4, [r7, #16]
 80055fa:	4630      	mov	r0, r6
 80055fc:	b003      	add	sp, #12
 80055fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005602:	6812      	ldr	r2, [r2, #0]
 8005604:	3b04      	subs	r3, #4
 8005606:	2a00      	cmp	r2, #0
 8005608:	d1cc      	bne.n	80055a4 <quorem+0x9c>
 800560a:	3c01      	subs	r4, #1
 800560c:	e7c7      	b.n	800559e <quorem+0x96>
 800560e:	6812      	ldr	r2, [r2, #0]
 8005610:	3b04      	subs	r3, #4
 8005612:	2a00      	cmp	r2, #0
 8005614:	d1f0      	bne.n	80055f8 <quorem+0xf0>
 8005616:	3c01      	subs	r4, #1
 8005618:	e7eb      	b.n	80055f2 <quorem+0xea>
 800561a:	2000      	movs	r0, #0
 800561c:	e7ee      	b.n	80055fc <quorem+0xf4>
	...

08005620 <_dtoa_r>:
 8005620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005624:	ed2d 8b04 	vpush	{d8-d9}
 8005628:	ec57 6b10 	vmov	r6, r7, d0
 800562c:	b093      	sub	sp, #76	; 0x4c
 800562e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005630:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005634:	9106      	str	r1, [sp, #24]
 8005636:	ee10 aa10 	vmov	sl, s0
 800563a:	4604      	mov	r4, r0
 800563c:	9209      	str	r2, [sp, #36]	; 0x24
 800563e:	930c      	str	r3, [sp, #48]	; 0x30
 8005640:	46bb      	mov	fp, r7
 8005642:	b975      	cbnz	r5, 8005662 <_dtoa_r+0x42>
 8005644:	2010      	movs	r0, #16
 8005646:	f000 fddd 	bl	8006204 <malloc>
 800564a:	4602      	mov	r2, r0
 800564c:	6260      	str	r0, [r4, #36]	; 0x24
 800564e:	b920      	cbnz	r0, 800565a <_dtoa_r+0x3a>
 8005650:	4ba7      	ldr	r3, [pc, #668]	; (80058f0 <_dtoa_r+0x2d0>)
 8005652:	21ea      	movs	r1, #234	; 0xea
 8005654:	48a7      	ldr	r0, [pc, #668]	; (80058f4 <_dtoa_r+0x2d4>)
 8005656:	f001 fbd1 	bl	8006dfc <__assert_func>
 800565a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800565e:	6005      	str	r5, [r0, #0]
 8005660:	60c5      	str	r5, [r0, #12]
 8005662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005664:	6819      	ldr	r1, [r3, #0]
 8005666:	b151      	cbz	r1, 800567e <_dtoa_r+0x5e>
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	604a      	str	r2, [r1, #4]
 800566c:	2301      	movs	r3, #1
 800566e:	4093      	lsls	r3, r2
 8005670:	608b      	str	r3, [r1, #8]
 8005672:	4620      	mov	r0, r4
 8005674:	f000 fe1c 	bl	80062b0 <_Bfree>
 8005678:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800567a:	2200      	movs	r2, #0
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	1e3b      	subs	r3, r7, #0
 8005680:	bfaa      	itet	ge
 8005682:	2300      	movge	r3, #0
 8005684:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005688:	f8c8 3000 	strge.w	r3, [r8]
 800568c:	4b9a      	ldr	r3, [pc, #616]	; (80058f8 <_dtoa_r+0x2d8>)
 800568e:	bfbc      	itt	lt
 8005690:	2201      	movlt	r2, #1
 8005692:	f8c8 2000 	strlt.w	r2, [r8]
 8005696:	ea33 030b 	bics.w	r3, r3, fp
 800569a:	d11b      	bne.n	80056d4 <_dtoa_r+0xb4>
 800569c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800569e:	f242 730f 	movw	r3, #9999	; 0x270f
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80056a8:	4333      	orrs	r3, r6
 80056aa:	f000 8592 	beq.w	80061d2 <_dtoa_r+0xbb2>
 80056ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056b0:	b963      	cbnz	r3, 80056cc <_dtoa_r+0xac>
 80056b2:	4b92      	ldr	r3, [pc, #584]	; (80058fc <_dtoa_r+0x2dc>)
 80056b4:	e022      	b.n	80056fc <_dtoa_r+0xdc>
 80056b6:	4b92      	ldr	r3, [pc, #584]	; (8005900 <_dtoa_r+0x2e0>)
 80056b8:	9301      	str	r3, [sp, #4]
 80056ba:	3308      	adds	r3, #8
 80056bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	9801      	ldr	r0, [sp, #4]
 80056c2:	b013      	add	sp, #76	; 0x4c
 80056c4:	ecbd 8b04 	vpop	{d8-d9}
 80056c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056cc:	4b8b      	ldr	r3, [pc, #556]	; (80058fc <_dtoa_r+0x2dc>)
 80056ce:	9301      	str	r3, [sp, #4]
 80056d0:	3303      	adds	r3, #3
 80056d2:	e7f3      	b.n	80056bc <_dtoa_r+0x9c>
 80056d4:	2200      	movs	r2, #0
 80056d6:	2300      	movs	r3, #0
 80056d8:	4650      	mov	r0, sl
 80056da:	4659      	mov	r1, fp
 80056dc:	f7fb f9f4 	bl	8000ac8 <__aeabi_dcmpeq>
 80056e0:	ec4b ab19 	vmov	d9, sl, fp
 80056e4:	4680      	mov	r8, r0
 80056e6:	b158      	cbz	r0, 8005700 <_dtoa_r+0xe0>
 80056e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056ea:	2301      	movs	r3, #1
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 856b 	beq.w	80061cc <_dtoa_r+0xbac>
 80056f6:	4883      	ldr	r0, [pc, #524]	; (8005904 <_dtoa_r+0x2e4>)
 80056f8:	6018      	str	r0, [r3, #0]
 80056fa:	1e43      	subs	r3, r0, #1
 80056fc:	9301      	str	r3, [sp, #4]
 80056fe:	e7df      	b.n	80056c0 <_dtoa_r+0xa0>
 8005700:	ec4b ab10 	vmov	d0, sl, fp
 8005704:	aa10      	add	r2, sp, #64	; 0x40
 8005706:	a911      	add	r1, sp, #68	; 0x44
 8005708:	4620      	mov	r0, r4
 800570a:	f001 f8b9 	bl	8006880 <__d2b>
 800570e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005712:	ee08 0a10 	vmov	s16, r0
 8005716:	2d00      	cmp	r5, #0
 8005718:	f000 8084 	beq.w	8005824 <_dtoa_r+0x204>
 800571c:	ee19 3a90 	vmov	r3, s19
 8005720:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005724:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005728:	4656      	mov	r6, sl
 800572a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800572e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005732:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005736:	4b74      	ldr	r3, [pc, #464]	; (8005908 <_dtoa_r+0x2e8>)
 8005738:	2200      	movs	r2, #0
 800573a:	4630      	mov	r0, r6
 800573c:	4639      	mov	r1, r7
 800573e:	f7fa fda3 	bl	8000288 <__aeabi_dsub>
 8005742:	a365      	add	r3, pc, #404	; (adr r3, 80058d8 <_dtoa_r+0x2b8>)
 8005744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005748:	f7fa ff56 	bl	80005f8 <__aeabi_dmul>
 800574c:	a364      	add	r3, pc, #400	; (adr r3, 80058e0 <_dtoa_r+0x2c0>)
 800574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005752:	f7fa fd9b 	bl	800028c <__adddf3>
 8005756:	4606      	mov	r6, r0
 8005758:	4628      	mov	r0, r5
 800575a:	460f      	mov	r7, r1
 800575c:	f7fa fee2 	bl	8000524 <__aeabi_i2d>
 8005760:	a361      	add	r3, pc, #388	; (adr r3, 80058e8 <_dtoa_r+0x2c8>)
 8005762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005766:	f7fa ff47 	bl	80005f8 <__aeabi_dmul>
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	4630      	mov	r0, r6
 8005770:	4639      	mov	r1, r7
 8005772:	f7fa fd8b 	bl	800028c <__adddf3>
 8005776:	4606      	mov	r6, r0
 8005778:	460f      	mov	r7, r1
 800577a:	f7fb f9ed 	bl	8000b58 <__aeabi_d2iz>
 800577e:	2200      	movs	r2, #0
 8005780:	9000      	str	r0, [sp, #0]
 8005782:	2300      	movs	r3, #0
 8005784:	4630      	mov	r0, r6
 8005786:	4639      	mov	r1, r7
 8005788:	f7fb f9a8 	bl	8000adc <__aeabi_dcmplt>
 800578c:	b150      	cbz	r0, 80057a4 <_dtoa_r+0x184>
 800578e:	9800      	ldr	r0, [sp, #0]
 8005790:	f7fa fec8 	bl	8000524 <__aeabi_i2d>
 8005794:	4632      	mov	r2, r6
 8005796:	463b      	mov	r3, r7
 8005798:	f7fb f996 	bl	8000ac8 <__aeabi_dcmpeq>
 800579c:	b910      	cbnz	r0, 80057a4 <_dtoa_r+0x184>
 800579e:	9b00      	ldr	r3, [sp, #0]
 80057a0:	3b01      	subs	r3, #1
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	9b00      	ldr	r3, [sp, #0]
 80057a6:	2b16      	cmp	r3, #22
 80057a8:	d85a      	bhi.n	8005860 <_dtoa_r+0x240>
 80057aa:	9a00      	ldr	r2, [sp, #0]
 80057ac:	4b57      	ldr	r3, [pc, #348]	; (800590c <_dtoa_r+0x2ec>)
 80057ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	ec51 0b19 	vmov	r0, r1, d9
 80057ba:	f7fb f98f 	bl	8000adc <__aeabi_dcmplt>
 80057be:	2800      	cmp	r0, #0
 80057c0:	d050      	beq.n	8005864 <_dtoa_r+0x244>
 80057c2:	9b00      	ldr	r3, [sp, #0]
 80057c4:	3b01      	subs	r3, #1
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	2300      	movs	r3, #0
 80057ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80057cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057ce:	1b5d      	subs	r5, r3, r5
 80057d0:	1e6b      	subs	r3, r5, #1
 80057d2:	9305      	str	r3, [sp, #20]
 80057d4:	bf45      	ittet	mi
 80057d6:	f1c5 0301 	rsbmi	r3, r5, #1
 80057da:	9304      	strmi	r3, [sp, #16]
 80057dc:	2300      	movpl	r3, #0
 80057de:	2300      	movmi	r3, #0
 80057e0:	bf4c      	ite	mi
 80057e2:	9305      	strmi	r3, [sp, #20]
 80057e4:	9304      	strpl	r3, [sp, #16]
 80057e6:	9b00      	ldr	r3, [sp, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	db3d      	blt.n	8005868 <_dtoa_r+0x248>
 80057ec:	9b05      	ldr	r3, [sp, #20]
 80057ee:	9a00      	ldr	r2, [sp, #0]
 80057f0:	920a      	str	r2, [sp, #40]	; 0x28
 80057f2:	4413      	add	r3, r2
 80057f4:	9305      	str	r3, [sp, #20]
 80057f6:	2300      	movs	r3, #0
 80057f8:	9307      	str	r3, [sp, #28]
 80057fa:	9b06      	ldr	r3, [sp, #24]
 80057fc:	2b09      	cmp	r3, #9
 80057fe:	f200 8089 	bhi.w	8005914 <_dtoa_r+0x2f4>
 8005802:	2b05      	cmp	r3, #5
 8005804:	bfc4      	itt	gt
 8005806:	3b04      	subgt	r3, #4
 8005808:	9306      	strgt	r3, [sp, #24]
 800580a:	9b06      	ldr	r3, [sp, #24]
 800580c:	f1a3 0302 	sub.w	r3, r3, #2
 8005810:	bfcc      	ite	gt
 8005812:	2500      	movgt	r5, #0
 8005814:	2501      	movle	r5, #1
 8005816:	2b03      	cmp	r3, #3
 8005818:	f200 8087 	bhi.w	800592a <_dtoa_r+0x30a>
 800581c:	e8df f003 	tbb	[pc, r3]
 8005820:	59383a2d 	.word	0x59383a2d
 8005824:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005828:	441d      	add	r5, r3
 800582a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800582e:	2b20      	cmp	r3, #32
 8005830:	bfc1      	itttt	gt
 8005832:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005836:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800583a:	fa0b f303 	lslgt.w	r3, fp, r3
 800583e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005842:	bfda      	itte	le
 8005844:	f1c3 0320 	rsble	r3, r3, #32
 8005848:	fa06 f003 	lslle.w	r0, r6, r3
 800584c:	4318      	orrgt	r0, r3
 800584e:	f7fa fe59 	bl	8000504 <__aeabi_ui2d>
 8005852:	2301      	movs	r3, #1
 8005854:	4606      	mov	r6, r0
 8005856:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800585a:	3d01      	subs	r5, #1
 800585c:	930e      	str	r3, [sp, #56]	; 0x38
 800585e:	e76a      	b.n	8005736 <_dtoa_r+0x116>
 8005860:	2301      	movs	r3, #1
 8005862:	e7b2      	b.n	80057ca <_dtoa_r+0x1aa>
 8005864:	900b      	str	r0, [sp, #44]	; 0x2c
 8005866:	e7b1      	b.n	80057cc <_dtoa_r+0x1ac>
 8005868:	9b04      	ldr	r3, [sp, #16]
 800586a:	9a00      	ldr	r2, [sp, #0]
 800586c:	1a9b      	subs	r3, r3, r2
 800586e:	9304      	str	r3, [sp, #16]
 8005870:	4253      	negs	r3, r2
 8005872:	9307      	str	r3, [sp, #28]
 8005874:	2300      	movs	r3, #0
 8005876:	930a      	str	r3, [sp, #40]	; 0x28
 8005878:	e7bf      	b.n	80057fa <_dtoa_r+0x1da>
 800587a:	2300      	movs	r3, #0
 800587c:	9308      	str	r3, [sp, #32]
 800587e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005880:	2b00      	cmp	r3, #0
 8005882:	dc55      	bgt.n	8005930 <_dtoa_r+0x310>
 8005884:	2301      	movs	r3, #1
 8005886:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800588a:	461a      	mov	r2, r3
 800588c:	9209      	str	r2, [sp, #36]	; 0x24
 800588e:	e00c      	b.n	80058aa <_dtoa_r+0x28a>
 8005890:	2301      	movs	r3, #1
 8005892:	e7f3      	b.n	800587c <_dtoa_r+0x25c>
 8005894:	2300      	movs	r3, #0
 8005896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005898:	9308      	str	r3, [sp, #32]
 800589a:	9b00      	ldr	r3, [sp, #0]
 800589c:	4413      	add	r3, r2
 800589e:	9302      	str	r3, [sp, #8]
 80058a0:	3301      	adds	r3, #1
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	9303      	str	r3, [sp, #12]
 80058a6:	bfb8      	it	lt
 80058a8:	2301      	movlt	r3, #1
 80058aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80058ac:	2200      	movs	r2, #0
 80058ae:	6042      	str	r2, [r0, #4]
 80058b0:	2204      	movs	r2, #4
 80058b2:	f102 0614 	add.w	r6, r2, #20
 80058b6:	429e      	cmp	r6, r3
 80058b8:	6841      	ldr	r1, [r0, #4]
 80058ba:	d93d      	bls.n	8005938 <_dtoa_r+0x318>
 80058bc:	4620      	mov	r0, r4
 80058be:	f000 fcb7 	bl	8006230 <_Balloc>
 80058c2:	9001      	str	r0, [sp, #4]
 80058c4:	2800      	cmp	r0, #0
 80058c6:	d13b      	bne.n	8005940 <_dtoa_r+0x320>
 80058c8:	4b11      	ldr	r3, [pc, #68]	; (8005910 <_dtoa_r+0x2f0>)
 80058ca:	4602      	mov	r2, r0
 80058cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80058d0:	e6c0      	b.n	8005654 <_dtoa_r+0x34>
 80058d2:	2301      	movs	r3, #1
 80058d4:	e7df      	b.n	8005896 <_dtoa_r+0x276>
 80058d6:	bf00      	nop
 80058d8:	636f4361 	.word	0x636f4361
 80058dc:	3fd287a7 	.word	0x3fd287a7
 80058e0:	8b60c8b3 	.word	0x8b60c8b3
 80058e4:	3fc68a28 	.word	0x3fc68a28
 80058e8:	509f79fb 	.word	0x509f79fb
 80058ec:	3fd34413 	.word	0x3fd34413
 80058f0:	08007abd 	.word	0x08007abd
 80058f4:	08007ad4 	.word	0x08007ad4
 80058f8:	7ff00000 	.word	0x7ff00000
 80058fc:	08007ab9 	.word	0x08007ab9
 8005900:	08007ab0 	.word	0x08007ab0
 8005904:	08007a8d 	.word	0x08007a8d
 8005908:	3ff80000 	.word	0x3ff80000
 800590c:	08007bc8 	.word	0x08007bc8
 8005910:	08007b2f 	.word	0x08007b2f
 8005914:	2501      	movs	r5, #1
 8005916:	2300      	movs	r3, #0
 8005918:	9306      	str	r3, [sp, #24]
 800591a:	9508      	str	r5, [sp, #32]
 800591c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005920:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005924:	2200      	movs	r2, #0
 8005926:	2312      	movs	r3, #18
 8005928:	e7b0      	b.n	800588c <_dtoa_r+0x26c>
 800592a:	2301      	movs	r3, #1
 800592c:	9308      	str	r3, [sp, #32]
 800592e:	e7f5      	b.n	800591c <_dtoa_r+0x2fc>
 8005930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005932:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005936:	e7b8      	b.n	80058aa <_dtoa_r+0x28a>
 8005938:	3101      	adds	r1, #1
 800593a:	6041      	str	r1, [r0, #4]
 800593c:	0052      	lsls	r2, r2, #1
 800593e:	e7b8      	b.n	80058b2 <_dtoa_r+0x292>
 8005940:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005942:	9a01      	ldr	r2, [sp, #4]
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	9b03      	ldr	r3, [sp, #12]
 8005948:	2b0e      	cmp	r3, #14
 800594a:	f200 809d 	bhi.w	8005a88 <_dtoa_r+0x468>
 800594e:	2d00      	cmp	r5, #0
 8005950:	f000 809a 	beq.w	8005a88 <_dtoa_r+0x468>
 8005954:	9b00      	ldr	r3, [sp, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	dd32      	ble.n	80059c0 <_dtoa_r+0x3a0>
 800595a:	4ab7      	ldr	r2, [pc, #732]	; (8005c38 <_dtoa_r+0x618>)
 800595c:	f003 030f 	and.w	r3, r3, #15
 8005960:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005964:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005968:	9b00      	ldr	r3, [sp, #0]
 800596a:	05d8      	lsls	r0, r3, #23
 800596c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005970:	d516      	bpl.n	80059a0 <_dtoa_r+0x380>
 8005972:	4bb2      	ldr	r3, [pc, #712]	; (8005c3c <_dtoa_r+0x61c>)
 8005974:	ec51 0b19 	vmov	r0, r1, d9
 8005978:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800597c:	f7fa ff66 	bl	800084c <__aeabi_ddiv>
 8005980:	f007 070f 	and.w	r7, r7, #15
 8005984:	4682      	mov	sl, r0
 8005986:	468b      	mov	fp, r1
 8005988:	2503      	movs	r5, #3
 800598a:	4eac      	ldr	r6, [pc, #688]	; (8005c3c <_dtoa_r+0x61c>)
 800598c:	b957      	cbnz	r7, 80059a4 <_dtoa_r+0x384>
 800598e:	4642      	mov	r2, r8
 8005990:	464b      	mov	r3, r9
 8005992:	4650      	mov	r0, sl
 8005994:	4659      	mov	r1, fp
 8005996:	f7fa ff59 	bl	800084c <__aeabi_ddiv>
 800599a:	4682      	mov	sl, r0
 800599c:	468b      	mov	fp, r1
 800599e:	e028      	b.n	80059f2 <_dtoa_r+0x3d2>
 80059a0:	2502      	movs	r5, #2
 80059a2:	e7f2      	b.n	800598a <_dtoa_r+0x36a>
 80059a4:	07f9      	lsls	r1, r7, #31
 80059a6:	d508      	bpl.n	80059ba <_dtoa_r+0x39a>
 80059a8:	4640      	mov	r0, r8
 80059aa:	4649      	mov	r1, r9
 80059ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80059b0:	f7fa fe22 	bl	80005f8 <__aeabi_dmul>
 80059b4:	3501      	adds	r5, #1
 80059b6:	4680      	mov	r8, r0
 80059b8:	4689      	mov	r9, r1
 80059ba:	107f      	asrs	r7, r7, #1
 80059bc:	3608      	adds	r6, #8
 80059be:	e7e5      	b.n	800598c <_dtoa_r+0x36c>
 80059c0:	f000 809b 	beq.w	8005afa <_dtoa_r+0x4da>
 80059c4:	9b00      	ldr	r3, [sp, #0]
 80059c6:	4f9d      	ldr	r7, [pc, #628]	; (8005c3c <_dtoa_r+0x61c>)
 80059c8:	425e      	negs	r6, r3
 80059ca:	4b9b      	ldr	r3, [pc, #620]	; (8005c38 <_dtoa_r+0x618>)
 80059cc:	f006 020f 	and.w	r2, r6, #15
 80059d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d8:	ec51 0b19 	vmov	r0, r1, d9
 80059dc:	f7fa fe0c 	bl	80005f8 <__aeabi_dmul>
 80059e0:	1136      	asrs	r6, r6, #4
 80059e2:	4682      	mov	sl, r0
 80059e4:	468b      	mov	fp, r1
 80059e6:	2300      	movs	r3, #0
 80059e8:	2502      	movs	r5, #2
 80059ea:	2e00      	cmp	r6, #0
 80059ec:	d17a      	bne.n	8005ae4 <_dtoa_r+0x4c4>
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1d3      	bne.n	800599a <_dtoa_r+0x37a>
 80059f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 8082 	beq.w	8005afe <_dtoa_r+0x4de>
 80059fa:	4b91      	ldr	r3, [pc, #580]	; (8005c40 <_dtoa_r+0x620>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	4650      	mov	r0, sl
 8005a00:	4659      	mov	r1, fp
 8005a02:	f7fb f86b 	bl	8000adc <__aeabi_dcmplt>
 8005a06:	2800      	cmp	r0, #0
 8005a08:	d079      	beq.n	8005afe <_dtoa_r+0x4de>
 8005a0a:	9b03      	ldr	r3, [sp, #12]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d076      	beq.n	8005afe <_dtoa_r+0x4de>
 8005a10:	9b02      	ldr	r3, [sp, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	dd36      	ble.n	8005a84 <_dtoa_r+0x464>
 8005a16:	9b00      	ldr	r3, [sp, #0]
 8005a18:	4650      	mov	r0, sl
 8005a1a:	4659      	mov	r1, fp
 8005a1c:	1e5f      	subs	r7, r3, #1
 8005a1e:	2200      	movs	r2, #0
 8005a20:	4b88      	ldr	r3, [pc, #544]	; (8005c44 <_dtoa_r+0x624>)
 8005a22:	f7fa fde9 	bl	80005f8 <__aeabi_dmul>
 8005a26:	9e02      	ldr	r6, [sp, #8]
 8005a28:	4682      	mov	sl, r0
 8005a2a:	468b      	mov	fp, r1
 8005a2c:	3501      	adds	r5, #1
 8005a2e:	4628      	mov	r0, r5
 8005a30:	f7fa fd78 	bl	8000524 <__aeabi_i2d>
 8005a34:	4652      	mov	r2, sl
 8005a36:	465b      	mov	r3, fp
 8005a38:	f7fa fdde 	bl	80005f8 <__aeabi_dmul>
 8005a3c:	4b82      	ldr	r3, [pc, #520]	; (8005c48 <_dtoa_r+0x628>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f7fa fc24 	bl	800028c <__adddf3>
 8005a44:	46d0      	mov	r8, sl
 8005a46:	46d9      	mov	r9, fp
 8005a48:	4682      	mov	sl, r0
 8005a4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005a4e:	2e00      	cmp	r6, #0
 8005a50:	d158      	bne.n	8005b04 <_dtoa_r+0x4e4>
 8005a52:	4b7e      	ldr	r3, [pc, #504]	; (8005c4c <_dtoa_r+0x62c>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	4640      	mov	r0, r8
 8005a58:	4649      	mov	r1, r9
 8005a5a:	f7fa fc15 	bl	8000288 <__aeabi_dsub>
 8005a5e:	4652      	mov	r2, sl
 8005a60:	465b      	mov	r3, fp
 8005a62:	4680      	mov	r8, r0
 8005a64:	4689      	mov	r9, r1
 8005a66:	f7fb f857 	bl	8000b18 <__aeabi_dcmpgt>
 8005a6a:	2800      	cmp	r0, #0
 8005a6c:	f040 8295 	bne.w	8005f9a <_dtoa_r+0x97a>
 8005a70:	4652      	mov	r2, sl
 8005a72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005a76:	4640      	mov	r0, r8
 8005a78:	4649      	mov	r1, r9
 8005a7a:	f7fb f82f 	bl	8000adc <__aeabi_dcmplt>
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	f040 8289 	bne.w	8005f96 <_dtoa_r+0x976>
 8005a84:	ec5b ab19 	vmov	sl, fp, d9
 8005a88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f2c0 8148 	blt.w	8005d20 <_dtoa_r+0x700>
 8005a90:	9a00      	ldr	r2, [sp, #0]
 8005a92:	2a0e      	cmp	r2, #14
 8005a94:	f300 8144 	bgt.w	8005d20 <_dtoa_r+0x700>
 8005a98:	4b67      	ldr	r3, [pc, #412]	; (8005c38 <_dtoa_r+0x618>)
 8005a9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f280 80d5 	bge.w	8005c54 <_dtoa_r+0x634>
 8005aaa:	9b03      	ldr	r3, [sp, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f300 80d1 	bgt.w	8005c54 <_dtoa_r+0x634>
 8005ab2:	f040 826f 	bne.w	8005f94 <_dtoa_r+0x974>
 8005ab6:	4b65      	ldr	r3, [pc, #404]	; (8005c4c <_dtoa_r+0x62c>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	4640      	mov	r0, r8
 8005abc:	4649      	mov	r1, r9
 8005abe:	f7fa fd9b 	bl	80005f8 <__aeabi_dmul>
 8005ac2:	4652      	mov	r2, sl
 8005ac4:	465b      	mov	r3, fp
 8005ac6:	f7fb f81d 	bl	8000b04 <__aeabi_dcmpge>
 8005aca:	9e03      	ldr	r6, [sp, #12]
 8005acc:	4637      	mov	r7, r6
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	f040 8245 	bne.w	8005f5e <_dtoa_r+0x93e>
 8005ad4:	9d01      	ldr	r5, [sp, #4]
 8005ad6:	2331      	movs	r3, #49	; 0x31
 8005ad8:	f805 3b01 	strb.w	r3, [r5], #1
 8005adc:	9b00      	ldr	r3, [sp, #0]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	e240      	b.n	8005f66 <_dtoa_r+0x946>
 8005ae4:	07f2      	lsls	r2, r6, #31
 8005ae6:	d505      	bpl.n	8005af4 <_dtoa_r+0x4d4>
 8005ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005aec:	f7fa fd84 	bl	80005f8 <__aeabi_dmul>
 8005af0:	3501      	adds	r5, #1
 8005af2:	2301      	movs	r3, #1
 8005af4:	1076      	asrs	r6, r6, #1
 8005af6:	3708      	adds	r7, #8
 8005af8:	e777      	b.n	80059ea <_dtoa_r+0x3ca>
 8005afa:	2502      	movs	r5, #2
 8005afc:	e779      	b.n	80059f2 <_dtoa_r+0x3d2>
 8005afe:	9f00      	ldr	r7, [sp, #0]
 8005b00:	9e03      	ldr	r6, [sp, #12]
 8005b02:	e794      	b.n	8005a2e <_dtoa_r+0x40e>
 8005b04:	9901      	ldr	r1, [sp, #4]
 8005b06:	4b4c      	ldr	r3, [pc, #304]	; (8005c38 <_dtoa_r+0x618>)
 8005b08:	4431      	add	r1, r6
 8005b0a:	910d      	str	r1, [sp, #52]	; 0x34
 8005b0c:	9908      	ldr	r1, [sp, #32]
 8005b0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005b12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b16:	2900      	cmp	r1, #0
 8005b18:	d043      	beq.n	8005ba2 <_dtoa_r+0x582>
 8005b1a:	494d      	ldr	r1, [pc, #308]	; (8005c50 <_dtoa_r+0x630>)
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	f7fa fe95 	bl	800084c <__aeabi_ddiv>
 8005b22:	4652      	mov	r2, sl
 8005b24:	465b      	mov	r3, fp
 8005b26:	f7fa fbaf 	bl	8000288 <__aeabi_dsub>
 8005b2a:	9d01      	ldr	r5, [sp, #4]
 8005b2c:	4682      	mov	sl, r0
 8005b2e:	468b      	mov	fp, r1
 8005b30:	4649      	mov	r1, r9
 8005b32:	4640      	mov	r0, r8
 8005b34:	f7fb f810 	bl	8000b58 <__aeabi_d2iz>
 8005b38:	4606      	mov	r6, r0
 8005b3a:	f7fa fcf3 	bl	8000524 <__aeabi_i2d>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	460b      	mov	r3, r1
 8005b42:	4640      	mov	r0, r8
 8005b44:	4649      	mov	r1, r9
 8005b46:	f7fa fb9f 	bl	8000288 <__aeabi_dsub>
 8005b4a:	3630      	adds	r6, #48	; 0x30
 8005b4c:	f805 6b01 	strb.w	r6, [r5], #1
 8005b50:	4652      	mov	r2, sl
 8005b52:	465b      	mov	r3, fp
 8005b54:	4680      	mov	r8, r0
 8005b56:	4689      	mov	r9, r1
 8005b58:	f7fa ffc0 	bl	8000adc <__aeabi_dcmplt>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	d163      	bne.n	8005c28 <_dtoa_r+0x608>
 8005b60:	4642      	mov	r2, r8
 8005b62:	464b      	mov	r3, r9
 8005b64:	4936      	ldr	r1, [pc, #216]	; (8005c40 <_dtoa_r+0x620>)
 8005b66:	2000      	movs	r0, #0
 8005b68:	f7fa fb8e 	bl	8000288 <__aeabi_dsub>
 8005b6c:	4652      	mov	r2, sl
 8005b6e:	465b      	mov	r3, fp
 8005b70:	f7fa ffb4 	bl	8000adc <__aeabi_dcmplt>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	f040 80b5 	bne.w	8005ce4 <_dtoa_r+0x6c4>
 8005b7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b7c:	429d      	cmp	r5, r3
 8005b7e:	d081      	beq.n	8005a84 <_dtoa_r+0x464>
 8005b80:	4b30      	ldr	r3, [pc, #192]	; (8005c44 <_dtoa_r+0x624>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	4650      	mov	r0, sl
 8005b86:	4659      	mov	r1, fp
 8005b88:	f7fa fd36 	bl	80005f8 <__aeabi_dmul>
 8005b8c:	4b2d      	ldr	r3, [pc, #180]	; (8005c44 <_dtoa_r+0x624>)
 8005b8e:	4682      	mov	sl, r0
 8005b90:	468b      	mov	fp, r1
 8005b92:	4640      	mov	r0, r8
 8005b94:	4649      	mov	r1, r9
 8005b96:	2200      	movs	r2, #0
 8005b98:	f7fa fd2e 	bl	80005f8 <__aeabi_dmul>
 8005b9c:	4680      	mov	r8, r0
 8005b9e:	4689      	mov	r9, r1
 8005ba0:	e7c6      	b.n	8005b30 <_dtoa_r+0x510>
 8005ba2:	4650      	mov	r0, sl
 8005ba4:	4659      	mov	r1, fp
 8005ba6:	f7fa fd27 	bl	80005f8 <__aeabi_dmul>
 8005baa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bac:	9d01      	ldr	r5, [sp, #4]
 8005bae:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bb0:	4682      	mov	sl, r0
 8005bb2:	468b      	mov	fp, r1
 8005bb4:	4649      	mov	r1, r9
 8005bb6:	4640      	mov	r0, r8
 8005bb8:	f7fa ffce 	bl	8000b58 <__aeabi_d2iz>
 8005bbc:	4606      	mov	r6, r0
 8005bbe:	f7fa fcb1 	bl	8000524 <__aeabi_i2d>
 8005bc2:	3630      	adds	r6, #48	; 0x30
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	4640      	mov	r0, r8
 8005bca:	4649      	mov	r1, r9
 8005bcc:	f7fa fb5c 	bl	8000288 <__aeabi_dsub>
 8005bd0:	f805 6b01 	strb.w	r6, [r5], #1
 8005bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bd6:	429d      	cmp	r5, r3
 8005bd8:	4680      	mov	r8, r0
 8005bda:	4689      	mov	r9, r1
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	d124      	bne.n	8005c2c <_dtoa_r+0x60c>
 8005be2:	4b1b      	ldr	r3, [pc, #108]	; (8005c50 <_dtoa_r+0x630>)
 8005be4:	4650      	mov	r0, sl
 8005be6:	4659      	mov	r1, fp
 8005be8:	f7fa fb50 	bl	800028c <__adddf3>
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4640      	mov	r0, r8
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	f7fa ff90 	bl	8000b18 <__aeabi_dcmpgt>
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	d173      	bne.n	8005ce4 <_dtoa_r+0x6c4>
 8005bfc:	4652      	mov	r2, sl
 8005bfe:	465b      	mov	r3, fp
 8005c00:	4913      	ldr	r1, [pc, #76]	; (8005c50 <_dtoa_r+0x630>)
 8005c02:	2000      	movs	r0, #0
 8005c04:	f7fa fb40 	bl	8000288 <__aeabi_dsub>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	4640      	mov	r0, r8
 8005c0e:	4649      	mov	r1, r9
 8005c10:	f7fa ff64 	bl	8000adc <__aeabi_dcmplt>
 8005c14:	2800      	cmp	r0, #0
 8005c16:	f43f af35 	beq.w	8005a84 <_dtoa_r+0x464>
 8005c1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005c1c:	1e6b      	subs	r3, r5, #1
 8005c1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c24:	2b30      	cmp	r3, #48	; 0x30
 8005c26:	d0f8      	beq.n	8005c1a <_dtoa_r+0x5fa>
 8005c28:	9700      	str	r7, [sp, #0]
 8005c2a:	e049      	b.n	8005cc0 <_dtoa_r+0x6a0>
 8005c2c:	4b05      	ldr	r3, [pc, #20]	; (8005c44 <_dtoa_r+0x624>)
 8005c2e:	f7fa fce3 	bl	80005f8 <__aeabi_dmul>
 8005c32:	4680      	mov	r8, r0
 8005c34:	4689      	mov	r9, r1
 8005c36:	e7bd      	b.n	8005bb4 <_dtoa_r+0x594>
 8005c38:	08007bc8 	.word	0x08007bc8
 8005c3c:	08007ba0 	.word	0x08007ba0
 8005c40:	3ff00000 	.word	0x3ff00000
 8005c44:	40240000 	.word	0x40240000
 8005c48:	401c0000 	.word	0x401c0000
 8005c4c:	40140000 	.word	0x40140000
 8005c50:	3fe00000 	.word	0x3fe00000
 8005c54:	9d01      	ldr	r5, [sp, #4]
 8005c56:	4656      	mov	r6, sl
 8005c58:	465f      	mov	r7, fp
 8005c5a:	4642      	mov	r2, r8
 8005c5c:	464b      	mov	r3, r9
 8005c5e:	4630      	mov	r0, r6
 8005c60:	4639      	mov	r1, r7
 8005c62:	f7fa fdf3 	bl	800084c <__aeabi_ddiv>
 8005c66:	f7fa ff77 	bl	8000b58 <__aeabi_d2iz>
 8005c6a:	4682      	mov	sl, r0
 8005c6c:	f7fa fc5a 	bl	8000524 <__aeabi_i2d>
 8005c70:	4642      	mov	r2, r8
 8005c72:	464b      	mov	r3, r9
 8005c74:	f7fa fcc0 	bl	80005f8 <__aeabi_dmul>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	4639      	mov	r1, r7
 8005c80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005c84:	f7fa fb00 	bl	8000288 <__aeabi_dsub>
 8005c88:	f805 6b01 	strb.w	r6, [r5], #1
 8005c8c:	9e01      	ldr	r6, [sp, #4]
 8005c8e:	9f03      	ldr	r7, [sp, #12]
 8005c90:	1bae      	subs	r6, r5, r6
 8005c92:	42b7      	cmp	r7, r6
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	d135      	bne.n	8005d06 <_dtoa_r+0x6e6>
 8005c9a:	f7fa faf7 	bl	800028c <__adddf3>
 8005c9e:	4642      	mov	r2, r8
 8005ca0:	464b      	mov	r3, r9
 8005ca2:	4606      	mov	r6, r0
 8005ca4:	460f      	mov	r7, r1
 8005ca6:	f7fa ff37 	bl	8000b18 <__aeabi_dcmpgt>
 8005caa:	b9d0      	cbnz	r0, 8005ce2 <_dtoa_r+0x6c2>
 8005cac:	4642      	mov	r2, r8
 8005cae:	464b      	mov	r3, r9
 8005cb0:	4630      	mov	r0, r6
 8005cb2:	4639      	mov	r1, r7
 8005cb4:	f7fa ff08 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cb8:	b110      	cbz	r0, 8005cc0 <_dtoa_r+0x6a0>
 8005cba:	f01a 0f01 	tst.w	sl, #1
 8005cbe:	d110      	bne.n	8005ce2 <_dtoa_r+0x6c2>
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	ee18 1a10 	vmov	r1, s16
 8005cc6:	f000 faf3 	bl	80062b0 <_Bfree>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	9800      	ldr	r0, [sp, #0]
 8005cce:	702b      	strb	r3, [r5, #0]
 8005cd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	6018      	str	r0, [r3, #0]
 8005cd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f43f acf1 	beq.w	80056c0 <_dtoa_r+0xa0>
 8005cde:	601d      	str	r5, [r3, #0]
 8005ce0:	e4ee      	b.n	80056c0 <_dtoa_r+0xa0>
 8005ce2:	9f00      	ldr	r7, [sp, #0]
 8005ce4:	462b      	mov	r3, r5
 8005ce6:	461d      	mov	r5, r3
 8005ce8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cec:	2a39      	cmp	r2, #57	; 0x39
 8005cee:	d106      	bne.n	8005cfe <_dtoa_r+0x6de>
 8005cf0:	9a01      	ldr	r2, [sp, #4]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d1f7      	bne.n	8005ce6 <_dtoa_r+0x6c6>
 8005cf6:	9901      	ldr	r1, [sp, #4]
 8005cf8:	2230      	movs	r2, #48	; 0x30
 8005cfa:	3701      	adds	r7, #1
 8005cfc:	700a      	strb	r2, [r1, #0]
 8005cfe:	781a      	ldrb	r2, [r3, #0]
 8005d00:	3201      	adds	r2, #1
 8005d02:	701a      	strb	r2, [r3, #0]
 8005d04:	e790      	b.n	8005c28 <_dtoa_r+0x608>
 8005d06:	4ba6      	ldr	r3, [pc, #664]	; (8005fa0 <_dtoa_r+0x980>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f7fa fc75 	bl	80005f8 <__aeabi_dmul>
 8005d0e:	2200      	movs	r2, #0
 8005d10:	2300      	movs	r3, #0
 8005d12:	4606      	mov	r6, r0
 8005d14:	460f      	mov	r7, r1
 8005d16:	f7fa fed7 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	d09d      	beq.n	8005c5a <_dtoa_r+0x63a>
 8005d1e:	e7cf      	b.n	8005cc0 <_dtoa_r+0x6a0>
 8005d20:	9a08      	ldr	r2, [sp, #32]
 8005d22:	2a00      	cmp	r2, #0
 8005d24:	f000 80d7 	beq.w	8005ed6 <_dtoa_r+0x8b6>
 8005d28:	9a06      	ldr	r2, [sp, #24]
 8005d2a:	2a01      	cmp	r2, #1
 8005d2c:	f300 80ba 	bgt.w	8005ea4 <_dtoa_r+0x884>
 8005d30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d32:	2a00      	cmp	r2, #0
 8005d34:	f000 80b2 	beq.w	8005e9c <_dtoa_r+0x87c>
 8005d38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d3c:	9e07      	ldr	r6, [sp, #28]
 8005d3e:	9d04      	ldr	r5, [sp, #16]
 8005d40:	9a04      	ldr	r2, [sp, #16]
 8005d42:	441a      	add	r2, r3
 8005d44:	9204      	str	r2, [sp, #16]
 8005d46:	9a05      	ldr	r2, [sp, #20]
 8005d48:	2101      	movs	r1, #1
 8005d4a:	441a      	add	r2, r3
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	9205      	str	r2, [sp, #20]
 8005d50:	f000 fb66 	bl	8006420 <__i2b>
 8005d54:	4607      	mov	r7, r0
 8005d56:	2d00      	cmp	r5, #0
 8005d58:	dd0c      	ble.n	8005d74 <_dtoa_r+0x754>
 8005d5a:	9b05      	ldr	r3, [sp, #20]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	dd09      	ble.n	8005d74 <_dtoa_r+0x754>
 8005d60:	42ab      	cmp	r3, r5
 8005d62:	9a04      	ldr	r2, [sp, #16]
 8005d64:	bfa8      	it	ge
 8005d66:	462b      	movge	r3, r5
 8005d68:	1ad2      	subs	r2, r2, r3
 8005d6a:	9204      	str	r2, [sp, #16]
 8005d6c:	9a05      	ldr	r2, [sp, #20]
 8005d6e:	1aed      	subs	r5, r5, r3
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	9305      	str	r3, [sp, #20]
 8005d74:	9b07      	ldr	r3, [sp, #28]
 8005d76:	b31b      	cbz	r3, 8005dc0 <_dtoa_r+0x7a0>
 8005d78:	9b08      	ldr	r3, [sp, #32]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 80af 	beq.w	8005ede <_dtoa_r+0x8be>
 8005d80:	2e00      	cmp	r6, #0
 8005d82:	dd13      	ble.n	8005dac <_dtoa_r+0x78c>
 8005d84:	4639      	mov	r1, r7
 8005d86:	4632      	mov	r2, r6
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f000 fc09 	bl	80065a0 <__pow5mult>
 8005d8e:	ee18 2a10 	vmov	r2, s16
 8005d92:	4601      	mov	r1, r0
 8005d94:	4607      	mov	r7, r0
 8005d96:	4620      	mov	r0, r4
 8005d98:	f000 fb58 	bl	800644c <__multiply>
 8005d9c:	ee18 1a10 	vmov	r1, s16
 8005da0:	4680      	mov	r8, r0
 8005da2:	4620      	mov	r0, r4
 8005da4:	f000 fa84 	bl	80062b0 <_Bfree>
 8005da8:	ee08 8a10 	vmov	s16, r8
 8005dac:	9b07      	ldr	r3, [sp, #28]
 8005dae:	1b9a      	subs	r2, r3, r6
 8005db0:	d006      	beq.n	8005dc0 <_dtoa_r+0x7a0>
 8005db2:	ee18 1a10 	vmov	r1, s16
 8005db6:	4620      	mov	r0, r4
 8005db8:	f000 fbf2 	bl	80065a0 <__pow5mult>
 8005dbc:	ee08 0a10 	vmov	s16, r0
 8005dc0:	2101      	movs	r1, #1
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	f000 fb2c 	bl	8006420 <__i2b>
 8005dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	4606      	mov	r6, r0
 8005dce:	f340 8088 	ble.w	8005ee2 <_dtoa_r+0x8c2>
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	4601      	mov	r1, r0
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	f000 fbe2 	bl	80065a0 <__pow5mult>
 8005ddc:	9b06      	ldr	r3, [sp, #24]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	4606      	mov	r6, r0
 8005de2:	f340 8081 	ble.w	8005ee8 <_dtoa_r+0x8c8>
 8005de6:	f04f 0800 	mov.w	r8, #0
 8005dea:	6933      	ldr	r3, [r6, #16]
 8005dec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005df0:	6918      	ldr	r0, [r3, #16]
 8005df2:	f000 fac5 	bl	8006380 <__hi0bits>
 8005df6:	f1c0 0020 	rsb	r0, r0, #32
 8005dfa:	9b05      	ldr	r3, [sp, #20]
 8005dfc:	4418      	add	r0, r3
 8005dfe:	f010 001f 	ands.w	r0, r0, #31
 8005e02:	f000 8092 	beq.w	8005f2a <_dtoa_r+0x90a>
 8005e06:	f1c0 0320 	rsb	r3, r0, #32
 8005e0a:	2b04      	cmp	r3, #4
 8005e0c:	f340 808a 	ble.w	8005f24 <_dtoa_r+0x904>
 8005e10:	f1c0 001c 	rsb	r0, r0, #28
 8005e14:	9b04      	ldr	r3, [sp, #16]
 8005e16:	4403      	add	r3, r0
 8005e18:	9304      	str	r3, [sp, #16]
 8005e1a:	9b05      	ldr	r3, [sp, #20]
 8005e1c:	4403      	add	r3, r0
 8005e1e:	4405      	add	r5, r0
 8005e20:	9305      	str	r3, [sp, #20]
 8005e22:	9b04      	ldr	r3, [sp, #16]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	dd07      	ble.n	8005e38 <_dtoa_r+0x818>
 8005e28:	ee18 1a10 	vmov	r1, s16
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f000 fc10 	bl	8006654 <__lshift>
 8005e34:	ee08 0a10 	vmov	s16, r0
 8005e38:	9b05      	ldr	r3, [sp, #20]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	dd05      	ble.n	8005e4a <_dtoa_r+0x82a>
 8005e3e:	4631      	mov	r1, r6
 8005e40:	461a      	mov	r2, r3
 8005e42:	4620      	mov	r0, r4
 8005e44:	f000 fc06 	bl	8006654 <__lshift>
 8005e48:	4606      	mov	r6, r0
 8005e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d06e      	beq.n	8005f2e <_dtoa_r+0x90e>
 8005e50:	ee18 0a10 	vmov	r0, s16
 8005e54:	4631      	mov	r1, r6
 8005e56:	f000 fc6d 	bl	8006734 <__mcmp>
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	da67      	bge.n	8005f2e <_dtoa_r+0x90e>
 8005e5e:	9b00      	ldr	r3, [sp, #0]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	ee18 1a10 	vmov	r1, s16
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	220a      	movs	r2, #10
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	f000 fa41 	bl	80062f4 <__multadd>
 8005e72:	9b08      	ldr	r3, [sp, #32]
 8005e74:	ee08 0a10 	vmov	s16, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 81b1 	beq.w	80061e0 <_dtoa_r+0xbc0>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	4639      	mov	r1, r7
 8005e82:	220a      	movs	r2, #10
 8005e84:	4620      	mov	r0, r4
 8005e86:	f000 fa35 	bl	80062f4 <__multadd>
 8005e8a:	9b02      	ldr	r3, [sp, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	4607      	mov	r7, r0
 8005e90:	f300 808e 	bgt.w	8005fb0 <_dtoa_r+0x990>
 8005e94:	9b06      	ldr	r3, [sp, #24]
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	dc51      	bgt.n	8005f3e <_dtoa_r+0x91e>
 8005e9a:	e089      	b.n	8005fb0 <_dtoa_r+0x990>
 8005e9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005ea2:	e74b      	b.n	8005d3c <_dtoa_r+0x71c>
 8005ea4:	9b03      	ldr	r3, [sp, #12]
 8005ea6:	1e5e      	subs	r6, r3, #1
 8005ea8:	9b07      	ldr	r3, [sp, #28]
 8005eaa:	42b3      	cmp	r3, r6
 8005eac:	bfbf      	itttt	lt
 8005eae:	9b07      	ldrlt	r3, [sp, #28]
 8005eb0:	9607      	strlt	r6, [sp, #28]
 8005eb2:	1af2      	sublt	r2, r6, r3
 8005eb4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005eb6:	bfb6      	itet	lt
 8005eb8:	189b      	addlt	r3, r3, r2
 8005eba:	1b9e      	subge	r6, r3, r6
 8005ebc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005ebe:	9b03      	ldr	r3, [sp, #12]
 8005ec0:	bfb8      	it	lt
 8005ec2:	2600      	movlt	r6, #0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	bfb7      	itett	lt
 8005ec8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005ecc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005ed0:	1a9d      	sublt	r5, r3, r2
 8005ed2:	2300      	movlt	r3, #0
 8005ed4:	e734      	b.n	8005d40 <_dtoa_r+0x720>
 8005ed6:	9e07      	ldr	r6, [sp, #28]
 8005ed8:	9d04      	ldr	r5, [sp, #16]
 8005eda:	9f08      	ldr	r7, [sp, #32]
 8005edc:	e73b      	b.n	8005d56 <_dtoa_r+0x736>
 8005ede:	9a07      	ldr	r2, [sp, #28]
 8005ee0:	e767      	b.n	8005db2 <_dtoa_r+0x792>
 8005ee2:	9b06      	ldr	r3, [sp, #24]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	dc18      	bgt.n	8005f1a <_dtoa_r+0x8fa>
 8005ee8:	f1ba 0f00 	cmp.w	sl, #0
 8005eec:	d115      	bne.n	8005f1a <_dtoa_r+0x8fa>
 8005eee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ef2:	b993      	cbnz	r3, 8005f1a <_dtoa_r+0x8fa>
 8005ef4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005ef8:	0d1b      	lsrs	r3, r3, #20
 8005efa:	051b      	lsls	r3, r3, #20
 8005efc:	b183      	cbz	r3, 8005f20 <_dtoa_r+0x900>
 8005efe:	9b04      	ldr	r3, [sp, #16]
 8005f00:	3301      	adds	r3, #1
 8005f02:	9304      	str	r3, [sp, #16]
 8005f04:	9b05      	ldr	r3, [sp, #20]
 8005f06:	3301      	adds	r3, #1
 8005f08:	9305      	str	r3, [sp, #20]
 8005f0a:	f04f 0801 	mov.w	r8, #1
 8005f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f47f af6a 	bne.w	8005dea <_dtoa_r+0x7ca>
 8005f16:	2001      	movs	r0, #1
 8005f18:	e76f      	b.n	8005dfa <_dtoa_r+0x7da>
 8005f1a:	f04f 0800 	mov.w	r8, #0
 8005f1e:	e7f6      	b.n	8005f0e <_dtoa_r+0x8ee>
 8005f20:	4698      	mov	r8, r3
 8005f22:	e7f4      	b.n	8005f0e <_dtoa_r+0x8ee>
 8005f24:	f43f af7d 	beq.w	8005e22 <_dtoa_r+0x802>
 8005f28:	4618      	mov	r0, r3
 8005f2a:	301c      	adds	r0, #28
 8005f2c:	e772      	b.n	8005e14 <_dtoa_r+0x7f4>
 8005f2e:	9b03      	ldr	r3, [sp, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	dc37      	bgt.n	8005fa4 <_dtoa_r+0x984>
 8005f34:	9b06      	ldr	r3, [sp, #24]
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	dd34      	ble.n	8005fa4 <_dtoa_r+0x984>
 8005f3a:	9b03      	ldr	r3, [sp, #12]
 8005f3c:	9302      	str	r3, [sp, #8]
 8005f3e:	9b02      	ldr	r3, [sp, #8]
 8005f40:	b96b      	cbnz	r3, 8005f5e <_dtoa_r+0x93e>
 8005f42:	4631      	mov	r1, r6
 8005f44:	2205      	movs	r2, #5
 8005f46:	4620      	mov	r0, r4
 8005f48:	f000 f9d4 	bl	80062f4 <__multadd>
 8005f4c:	4601      	mov	r1, r0
 8005f4e:	4606      	mov	r6, r0
 8005f50:	ee18 0a10 	vmov	r0, s16
 8005f54:	f000 fbee 	bl	8006734 <__mcmp>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	f73f adbb 	bgt.w	8005ad4 <_dtoa_r+0x4b4>
 8005f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f60:	9d01      	ldr	r5, [sp, #4]
 8005f62:	43db      	mvns	r3, r3
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	f04f 0800 	mov.w	r8, #0
 8005f6a:	4631      	mov	r1, r6
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	f000 f99f 	bl	80062b0 <_Bfree>
 8005f72:	2f00      	cmp	r7, #0
 8005f74:	f43f aea4 	beq.w	8005cc0 <_dtoa_r+0x6a0>
 8005f78:	f1b8 0f00 	cmp.w	r8, #0
 8005f7c:	d005      	beq.n	8005f8a <_dtoa_r+0x96a>
 8005f7e:	45b8      	cmp	r8, r7
 8005f80:	d003      	beq.n	8005f8a <_dtoa_r+0x96a>
 8005f82:	4641      	mov	r1, r8
 8005f84:	4620      	mov	r0, r4
 8005f86:	f000 f993 	bl	80062b0 <_Bfree>
 8005f8a:	4639      	mov	r1, r7
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f000 f98f 	bl	80062b0 <_Bfree>
 8005f92:	e695      	b.n	8005cc0 <_dtoa_r+0x6a0>
 8005f94:	2600      	movs	r6, #0
 8005f96:	4637      	mov	r7, r6
 8005f98:	e7e1      	b.n	8005f5e <_dtoa_r+0x93e>
 8005f9a:	9700      	str	r7, [sp, #0]
 8005f9c:	4637      	mov	r7, r6
 8005f9e:	e599      	b.n	8005ad4 <_dtoa_r+0x4b4>
 8005fa0:	40240000 	.word	0x40240000
 8005fa4:	9b08      	ldr	r3, [sp, #32]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 80ca 	beq.w	8006140 <_dtoa_r+0xb20>
 8005fac:	9b03      	ldr	r3, [sp, #12]
 8005fae:	9302      	str	r3, [sp, #8]
 8005fb0:	2d00      	cmp	r5, #0
 8005fb2:	dd05      	ble.n	8005fc0 <_dtoa_r+0x9a0>
 8005fb4:	4639      	mov	r1, r7
 8005fb6:	462a      	mov	r2, r5
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f000 fb4b 	bl	8006654 <__lshift>
 8005fbe:	4607      	mov	r7, r0
 8005fc0:	f1b8 0f00 	cmp.w	r8, #0
 8005fc4:	d05b      	beq.n	800607e <_dtoa_r+0xa5e>
 8005fc6:	6879      	ldr	r1, [r7, #4]
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f000 f931 	bl	8006230 <_Balloc>
 8005fce:	4605      	mov	r5, r0
 8005fd0:	b928      	cbnz	r0, 8005fde <_dtoa_r+0x9be>
 8005fd2:	4b87      	ldr	r3, [pc, #540]	; (80061f0 <_dtoa_r+0xbd0>)
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005fda:	f7ff bb3b 	b.w	8005654 <_dtoa_r+0x34>
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	3202      	adds	r2, #2
 8005fe2:	0092      	lsls	r2, r2, #2
 8005fe4:	f107 010c 	add.w	r1, r7, #12
 8005fe8:	300c      	adds	r0, #12
 8005fea:	f000 f913 	bl	8006214 <memcpy>
 8005fee:	2201      	movs	r2, #1
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f000 fb2e 	bl	8006654 <__lshift>
 8005ff8:	9b01      	ldr	r3, [sp, #4]
 8005ffa:	f103 0901 	add.w	r9, r3, #1
 8005ffe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006002:	4413      	add	r3, r2
 8006004:	9305      	str	r3, [sp, #20]
 8006006:	f00a 0301 	and.w	r3, sl, #1
 800600a:	46b8      	mov	r8, r7
 800600c:	9304      	str	r3, [sp, #16]
 800600e:	4607      	mov	r7, r0
 8006010:	4631      	mov	r1, r6
 8006012:	ee18 0a10 	vmov	r0, s16
 8006016:	f7ff fa77 	bl	8005508 <quorem>
 800601a:	4641      	mov	r1, r8
 800601c:	9002      	str	r0, [sp, #8]
 800601e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006022:	ee18 0a10 	vmov	r0, s16
 8006026:	f000 fb85 	bl	8006734 <__mcmp>
 800602a:	463a      	mov	r2, r7
 800602c:	9003      	str	r0, [sp, #12]
 800602e:	4631      	mov	r1, r6
 8006030:	4620      	mov	r0, r4
 8006032:	f000 fb9b 	bl	800676c <__mdiff>
 8006036:	68c2      	ldr	r2, [r0, #12]
 8006038:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800603c:	4605      	mov	r5, r0
 800603e:	bb02      	cbnz	r2, 8006082 <_dtoa_r+0xa62>
 8006040:	4601      	mov	r1, r0
 8006042:	ee18 0a10 	vmov	r0, s16
 8006046:	f000 fb75 	bl	8006734 <__mcmp>
 800604a:	4602      	mov	r2, r0
 800604c:	4629      	mov	r1, r5
 800604e:	4620      	mov	r0, r4
 8006050:	9207      	str	r2, [sp, #28]
 8006052:	f000 f92d 	bl	80062b0 <_Bfree>
 8006056:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800605a:	ea43 0102 	orr.w	r1, r3, r2
 800605e:	9b04      	ldr	r3, [sp, #16]
 8006060:	430b      	orrs	r3, r1
 8006062:	464d      	mov	r5, r9
 8006064:	d10f      	bne.n	8006086 <_dtoa_r+0xa66>
 8006066:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800606a:	d02a      	beq.n	80060c2 <_dtoa_r+0xaa2>
 800606c:	9b03      	ldr	r3, [sp, #12]
 800606e:	2b00      	cmp	r3, #0
 8006070:	dd02      	ble.n	8006078 <_dtoa_r+0xa58>
 8006072:	9b02      	ldr	r3, [sp, #8]
 8006074:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006078:	f88b a000 	strb.w	sl, [fp]
 800607c:	e775      	b.n	8005f6a <_dtoa_r+0x94a>
 800607e:	4638      	mov	r0, r7
 8006080:	e7ba      	b.n	8005ff8 <_dtoa_r+0x9d8>
 8006082:	2201      	movs	r2, #1
 8006084:	e7e2      	b.n	800604c <_dtoa_r+0xa2c>
 8006086:	9b03      	ldr	r3, [sp, #12]
 8006088:	2b00      	cmp	r3, #0
 800608a:	db04      	blt.n	8006096 <_dtoa_r+0xa76>
 800608c:	9906      	ldr	r1, [sp, #24]
 800608e:	430b      	orrs	r3, r1
 8006090:	9904      	ldr	r1, [sp, #16]
 8006092:	430b      	orrs	r3, r1
 8006094:	d122      	bne.n	80060dc <_dtoa_r+0xabc>
 8006096:	2a00      	cmp	r2, #0
 8006098:	ddee      	ble.n	8006078 <_dtoa_r+0xa58>
 800609a:	ee18 1a10 	vmov	r1, s16
 800609e:	2201      	movs	r2, #1
 80060a0:	4620      	mov	r0, r4
 80060a2:	f000 fad7 	bl	8006654 <__lshift>
 80060a6:	4631      	mov	r1, r6
 80060a8:	ee08 0a10 	vmov	s16, r0
 80060ac:	f000 fb42 	bl	8006734 <__mcmp>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	dc03      	bgt.n	80060bc <_dtoa_r+0xa9c>
 80060b4:	d1e0      	bne.n	8006078 <_dtoa_r+0xa58>
 80060b6:	f01a 0f01 	tst.w	sl, #1
 80060ba:	d0dd      	beq.n	8006078 <_dtoa_r+0xa58>
 80060bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80060c0:	d1d7      	bne.n	8006072 <_dtoa_r+0xa52>
 80060c2:	2339      	movs	r3, #57	; 0x39
 80060c4:	f88b 3000 	strb.w	r3, [fp]
 80060c8:	462b      	mov	r3, r5
 80060ca:	461d      	mov	r5, r3
 80060cc:	3b01      	subs	r3, #1
 80060ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80060d2:	2a39      	cmp	r2, #57	; 0x39
 80060d4:	d071      	beq.n	80061ba <_dtoa_r+0xb9a>
 80060d6:	3201      	adds	r2, #1
 80060d8:	701a      	strb	r2, [r3, #0]
 80060da:	e746      	b.n	8005f6a <_dtoa_r+0x94a>
 80060dc:	2a00      	cmp	r2, #0
 80060de:	dd07      	ble.n	80060f0 <_dtoa_r+0xad0>
 80060e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80060e4:	d0ed      	beq.n	80060c2 <_dtoa_r+0xaa2>
 80060e6:	f10a 0301 	add.w	r3, sl, #1
 80060ea:	f88b 3000 	strb.w	r3, [fp]
 80060ee:	e73c      	b.n	8005f6a <_dtoa_r+0x94a>
 80060f0:	9b05      	ldr	r3, [sp, #20]
 80060f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80060f6:	4599      	cmp	r9, r3
 80060f8:	d047      	beq.n	800618a <_dtoa_r+0xb6a>
 80060fa:	ee18 1a10 	vmov	r1, s16
 80060fe:	2300      	movs	r3, #0
 8006100:	220a      	movs	r2, #10
 8006102:	4620      	mov	r0, r4
 8006104:	f000 f8f6 	bl	80062f4 <__multadd>
 8006108:	45b8      	cmp	r8, r7
 800610a:	ee08 0a10 	vmov	s16, r0
 800610e:	f04f 0300 	mov.w	r3, #0
 8006112:	f04f 020a 	mov.w	r2, #10
 8006116:	4641      	mov	r1, r8
 8006118:	4620      	mov	r0, r4
 800611a:	d106      	bne.n	800612a <_dtoa_r+0xb0a>
 800611c:	f000 f8ea 	bl	80062f4 <__multadd>
 8006120:	4680      	mov	r8, r0
 8006122:	4607      	mov	r7, r0
 8006124:	f109 0901 	add.w	r9, r9, #1
 8006128:	e772      	b.n	8006010 <_dtoa_r+0x9f0>
 800612a:	f000 f8e3 	bl	80062f4 <__multadd>
 800612e:	4639      	mov	r1, r7
 8006130:	4680      	mov	r8, r0
 8006132:	2300      	movs	r3, #0
 8006134:	220a      	movs	r2, #10
 8006136:	4620      	mov	r0, r4
 8006138:	f000 f8dc 	bl	80062f4 <__multadd>
 800613c:	4607      	mov	r7, r0
 800613e:	e7f1      	b.n	8006124 <_dtoa_r+0xb04>
 8006140:	9b03      	ldr	r3, [sp, #12]
 8006142:	9302      	str	r3, [sp, #8]
 8006144:	9d01      	ldr	r5, [sp, #4]
 8006146:	ee18 0a10 	vmov	r0, s16
 800614a:	4631      	mov	r1, r6
 800614c:	f7ff f9dc 	bl	8005508 <quorem>
 8006150:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006154:	9b01      	ldr	r3, [sp, #4]
 8006156:	f805 ab01 	strb.w	sl, [r5], #1
 800615a:	1aea      	subs	r2, r5, r3
 800615c:	9b02      	ldr	r3, [sp, #8]
 800615e:	4293      	cmp	r3, r2
 8006160:	dd09      	ble.n	8006176 <_dtoa_r+0xb56>
 8006162:	ee18 1a10 	vmov	r1, s16
 8006166:	2300      	movs	r3, #0
 8006168:	220a      	movs	r2, #10
 800616a:	4620      	mov	r0, r4
 800616c:	f000 f8c2 	bl	80062f4 <__multadd>
 8006170:	ee08 0a10 	vmov	s16, r0
 8006174:	e7e7      	b.n	8006146 <_dtoa_r+0xb26>
 8006176:	9b02      	ldr	r3, [sp, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	bfc8      	it	gt
 800617c:	461d      	movgt	r5, r3
 800617e:	9b01      	ldr	r3, [sp, #4]
 8006180:	bfd8      	it	le
 8006182:	2501      	movle	r5, #1
 8006184:	441d      	add	r5, r3
 8006186:	f04f 0800 	mov.w	r8, #0
 800618a:	ee18 1a10 	vmov	r1, s16
 800618e:	2201      	movs	r2, #1
 8006190:	4620      	mov	r0, r4
 8006192:	f000 fa5f 	bl	8006654 <__lshift>
 8006196:	4631      	mov	r1, r6
 8006198:	ee08 0a10 	vmov	s16, r0
 800619c:	f000 faca 	bl	8006734 <__mcmp>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	dc91      	bgt.n	80060c8 <_dtoa_r+0xaa8>
 80061a4:	d102      	bne.n	80061ac <_dtoa_r+0xb8c>
 80061a6:	f01a 0f01 	tst.w	sl, #1
 80061aa:	d18d      	bne.n	80060c8 <_dtoa_r+0xaa8>
 80061ac:	462b      	mov	r3, r5
 80061ae:	461d      	mov	r5, r3
 80061b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061b4:	2a30      	cmp	r2, #48	; 0x30
 80061b6:	d0fa      	beq.n	80061ae <_dtoa_r+0xb8e>
 80061b8:	e6d7      	b.n	8005f6a <_dtoa_r+0x94a>
 80061ba:	9a01      	ldr	r2, [sp, #4]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d184      	bne.n	80060ca <_dtoa_r+0xaaa>
 80061c0:	9b00      	ldr	r3, [sp, #0]
 80061c2:	3301      	adds	r3, #1
 80061c4:	9300      	str	r3, [sp, #0]
 80061c6:	2331      	movs	r3, #49	; 0x31
 80061c8:	7013      	strb	r3, [r2, #0]
 80061ca:	e6ce      	b.n	8005f6a <_dtoa_r+0x94a>
 80061cc:	4b09      	ldr	r3, [pc, #36]	; (80061f4 <_dtoa_r+0xbd4>)
 80061ce:	f7ff ba95 	b.w	80056fc <_dtoa_r+0xdc>
 80061d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f47f aa6e 	bne.w	80056b6 <_dtoa_r+0x96>
 80061da:	4b07      	ldr	r3, [pc, #28]	; (80061f8 <_dtoa_r+0xbd8>)
 80061dc:	f7ff ba8e 	b.w	80056fc <_dtoa_r+0xdc>
 80061e0:	9b02      	ldr	r3, [sp, #8]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	dcae      	bgt.n	8006144 <_dtoa_r+0xb24>
 80061e6:	9b06      	ldr	r3, [sp, #24]
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	f73f aea8 	bgt.w	8005f3e <_dtoa_r+0x91e>
 80061ee:	e7a9      	b.n	8006144 <_dtoa_r+0xb24>
 80061f0:	08007b2f 	.word	0x08007b2f
 80061f4:	08007a8c 	.word	0x08007a8c
 80061f8:	08007ab0 	.word	0x08007ab0

080061fc <_localeconv_r>:
 80061fc:	4800      	ldr	r0, [pc, #0]	; (8006200 <_localeconv_r+0x4>)
 80061fe:	4770      	bx	lr
 8006200:	20000168 	.word	0x20000168

08006204 <malloc>:
 8006204:	4b02      	ldr	r3, [pc, #8]	; (8006210 <malloc+0xc>)
 8006206:	4601      	mov	r1, r0
 8006208:	6818      	ldr	r0, [r3, #0]
 800620a:	f000 bc17 	b.w	8006a3c <_malloc_r>
 800620e:	bf00      	nop
 8006210:	20000014 	.word	0x20000014

08006214 <memcpy>:
 8006214:	440a      	add	r2, r1
 8006216:	4291      	cmp	r1, r2
 8006218:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800621c:	d100      	bne.n	8006220 <memcpy+0xc>
 800621e:	4770      	bx	lr
 8006220:	b510      	push	{r4, lr}
 8006222:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006226:	f803 4f01 	strb.w	r4, [r3, #1]!
 800622a:	4291      	cmp	r1, r2
 800622c:	d1f9      	bne.n	8006222 <memcpy+0xe>
 800622e:	bd10      	pop	{r4, pc}

08006230 <_Balloc>:
 8006230:	b570      	push	{r4, r5, r6, lr}
 8006232:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006234:	4604      	mov	r4, r0
 8006236:	460d      	mov	r5, r1
 8006238:	b976      	cbnz	r6, 8006258 <_Balloc+0x28>
 800623a:	2010      	movs	r0, #16
 800623c:	f7ff ffe2 	bl	8006204 <malloc>
 8006240:	4602      	mov	r2, r0
 8006242:	6260      	str	r0, [r4, #36]	; 0x24
 8006244:	b920      	cbnz	r0, 8006250 <_Balloc+0x20>
 8006246:	4b18      	ldr	r3, [pc, #96]	; (80062a8 <_Balloc+0x78>)
 8006248:	4818      	ldr	r0, [pc, #96]	; (80062ac <_Balloc+0x7c>)
 800624a:	2166      	movs	r1, #102	; 0x66
 800624c:	f000 fdd6 	bl	8006dfc <__assert_func>
 8006250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006254:	6006      	str	r6, [r0, #0]
 8006256:	60c6      	str	r6, [r0, #12]
 8006258:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800625a:	68f3      	ldr	r3, [r6, #12]
 800625c:	b183      	cbz	r3, 8006280 <_Balloc+0x50>
 800625e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006266:	b9b8      	cbnz	r0, 8006298 <_Balloc+0x68>
 8006268:	2101      	movs	r1, #1
 800626a:	fa01 f605 	lsl.w	r6, r1, r5
 800626e:	1d72      	adds	r2, r6, #5
 8006270:	0092      	lsls	r2, r2, #2
 8006272:	4620      	mov	r0, r4
 8006274:	f000 fb60 	bl	8006938 <_calloc_r>
 8006278:	b160      	cbz	r0, 8006294 <_Balloc+0x64>
 800627a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800627e:	e00e      	b.n	800629e <_Balloc+0x6e>
 8006280:	2221      	movs	r2, #33	; 0x21
 8006282:	2104      	movs	r1, #4
 8006284:	4620      	mov	r0, r4
 8006286:	f000 fb57 	bl	8006938 <_calloc_r>
 800628a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800628c:	60f0      	str	r0, [r6, #12]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e4      	bne.n	800625e <_Balloc+0x2e>
 8006294:	2000      	movs	r0, #0
 8006296:	bd70      	pop	{r4, r5, r6, pc}
 8006298:	6802      	ldr	r2, [r0, #0]
 800629a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800629e:	2300      	movs	r3, #0
 80062a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80062a4:	e7f7      	b.n	8006296 <_Balloc+0x66>
 80062a6:	bf00      	nop
 80062a8:	08007abd 	.word	0x08007abd
 80062ac:	08007b40 	.word	0x08007b40

080062b0 <_Bfree>:
 80062b0:	b570      	push	{r4, r5, r6, lr}
 80062b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80062b4:	4605      	mov	r5, r0
 80062b6:	460c      	mov	r4, r1
 80062b8:	b976      	cbnz	r6, 80062d8 <_Bfree+0x28>
 80062ba:	2010      	movs	r0, #16
 80062bc:	f7ff ffa2 	bl	8006204 <malloc>
 80062c0:	4602      	mov	r2, r0
 80062c2:	6268      	str	r0, [r5, #36]	; 0x24
 80062c4:	b920      	cbnz	r0, 80062d0 <_Bfree+0x20>
 80062c6:	4b09      	ldr	r3, [pc, #36]	; (80062ec <_Bfree+0x3c>)
 80062c8:	4809      	ldr	r0, [pc, #36]	; (80062f0 <_Bfree+0x40>)
 80062ca:	218a      	movs	r1, #138	; 0x8a
 80062cc:	f000 fd96 	bl	8006dfc <__assert_func>
 80062d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062d4:	6006      	str	r6, [r0, #0]
 80062d6:	60c6      	str	r6, [r0, #12]
 80062d8:	b13c      	cbz	r4, 80062ea <_Bfree+0x3a>
 80062da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80062dc:	6862      	ldr	r2, [r4, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80062e4:	6021      	str	r1, [r4, #0]
 80062e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80062ea:	bd70      	pop	{r4, r5, r6, pc}
 80062ec:	08007abd 	.word	0x08007abd
 80062f0:	08007b40 	.word	0x08007b40

080062f4 <__multadd>:
 80062f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062f8:	690d      	ldr	r5, [r1, #16]
 80062fa:	4607      	mov	r7, r0
 80062fc:	460c      	mov	r4, r1
 80062fe:	461e      	mov	r6, r3
 8006300:	f101 0c14 	add.w	ip, r1, #20
 8006304:	2000      	movs	r0, #0
 8006306:	f8dc 3000 	ldr.w	r3, [ip]
 800630a:	b299      	uxth	r1, r3
 800630c:	fb02 6101 	mla	r1, r2, r1, r6
 8006310:	0c1e      	lsrs	r6, r3, #16
 8006312:	0c0b      	lsrs	r3, r1, #16
 8006314:	fb02 3306 	mla	r3, r2, r6, r3
 8006318:	b289      	uxth	r1, r1
 800631a:	3001      	adds	r0, #1
 800631c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006320:	4285      	cmp	r5, r0
 8006322:	f84c 1b04 	str.w	r1, [ip], #4
 8006326:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800632a:	dcec      	bgt.n	8006306 <__multadd+0x12>
 800632c:	b30e      	cbz	r6, 8006372 <__multadd+0x7e>
 800632e:	68a3      	ldr	r3, [r4, #8]
 8006330:	42ab      	cmp	r3, r5
 8006332:	dc19      	bgt.n	8006368 <__multadd+0x74>
 8006334:	6861      	ldr	r1, [r4, #4]
 8006336:	4638      	mov	r0, r7
 8006338:	3101      	adds	r1, #1
 800633a:	f7ff ff79 	bl	8006230 <_Balloc>
 800633e:	4680      	mov	r8, r0
 8006340:	b928      	cbnz	r0, 800634e <__multadd+0x5a>
 8006342:	4602      	mov	r2, r0
 8006344:	4b0c      	ldr	r3, [pc, #48]	; (8006378 <__multadd+0x84>)
 8006346:	480d      	ldr	r0, [pc, #52]	; (800637c <__multadd+0x88>)
 8006348:	21b5      	movs	r1, #181	; 0xb5
 800634a:	f000 fd57 	bl	8006dfc <__assert_func>
 800634e:	6922      	ldr	r2, [r4, #16]
 8006350:	3202      	adds	r2, #2
 8006352:	f104 010c 	add.w	r1, r4, #12
 8006356:	0092      	lsls	r2, r2, #2
 8006358:	300c      	adds	r0, #12
 800635a:	f7ff ff5b 	bl	8006214 <memcpy>
 800635e:	4621      	mov	r1, r4
 8006360:	4638      	mov	r0, r7
 8006362:	f7ff ffa5 	bl	80062b0 <_Bfree>
 8006366:	4644      	mov	r4, r8
 8006368:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800636c:	3501      	adds	r5, #1
 800636e:	615e      	str	r6, [r3, #20]
 8006370:	6125      	str	r5, [r4, #16]
 8006372:	4620      	mov	r0, r4
 8006374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006378:	08007b2f 	.word	0x08007b2f
 800637c:	08007b40 	.word	0x08007b40

08006380 <__hi0bits>:
 8006380:	0c03      	lsrs	r3, r0, #16
 8006382:	041b      	lsls	r3, r3, #16
 8006384:	b9d3      	cbnz	r3, 80063bc <__hi0bits+0x3c>
 8006386:	0400      	lsls	r0, r0, #16
 8006388:	2310      	movs	r3, #16
 800638a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800638e:	bf04      	itt	eq
 8006390:	0200      	lsleq	r0, r0, #8
 8006392:	3308      	addeq	r3, #8
 8006394:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006398:	bf04      	itt	eq
 800639a:	0100      	lsleq	r0, r0, #4
 800639c:	3304      	addeq	r3, #4
 800639e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80063a2:	bf04      	itt	eq
 80063a4:	0080      	lsleq	r0, r0, #2
 80063a6:	3302      	addeq	r3, #2
 80063a8:	2800      	cmp	r0, #0
 80063aa:	db05      	blt.n	80063b8 <__hi0bits+0x38>
 80063ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80063b0:	f103 0301 	add.w	r3, r3, #1
 80063b4:	bf08      	it	eq
 80063b6:	2320      	moveq	r3, #32
 80063b8:	4618      	mov	r0, r3
 80063ba:	4770      	bx	lr
 80063bc:	2300      	movs	r3, #0
 80063be:	e7e4      	b.n	800638a <__hi0bits+0xa>

080063c0 <__lo0bits>:
 80063c0:	6803      	ldr	r3, [r0, #0]
 80063c2:	f013 0207 	ands.w	r2, r3, #7
 80063c6:	4601      	mov	r1, r0
 80063c8:	d00b      	beq.n	80063e2 <__lo0bits+0x22>
 80063ca:	07da      	lsls	r2, r3, #31
 80063cc:	d423      	bmi.n	8006416 <__lo0bits+0x56>
 80063ce:	0798      	lsls	r0, r3, #30
 80063d0:	bf49      	itett	mi
 80063d2:	085b      	lsrmi	r3, r3, #1
 80063d4:	089b      	lsrpl	r3, r3, #2
 80063d6:	2001      	movmi	r0, #1
 80063d8:	600b      	strmi	r3, [r1, #0]
 80063da:	bf5c      	itt	pl
 80063dc:	600b      	strpl	r3, [r1, #0]
 80063de:	2002      	movpl	r0, #2
 80063e0:	4770      	bx	lr
 80063e2:	b298      	uxth	r0, r3
 80063e4:	b9a8      	cbnz	r0, 8006412 <__lo0bits+0x52>
 80063e6:	0c1b      	lsrs	r3, r3, #16
 80063e8:	2010      	movs	r0, #16
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	b90a      	cbnz	r2, 80063f2 <__lo0bits+0x32>
 80063ee:	3008      	adds	r0, #8
 80063f0:	0a1b      	lsrs	r3, r3, #8
 80063f2:	071a      	lsls	r2, r3, #28
 80063f4:	bf04      	itt	eq
 80063f6:	091b      	lsreq	r3, r3, #4
 80063f8:	3004      	addeq	r0, #4
 80063fa:	079a      	lsls	r2, r3, #30
 80063fc:	bf04      	itt	eq
 80063fe:	089b      	lsreq	r3, r3, #2
 8006400:	3002      	addeq	r0, #2
 8006402:	07da      	lsls	r2, r3, #31
 8006404:	d403      	bmi.n	800640e <__lo0bits+0x4e>
 8006406:	085b      	lsrs	r3, r3, #1
 8006408:	f100 0001 	add.w	r0, r0, #1
 800640c:	d005      	beq.n	800641a <__lo0bits+0x5a>
 800640e:	600b      	str	r3, [r1, #0]
 8006410:	4770      	bx	lr
 8006412:	4610      	mov	r0, r2
 8006414:	e7e9      	b.n	80063ea <__lo0bits+0x2a>
 8006416:	2000      	movs	r0, #0
 8006418:	4770      	bx	lr
 800641a:	2020      	movs	r0, #32
 800641c:	4770      	bx	lr
	...

08006420 <__i2b>:
 8006420:	b510      	push	{r4, lr}
 8006422:	460c      	mov	r4, r1
 8006424:	2101      	movs	r1, #1
 8006426:	f7ff ff03 	bl	8006230 <_Balloc>
 800642a:	4602      	mov	r2, r0
 800642c:	b928      	cbnz	r0, 800643a <__i2b+0x1a>
 800642e:	4b05      	ldr	r3, [pc, #20]	; (8006444 <__i2b+0x24>)
 8006430:	4805      	ldr	r0, [pc, #20]	; (8006448 <__i2b+0x28>)
 8006432:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006436:	f000 fce1 	bl	8006dfc <__assert_func>
 800643a:	2301      	movs	r3, #1
 800643c:	6144      	str	r4, [r0, #20]
 800643e:	6103      	str	r3, [r0, #16]
 8006440:	bd10      	pop	{r4, pc}
 8006442:	bf00      	nop
 8006444:	08007b2f 	.word	0x08007b2f
 8006448:	08007b40 	.word	0x08007b40

0800644c <__multiply>:
 800644c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006450:	4691      	mov	r9, r2
 8006452:	690a      	ldr	r2, [r1, #16]
 8006454:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006458:	429a      	cmp	r2, r3
 800645a:	bfb8      	it	lt
 800645c:	460b      	movlt	r3, r1
 800645e:	460c      	mov	r4, r1
 8006460:	bfbc      	itt	lt
 8006462:	464c      	movlt	r4, r9
 8006464:	4699      	movlt	r9, r3
 8006466:	6927      	ldr	r7, [r4, #16]
 8006468:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800646c:	68a3      	ldr	r3, [r4, #8]
 800646e:	6861      	ldr	r1, [r4, #4]
 8006470:	eb07 060a 	add.w	r6, r7, sl
 8006474:	42b3      	cmp	r3, r6
 8006476:	b085      	sub	sp, #20
 8006478:	bfb8      	it	lt
 800647a:	3101      	addlt	r1, #1
 800647c:	f7ff fed8 	bl	8006230 <_Balloc>
 8006480:	b930      	cbnz	r0, 8006490 <__multiply+0x44>
 8006482:	4602      	mov	r2, r0
 8006484:	4b44      	ldr	r3, [pc, #272]	; (8006598 <__multiply+0x14c>)
 8006486:	4845      	ldr	r0, [pc, #276]	; (800659c <__multiply+0x150>)
 8006488:	f240 115d 	movw	r1, #349	; 0x15d
 800648c:	f000 fcb6 	bl	8006dfc <__assert_func>
 8006490:	f100 0514 	add.w	r5, r0, #20
 8006494:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006498:	462b      	mov	r3, r5
 800649a:	2200      	movs	r2, #0
 800649c:	4543      	cmp	r3, r8
 800649e:	d321      	bcc.n	80064e4 <__multiply+0x98>
 80064a0:	f104 0314 	add.w	r3, r4, #20
 80064a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80064a8:	f109 0314 	add.w	r3, r9, #20
 80064ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80064b0:	9202      	str	r2, [sp, #8]
 80064b2:	1b3a      	subs	r2, r7, r4
 80064b4:	3a15      	subs	r2, #21
 80064b6:	f022 0203 	bic.w	r2, r2, #3
 80064ba:	3204      	adds	r2, #4
 80064bc:	f104 0115 	add.w	r1, r4, #21
 80064c0:	428f      	cmp	r7, r1
 80064c2:	bf38      	it	cc
 80064c4:	2204      	movcc	r2, #4
 80064c6:	9201      	str	r2, [sp, #4]
 80064c8:	9a02      	ldr	r2, [sp, #8]
 80064ca:	9303      	str	r3, [sp, #12]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d80c      	bhi.n	80064ea <__multiply+0x9e>
 80064d0:	2e00      	cmp	r6, #0
 80064d2:	dd03      	ble.n	80064dc <__multiply+0x90>
 80064d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d05a      	beq.n	8006592 <__multiply+0x146>
 80064dc:	6106      	str	r6, [r0, #16]
 80064de:	b005      	add	sp, #20
 80064e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e4:	f843 2b04 	str.w	r2, [r3], #4
 80064e8:	e7d8      	b.n	800649c <__multiply+0x50>
 80064ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80064ee:	f1ba 0f00 	cmp.w	sl, #0
 80064f2:	d024      	beq.n	800653e <__multiply+0xf2>
 80064f4:	f104 0e14 	add.w	lr, r4, #20
 80064f8:	46a9      	mov	r9, r5
 80064fa:	f04f 0c00 	mov.w	ip, #0
 80064fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006502:	f8d9 1000 	ldr.w	r1, [r9]
 8006506:	fa1f fb82 	uxth.w	fp, r2
 800650a:	b289      	uxth	r1, r1
 800650c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006510:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006514:	f8d9 2000 	ldr.w	r2, [r9]
 8006518:	4461      	add	r1, ip
 800651a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800651e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006522:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006526:	b289      	uxth	r1, r1
 8006528:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800652c:	4577      	cmp	r7, lr
 800652e:	f849 1b04 	str.w	r1, [r9], #4
 8006532:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006536:	d8e2      	bhi.n	80064fe <__multiply+0xb2>
 8006538:	9a01      	ldr	r2, [sp, #4]
 800653a:	f845 c002 	str.w	ip, [r5, r2]
 800653e:	9a03      	ldr	r2, [sp, #12]
 8006540:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006544:	3304      	adds	r3, #4
 8006546:	f1b9 0f00 	cmp.w	r9, #0
 800654a:	d020      	beq.n	800658e <__multiply+0x142>
 800654c:	6829      	ldr	r1, [r5, #0]
 800654e:	f104 0c14 	add.w	ip, r4, #20
 8006552:	46ae      	mov	lr, r5
 8006554:	f04f 0a00 	mov.w	sl, #0
 8006558:	f8bc b000 	ldrh.w	fp, [ip]
 800655c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006560:	fb09 220b 	mla	r2, r9, fp, r2
 8006564:	4492      	add	sl, r2
 8006566:	b289      	uxth	r1, r1
 8006568:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800656c:	f84e 1b04 	str.w	r1, [lr], #4
 8006570:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006574:	f8be 1000 	ldrh.w	r1, [lr]
 8006578:	0c12      	lsrs	r2, r2, #16
 800657a:	fb09 1102 	mla	r1, r9, r2, r1
 800657e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006582:	4567      	cmp	r7, ip
 8006584:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006588:	d8e6      	bhi.n	8006558 <__multiply+0x10c>
 800658a:	9a01      	ldr	r2, [sp, #4]
 800658c:	50a9      	str	r1, [r5, r2]
 800658e:	3504      	adds	r5, #4
 8006590:	e79a      	b.n	80064c8 <__multiply+0x7c>
 8006592:	3e01      	subs	r6, #1
 8006594:	e79c      	b.n	80064d0 <__multiply+0x84>
 8006596:	bf00      	nop
 8006598:	08007b2f 	.word	0x08007b2f
 800659c:	08007b40 	.word	0x08007b40

080065a0 <__pow5mult>:
 80065a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065a4:	4615      	mov	r5, r2
 80065a6:	f012 0203 	ands.w	r2, r2, #3
 80065aa:	4606      	mov	r6, r0
 80065ac:	460f      	mov	r7, r1
 80065ae:	d007      	beq.n	80065c0 <__pow5mult+0x20>
 80065b0:	4c25      	ldr	r4, [pc, #148]	; (8006648 <__pow5mult+0xa8>)
 80065b2:	3a01      	subs	r2, #1
 80065b4:	2300      	movs	r3, #0
 80065b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065ba:	f7ff fe9b 	bl	80062f4 <__multadd>
 80065be:	4607      	mov	r7, r0
 80065c0:	10ad      	asrs	r5, r5, #2
 80065c2:	d03d      	beq.n	8006640 <__pow5mult+0xa0>
 80065c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80065c6:	b97c      	cbnz	r4, 80065e8 <__pow5mult+0x48>
 80065c8:	2010      	movs	r0, #16
 80065ca:	f7ff fe1b 	bl	8006204 <malloc>
 80065ce:	4602      	mov	r2, r0
 80065d0:	6270      	str	r0, [r6, #36]	; 0x24
 80065d2:	b928      	cbnz	r0, 80065e0 <__pow5mult+0x40>
 80065d4:	4b1d      	ldr	r3, [pc, #116]	; (800664c <__pow5mult+0xac>)
 80065d6:	481e      	ldr	r0, [pc, #120]	; (8006650 <__pow5mult+0xb0>)
 80065d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80065dc:	f000 fc0e 	bl	8006dfc <__assert_func>
 80065e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065e4:	6004      	str	r4, [r0, #0]
 80065e6:	60c4      	str	r4, [r0, #12]
 80065e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80065ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80065f0:	b94c      	cbnz	r4, 8006606 <__pow5mult+0x66>
 80065f2:	f240 2171 	movw	r1, #625	; 0x271
 80065f6:	4630      	mov	r0, r6
 80065f8:	f7ff ff12 	bl	8006420 <__i2b>
 80065fc:	2300      	movs	r3, #0
 80065fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8006602:	4604      	mov	r4, r0
 8006604:	6003      	str	r3, [r0, #0]
 8006606:	f04f 0900 	mov.w	r9, #0
 800660a:	07eb      	lsls	r3, r5, #31
 800660c:	d50a      	bpl.n	8006624 <__pow5mult+0x84>
 800660e:	4639      	mov	r1, r7
 8006610:	4622      	mov	r2, r4
 8006612:	4630      	mov	r0, r6
 8006614:	f7ff ff1a 	bl	800644c <__multiply>
 8006618:	4639      	mov	r1, r7
 800661a:	4680      	mov	r8, r0
 800661c:	4630      	mov	r0, r6
 800661e:	f7ff fe47 	bl	80062b0 <_Bfree>
 8006622:	4647      	mov	r7, r8
 8006624:	106d      	asrs	r5, r5, #1
 8006626:	d00b      	beq.n	8006640 <__pow5mult+0xa0>
 8006628:	6820      	ldr	r0, [r4, #0]
 800662a:	b938      	cbnz	r0, 800663c <__pow5mult+0x9c>
 800662c:	4622      	mov	r2, r4
 800662e:	4621      	mov	r1, r4
 8006630:	4630      	mov	r0, r6
 8006632:	f7ff ff0b 	bl	800644c <__multiply>
 8006636:	6020      	str	r0, [r4, #0]
 8006638:	f8c0 9000 	str.w	r9, [r0]
 800663c:	4604      	mov	r4, r0
 800663e:	e7e4      	b.n	800660a <__pow5mult+0x6a>
 8006640:	4638      	mov	r0, r7
 8006642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006646:	bf00      	nop
 8006648:	08007c90 	.word	0x08007c90
 800664c:	08007abd 	.word	0x08007abd
 8006650:	08007b40 	.word	0x08007b40

08006654 <__lshift>:
 8006654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006658:	460c      	mov	r4, r1
 800665a:	6849      	ldr	r1, [r1, #4]
 800665c:	6923      	ldr	r3, [r4, #16]
 800665e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006662:	68a3      	ldr	r3, [r4, #8]
 8006664:	4607      	mov	r7, r0
 8006666:	4691      	mov	r9, r2
 8006668:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800666c:	f108 0601 	add.w	r6, r8, #1
 8006670:	42b3      	cmp	r3, r6
 8006672:	db0b      	blt.n	800668c <__lshift+0x38>
 8006674:	4638      	mov	r0, r7
 8006676:	f7ff fddb 	bl	8006230 <_Balloc>
 800667a:	4605      	mov	r5, r0
 800667c:	b948      	cbnz	r0, 8006692 <__lshift+0x3e>
 800667e:	4602      	mov	r2, r0
 8006680:	4b2a      	ldr	r3, [pc, #168]	; (800672c <__lshift+0xd8>)
 8006682:	482b      	ldr	r0, [pc, #172]	; (8006730 <__lshift+0xdc>)
 8006684:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006688:	f000 fbb8 	bl	8006dfc <__assert_func>
 800668c:	3101      	adds	r1, #1
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	e7ee      	b.n	8006670 <__lshift+0x1c>
 8006692:	2300      	movs	r3, #0
 8006694:	f100 0114 	add.w	r1, r0, #20
 8006698:	f100 0210 	add.w	r2, r0, #16
 800669c:	4618      	mov	r0, r3
 800669e:	4553      	cmp	r3, sl
 80066a0:	db37      	blt.n	8006712 <__lshift+0xbe>
 80066a2:	6920      	ldr	r0, [r4, #16]
 80066a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066a8:	f104 0314 	add.w	r3, r4, #20
 80066ac:	f019 091f 	ands.w	r9, r9, #31
 80066b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80066b8:	d02f      	beq.n	800671a <__lshift+0xc6>
 80066ba:	f1c9 0e20 	rsb	lr, r9, #32
 80066be:	468a      	mov	sl, r1
 80066c0:	f04f 0c00 	mov.w	ip, #0
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	fa02 f209 	lsl.w	r2, r2, r9
 80066ca:	ea42 020c 	orr.w	r2, r2, ip
 80066ce:	f84a 2b04 	str.w	r2, [sl], #4
 80066d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80066d6:	4298      	cmp	r0, r3
 80066d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80066dc:	d8f2      	bhi.n	80066c4 <__lshift+0x70>
 80066de:	1b03      	subs	r3, r0, r4
 80066e0:	3b15      	subs	r3, #21
 80066e2:	f023 0303 	bic.w	r3, r3, #3
 80066e6:	3304      	adds	r3, #4
 80066e8:	f104 0215 	add.w	r2, r4, #21
 80066ec:	4290      	cmp	r0, r2
 80066ee:	bf38      	it	cc
 80066f0:	2304      	movcc	r3, #4
 80066f2:	f841 c003 	str.w	ip, [r1, r3]
 80066f6:	f1bc 0f00 	cmp.w	ip, #0
 80066fa:	d001      	beq.n	8006700 <__lshift+0xac>
 80066fc:	f108 0602 	add.w	r6, r8, #2
 8006700:	3e01      	subs	r6, #1
 8006702:	4638      	mov	r0, r7
 8006704:	612e      	str	r6, [r5, #16]
 8006706:	4621      	mov	r1, r4
 8006708:	f7ff fdd2 	bl	80062b0 <_Bfree>
 800670c:	4628      	mov	r0, r5
 800670e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006712:	f842 0f04 	str.w	r0, [r2, #4]!
 8006716:	3301      	adds	r3, #1
 8006718:	e7c1      	b.n	800669e <__lshift+0x4a>
 800671a:	3904      	subs	r1, #4
 800671c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006720:	f841 2f04 	str.w	r2, [r1, #4]!
 8006724:	4298      	cmp	r0, r3
 8006726:	d8f9      	bhi.n	800671c <__lshift+0xc8>
 8006728:	e7ea      	b.n	8006700 <__lshift+0xac>
 800672a:	bf00      	nop
 800672c:	08007b2f 	.word	0x08007b2f
 8006730:	08007b40 	.word	0x08007b40

08006734 <__mcmp>:
 8006734:	b530      	push	{r4, r5, lr}
 8006736:	6902      	ldr	r2, [r0, #16]
 8006738:	690c      	ldr	r4, [r1, #16]
 800673a:	1b12      	subs	r2, r2, r4
 800673c:	d10e      	bne.n	800675c <__mcmp+0x28>
 800673e:	f100 0314 	add.w	r3, r0, #20
 8006742:	3114      	adds	r1, #20
 8006744:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006748:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800674c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006750:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006754:	42a5      	cmp	r5, r4
 8006756:	d003      	beq.n	8006760 <__mcmp+0x2c>
 8006758:	d305      	bcc.n	8006766 <__mcmp+0x32>
 800675a:	2201      	movs	r2, #1
 800675c:	4610      	mov	r0, r2
 800675e:	bd30      	pop	{r4, r5, pc}
 8006760:	4283      	cmp	r3, r0
 8006762:	d3f3      	bcc.n	800674c <__mcmp+0x18>
 8006764:	e7fa      	b.n	800675c <__mcmp+0x28>
 8006766:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800676a:	e7f7      	b.n	800675c <__mcmp+0x28>

0800676c <__mdiff>:
 800676c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006770:	460c      	mov	r4, r1
 8006772:	4606      	mov	r6, r0
 8006774:	4611      	mov	r1, r2
 8006776:	4620      	mov	r0, r4
 8006778:	4690      	mov	r8, r2
 800677a:	f7ff ffdb 	bl	8006734 <__mcmp>
 800677e:	1e05      	subs	r5, r0, #0
 8006780:	d110      	bne.n	80067a4 <__mdiff+0x38>
 8006782:	4629      	mov	r1, r5
 8006784:	4630      	mov	r0, r6
 8006786:	f7ff fd53 	bl	8006230 <_Balloc>
 800678a:	b930      	cbnz	r0, 800679a <__mdiff+0x2e>
 800678c:	4b3a      	ldr	r3, [pc, #232]	; (8006878 <__mdiff+0x10c>)
 800678e:	4602      	mov	r2, r0
 8006790:	f240 2132 	movw	r1, #562	; 0x232
 8006794:	4839      	ldr	r0, [pc, #228]	; (800687c <__mdiff+0x110>)
 8006796:	f000 fb31 	bl	8006dfc <__assert_func>
 800679a:	2301      	movs	r3, #1
 800679c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80067a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a4:	bfa4      	itt	ge
 80067a6:	4643      	movge	r3, r8
 80067a8:	46a0      	movge	r8, r4
 80067aa:	4630      	mov	r0, r6
 80067ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80067b0:	bfa6      	itte	ge
 80067b2:	461c      	movge	r4, r3
 80067b4:	2500      	movge	r5, #0
 80067b6:	2501      	movlt	r5, #1
 80067b8:	f7ff fd3a 	bl	8006230 <_Balloc>
 80067bc:	b920      	cbnz	r0, 80067c8 <__mdiff+0x5c>
 80067be:	4b2e      	ldr	r3, [pc, #184]	; (8006878 <__mdiff+0x10c>)
 80067c0:	4602      	mov	r2, r0
 80067c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80067c6:	e7e5      	b.n	8006794 <__mdiff+0x28>
 80067c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80067cc:	6926      	ldr	r6, [r4, #16]
 80067ce:	60c5      	str	r5, [r0, #12]
 80067d0:	f104 0914 	add.w	r9, r4, #20
 80067d4:	f108 0514 	add.w	r5, r8, #20
 80067d8:	f100 0e14 	add.w	lr, r0, #20
 80067dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80067e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80067e4:	f108 0210 	add.w	r2, r8, #16
 80067e8:	46f2      	mov	sl, lr
 80067ea:	2100      	movs	r1, #0
 80067ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80067f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80067f4:	fa1f f883 	uxth.w	r8, r3
 80067f8:	fa11 f18b 	uxtah	r1, r1, fp
 80067fc:	0c1b      	lsrs	r3, r3, #16
 80067fe:	eba1 0808 	sub.w	r8, r1, r8
 8006802:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006806:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800680a:	fa1f f888 	uxth.w	r8, r8
 800680e:	1419      	asrs	r1, r3, #16
 8006810:	454e      	cmp	r6, r9
 8006812:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006816:	f84a 3b04 	str.w	r3, [sl], #4
 800681a:	d8e7      	bhi.n	80067ec <__mdiff+0x80>
 800681c:	1b33      	subs	r3, r6, r4
 800681e:	3b15      	subs	r3, #21
 8006820:	f023 0303 	bic.w	r3, r3, #3
 8006824:	3304      	adds	r3, #4
 8006826:	3415      	adds	r4, #21
 8006828:	42a6      	cmp	r6, r4
 800682a:	bf38      	it	cc
 800682c:	2304      	movcc	r3, #4
 800682e:	441d      	add	r5, r3
 8006830:	4473      	add	r3, lr
 8006832:	469e      	mov	lr, r3
 8006834:	462e      	mov	r6, r5
 8006836:	4566      	cmp	r6, ip
 8006838:	d30e      	bcc.n	8006858 <__mdiff+0xec>
 800683a:	f10c 0203 	add.w	r2, ip, #3
 800683e:	1b52      	subs	r2, r2, r5
 8006840:	f022 0203 	bic.w	r2, r2, #3
 8006844:	3d03      	subs	r5, #3
 8006846:	45ac      	cmp	ip, r5
 8006848:	bf38      	it	cc
 800684a:	2200      	movcc	r2, #0
 800684c:	441a      	add	r2, r3
 800684e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006852:	b17b      	cbz	r3, 8006874 <__mdiff+0x108>
 8006854:	6107      	str	r7, [r0, #16]
 8006856:	e7a3      	b.n	80067a0 <__mdiff+0x34>
 8006858:	f856 8b04 	ldr.w	r8, [r6], #4
 800685c:	fa11 f288 	uxtah	r2, r1, r8
 8006860:	1414      	asrs	r4, r2, #16
 8006862:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006866:	b292      	uxth	r2, r2
 8006868:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800686c:	f84e 2b04 	str.w	r2, [lr], #4
 8006870:	1421      	asrs	r1, r4, #16
 8006872:	e7e0      	b.n	8006836 <__mdiff+0xca>
 8006874:	3f01      	subs	r7, #1
 8006876:	e7ea      	b.n	800684e <__mdiff+0xe2>
 8006878:	08007b2f 	.word	0x08007b2f
 800687c:	08007b40 	.word	0x08007b40

08006880 <__d2b>:
 8006880:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006884:	4689      	mov	r9, r1
 8006886:	2101      	movs	r1, #1
 8006888:	ec57 6b10 	vmov	r6, r7, d0
 800688c:	4690      	mov	r8, r2
 800688e:	f7ff fccf 	bl	8006230 <_Balloc>
 8006892:	4604      	mov	r4, r0
 8006894:	b930      	cbnz	r0, 80068a4 <__d2b+0x24>
 8006896:	4602      	mov	r2, r0
 8006898:	4b25      	ldr	r3, [pc, #148]	; (8006930 <__d2b+0xb0>)
 800689a:	4826      	ldr	r0, [pc, #152]	; (8006934 <__d2b+0xb4>)
 800689c:	f240 310a 	movw	r1, #778	; 0x30a
 80068a0:	f000 faac 	bl	8006dfc <__assert_func>
 80068a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80068a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80068ac:	bb35      	cbnz	r5, 80068fc <__d2b+0x7c>
 80068ae:	2e00      	cmp	r6, #0
 80068b0:	9301      	str	r3, [sp, #4]
 80068b2:	d028      	beq.n	8006906 <__d2b+0x86>
 80068b4:	4668      	mov	r0, sp
 80068b6:	9600      	str	r6, [sp, #0]
 80068b8:	f7ff fd82 	bl	80063c0 <__lo0bits>
 80068bc:	9900      	ldr	r1, [sp, #0]
 80068be:	b300      	cbz	r0, 8006902 <__d2b+0x82>
 80068c0:	9a01      	ldr	r2, [sp, #4]
 80068c2:	f1c0 0320 	rsb	r3, r0, #32
 80068c6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ca:	430b      	orrs	r3, r1
 80068cc:	40c2      	lsrs	r2, r0
 80068ce:	6163      	str	r3, [r4, #20]
 80068d0:	9201      	str	r2, [sp, #4]
 80068d2:	9b01      	ldr	r3, [sp, #4]
 80068d4:	61a3      	str	r3, [r4, #24]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	bf14      	ite	ne
 80068da:	2202      	movne	r2, #2
 80068dc:	2201      	moveq	r2, #1
 80068de:	6122      	str	r2, [r4, #16]
 80068e0:	b1d5      	cbz	r5, 8006918 <__d2b+0x98>
 80068e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80068e6:	4405      	add	r5, r0
 80068e8:	f8c9 5000 	str.w	r5, [r9]
 80068ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80068f0:	f8c8 0000 	str.w	r0, [r8]
 80068f4:	4620      	mov	r0, r4
 80068f6:	b003      	add	sp, #12
 80068f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006900:	e7d5      	b.n	80068ae <__d2b+0x2e>
 8006902:	6161      	str	r1, [r4, #20]
 8006904:	e7e5      	b.n	80068d2 <__d2b+0x52>
 8006906:	a801      	add	r0, sp, #4
 8006908:	f7ff fd5a 	bl	80063c0 <__lo0bits>
 800690c:	9b01      	ldr	r3, [sp, #4]
 800690e:	6163      	str	r3, [r4, #20]
 8006910:	2201      	movs	r2, #1
 8006912:	6122      	str	r2, [r4, #16]
 8006914:	3020      	adds	r0, #32
 8006916:	e7e3      	b.n	80068e0 <__d2b+0x60>
 8006918:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800691c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006920:	f8c9 0000 	str.w	r0, [r9]
 8006924:	6918      	ldr	r0, [r3, #16]
 8006926:	f7ff fd2b 	bl	8006380 <__hi0bits>
 800692a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800692e:	e7df      	b.n	80068f0 <__d2b+0x70>
 8006930:	08007b2f 	.word	0x08007b2f
 8006934:	08007b40 	.word	0x08007b40

08006938 <_calloc_r>:
 8006938:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800693a:	fba1 2402 	umull	r2, r4, r1, r2
 800693e:	b94c      	cbnz	r4, 8006954 <_calloc_r+0x1c>
 8006940:	4611      	mov	r1, r2
 8006942:	9201      	str	r2, [sp, #4]
 8006944:	f000 f87a 	bl	8006a3c <_malloc_r>
 8006948:	9a01      	ldr	r2, [sp, #4]
 800694a:	4605      	mov	r5, r0
 800694c:	b930      	cbnz	r0, 800695c <_calloc_r+0x24>
 800694e:	4628      	mov	r0, r5
 8006950:	b003      	add	sp, #12
 8006952:	bd30      	pop	{r4, r5, pc}
 8006954:	220c      	movs	r2, #12
 8006956:	6002      	str	r2, [r0, #0]
 8006958:	2500      	movs	r5, #0
 800695a:	e7f8      	b.n	800694e <_calloc_r+0x16>
 800695c:	4621      	mov	r1, r4
 800695e:	f7fe f941 	bl	8004be4 <memset>
 8006962:	e7f4      	b.n	800694e <_calloc_r+0x16>

08006964 <_free_r>:
 8006964:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006966:	2900      	cmp	r1, #0
 8006968:	d044      	beq.n	80069f4 <_free_r+0x90>
 800696a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800696e:	9001      	str	r0, [sp, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	f1a1 0404 	sub.w	r4, r1, #4
 8006976:	bfb8      	it	lt
 8006978:	18e4      	addlt	r4, r4, r3
 800697a:	f000 fa9b 	bl	8006eb4 <__malloc_lock>
 800697e:	4a1e      	ldr	r2, [pc, #120]	; (80069f8 <_free_r+0x94>)
 8006980:	9801      	ldr	r0, [sp, #4]
 8006982:	6813      	ldr	r3, [r2, #0]
 8006984:	b933      	cbnz	r3, 8006994 <_free_r+0x30>
 8006986:	6063      	str	r3, [r4, #4]
 8006988:	6014      	str	r4, [r2, #0]
 800698a:	b003      	add	sp, #12
 800698c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006990:	f000 ba96 	b.w	8006ec0 <__malloc_unlock>
 8006994:	42a3      	cmp	r3, r4
 8006996:	d908      	bls.n	80069aa <_free_r+0x46>
 8006998:	6825      	ldr	r5, [r4, #0]
 800699a:	1961      	adds	r1, r4, r5
 800699c:	428b      	cmp	r3, r1
 800699e:	bf01      	itttt	eq
 80069a0:	6819      	ldreq	r1, [r3, #0]
 80069a2:	685b      	ldreq	r3, [r3, #4]
 80069a4:	1949      	addeq	r1, r1, r5
 80069a6:	6021      	streq	r1, [r4, #0]
 80069a8:	e7ed      	b.n	8006986 <_free_r+0x22>
 80069aa:	461a      	mov	r2, r3
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	b10b      	cbz	r3, 80069b4 <_free_r+0x50>
 80069b0:	42a3      	cmp	r3, r4
 80069b2:	d9fa      	bls.n	80069aa <_free_r+0x46>
 80069b4:	6811      	ldr	r1, [r2, #0]
 80069b6:	1855      	adds	r5, r2, r1
 80069b8:	42a5      	cmp	r5, r4
 80069ba:	d10b      	bne.n	80069d4 <_free_r+0x70>
 80069bc:	6824      	ldr	r4, [r4, #0]
 80069be:	4421      	add	r1, r4
 80069c0:	1854      	adds	r4, r2, r1
 80069c2:	42a3      	cmp	r3, r4
 80069c4:	6011      	str	r1, [r2, #0]
 80069c6:	d1e0      	bne.n	800698a <_free_r+0x26>
 80069c8:	681c      	ldr	r4, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	6053      	str	r3, [r2, #4]
 80069ce:	4421      	add	r1, r4
 80069d0:	6011      	str	r1, [r2, #0]
 80069d2:	e7da      	b.n	800698a <_free_r+0x26>
 80069d4:	d902      	bls.n	80069dc <_free_r+0x78>
 80069d6:	230c      	movs	r3, #12
 80069d8:	6003      	str	r3, [r0, #0]
 80069da:	e7d6      	b.n	800698a <_free_r+0x26>
 80069dc:	6825      	ldr	r5, [r4, #0]
 80069de:	1961      	adds	r1, r4, r5
 80069e0:	428b      	cmp	r3, r1
 80069e2:	bf04      	itt	eq
 80069e4:	6819      	ldreq	r1, [r3, #0]
 80069e6:	685b      	ldreq	r3, [r3, #4]
 80069e8:	6063      	str	r3, [r4, #4]
 80069ea:	bf04      	itt	eq
 80069ec:	1949      	addeq	r1, r1, r5
 80069ee:	6021      	streq	r1, [r4, #0]
 80069f0:	6054      	str	r4, [r2, #4]
 80069f2:	e7ca      	b.n	800698a <_free_r+0x26>
 80069f4:	b003      	add	sp, #12
 80069f6:	bd30      	pop	{r4, r5, pc}
 80069f8:	200002ec 	.word	0x200002ec

080069fc <sbrk_aligned>:
 80069fc:	b570      	push	{r4, r5, r6, lr}
 80069fe:	4e0e      	ldr	r6, [pc, #56]	; (8006a38 <sbrk_aligned+0x3c>)
 8006a00:	460c      	mov	r4, r1
 8006a02:	6831      	ldr	r1, [r6, #0]
 8006a04:	4605      	mov	r5, r0
 8006a06:	b911      	cbnz	r1, 8006a0e <sbrk_aligned+0x12>
 8006a08:	f000 f9e8 	bl	8006ddc <_sbrk_r>
 8006a0c:	6030      	str	r0, [r6, #0]
 8006a0e:	4621      	mov	r1, r4
 8006a10:	4628      	mov	r0, r5
 8006a12:	f000 f9e3 	bl	8006ddc <_sbrk_r>
 8006a16:	1c43      	adds	r3, r0, #1
 8006a18:	d00a      	beq.n	8006a30 <sbrk_aligned+0x34>
 8006a1a:	1cc4      	adds	r4, r0, #3
 8006a1c:	f024 0403 	bic.w	r4, r4, #3
 8006a20:	42a0      	cmp	r0, r4
 8006a22:	d007      	beq.n	8006a34 <sbrk_aligned+0x38>
 8006a24:	1a21      	subs	r1, r4, r0
 8006a26:	4628      	mov	r0, r5
 8006a28:	f000 f9d8 	bl	8006ddc <_sbrk_r>
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	d101      	bne.n	8006a34 <sbrk_aligned+0x38>
 8006a30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006a34:	4620      	mov	r0, r4
 8006a36:	bd70      	pop	{r4, r5, r6, pc}
 8006a38:	200002f0 	.word	0x200002f0

08006a3c <_malloc_r>:
 8006a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a40:	1ccd      	adds	r5, r1, #3
 8006a42:	f025 0503 	bic.w	r5, r5, #3
 8006a46:	3508      	adds	r5, #8
 8006a48:	2d0c      	cmp	r5, #12
 8006a4a:	bf38      	it	cc
 8006a4c:	250c      	movcc	r5, #12
 8006a4e:	2d00      	cmp	r5, #0
 8006a50:	4607      	mov	r7, r0
 8006a52:	db01      	blt.n	8006a58 <_malloc_r+0x1c>
 8006a54:	42a9      	cmp	r1, r5
 8006a56:	d905      	bls.n	8006a64 <_malloc_r+0x28>
 8006a58:	230c      	movs	r3, #12
 8006a5a:	603b      	str	r3, [r7, #0]
 8006a5c:	2600      	movs	r6, #0
 8006a5e:	4630      	mov	r0, r6
 8006a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a64:	4e2e      	ldr	r6, [pc, #184]	; (8006b20 <_malloc_r+0xe4>)
 8006a66:	f000 fa25 	bl	8006eb4 <__malloc_lock>
 8006a6a:	6833      	ldr	r3, [r6, #0]
 8006a6c:	461c      	mov	r4, r3
 8006a6e:	bb34      	cbnz	r4, 8006abe <_malloc_r+0x82>
 8006a70:	4629      	mov	r1, r5
 8006a72:	4638      	mov	r0, r7
 8006a74:	f7ff ffc2 	bl	80069fc <sbrk_aligned>
 8006a78:	1c43      	adds	r3, r0, #1
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	d14d      	bne.n	8006b1a <_malloc_r+0xde>
 8006a7e:	6834      	ldr	r4, [r6, #0]
 8006a80:	4626      	mov	r6, r4
 8006a82:	2e00      	cmp	r6, #0
 8006a84:	d140      	bne.n	8006b08 <_malloc_r+0xcc>
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	4631      	mov	r1, r6
 8006a8a:	4638      	mov	r0, r7
 8006a8c:	eb04 0803 	add.w	r8, r4, r3
 8006a90:	f000 f9a4 	bl	8006ddc <_sbrk_r>
 8006a94:	4580      	cmp	r8, r0
 8006a96:	d13a      	bne.n	8006b0e <_malloc_r+0xd2>
 8006a98:	6821      	ldr	r1, [r4, #0]
 8006a9a:	3503      	adds	r5, #3
 8006a9c:	1a6d      	subs	r5, r5, r1
 8006a9e:	f025 0503 	bic.w	r5, r5, #3
 8006aa2:	3508      	adds	r5, #8
 8006aa4:	2d0c      	cmp	r5, #12
 8006aa6:	bf38      	it	cc
 8006aa8:	250c      	movcc	r5, #12
 8006aaa:	4629      	mov	r1, r5
 8006aac:	4638      	mov	r0, r7
 8006aae:	f7ff ffa5 	bl	80069fc <sbrk_aligned>
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	d02b      	beq.n	8006b0e <_malloc_r+0xd2>
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	442b      	add	r3, r5
 8006aba:	6023      	str	r3, [r4, #0]
 8006abc:	e00e      	b.n	8006adc <_malloc_r+0xa0>
 8006abe:	6822      	ldr	r2, [r4, #0]
 8006ac0:	1b52      	subs	r2, r2, r5
 8006ac2:	d41e      	bmi.n	8006b02 <_malloc_r+0xc6>
 8006ac4:	2a0b      	cmp	r2, #11
 8006ac6:	d916      	bls.n	8006af6 <_malloc_r+0xba>
 8006ac8:	1961      	adds	r1, r4, r5
 8006aca:	42a3      	cmp	r3, r4
 8006acc:	6025      	str	r5, [r4, #0]
 8006ace:	bf18      	it	ne
 8006ad0:	6059      	strne	r1, [r3, #4]
 8006ad2:	6863      	ldr	r3, [r4, #4]
 8006ad4:	bf08      	it	eq
 8006ad6:	6031      	streq	r1, [r6, #0]
 8006ad8:	5162      	str	r2, [r4, r5]
 8006ada:	604b      	str	r3, [r1, #4]
 8006adc:	4638      	mov	r0, r7
 8006ade:	f104 060b 	add.w	r6, r4, #11
 8006ae2:	f000 f9ed 	bl	8006ec0 <__malloc_unlock>
 8006ae6:	f026 0607 	bic.w	r6, r6, #7
 8006aea:	1d23      	adds	r3, r4, #4
 8006aec:	1af2      	subs	r2, r6, r3
 8006aee:	d0b6      	beq.n	8006a5e <_malloc_r+0x22>
 8006af0:	1b9b      	subs	r3, r3, r6
 8006af2:	50a3      	str	r3, [r4, r2]
 8006af4:	e7b3      	b.n	8006a5e <_malloc_r+0x22>
 8006af6:	6862      	ldr	r2, [r4, #4]
 8006af8:	42a3      	cmp	r3, r4
 8006afa:	bf0c      	ite	eq
 8006afc:	6032      	streq	r2, [r6, #0]
 8006afe:	605a      	strne	r2, [r3, #4]
 8006b00:	e7ec      	b.n	8006adc <_malloc_r+0xa0>
 8006b02:	4623      	mov	r3, r4
 8006b04:	6864      	ldr	r4, [r4, #4]
 8006b06:	e7b2      	b.n	8006a6e <_malloc_r+0x32>
 8006b08:	4634      	mov	r4, r6
 8006b0a:	6876      	ldr	r6, [r6, #4]
 8006b0c:	e7b9      	b.n	8006a82 <_malloc_r+0x46>
 8006b0e:	230c      	movs	r3, #12
 8006b10:	603b      	str	r3, [r7, #0]
 8006b12:	4638      	mov	r0, r7
 8006b14:	f000 f9d4 	bl	8006ec0 <__malloc_unlock>
 8006b18:	e7a1      	b.n	8006a5e <_malloc_r+0x22>
 8006b1a:	6025      	str	r5, [r4, #0]
 8006b1c:	e7de      	b.n	8006adc <_malloc_r+0xa0>
 8006b1e:	bf00      	nop
 8006b20:	200002ec 	.word	0x200002ec

08006b24 <__ssputs_r>:
 8006b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b28:	688e      	ldr	r6, [r1, #8]
 8006b2a:	429e      	cmp	r6, r3
 8006b2c:	4682      	mov	sl, r0
 8006b2e:	460c      	mov	r4, r1
 8006b30:	4690      	mov	r8, r2
 8006b32:	461f      	mov	r7, r3
 8006b34:	d838      	bhi.n	8006ba8 <__ssputs_r+0x84>
 8006b36:	898a      	ldrh	r2, [r1, #12]
 8006b38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b3c:	d032      	beq.n	8006ba4 <__ssputs_r+0x80>
 8006b3e:	6825      	ldr	r5, [r4, #0]
 8006b40:	6909      	ldr	r1, [r1, #16]
 8006b42:	eba5 0901 	sub.w	r9, r5, r1
 8006b46:	6965      	ldr	r5, [r4, #20]
 8006b48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b50:	3301      	adds	r3, #1
 8006b52:	444b      	add	r3, r9
 8006b54:	106d      	asrs	r5, r5, #1
 8006b56:	429d      	cmp	r5, r3
 8006b58:	bf38      	it	cc
 8006b5a:	461d      	movcc	r5, r3
 8006b5c:	0553      	lsls	r3, r2, #21
 8006b5e:	d531      	bpl.n	8006bc4 <__ssputs_r+0xa0>
 8006b60:	4629      	mov	r1, r5
 8006b62:	f7ff ff6b 	bl	8006a3c <_malloc_r>
 8006b66:	4606      	mov	r6, r0
 8006b68:	b950      	cbnz	r0, 8006b80 <__ssputs_r+0x5c>
 8006b6a:	230c      	movs	r3, #12
 8006b6c:	f8ca 3000 	str.w	r3, [sl]
 8006b70:	89a3      	ldrh	r3, [r4, #12]
 8006b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b76:	81a3      	strh	r3, [r4, #12]
 8006b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b80:	6921      	ldr	r1, [r4, #16]
 8006b82:	464a      	mov	r2, r9
 8006b84:	f7ff fb46 	bl	8006214 <memcpy>
 8006b88:	89a3      	ldrh	r3, [r4, #12]
 8006b8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b92:	81a3      	strh	r3, [r4, #12]
 8006b94:	6126      	str	r6, [r4, #16]
 8006b96:	6165      	str	r5, [r4, #20]
 8006b98:	444e      	add	r6, r9
 8006b9a:	eba5 0509 	sub.w	r5, r5, r9
 8006b9e:	6026      	str	r6, [r4, #0]
 8006ba0:	60a5      	str	r5, [r4, #8]
 8006ba2:	463e      	mov	r6, r7
 8006ba4:	42be      	cmp	r6, r7
 8006ba6:	d900      	bls.n	8006baa <__ssputs_r+0x86>
 8006ba8:	463e      	mov	r6, r7
 8006baa:	6820      	ldr	r0, [r4, #0]
 8006bac:	4632      	mov	r2, r6
 8006bae:	4641      	mov	r1, r8
 8006bb0:	f000 f966 	bl	8006e80 <memmove>
 8006bb4:	68a3      	ldr	r3, [r4, #8]
 8006bb6:	1b9b      	subs	r3, r3, r6
 8006bb8:	60a3      	str	r3, [r4, #8]
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	4433      	add	r3, r6
 8006bbe:	6023      	str	r3, [r4, #0]
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	e7db      	b.n	8006b7c <__ssputs_r+0x58>
 8006bc4:	462a      	mov	r2, r5
 8006bc6:	f000 f981 	bl	8006ecc <_realloc_r>
 8006bca:	4606      	mov	r6, r0
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d1e1      	bne.n	8006b94 <__ssputs_r+0x70>
 8006bd0:	6921      	ldr	r1, [r4, #16]
 8006bd2:	4650      	mov	r0, sl
 8006bd4:	f7ff fec6 	bl	8006964 <_free_r>
 8006bd8:	e7c7      	b.n	8006b6a <__ssputs_r+0x46>
	...

08006bdc <_svfiprintf_r>:
 8006bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be0:	4698      	mov	r8, r3
 8006be2:	898b      	ldrh	r3, [r1, #12]
 8006be4:	061b      	lsls	r3, r3, #24
 8006be6:	b09d      	sub	sp, #116	; 0x74
 8006be8:	4607      	mov	r7, r0
 8006bea:	460d      	mov	r5, r1
 8006bec:	4614      	mov	r4, r2
 8006bee:	d50e      	bpl.n	8006c0e <_svfiprintf_r+0x32>
 8006bf0:	690b      	ldr	r3, [r1, #16]
 8006bf2:	b963      	cbnz	r3, 8006c0e <_svfiprintf_r+0x32>
 8006bf4:	2140      	movs	r1, #64	; 0x40
 8006bf6:	f7ff ff21 	bl	8006a3c <_malloc_r>
 8006bfa:	6028      	str	r0, [r5, #0]
 8006bfc:	6128      	str	r0, [r5, #16]
 8006bfe:	b920      	cbnz	r0, 8006c0a <_svfiprintf_r+0x2e>
 8006c00:	230c      	movs	r3, #12
 8006c02:	603b      	str	r3, [r7, #0]
 8006c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c08:	e0d1      	b.n	8006dae <_svfiprintf_r+0x1d2>
 8006c0a:	2340      	movs	r3, #64	; 0x40
 8006c0c:	616b      	str	r3, [r5, #20]
 8006c0e:	2300      	movs	r3, #0
 8006c10:	9309      	str	r3, [sp, #36]	; 0x24
 8006c12:	2320      	movs	r3, #32
 8006c14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c18:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c1c:	2330      	movs	r3, #48	; 0x30
 8006c1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006dc8 <_svfiprintf_r+0x1ec>
 8006c22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c26:	f04f 0901 	mov.w	r9, #1
 8006c2a:	4623      	mov	r3, r4
 8006c2c:	469a      	mov	sl, r3
 8006c2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c32:	b10a      	cbz	r2, 8006c38 <_svfiprintf_r+0x5c>
 8006c34:	2a25      	cmp	r2, #37	; 0x25
 8006c36:	d1f9      	bne.n	8006c2c <_svfiprintf_r+0x50>
 8006c38:	ebba 0b04 	subs.w	fp, sl, r4
 8006c3c:	d00b      	beq.n	8006c56 <_svfiprintf_r+0x7a>
 8006c3e:	465b      	mov	r3, fp
 8006c40:	4622      	mov	r2, r4
 8006c42:	4629      	mov	r1, r5
 8006c44:	4638      	mov	r0, r7
 8006c46:	f7ff ff6d 	bl	8006b24 <__ssputs_r>
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	f000 80aa 	beq.w	8006da4 <_svfiprintf_r+0x1c8>
 8006c50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c52:	445a      	add	r2, fp
 8006c54:	9209      	str	r2, [sp, #36]	; 0x24
 8006c56:	f89a 3000 	ldrb.w	r3, [sl]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f000 80a2 	beq.w	8006da4 <_svfiprintf_r+0x1c8>
 8006c60:	2300      	movs	r3, #0
 8006c62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c6a:	f10a 0a01 	add.w	sl, sl, #1
 8006c6e:	9304      	str	r3, [sp, #16]
 8006c70:	9307      	str	r3, [sp, #28]
 8006c72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c76:	931a      	str	r3, [sp, #104]	; 0x68
 8006c78:	4654      	mov	r4, sl
 8006c7a:	2205      	movs	r2, #5
 8006c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c80:	4851      	ldr	r0, [pc, #324]	; (8006dc8 <_svfiprintf_r+0x1ec>)
 8006c82:	f7f9 faad 	bl	80001e0 <memchr>
 8006c86:	9a04      	ldr	r2, [sp, #16]
 8006c88:	b9d8      	cbnz	r0, 8006cc2 <_svfiprintf_r+0xe6>
 8006c8a:	06d0      	lsls	r0, r2, #27
 8006c8c:	bf44      	itt	mi
 8006c8e:	2320      	movmi	r3, #32
 8006c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c94:	0711      	lsls	r1, r2, #28
 8006c96:	bf44      	itt	mi
 8006c98:	232b      	movmi	r3, #43	; 0x2b
 8006c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c9e:	f89a 3000 	ldrb.w	r3, [sl]
 8006ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ca4:	d015      	beq.n	8006cd2 <_svfiprintf_r+0xf6>
 8006ca6:	9a07      	ldr	r2, [sp, #28]
 8006ca8:	4654      	mov	r4, sl
 8006caa:	2000      	movs	r0, #0
 8006cac:	f04f 0c0a 	mov.w	ip, #10
 8006cb0:	4621      	mov	r1, r4
 8006cb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cb6:	3b30      	subs	r3, #48	; 0x30
 8006cb8:	2b09      	cmp	r3, #9
 8006cba:	d94e      	bls.n	8006d5a <_svfiprintf_r+0x17e>
 8006cbc:	b1b0      	cbz	r0, 8006cec <_svfiprintf_r+0x110>
 8006cbe:	9207      	str	r2, [sp, #28]
 8006cc0:	e014      	b.n	8006cec <_svfiprintf_r+0x110>
 8006cc2:	eba0 0308 	sub.w	r3, r0, r8
 8006cc6:	fa09 f303 	lsl.w	r3, r9, r3
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	9304      	str	r3, [sp, #16]
 8006cce:	46a2      	mov	sl, r4
 8006cd0:	e7d2      	b.n	8006c78 <_svfiprintf_r+0x9c>
 8006cd2:	9b03      	ldr	r3, [sp, #12]
 8006cd4:	1d19      	adds	r1, r3, #4
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	9103      	str	r1, [sp, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	bfbb      	ittet	lt
 8006cde:	425b      	neglt	r3, r3
 8006ce0:	f042 0202 	orrlt.w	r2, r2, #2
 8006ce4:	9307      	strge	r3, [sp, #28]
 8006ce6:	9307      	strlt	r3, [sp, #28]
 8006ce8:	bfb8      	it	lt
 8006cea:	9204      	strlt	r2, [sp, #16]
 8006cec:	7823      	ldrb	r3, [r4, #0]
 8006cee:	2b2e      	cmp	r3, #46	; 0x2e
 8006cf0:	d10c      	bne.n	8006d0c <_svfiprintf_r+0x130>
 8006cf2:	7863      	ldrb	r3, [r4, #1]
 8006cf4:	2b2a      	cmp	r3, #42	; 0x2a
 8006cf6:	d135      	bne.n	8006d64 <_svfiprintf_r+0x188>
 8006cf8:	9b03      	ldr	r3, [sp, #12]
 8006cfa:	1d1a      	adds	r2, r3, #4
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	9203      	str	r2, [sp, #12]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	bfb8      	it	lt
 8006d04:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006d08:	3402      	adds	r4, #2
 8006d0a:	9305      	str	r3, [sp, #20]
 8006d0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006dd8 <_svfiprintf_r+0x1fc>
 8006d10:	7821      	ldrb	r1, [r4, #0]
 8006d12:	2203      	movs	r2, #3
 8006d14:	4650      	mov	r0, sl
 8006d16:	f7f9 fa63 	bl	80001e0 <memchr>
 8006d1a:	b140      	cbz	r0, 8006d2e <_svfiprintf_r+0x152>
 8006d1c:	2340      	movs	r3, #64	; 0x40
 8006d1e:	eba0 000a 	sub.w	r0, r0, sl
 8006d22:	fa03 f000 	lsl.w	r0, r3, r0
 8006d26:	9b04      	ldr	r3, [sp, #16]
 8006d28:	4303      	orrs	r3, r0
 8006d2a:	3401      	adds	r4, #1
 8006d2c:	9304      	str	r3, [sp, #16]
 8006d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d32:	4826      	ldr	r0, [pc, #152]	; (8006dcc <_svfiprintf_r+0x1f0>)
 8006d34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d38:	2206      	movs	r2, #6
 8006d3a:	f7f9 fa51 	bl	80001e0 <memchr>
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	d038      	beq.n	8006db4 <_svfiprintf_r+0x1d8>
 8006d42:	4b23      	ldr	r3, [pc, #140]	; (8006dd0 <_svfiprintf_r+0x1f4>)
 8006d44:	bb1b      	cbnz	r3, 8006d8e <_svfiprintf_r+0x1b2>
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	3307      	adds	r3, #7
 8006d4a:	f023 0307 	bic.w	r3, r3, #7
 8006d4e:	3308      	adds	r3, #8
 8006d50:	9303      	str	r3, [sp, #12]
 8006d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d54:	4433      	add	r3, r6
 8006d56:	9309      	str	r3, [sp, #36]	; 0x24
 8006d58:	e767      	b.n	8006c2a <_svfiprintf_r+0x4e>
 8006d5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d5e:	460c      	mov	r4, r1
 8006d60:	2001      	movs	r0, #1
 8006d62:	e7a5      	b.n	8006cb0 <_svfiprintf_r+0xd4>
 8006d64:	2300      	movs	r3, #0
 8006d66:	3401      	adds	r4, #1
 8006d68:	9305      	str	r3, [sp, #20]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	f04f 0c0a 	mov.w	ip, #10
 8006d70:	4620      	mov	r0, r4
 8006d72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d76:	3a30      	subs	r2, #48	; 0x30
 8006d78:	2a09      	cmp	r2, #9
 8006d7a:	d903      	bls.n	8006d84 <_svfiprintf_r+0x1a8>
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d0c5      	beq.n	8006d0c <_svfiprintf_r+0x130>
 8006d80:	9105      	str	r1, [sp, #20]
 8006d82:	e7c3      	b.n	8006d0c <_svfiprintf_r+0x130>
 8006d84:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d88:	4604      	mov	r4, r0
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e7f0      	b.n	8006d70 <_svfiprintf_r+0x194>
 8006d8e:	ab03      	add	r3, sp, #12
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	462a      	mov	r2, r5
 8006d94:	4b0f      	ldr	r3, [pc, #60]	; (8006dd4 <_svfiprintf_r+0x1f8>)
 8006d96:	a904      	add	r1, sp, #16
 8006d98:	4638      	mov	r0, r7
 8006d9a:	f7fd ffcb 	bl	8004d34 <_printf_float>
 8006d9e:	1c42      	adds	r2, r0, #1
 8006da0:	4606      	mov	r6, r0
 8006da2:	d1d6      	bne.n	8006d52 <_svfiprintf_r+0x176>
 8006da4:	89ab      	ldrh	r3, [r5, #12]
 8006da6:	065b      	lsls	r3, r3, #25
 8006da8:	f53f af2c 	bmi.w	8006c04 <_svfiprintf_r+0x28>
 8006dac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dae:	b01d      	add	sp, #116	; 0x74
 8006db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006db4:	ab03      	add	r3, sp, #12
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	462a      	mov	r2, r5
 8006dba:	4b06      	ldr	r3, [pc, #24]	; (8006dd4 <_svfiprintf_r+0x1f8>)
 8006dbc:	a904      	add	r1, sp, #16
 8006dbe:	4638      	mov	r0, r7
 8006dc0:	f7fe fa5c 	bl	800527c <_printf_i>
 8006dc4:	e7eb      	b.n	8006d9e <_svfiprintf_r+0x1c2>
 8006dc6:	bf00      	nop
 8006dc8:	08007c9c 	.word	0x08007c9c
 8006dcc:	08007ca6 	.word	0x08007ca6
 8006dd0:	08004d35 	.word	0x08004d35
 8006dd4:	08006b25 	.word	0x08006b25
 8006dd8:	08007ca2 	.word	0x08007ca2

08006ddc <_sbrk_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	4d06      	ldr	r5, [pc, #24]	; (8006df8 <_sbrk_r+0x1c>)
 8006de0:	2300      	movs	r3, #0
 8006de2:	4604      	mov	r4, r0
 8006de4:	4608      	mov	r0, r1
 8006de6:	602b      	str	r3, [r5, #0]
 8006de8:	f7fa fc2a 	bl	8001640 <_sbrk>
 8006dec:	1c43      	adds	r3, r0, #1
 8006dee:	d102      	bne.n	8006df6 <_sbrk_r+0x1a>
 8006df0:	682b      	ldr	r3, [r5, #0]
 8006df2:	b103      	cbz	r3, 8006df6 <_sbrk_r+0x1a>
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	bd38      	pop	{r3, r4, r5, pc}
 8006df8:	200002f4 	.word	0x200002f4

08006dfc <__assert_func>:
 8006dfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006dfe:	4614      	mov	r4, r2
 8006e00:	461a      	mov	r2, r3
 8006e02:	4b09      	ldr	r3, [pc, #36]	; (8006e28 <__assert_func+0x2c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4605      	mov	r5, r0
 8006e08:	68d8      	ldr	r0, [r3, #12]
 8006e0a:	b14c      	cbz	r4, 8006e20 <__assert_func+0x24>
 8006e0c:	4b07      	ldr	r3, [pc, #28]	; (8006e2c <__assert_func+0x30>)
 8006e0e:	9100      	str	r1, [sp, #0]
 8006e10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e14:	4906      	ldr	r1, [pc, #24]	; (8006e30 <__assert_func+0x34>)
 8006e16:	462b      	mov	r3, r5
 8006e18:	f000 f80e 	bl	8006e38 <fiprintf>
 8006e1c:	f000 faac 	bl	8007378 <abort>
 8006e20:	4b04      	ldr	r3, [pc, #16]	; (8006e34 <__assert_func+0x38>)
 8006e22:	461c      	mov	r4, r3
 8006e24:	e7f3      	b.n	8006e0e <__assert_func+0x12>
 8006e26:	bf00      	nop
 8006e28:	20000014 	.word	0x20000014
 8006e2c:	08007cad 	.word	0x08007cad
 8006e30:	08007cba 	.word	0x08007cba
 8006e34:	08007ce8 	.word	0x08007ce8

08006e38 <fiprintf>:
 8006e38:	b40e      	push	{r1, r2, r3}
 8006e3a:	b503      	push	{r0, r1, lr}
 8006e3c:	4601      	mov	r1, r0
 8006e3e:	ab03      	add	r3, sp, #12
 8006e40:	4805      	ldr	r0, [pc, #20]	; (8006e58 <fiprintf+0x20>)
 8006e42:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e46:	6800      	ldr	r0, [r0, #0]
 8006e48:	9301      	str	r3, [sp, #4]
 8006e4a:	f000 f897 	bl	8006f7c <_vfiprintf_r>
 8006e4e:	b002      	add	sp, #8
 8006e50:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e54:	b003      	add	sp, #12
 8006e56:	4770      	bx	lr
 8006e58:	20000014 	.word	0x20000014

08006e5c <__ascii_mbtowc>:
 8006e5c:	b082      	sub	sp, #8
 8006e5e:	b901      	cbnz	r1, 8006e62 <__ascii_mbtowc+0x6>
 8006e60:	a901      	add	r1, sp, #4
 8006e62:	b142      	cbz	r2, 8006e76 <__ascii_mbtowc+0x1a>
 8006e64:	b14b      	cbz	r3, 8006e7a <__ascii_mbtowc+0x1e>
 8006e66:	7813      	ldrb	r3, [r2, #0]
 8006e68:	600b      	str	r3, [r1, #0]
 8006e6a:	7812      	ldrb	r2, [r2, #0]
 8006e6c:	1e10      	subs	r0, r2, #0
 8006e6e:	bf18      	it	ne
 8006e70:	2001      	movne	r0, #1
 8006e72:	b002      	add	sp, #8
 8006e74:	4770      	bx	lr
 8006e76:	4610      	mov	r0, r2
 8006e78:	e7fb      	b.n	8006e72 <__ascii_mbtowc+0x16>
 8006e7a:	f06f 0001 	mvn.w	r0, #1
 8006e7e:	e7f8      	b.n	8006e72 <__ascii_mbtowc+0x16>

08006e80 <memmove>:
 8006e80:	4288      	cmp	r0, r1
 8006e82:	b510      	push	{r4, lr}
 8006e84:	eb01 0402 	add.w	r4, r1, r2
 8006e88:	d902      	bls.n	8006e90 <memmove+0x10>
 8006e8a:	4284      	cmp	r4, r0
 8006e8c:	4623      	mov	r3, r4
 8006e8e:	d807      	bhi.n	8006ea0 <memmove+0x20>
 8006e90:	1e43      	subs	r3, r0, #1
 8006e92:	42a1      	cmp	r1, r4
 8006e94:	d008      	beq.n	8006ea8 <memmove+0x28>
 8006e96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e9e:	e7f8      	b.n	8006e92 <memmove+0x12>
 8006ea0:	4402      	add	r2, r0
 8006ea2:	4601      	mov	r1, r0
 8006ea4:	428a      	cmp	r2, r1
 8006ea6:	d100      	bne.n	8006eaa <memmove+0x2a>
 8006ea8:	bd10      	pop	{r4, pc}
 8006eaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006eae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006eb2:	e7f7      	b.n	8006ea4 <memmove+0x24>

08006eb4 <__malloc_lock>:
 8006eb4:	4801      	ldr	r0, [pc, #4]	; (8006ebc <__malloc_lock+0x8>)
 8006eb6:	f000 bc1f 	b.w	80076f8 <__retarget_lock_acquire_recursive>
 8006eba:	bf00      	nop
 8006ebc:	200002f8 	.word	0x200002f8

08006ec0 <__malloc_unlock>:
 8006ec0:	4801      	ldr	r0, [pc, #4]	; (8006ec8 <__malloc_unlock+0x8>)
 8006ec2:	f000 bc1a 	b.w	80076fa <__retarget_lock_release_recursive>
 8006ec6:	bf00      	nop
 8006ec8:	200002f8 	.word	0x200002f8

08006ecc <_realloc_r>:
 8006ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed0:	4680      	mov	r8, r0
 8006ed2:	4614      	mov	r4, r2
 8006ed4:	460e      	mov	r6, r1
 8006ed6:	b921      	cbnz	r1, 8006ee2 <_realloc_r+0x16>
 8006ed8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006edc:	4611      	mov	r1, r2
 8006ede:	f7ff bdad 	b.w	8006a3c <_malloc_r>
 8006ee2:	b92a      	cbnz	r2, 8006ef0 <_realloc_r+0x24>
 8006ee4:	f7ff fd3e 	bl	8006964 <_free_r>
 8006ee8:	4625      	mov	r5, r4
 8006eea:	4628      	mov	r0, r5
 8006eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ef0:	f000 fc6a 	bl	80077c8 <_malloc_usable_size_r>
 8006ef4:	4284      	cmp	r4, r0
 8006ef6:	4607      	mov	r7, r0
 8006ef8:	d802      	bhi.n	8006f00 <_realloc_r+0x34>
 8006efa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006efe:	d812      	bhi.n	8006f26 <_realloc_r+0x5a>
 8006f00:	4621      	mov	r1, r4
 8006f02:	4640      	mov	r0, r8
 8006f04:	f7ff fd9a 	bl	8006a3c <_malloc_r>
 8006f08:	4605      	mov	r5, r0
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	d0ed      	beq.n	8006eea <_realloc_r+0x1e>
 8006f0e:	42bc      	cmp	r4, r7
 8006f10:	4622      	mov	r2, r4
 8006f12:	4631      	mov	r1, r6
 8006f14:	bf28      	it	cs
 8006f16:	463a      	movcs	r2, r7
 8006f18:	f7ff f97c 	bl	8006214 <memcpy>
 8006f1c:	4631      	mov	r1, r6
 8006f1e:	4640      	mov	r0, r8
 8006f20:	f7ff fd20 	bl	8006964 <_free_r>
 8006f24:	e7e1      	b.n	8006eea <_realloc_r+0x1e>
 8006f26:	4635      	mov	r5, r6
 8006f28:	e7df      	b.n	8006eea <_realloc_r+0x1e>

08006f2a <__sfputc_r>:
 8006f2a:	6893      	ldr	r3, [r2, #8]
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	b410      	push	{r4}
 8006f32:	6093      	str	r3, [r2, #8]
 8006f34:	da08      	bge.n	8006f48 <__sfputc_r+0x1e>
 8006f36:	6994      	ldr	r4, [r2, #24]
 8006f38:	42a3      	cmp	r3, r4
 8006f3a:	db01      	blt.n	8006f40 <__sfputc_r+0x16>
 8006f3c:	290a      	cmp	r1, #10
 8006f3e:	d103      	bne.n	8006f48 <__sfputc_r+0x1e>
 8006f40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f44:	f000 b94a 	b.w	80071dc <__swbuf_r>
 8006f48:	6813      	ldr	r3, [r2, #0]
 8006f4a:	1c58      	adds	r0, r3, #1
 8006f4c:	6010      	str	r0, [r2, #0]
 8006f4e:	7019      	strb	r1, [r3, #0]
 8006f50:	4608      	mov	r0, r1
 8006f52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <__sfputs_r>:
 8006f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5a:	4606      	mov	r6, r0
 8006f5c:	460f      	mov	r7, r1
 8006f5e:	4614      	mov	r4, r2
 8006f60:	18d5      	adds	r5, r2, r3
 8006f62:	42ac      	cmp	r4, r5
 8006f64:	d101      	bne.n	8006f6a <__sfputs_r+0x12>
 8006f66:	2000      	movs	r0, #0
 8006f68:	e007      	b.n	8006f7a <__sfputs_r+0x22>
 8006f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f6e:	463a      	mov	r2, r7
 8006f70:	4630      	mov	r0, r6
 8006f72:	f7ff ffda 	bl	8006f2a <__sfputc_r>
 8006f76:	1c43      	adds	r3, r0, #1
 8006f78:	d1f3      	bne.n	8006f62 <__sfputs_r+0xa>
 8006f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006f7c <_vfiprintf_r>:
 8006f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f80:	460d      	mov	r5, r1
 8006f82:	b09d      	sub	sp, #116	; 0x74
 8006f84:	4614      	mov	r4, r2
 8006f86:	4698      	mov	r8, r3
 8006f88:	4606      	mov	r6, r0
 8006f8a:	b118      	cbz	r0, 8006f94 <_vfiprintf_r+0x18>
 8006f8c:	6983      	ldr	r3, [r0, #24]
 8006f8e:	b90b      	cbnz	r3, 8006f94 <_vfiprintf_r+0x18>
 8006f90:	f000 fb14 	bl	80075bc <__sinit>
 8006f94:	4b89      	ldr	r3, [pc, #548]	; (80071bc <_vfiprintf_r+0x240>)
 8006f96:	429d      	cmp	r5, r3
 8006f98:	d11b      	bne.n	8006fd2 <_vfiprintf_r+0x56>
 8006f9a:	6875      	ldr	r5, [r6, #4]
 8006f9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f9e:	07d9      	lsls	r1, r3, #31
 8006fa0:	d405      	bmi.n	8006fae <_vfiprintf_r+0x32>
 8006fa2:	89ab      	ldrh	r3, [r5, #12]
 8006fa4:	059a      	lsls	r2, r3, #22
 8006fa6:	d402      	bmi.n	8006fae <_vfiprintf_r+0x32>
 8006fa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006faa:	f000 fba5 	bl	80076f8 <__retarget_lock_acquire_recursive>
 8006fae:	89ab      	ldrh	r3, [r5, #12]
 8006fb0:	071b      	lsls	r3, r3, #28
 8006fb2:	d501      	bpl.n	8006fb8 <_vfiprintf_r+0x3c>
 8006fb4:	692b      	ldr	r3, [r5, #16]
 8006fb6:	b9eb      	cbnz	r3, 8006ff4 <_vfiprintf_r+0x78>
 8006fb8:	4629      	mov	r1, r5
 8006fba:	4630      	mov	r0, r6
 8006fbc:	f000 f96e 	bl	800729c <__swsetup_r>
 8006fc0:	b1c0      	cbz	r0, 8006ff4 <_vfiprintf_r+0x78>
 8006fc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fc4:	07dc      	lsls	r4, r3, #31
 8006fc6:	d50e      	bpl.n	8006fe6 <_vfiprintf_r+0x6a>
 8006fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fcc:	b01d      	add	sp, #116	; 0x74
 8006fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fd2:	4b7b      	ldr	r3, [pc, #492]	; (80071c0 <_vfiprintf_r+0x244>)
 8006fd4:	429d      	cmp	r5, r3
 8006fd6:	d101      	bne.n	8006fdc <_vfiprintf_r+0x60>
 8006fd8:	68b5      	ldr	r5, [r6, #8]
 8006fda:	e7df      	b.n	8006f9c <_vfiprintf_r+0x20>
 8006fdc:	4b79      	ldr	r3, [pc, #484]	; (80071c4 <_vfiprintf_r+0x248>)
 8006fde:	429d      	cmp	r5, r3
 8006fe0:	bf08      	it	eq
 8006fe2:	68f5      	ldreq	r5, [r6, #12]
 8006fe4:	e7da      	b.n	8006f9c <_vfiprintf_r+0x20>
 8006fe6:	89ab      	ldrh	r3, [r5, #12]
 8006fe8:	0598      	lsls	r0, r3, #22
 8006fea:	d4ed      	bmi.n	8006fc8 <_vfiprintf_r+0x4c>
 8006fec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fee:	f000 fb84 	bl	80076fa <__retarget_lock_release_recursive>
 8006ff2:	e7e9      	b.n	8006fc8 <_vfiprintf_r+0x4c>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff8:	2320      	movs	r3, #32
 8006ffa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ffe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007002:	2330      	movs	r3, #48	; 0x30
 8007004:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80071c8 <_vfiprintf_r+0x24c>
 8007008:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800700c:	f04f 0901 	mov.w	r9, #1
 8007010:	4623      	mov	r3, r4
 8007012:	469a      	mov	sl, r3
 8007014:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007018:	b10a      	cbz	r2, 800701e <_vfiprintf_r+0xa2>
 800701a:	2a25      	cmp	r2, #37	; 0x25
 800701c:	d1f9      	bne.n	8007012 <_vfiprintf_r+0x96>
 800701e:	ebba 0b04 	subs.w	fp, sl, r4
 8007022:	d00b      	beq.n	800703c <_vfiprintf_r+0xc0>
 8007024:	465b      	mov	r3, fp
 8007026:	4622      	mov	r2, r4
 8007028:	4629      	mov	r1, r5
 800702a:	4630      	mov	r0, r6
 800702c:	f7ff ff94 	bl	8006f58 <__sfputs_r>
 8007030:	3001      	adds	r0, #1
 8007032:	f000 80aa 	beq.w	800718a <_vfiprintf_r+0x20e>
 8007036:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007038:	445a      	add	r2, fp
 800703a:	9209      	str	r2, [sp, #36]	; 0x24
 800703c:	f89a 3000 	ldrb.w	r3, [sl]
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 80a2 	beq.w	800718a <_vfiprintf_r+0x20e>
 8007046:	2300      	movs	r3, #0
 8007048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800704c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007050:	f10a 0a01 	add.w	sl, sl, #1
 8007054:	9304      	str	r3, [sp, #16]
 8007056:	9307      	str	r3, [sp, #28]
 8007058:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800705c:	931a      	str	r3, [sp, #104]	; 0x68
 800705e:	4654      	mov	r4, sl
 8007060:	2205      	movs	r2, #5
 8007062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007066:	4858      	ldr	r0, [pc, #352]	; (80071c8 <_vfiprintf_r+0x24c>)
 8007068:	f7f9 f8ba 	bl	80001e0 <memchr>
 800706c:	9a04      	ldr	r2, [sp, #16]
 800706e:	b9d8      	cbnz	r0, 80070a8 <_vfiprintf_r+0x12c>
 8007070:	06d1      	lsls	r1, r2, #27
 8007072:	bf44      	itt	mi
 8007074:	2320      	movmi	r3, #32
 8007076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800707a:	0713      	lsls	r3, r2, #28
 800707c:	bf44      	itt	mi
 800707e:	232b      	movmi	r3, #43	; 0x2b
 8007080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007084:	f89a 3000 	ldrb.w	r3, [sl]
 8007088:	2b2a      	cmp	r3, #42	; 0x2a
 800708a:	d015      	beq.n	80070b8 <_vfiprintf_r+0x13c>
 800708c:	9a07      	ldr	r2, [sp, #28]
 800708e:	4654      	mov	r4, sl
 8007090:	2000      	movs	r0, #0
 8007092:	f04f 0c0a 	mov.w	ip, #10
 8007096:	4621      	mov	r1, r4
 8007098:	f811 3b01 	ldrb.w	r3, [r1], #1
 800709c:	3b30      	subs	r3, #48	; 0x30
 800709e:	2b09      	cmp	r3, #9
 80070a0:	d94e      	bls.n	8007140 <_vfiprintf_r+0x1c4>
 80070a2:	b1b0      	cbz	r0, 80070d2 <_vfiprintf_r+0x156>
 80070a4:	9207      	str	r2, [sp, #28]
 80070a6:	e014      	b.n	80070d2 <_vfiprintf_r+0x156>
 80070a8:	eba0 0308 	sub.w	r3, r0, r8
 80070ac:	fa09 f303 	lsl.w	r3, r9, r3
 80070b0:	4313      	orrs	r3, r2
 80070b2:	9304      	str	r3, [sp, #16]
 80070b4:	46a2      	mov	sl, r4
 80070b6:	e7d2      	b.n	800705e <_vfiprintf_r+0xe2>
 80070b8:	9b03      	ldr	r3, [sp, #12]
 80070ba:	1d19      	adds	r1, r3, #4
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	9103      	str	r1, [sp, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	bfbb      	ittet	lt
 80070c4:	425b      	neglt	r3, r3
 80070c6:	f042 0202 	orrlt.w	r2, r2, #2
 80070ca:	9307      	strge	r3, [sp, #28]
 80070cc:	9307      	strlt	r3, [sp, #28]
 80070ce:	bfb8      	it	lt
 80070d0:	9204      	strlt	r2, [sp, #16]
 80070d2:	7823      	ldrb	r3, [r4, #0]
 80070d4:	2b2e      	cmp	r3, #46	; 0x2e
 80070d6:	d10c      	bne.n	80070f2 <_vfiprintf_r+0x176>
 80070d8:	7863      	ldrb	r3, [r4, #1]
 80070da:	2b2a      	cmp	r3, #42	; 0x2a
 80070dc:	d135      	bne.n	800714a <_vfiprintf_r+0x1ce>
 80070de:	9b03      	ldr	r3, [sp, #12]
 80070e0:	1d1a      	adds	r2, r3, #4
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	9203      	str	r2, [sp, #12]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	bfb8      	it	lt
 80070ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80070ee:	3402      	adds	r4, #2
 80070f0:	9305      	str	r3, [sp, #20]
 80070f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80071d8 <_vfiprintf_r+0x25c>
 80070f6:	7821      	ldrb	r1, [r4, #0]
 80070f8:	2203      	movs	r2, #3
 80070fa:	4650      	mov	r0, sl
 80070fc:	f7f9 f870 	bl	80001e0 <memchr>
 8007100:	b140      	cbz	r0, 8007114 <_vfiprintf_r+0x198>
 8007102:	2340      	movs	r3, #64	; 0x40
 8007104:	eba0 000a 	sub.w	r0, r0, sl
 8007108:	fa03 f000 	lsl.w	r0, r3, r0
 800710c:	9b04      	ldr	r3, [sp, #16]
 800710e:	4303      	orrs	r3, r0
 8007110:	3401      	adds	r4, #1
 8007112:	9304      	str	r3, [sp, #16]
 8007114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007118:	482c      	ldr	r0, [pc, #176]	; (80071cc <_vfiprintf_r+0x250>)
 800711a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800711e:	2206      	movs	r2, #6
 8007120:	f7f9 f85e 	bl	80001e0 <memchr>
 8007124:	2800      	cmp	r0, #0
 8007126:	d03f      	beq.n	80071a8 <_vfiprintf_r+0x22c>
 8007128:	4b29      	ldr	r3, [pc, #164]	; (80071d0 <_vfiprintf_r+0x254>)
 800712a:	bb1b      	cbnz	r3, 8007174 <_vfiprintf_r+0x1f8>
 800712c:	9b03      	ldr	r3, [sp, #12]
 800712e:	3307      	adds	r3, #7
 8007130:	f023 0307 	bic.w	r3, r3, #7
 8007134:	3308      	adds	r3, #8
 8007136:	9303      	str	r3, [sp, #12]
 8007138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800713a:	443b      	add	r3, r7
 800713c:	9309      	str	r3, [sp, #36]	; 0x24
 800713e:	e767      	b.n	8007010 <_vfiprintf_r+0x94>
 8007140:	fb0c 3202 	mla	r2, ip, r2, r3
 8007144:	460c      	mov	r4, r1
 8007146:	2001      	movs	r0, #1
 8007148:	e7a5      	b.n	8007096 <_vfiprintf_r+0x11a>
 800714a:	2300      	movs	r3, #0
 800714c:	3401      	adds	r4, #1
 800714e:	9305      	str	r3, [sp, #20]
 8007150:	4619      	mov	r1, r3
 8007152:	f04f 0c0a 	mov.w	ip, #10
 8007156:	4620      	mov	r0, r4
 8007158:	f810 2b01 	ldrb.w	r2, [r0], #1
 800715c:	3a30      	subs	r2, #48	; 0x30
 800715e:	2a09      	cmp	r2, #9
 8007160:	d903      	bls.n	800716a <_vfiprintf_r+0x1ee>
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0c5      	beq.n	80070f2 <_vfiprintf_r+0x176>
 8007166:	9105      	str	r1, [sp, #20]
 8007168:	e7c3      	b.n	80070f2 <_vfiprintf_r+0x176>
 800716a:	fb0c 2101 	mla	r1, ip, r1, r2
 800716e:	4604      	mov	r4, r0
 8007170:	2301      	movs	r3, #1
 8007172:	e7f0      	b.n	8007156 <_vfiprintf_r+0x1da>
 8007174:	ab03      	add	r3, sp, #12
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	462a      	mov	r2, r5
 800717a:	4b16      	ldr	r3, [pc, #88]	; (80071d4 <_vfiprintf_r+0x258>)
 800717c:	a904      	add	r1, sp, #16
 800717e:	4630      	mov	r0, r6
 8007180:	f7fd fdd8 	bl	8004d34 <_printf_float>
 8007184:	4607      	mov	r7, r0
 8007186:	1c78      	adds	r0, r7, #1
 8007188:	d1d6      	bne.n	8007138 <_vfiprintf_r+0x1bc>
 800718a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800718c:	07d9      	lsls	r1, r3, #31
 800718e:	d405      	bmi.n	800719c <_vfiprintf_r+0x220>
 8007190:	89ab      	ldrh	r3, [r5, #12]
 8007192:	059a      	lsls	r2, r3, #22
 8007194:	d402      	bmi.n	800719c <_vfiprintf_r+0x220>
 8007196:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007198:	f000 faaf 	bl	80076fa <__retarget_lock_release_recursive>
 800719c:	89ab      	ldrh	r3, [r5, #12]
 800719e:	065b      	lsls	r3, r3, #25
 80071a0:	f53f af12 	bmi.w	8006fc8 <_vfiprintf_r+0x4c>
 80071a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071a6:	e711      	b.n	8006fcc <_vfiprintf_r+0x50>
 80071a8:	ab03      	add	r3, sp, #12
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	462a      	mov	r2, r5
 80071ae:	4b09      	ldr	r3, [pc, #36]	; (80071d4 <_vfiprintf_r+0x258>)
 80071b0:	a904      	add	r1, sp, #16
 80071b2:	4630      	mov	r0, r6
 80071b4:	f7fe f862 	bl	800527c <_printf_i>
 80071b8:	e7e4      	b.n	8007184 <_vfiprintf_r+0x208>
 80071ba:	bf00      	nop
 80071bc:	08007e14 	.word	0x08007e14
 80071c0:	08007e34 	.word	0x08007e34
 80071c4:	08007df4 	.word	0x08007df4
 80071c8:	08007c9c 	.word	0x08007c9c
 80071cc:	08007ca6 	.word	0x08007ca6
 80071d0:	08004d35 	.word	0x08004d35
 80071d4:	08006f59 	.word	0x08006f59
 80071d8:	08007ca2 	.word	0x08007ca2

080071dc <__swbuf_r>:
 80071dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071de:	460e      	mov	r6, r1
 80071e0:	4614      	mov	r4, r2
 80071e2:	4605      	mov	r5, r0
 80071e4:	b118      	cbz	r0, 80071ee <__swbuf_r+0x12>
 80071e6:	6983      	ldr	r3, [r0, #24]
 80071e8:	b90b      	cbnz	r3, 80071ee <__swbuf_r+0x12>
 80071ea:	f000 f9e7 	bl	80075bc <__sinit>
 80071ee:	4b21      	ldr	r3, [pc, #132]	; (8007274 <__swbuf_r+0x98>)
 80071f0:	429c      	cmp	r4, r3
 80071f2:	d12b      	bne.n	800724c <__swbuf_r+0x70>
 80071f4:	686c      	ldr	r4, [r5, #4]
 80071f6:	69a3      	ldr	r3, [r4, #24]
 80071f8:	60a3      	str	r3, [r4, #8]
 80071fa:	89a3      	ldrh	r3, [r4, #12]
 80071fc:	071a      	lsls	r2, r3, #28
 80071fe:	d52f      	bpl.n	8007260 <__swbuf_r+0x84>
 8007200:	6923      	ldr	r3, [r4, #16]
 8007202:	b36b      	cbz	r3, 8007260 <__swbuf_r+0x84>
 8007204:	6923      	ldr	r3, [r4, #16]
 8007206:	6820      	ldr	r0, [r4, #0]
 8007208:	1ac0      	subs	r0, r0, r3
 800720a:	6963      	ldr	r3, [r4, #20]
 800720c:	b2f6      	uxtb	r6, r6
 800720e:	4283      	cmp	r3, r0
 8007210:	4637      	mov	r7, r6
 8007212:	dc04      	bgt.n	800721e <__swbuf_r+0x42>
 8007214:	4621      	mov	r1, r4
 8007216:	4628      	mov	r0, r5
 8007218:	f000 f93c 	bl	8007494 <_fflush_r>
 800721c:	bb30      	cbnz	r0, 800726c <__swbuf_r+0x90>
 800721e:	68a3      	ldr	r3, [r4, #8]
 8007220:	3b01      	subs	r3, #1
 8007222:	60a3      	str	r3, [r4, #8]
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	1c5a      	adds	r2, r3, #1
 8007228:	6022      	str	r2, [r4, #0]
 800722a:	701e      	strb	r6, [r3, #0]
 800722c:	6963      	ldr	r3, [r4, #20]
 800722e:	3001      	adds	r0, #1
 8007230:	4283      	cmp	r3, r0
 8007232:	d004      	beq.n	800723e <__swbuf_r+0x62>
 8007234:	89a3      	ldrh	r3, [r4, #12]
 8007236:	07db      	lsls	r3, r3, #31
 8007238:	d506      	bpl.n	8007248 <__swbuf_r+0x6c>
 800723a:	2e0a      	cmp	r6, #10
 800723c:	d104      	bne.n	8007248 <__swbuf_r+0x6c>
 800723e:	4621      	mov	r1, r4
 8007240:	4628      	mov	r0, r5
 8007242:	f000 f927 	bl	8007494 <_fflush_r>
 8007246:	b988      	cbnz	r0, 800726c <__swbuf_r+0x90>
 8007248:	4638      	mov	r0, r7
 800724a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800724c:	4b0a      	ldr	r3, [pc, #40]	; (8007278 <__swbuf_r+0x9c>)
 800724e:	429c      	cmp	r4, r3
 8007250:	d101      	bne.n	8007256 <__swbuf_r+0x7a>
 8007252:	68ac      	ldr	r4, [r5, #8]
 8007254:	e7cf      	b.n	80071f6 <__swbuf_r+0x1a>
 8007256:	4b09      	ldr	r3, [pc, #36]	; (800727c <__swbuf_r+0xa0>)
 8007258:	429c      	cmp	r4, r3
 800725a:	bf08      	it	eq
 800725c:	68ec      	ldreq	r4, [r5, #12]
 800725e:	e7ca      	b.n	80071f6 <__swbuf_r+0x1a>
 8007260:	4621      	mov	r1, r4
 8007262:	4628      	mov	r0, r5
 8007264:	f000 f81a 	bl	800729c <__swsetup_r>
 8007268:	2800      	cmp	r0, #0
 800726a:	d0cb      	beq.n	8007204 <__swbuf_r+0x28>
 800726c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007270:	e7ea      	b.n	8007248 <__swbuf_r+0x6c>
 8007272:	bf00      	nop
 8007274:	08007e14 	.word	0x08007e14
 8007278:	08007e34 	.word	0x08007e34
 800727c:	08007df4 	.word	0x08007df4

08007280 <__ascii_wctomb>:
 8007280:	b149      	cbz	r1, 8007296 <__ascii_wctomb+0x16>
 8007282:	2aff      	cmp	r2, #255	; 0xff
 8007284:	bf85      	ittet	hi
 8007286:	238a      	movhi	r3, #138	; 0x8a
 8007288:	6003      	strhi	r3, [r0, #0]
 800728a:	700a      	strbls	r2, [r1, #0]
 800728c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007290:	bf98      	it	ls
 8007292:	2001      	movls	r0, #1
 8007294:	4770      	bx	lr
 8007296:	4608      	mov	r0, r1
 8007298:	4770      	bx	lr
	...

0800729c <__swsetup_r>:
 800729c:	4b32      	ldr	r3, [pc, #200]	; (8007368 <__swsetup_r+0xcc>)
 800729e:	b570      	push	{r4, r5, r6, lr}
 80072a0:	681d      	ldr	r5, [r3, #0]
 80072a2:	4606      	mov	r6, r0
 80072a4:	460c      	mov	r4, r1
 80072a6:	b125      	cbz	r5, 80072b2 <__swsetup_r+0x16>
 80072a8:	69ab      	ldr	r3, [r5, #24]
 80072aa:	b913      	cbnz	r3, 80072b2 <__swsetup_r+0x16>
 80072ac:	4628      	mov	r0, r5
 80072ae:	f000 f985 	bl	80075bc <__sinit>
 80072b2:	4b2e      	ldr	r3, [pc, #184]	; (800736c <__swsetup_r+0xd0>)
 80072b4:	429c      	cmp	r4, r3
 80072b6:	d10f      	bne.n	80072d8 <__swsetup_r+0x3c>
 80072b8:	686c      	ldr	r4, [r5, #4]
 80072ba:	89a3      	ldrh	r3, [r4, #12]
 80072bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072c0:	0719      	lsls	r1, r3, #28
 80072c2:	d42c      	bmi.n	800731e <__swsetup_r+0x82>
 80072c4:	06dd      	lsls	r5, r3, #27
 80072c6:	d411      	bmi.n	80072ec <__swsetup_r+0x50>
 80072c8:	2309      	movs	r3, #9
 80072ca:	6033      	str	r3, [r6, #0]
 80072cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80072d0:	81a3      	strh	r3, [r4, #12]
 80072d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072d6:	e03e      	b.n	8007356 <__swsetup_r+0xba>
 80072d8:	4b25      	ldr	r3, [pc, #148]	; (8007370 <__swsetup_r+0xd4>)
 80072da:	429c      	cmp	r4, r3
 80072dc:	d101      	bne.n	80072e2 <__swsetup_r+0x46>
 80072de:	68ac      	ldr	r4, [r5, #8]
 80072e0:	e7eb      	b.n	80072ba <__swsetup_r+0x1e>
 80072e2:	4b24      	ldr	r3, [pc, #144]	; (8007374 <__swsetup_r+0xd8>)
 80072e4:	429c      	cmp	r4, r3
 80072e6:	bf08      	it	eq
 80072e8:	68ec      	ldreq	r4, [r5, #12]
 80072ea:	e7e6      	b.n	80072ba <__swsetup_r+0x1e>
 80072ec:	0758      	lsls	r0, r3, #29
 80072ee:	d512      	bpl.n	8007316 <__swsetup_r+0x7a>
 80072f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072f2:	b141      	cbz	r1, 8007306 <__swsetup_r+0x6a>
 80072f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072f8:	4299      	cmp	r1, r3
 80072fa:	d002      	beq.n	8007302 <__swsetup_r+0x66>
 80072fc:	4630      	mov	r0, r6
 80072fe:	f7ff fb31 	bl	8006964 <_free_r>
 8007302:	2300      	movs	r3, #0
 8007304:	6363      	str	r3, [r4, #52]	; 0x34
 8007306:	89a3      	ldrh	r3, [r4, #12]
 8007308:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800730c:	81a3      	strh	r3, [r4, #12]
 800730e:	2300      	movs	r3, #0
 8007310:	6063      	str	r3, [r4, #4]
 8007312:	6923      	ldr	r3, [r4, #16]
 8007314:	6023      	str	r3, [r4, #0]
 8007316:	89a3      	ldrh	r3, [r4, #12]
 8007318:	f043 0308 	orr.w	r3, r3, #8
 800731c:	81a3      	strh	r3, [r4, #12]
 800731e:	6923      	ldr	r3, [r4, #16]
 8007320:	b94b      	cbnz	r3, 8007336 <__swsetup_r+0x9a>
 8007322:	89a3      	ldrh	r3, [r4, #12]
 8007324:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800732c:	d003      	beq.n	8007336 <__swsetup_r+0x9a>
 800732e:	4621      	mov	r1, r4
 8007330:	4630      	mov	r0, r6
 8007332:	f000 fa09 	bl	8007748 <__smakebuf_r>
 8007336:	89a0      	ldrh	r0, [r4, #12]
 8007338:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800733c:	f010 0301 	ands.w	r3, r0, #1
 8007340:	d00a      	beq.n	8007358 <__swsetup_r+0xbc>
 8007342:	2300      	movs	r3, #0
 8007344:	60a3      	str	r3, [r4, #8]
 8007346:	6963      	ldr	r3, [r4, #20]
 8007348:	425b      	negs	r3, r3
 800734a:	61a3      	str	r3, [r4, #24]
 800734c:	6923      	ldr	r3, [r4, #16]
 800734e:	b943      	cbnz	r3, 8007362 <__swsetup_r+0xc6>
 8007350:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007354:	d1ba      	bne.n	80072cc <__swsetup_r+0x30>
 8007356:	bd70      	pop	{r4, r5, r6, pc}
 8007358:	0781      	lsls	r1, r0, #30
 800735a:	bf58      	it	pl
 800735c:	6963      	ldrpl	r3, [r4, #20]
 800735e:	60a3      	str	r3, [r4, #8]
 8007360:	e7f4      	b.n	800734c <__swsetup_r+0xb0>
 8007362:	2000      	movs	r0, #0
 8007364:	e7f7      	b.n	8007356 <__swsetup_r+0xba>
 8007366:	bf00      	nop
 8007368:	20000014 	.word	0x20000014
 800736c:	08007e14 	.word	0x08007e14
 8007370:	08007e34 	.word	0x08007e34
 8007374:	08007df4 	.word	0x08007df4

08007378 <abort>:
 8007378:	b508      	push	{r3, lr}
 800737a:	2006      	movs	r0, #6
 800737c:	f000 fa54 	bl	8007828 <raise>
 8007380:	2001      	movs	r0, #1
 8007382:	f7fa f8e5 	bl	8001550 <_exit>
	...

08007388 <__sflush_r>:
 8007388:	898a      	ldrh	r2, [r1, #12]
 800738a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800738e:	4605      	mov	r5, r0
 8007390:	0710      	lsls	r0, r2, #28
 8007392:	460c      	mov	r4, r1
 8007394:	d458      	bmi.n	8007448 <__sflush_r+0xc0>
 8007396:	684b      	ldr	r3, [r1, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	dc05      	bgt.n	80073a8 <__sflush_r+0x20>
 800739c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800739e:	2b00      	cmp	r3, #0
 80073a0:	dc02      	bgt.n	80073a8 <__sflush_r+0x20>
 80073a2:	2000      	movs	r0, #0
 80073a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073aa:	2e00      	cmp	r6, #0
 80073ac:	d0f9      	beq.n	80073a2 <__sflush_r+0x1a>
 80073ae:	2300      	movs	r3, #0
 80073b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80073b4:	682f      	ldr	r7, [r5, #0]
 80073b6:	602b      	str	r3, [r5, #0]
 80073b8:	d032      	beq.n	8007420 <__sflush_r+0x98>
 80073ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	075a      	lsls	r2, r3, #29
 80073c0:	d505      	bpl.n	80073ce <__sflush_r+0x46>
 80073c2:	6863      	ldr	r3, [r4, #4]
 80073c4:	1ac0      	subs	r0, r0, r3
 80073c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073c8:	b10b      	cbz	r3, 80073ce <__sflush_r+0x46>
 80073ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073cc:	1ac0      	subs	r0, r0, r3
 80073ce:	2300      	movs	r3, #0
 80073d0:	4602      	mov	r2, r0
 80073d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073d4:	6a21      	ldr	r1, [r4, #32]
 80073d6:	4628      	mov	r0, r5
 80073d8:	47b0      	blx	r6
 80073da:	1c43      	adds	r3, r0, #1
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	d106      	bne.n	80073ee <__sflush_r+0x66>
 80073e0:	6829      	ldr	r1, [r5, #0]
 80073e2:	291d      	cmp	r1, #29
 80073e4:	d82c      	bhi.n	8007440 <__sflush_r+0xb8>
 80073e6:	4a2a      	ldr	r2, [pc, #168]	; (8007490 <__sflush_r+0x108>)
 80073e8:	40ca      	lsrs	r2, r1
 80073ea:	07d6      	lsls	r6, r2, #31
 80073ec:	d528      	bpl.n	8007440 <__sflush_r+0xb8>
 80073ee:	2200      	movs	r2, #0
 80073f0:	6062      	str	r2, [r4, #4]
 80073f2:	04d9      	lsls	r1, r3, #19
 80073f4:	6922      	ldr	r2, [r4, #16]
 80073f6:	6022      	str	r2, [r4, #0]
 80073f8:	d504      	bpl.n	8007404 <__sflush_r+0x7c>
 80073fa:	1c42      	adds	r2, r0, #1
 80073fc:	d101      	bne.n	8007402 <__sflush_r+0x7a>
 80073fe:	682b      	ldr	r3, [r5, #0]
 8007400:	b903      	cbnz	r3, 8007404 <__sflush_r+0x7c>
 8007402:	6560      	str	r0, [r4, #84]	; 0x54
 8007404:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007406:	602f      	str	r7, [r5, #0]
 8007408:	2900      	cmp	r1, #0
 800740a:	d0ca      	beq.n	80073a2 <__sflush_r+0x1a>
 800740c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007410:	4299      	cmp	r1, r3
 8007412:	d002      	beq.n	800741a <__sflush_r+0x92>
 8007414:	4628      	mov	r0, r5
 8007416:	f7ff faa5 	bl	8006964 <_free_r>
 800741a:	2000      	movs	r0, #0
 800741c:	6360      	str	r0, [r4, #52]	; 0x34
 800741e:	e7c1      	b.n	80073a4 <__sflush_r+0x1c>
 8007420:	6a21      	ldr	r1, [r4, #32]
 8007422:	2301      	movs	r3, #1
 8007424:	4628      	mov	r0, r5
 8007426:	47b0      	blx	r6
 8007428:	1c41      	adds	r1, r0, #1
 800742a:	d1c7      	bne.n	80073bc <__sflush_r+0x34>
 800742c:	682b      	ldr	r3, [r5, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d0c4      	beq.n	80073bc <__sflush_r+0x34>
 8007432:	2b1d      	cmp	r3, #29
 8007434:	d001      	beq.n	800743a <__sflush_r+0xb2>
 8007436:	2b16      	cmp	r3, #22
 8007438:	d101      	bne.n	800743e <__sflush_r+0xb6>
 800743a:	602f      	str	r7, [r5, #0]
 800743c:	e7b1      	b.n	80073a2 <__sflush_r+0x1a>
 800743e:	89a3      	ldrh	r3, [r4, #12]
 8007440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007444:	81a3      	strh	r3, [r4, #12]
 8007446:	e7ad      	b.n	80073a4 <__sflush_r+0x1c>
 8007448:	690f      	ldr	r7, [r1, #16]
 800744a:	2f00      	cmp	r7, #0
 800744c:	d0a9      	beq.n	80073a2 <__sflush_r+0x1a>
 800744e:	0793      	lsls	r3, r2, #30
 8007450:	680e      	ldr	r6, [r1, #0]
 8007452:	bf08      	it	eq
 8007454:	694b      	ldreq	r3, [r1, #20]
 8007456:	600f      	str	r7, [r1, #0]
 8007458:	bf18      	it	ne
 800745a:	2300      	movne	r3, #0
 800745c:	eba6 0807 	sub.w	r8, r6, r7
 8007460:	608b      	str	r3, [r1, #8]
 8007462:	f1b8 0f00 	cmp.w	r8, #0
 8007466:	dd9c      	ble.n	80073a2 <__sflush_r+0x1a>
 8007468:	6a21      	ldr	r1, [r4, #32]
 800746a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800746c:	4643      	mov	r3, r8
 800746e:	463a      	mov	r2, r7
 8007470:	4628      	mov	r0, r5
 8007472:	47b0      	blx	r6
 8007474:	2800      	cmp	r0, #0
 8007476:	dc06      	bgt.n	8007486 <__sflush_r+0xfe>
 8007478:	89a3      	ldrh	r3, [r4, #12]
 800747a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800747e:	81a3      	strh	r3, [r4, #12]
 8007480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007484:	e78e      	b.n	80073a4 <__sflush_r+0x1c>
 8007486:	4407      	add	r7, r0
 8007488:	eba8 0800 	sub.w	r8, r8, r0
 800748c:	e7e9      	b.n	8007462 <__sflush_r+0xda>
 800748e:	bf00      	nop
 8007490:	20400001 	.word	0x20400001

08007494 <_fflush_r>:
 8007494:	b538      	push	{r3, r4, r5, lr}
 8007496:	690b      	ldr	r3, [r1, #16]
 8007498:	4605      	mov	r5, r0
 800749a:	460c      	mov	r4, r1
 800749c:	b913      	cbnz	r3, 80074a4 <_fflush_r+0x10>
 800749e:	2500      	movs	r5, #0
 80074a0:	4628      	mov	r0, r5
 80074a2:	bd38      	pop	{r3, r4, r5, pc}
 80074a4:	b118      	cbz	r0, 80074ae <_fflush_r+0x1a>
 80074a6:	6983      	ldr	r3, [r0, #24]
 80074a8:	b90b      	cbnz	r3, 80074ae <_fflush_r+0x1a>
 80074aa:	f000 f887 	bl	80075bc <__sinit>
 80074ae:	4b14      	ldr	r3, [pc, #80]	; (8007500 <_fflush_r+0x6c>)
 80074b0:	429c      	cmp	r4, r3
 80074b2:	d11b      	bne.n	80074ec <_fflush_r+0x58>
 80074b4:	686c      	ldr	r4, [r5, #4]
 80074b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0ef      	beq.n	800749e <_fflush_r+0xa>
 80074be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80074c0:	07d0      	lsls	r0, r2, #31
 80074c2:	d404      	bmi.n	80074ce <_fflush_r+0x3a>
 80074c4:	0599      	lsls	r1, r3, #22
 80074c6:	d402      	bmi.n	80074ce <_fflush_r+0x3a>
 80074c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074ca:	f000 f915 	bl	80076f8 <__retarget_lock_acquire_recursive>
 80074ce:	4628      	mov	r0, r5
 80074d0:	4621      	mov	r1, r4
 80074d2:	f7ff ff59 	bl	8007388 <__sflush_r>
 80074d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074d8:	07da      	lsls	r2, r3, #31
 80074da:	4605      	mov	r5, r0
 80074dc:	d4e0      	bmi.n	80074a0 <_fflush_r+0xc>
 80074de:	89a3      	ldrh	r3, [r4, #12]
 80074e0:	059b      	lsls	r3, r3, #22
 80074e2:	d4dd      	bmi.n	80074a0 <_fflush_r+0xc>
 80074e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074e6:	f000 f908 	bl	80076fa <__retarget_lock_release_recursive>
 80074ea:	e7d9      	b.n	80074a0 <_fflush_r+0xc>
 80074ec:	4b05      	ldr	r3, [pc, #20]	; (8007504 <_fflush_r+0x70>)
 80074ee:	429c      	cmp	r4, r3
 80074f0:	d101      	bne.n	80074f6 <_fflush_r+0x62>
 80074f2:	68ac      	ldr	r4, [r5, #8]
 80074f4:	e7df      	b.n	80074b6 <_fflush_r+0x22>
 80074f6:	4b04      	ldr	r3, [pc, #16]	; (8007508 <_fflush_r+0x74>)
 80074f8:	429c      	cmp	r4, r3
 80074fa:	bf08      	it	eq
 80074fc:	68ec      	ldreq	r4, [r5, #12]
 80074fe:	e7da      	b.n	80074b6 <_fflush_r+0x22>
 8007500:	08007e14 	.word	0x08007e14
 8007504:	08007e34 	.word	0x08007e34
 8007508:	08007df4 	.word	0x08007df4

0800750c <std>:
 800750c:	2300      	movs	r3, #0
 800750e:	b510      	push	{r4, lr}
 8007510:	4604      	mov	r4, r0
 8007512:	e9c0 3300 	strd	r3, r3, [r0]
 8007516:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800751a:	6083      	str	r3, [r0, #8]
 800751c:	8181      	strh	r1, [r0, #12]
 800751e:	6643      	str	r3, [r0, #100]	; 0x64
 8007520:	81c2      	strh	r2, [r0, #14]
 8007522:	6183      	str	r3, [r0, #24]
 8007524:	4619      	mov	r1, r3
 8007526:	2208      	movs	r2, #8
 8007528:	305c      	adds	r0, #92	; 0x5c
 800752a:	f7fd fb5b 	bl	8004be4 <memset>
 800752e:	4b05      	ldr	r3, [pc, #20]	; (8007544 <std+0x38>)
 8007530:	6263      	str	r3, [r4, #36]	; 0x24
 8007532:	4b05      	ldr	r3, [pc, #20]	; (8007548 <std+0x3c>)
 8007534:	62a3      	str	r3, [r4, #40]	; 0x28
 8007536:	4b05      	ldr	r3, [pc, #20]	; (800754c <std+0x40>)
 8007538:	62e3      	str	r3, [r4, #44]	; 0x2c
 800753a:	4b05      	ldr	r3, [pc, #20]	; (8007550 <std+0x44>)
 800753c:	6224      	str	r4, [r4, #32]
 800753e:	6323      	str	r3, [r4, #48]	; 0x30
 8007540:	bd10      	pop	{r4, pc}
 8007542:	bf00      	nop
 8007544:	08007861 	.word	0x08007861
 8007548:	08007883 	.word	0x08007883
 800754c:	080078bb 	.word	0x080078bb
 8007550:	080078df 	.word	0x080078df

08007554 <_cleanup_r>:
 8007554:	4901      	ldr	r1, [pc, #4]	; (800755c <_cleanup_r+0x8>)
 8007556:	f000 b8af 	b.w	80076b8 <_fwalk_reent>
 800755a:	bf00      	nop
 800755c:	08007495 	.word	0x08007495

08007560 <__sfmoreglue>:
 8007560:	b570      	push	{r4, r5, r6, lr}
 8007562:	2268      	movs	r2, #104	; 0x68
 8007564:	1e4d      	subs	r5, r1, #1
 8007566:	4355      	muls	r5, r2
 8007568:	460e      	mov	r6, r1
 800756a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800756e:	f7ff fa65 	bl	8006a3c <_malloc_r>
 8007572:	4604      	mov	r4, r0
 8007574:	b140      	cbz	r0, 8007588 <__sfmoreglue+0x28>
 8007576:	2100      	movs	r1, #0
 8007578:	e9c0 1600 	strd	r1, r6, [r0]
 800757c:	300c      	adds	r0, #12
 800757e:	60a0      	str	r0, [r4, #8]
 8007580:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007584:	f7fd fb2e 	bl	8004be4 <memset>
 8007588:	4620      	mov	r0, r4
 800758a:	bd70      	pop	{r4, r5, r6, pc}

0800758c <__sfp_lock_acquire>:
 800758c:	4801      	ldr	r0, [pc, #4]	; (8007594 <__sfp_lock_acquire+0x8>)
 800758e:	f000 b8b3 	b.w	80076f8 <__retarget_lock_acquire_recursive>
 8007592:	bf00      	nop
 8007594:	200002f9 	.word	0x200002f9

08007598 <__sfp_lock_release>:
 8007598:	4801      	ldr	r0, [pc, #4]	; (80075a0 <__sfp_lock_release+0x8>)
 800759a:	f000 b8ae 	b.w	80076fa <__retarget_lock_release_recursive>
 800759e:	bf00      	nop
 80075a0:	200002f9 	.word	0x200002f9

080075a4 <__sinit_lock_acquire>:
 80075a4:	4801      	ldr	r0, [pc, #4]	; (80075ac <__sinit_lock_acquire+0x8>)
 80075a6:	f000 b8a7 	b.w	80076f8 <__retarget_lock_acquire_recursive>
 80075aa:	bf00      	nop
 80075ac:	200002fa 	.word	0x200002fa

080075b0 <__sinit_lock_release>:
 80075b0:	4801      	ldr	r0, [pc, #4]	; (80075b8 <__sinit_lock_release+0x8>)
 80075b2:	f000 b8a2 	b.w	80076fa <__retarget_lock_release_recursive>
 80075b6:	bf00      	nop
 80075b8:	200002fa 	.word	0x200002fa

080075bc <__sinit>:
 80075bc:	b510      	push	{r4, lr}
 80075be:	4604      	mov	r4, r0
 80075c0:	f7ff fff0 	bl	80075a4 <__sinit_lock_acquire>
 80075c4:	69a3      	ldr	r3, [r4, #24]
 80075c6:	b11b      	cbz	r3, 80075d0 <__sinit+0x14>
 80075c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075cc:	f7ff bff0 	b.w	80075b0 <__sinit_lock_release>
 80075d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80075d4:	6523      	str	r3, [r4, #80]	; 0x50
 80075d6:	4b13      	ldr	r3, [pc, #76]	; (8007624 <__sinit+0x68>)
 80075d8:	4a13      	ldr	r2, [pc, #76]	; (8007628 <__sinit+0x6c>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80075de:	42a3      	cmp	r3, r4
 80075e0:	bf04      	itt	eq
 80075e2:	2301      	moveq	r3, #1
 80075e4:	61a3      	streq	r3, [r4, #24]
 80075e6:	4620      	mov	r0, r4
 80075e8:	f000 f820 	bl	800762c <__sfp>
 80075ec:	6060      	str	r0, [r4, #4]
 80075ee:	4620      	mov	r0, r4
 80075f0:	f000 f81c 	bl	800762c <__sfp>
 80075f4:	60a0      	str	r0, [r4, #8]
 80075f6:	4620      	mov	r0, r4
 80075f8:	f000 f818 	bl	800762c <__sfp>
 80075fc:	2200      	movs	r2, #0
 80075fe:	60e0      	str	r0, [r4, #12]
 8007600:	2104      	movs	r1, #4
 8007602:	6860      	ldr	r0, [r4, #4]
 8007604:	f7ff ff82 	bl	800750c <std>
 8007608:	68a0      	ldr	r0, [r4, #8]
 800760a:	2201      	movs	r2, #1
 800760c:	2109      	movs	r1, #9
 800760e:	f7ff ff7d 	bl	800750c <std>
 8007612:	68e0      	ldr	r0, [r4, #12]
 8007614:	2202      	movs	r2, #2
 8007616:	2112      	movs	r1, #18
 8007618:	f7ff ff78 	bl	800750c <std>
 800761c:	2301      	movs	r3, #1
 800761e:	61a3      	str	r3, [r4, #24]
 8007620:	e7d2      	b.n	80075c8 <__sinit+0xc>
 8007622:	bf00      	nop
 8007624:	08007a78 	.word	0x08007a78
 8007628:	08007555 	.word	0x08007555

0800762c <__sfp>:
 800762c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762e:	4607      	mov	r7, r0
 8007630:	f7ff ffac 	bl	800758c <__sfp_lock_acquire>
 8007634:	4b1e      	ldr	r3, [pc, #120]	; (80076b0 <__sfp+0x84>)
 8007636:	681e      	ldr	r6, [r3, #0]
 8007638:	69b3      	ldr	r3, [r6, #24]
 800763a:	b913      	cbnz	r3, 8007642 <__sfp+0x16>
 800763c:	4630      	mov	r0, r6
 800763e:	f7ff ffbd 	bl	80075bc <__sinit>
 8007642:	3648      	adds	r6, #72	; 0x48
 8007644:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007648:	3b01      	subs	r3, #1
 800764a:	d503      	bpl.n	8007654 <__sfp+0x28>
 800764c:	6833      	ldr	r3, [r6, #0]
 800764e:	b30b      	cbz	r3, 8007694 <__sfp+0x68>
 8007650:	6836      	ldr	r6, [r6, #0]
 8007652:	e7f7      	b.n	8007644 <__sfp+0x18>
 8007654:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007658:	b9d5      	cbnz	r5, 8007690 <__sfp+0x64>
 800765a:	4b16      	ldr	r3, [pc, #88]	; (80076b4 <__sfp+0x88>)
 800765c:	60e3      	str	r3, [r4, #12]
 800765e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007662:	6665      	str	r5, [r4, #100]	; 0x64
 8007664:	f000 f847 	bl	80076f6 <__retarget_lock_init_recursive>
 8007668:	f7ff ff96 	bl	8007598 <__sfp_lock_release>
 800766c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007670:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007674:	6025      	str	r5, [r4, #0]
 8007676:	61a5      	str	r5, [r4, #24]
 8007678:	2208      	movs	r2, #8
 800767a:	4629      	mov	r1, r5
 800767c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007680:	f7fd fab0 	bl	8004be4 <memset>
 8007684:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007688:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800768c:	4620      	mov	r0, r4
 800768e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007690:	3468      	adds	r4, #104	; 0x68
 8007692:	e7d9      	b.n	8007648 <__sfp+0x1c>
 8007694:	2104      	movs	r1, #4
 8007696:	4638      	mov	r0, r7
 8007698:	f7ff ff62 	bl	8007560 <__sfmoreglue>
 800769c:	4604      	mov	r4, r0
 800769e:	6030      	str	r0, [r6, #0]
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d1d5      	bne.n	8007650 <__sfp+0x24>
 80076a4:	f7ff ff78 	bl	8007598 <__sfp_lock_release>
 80076a8:	230c      	movs	r3, #12
 80076aa:	603b      	str	r3, [r7, #0]
 80076ac:	e7ee      	b.n	800768c <__sfp+0x60>
 80076ae:	bf00      	nop
 80076b0:	08007a78 	.word	0x08007a78
 80076b4:	ffff0001 	.word	0xffff0001

080076b8 <_fwalk_reent>:
 80076b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076bc:	4606      	mov	r6, r0
 80076be:	4688      	mov	r8, r1
 80076c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80076c4:	2700      	movs	r7, #0
 80076c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076ca:	f1b9 0901 	subs.w	r9, r9, #1
 80076ce:	d505      	bpl.n	80076dc <_fwalk_reent+0x24>
 80076d0:	6824      	ldr	r4, [r4, #0]
 80076d2:	2c00      	cmp	r4, #0
 80076d4:	d1f7      	bne.n	80076c6 <_fwalk_reent+0xe>
 80076d6:	4638      	mov	r0, r7
 80076d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076dc:	89ab      	ldrh	r3, [r5, #12]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d907      	bls.n	80076f2 <_fwalk_reent+0x3a>
 80076e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076e6:	3301      	adds	r3, #1
 80076e8:	d003      	beq.n	80076f2 <_fwalk_reent+0x3a>
 80076ea:	4629      	mov	r1, r5
 80076ec:	4630      	mov	r0, r6
 80076ee:	47c0      	blx	r8
 80076f0:	4307      	orrs	r7, r0
 80076f2:	3568      	adds	r5, #104	; 0x68
 80076f4:	e7e9      	b.n	80076ca <_fwalk_reent+0x12>

080076f6 <__retarget_lock_init_recursive>:
 80076f6:	4770      	bx	lr

080076f8 <__retarget_lock_acquire_recursive>:
 80076f8:	4770      	bx	lr

080076fa <__retarget_lock_release_recursive>:
 80076fa:	4770      	bx	lr

080076fc <__swhatbuf_r>:
 80076fc:	b570      	push	{r4, r5, r6, lr}
 80076fe:	460e      	mov	r6, r1
 8007700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007704:	2900      	cmp	r1, #0
 8007706:	b096      	sub	sp, #88	; 0x58
 8007708:	4614      	mov	r4, r2
 800770a:	461d      	mov	r5, r3
 800770c:	da08      	bge.n	8007720 <__swhatbuf_r+0x24>
 800770e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	602a      	str	r2, [r5, #0]
 8007716:	061a      	lsls	r2, r3, #24
 8007718:	d410      	bmi.n	800773c <__swhatbuf_r+0x40>
 800771a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800771e:	e00e      	b.n	800773e <__swhatbuf_r+0x42>
 8007720:	466a      	mov	r2, sp
 8007722:	f000 f903 	bl	800792c <_fstat_r>
 8007726:	2800      	cmp	r0, #0
 8007728:	dbf1      	blt.n	800770e <__swhatbuf_r+0x12>
 800772a:	9a01      	ldr	r2, [sp, #4]
 800772c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007730:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007734:	425a      	negs	r2, r3
 8007736:	415a      	adcs	r2, r3
 8007738:	602a      	str	r2, [r5, #0]
 800773a:	e7ee      	b.n	800771a <__swhatbuf_r+0x1e>
 800773c:	2340      	movs	r3, #64	; 0x40
 800773e:	2000      	movs	r0, #0
 8007740:	6023      	str	r3, [r4, #0]
 8007742:	b016      	add	sp, #88	; 0x58
 8007744:	bd70      	pop	{r4, r5, r6, pc}
	...

08007748 <__smakebuf_r>:
 8007748:	898b      	ldrh	r3, [r1, #12]
 800774a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800774c:	079d      	lsls	r5, r3, #30
 800774e:	4606      	mov	r6, r0
 8007750:	460c      	mov	r4, r1
 8007752:	d507      	bpl.n	8007764 <__smakebuf_r+0x1c>
 8007754:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007758:	6023      	str	r3, [r4, #0]
 800775a:	6123      	str	r3, [r4, #16]
 800775c:	2301      	movs	r3, #1
 800775e:	6163      	str	r3, [r4, #20]
 8007760:	b002      	add	sp, #8
 8007762:	bd70      	pop	{r4, r5, r6, pc}
 8007764:	ab01      	add	r3, sp, #4
 8007766:	466a      	mov	r2, sp
 8007768:	f7ff ffc8 	bl	80076fc <__swhatbuf_r>
 800776c:	9900      	ldr	r1, [sp, #0]
 800776e:	4605      	mov	r5, r0
 8007770:	4630      	mov	r0, r6
 8007772:	f7ff f963 	bl	8006a3c <_malloc_r>
 8007776:	b948      	cbnz	r0, 800778c <__smakebuf_r+0x44>
 8007778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800777c:	059a      	lsls	r2, r3, #22
 800777e:	d4ef      	bmi.n	8007760 <__smakebuf_r+0x18>
 8007780:	f023 0303 	bic.w	r3, r3, #3
 8007784:	f043 0302 	orr.w	r3, r3, #2
 8007788:	81a3      	strh	r3, [r4, #12]
 800778a:	e7e3      	b.n	8007754 <__smakebuf_r+0xc>
 800778c:	4b0d      	ldr	r3, [pc, #52]	; (80077c4 <__smakebuf_r+0x7c>)
 800778e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007790:	89a3      	ldrh	r3, [r4, #12]
 8007792:	6020      	str	r0, [r4, #0]
 8007794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007798:	81a3      	strh	r3, [r4, #12]
 800779a:	9b00      	ldr	r3, [sp, #0]
 800779c:	6163      	str	r3, [r4, #20]
 800779e:	9b01      	ldr	r3, [sp, #4]
 80077a0:	6120      	str	r0, [r4, #16]
 80077a2:	b15b      	cbz	r3, 80077bc <__smakebuf_r+0x74>
 80077a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077a8:	4630      	mov	r0, r6
 80077aa:	f000 f8d1 	bl	8007950 <_isatty_r>
 80077ae:	b128      	cbz	r0, 80077bc <__smakebuf_r+0x74>
 80077b0:	89a3      	ldrh	r3, [r4, #12]
 80077b2:	f023 0303 	bic.w	r3, r3, #3
 80077b6:	f043 0301 	orr.w	r3, r3, #1
 80077ba:	81a3      	strh	r3, [r4, #12]
 80077bc:	89a0      	ldrh	r0, [r4, #12]
 80077be:	4305      	orrs	r5, r0
 80077c0:	81a5      	strh	r5, [r4, #12]
 80077c2:	e7cd      	b.n	8007760 <__smakebuf_r+0x18>
 80077c4:	08007555 	.word	0x08007555

080077c8 <_malloc_usable_size_r>:
 80077c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077cc:	1f18      	subs	r0, r3, #4
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	bfbc      	itt	lt
 80077d2:	580b      	ldrlt	r3, [r1, r0]
 80077d4:	18c0      	addlt	r0, r0, r3
 80077d6:	4770      	bx	lr

080077d8 <_raise_r>:
 80077d8:	291f      	cmp	r1, #31
 80077da:	b538      	push	{r3, r4, r5, lr}
 80077dc:	4604      	mov	r4, r0
 80077de:	460d      	mov	r5, r1
 80077e0:	d904      	bls.n	80077ec <_raise_r+0x14>
 80077e2:	2316      	movs	r3, #22
 80077e4:	6003      	str	r3, [r0, #0]
 80077e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077ea:	bd38      	pop	{r3, r4, r5, pc}
 80077ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80077ee:	b112      	cbz	r2, 80077f6 <_raise_r+0x1e>
 80077f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80077f4:	b94b      	cbnz	r3, 800780a <_raise_r+0x32>
 80077f6:	4620      	mov	r0, r4
 80077f8:	f000 f830 	bl	800785c <_getpid_r>
 80077fc:	462a      	mov	r2, r5
 80077fe:	4601      	mov	r1, r0
 8007800:	4620      	mov	r0, r4
 8007802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007806:	f000 b817 	b.w	8007838 <_kill_r>
 800780a:	2b01      	cmp	r3, #1
 800780c:	d00a      	beq.n	8007824 <_raise_r+0x4c>
 800780e:	1c59      	adds	r1, r3, #1
 8007810:	d103      	bne.n	800781a <_raise_r+0x42>
 8007812:	2316      	movs	r3, #22
 8007814:	6003      	str	r3, [r0, #0]
 8007816:	2001      	movs	r0, #1
 8007818:	e7e7      	b.n	80077ea <_raise_r+0x12>
 800781a:	2400      	movs	r4, #0
 800781c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007820:	4628      	mov	r0, r5
 8007822:	4798      	blx	r3
 8007824:	2000      	movs	r0, #0
 8007826:	e7e0      	b.n	80077ea <_raise_r+0x12>

08007828 <raise>:
 8007828:	4b02      	ldr	r3, [pc, #8]	; (8007834 <raise+0xc>)
 800782a:	4601      	mov	r1, r0
 800782c:	6818      	ldr	r0, [r3, #0]
 800782e:	f7ff bfd3 	b.w	80077d8 <_raise_r>
 8007832:	bf00      	nop
 8007834:	20000014 	.word	0x20000014

08007838 <_kill_r>:
 8007838:	b538      	push	{r3, r4, r5, lr}
 800783a:	4d07      	ldr	r5, [pc, #28]	; (8007858 <_kill_r+0x20>)
 800783c:	2300      	movs	r3, #0
 800783e:	4604      	mov	r4, r0
 8007840:	4608      	mov	r0, r1
 8007842:	4611      	mov	r1, r2
 8007844:	602b      	str	r3, [r5, #0]
 8007846:	f7f9 fe73 	bl	8001530 <_kill>
 800784a:	1c43      	adds	r3, r0, #1
 800784c:	d102      	bne.n	8007854 <_kill_r+0x1c>
 800784e:	682b      	ldr	r3, [r5, #0]
 8007850:	b103      	cbz	r3, 8007854 <_kill_r+0x1c>
 8007852:	6023      	str	r3, [r4, #0]
 8007854:	bd38      	pop	{r3, r4, r5, pc}
 8007856:	bf00      	nop
 8007858:	200002f4 	.word	0x200002f4

0800785c <_getpid_r>:
 800785c:	f7f9 be60 	b.w	8001520 <_getpid>

08007860 <__sread>:
 8007860:	b510      	push	{r4, lr}
 8007862:	460c      	mov	r4, r1
 8007864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007868:	f000 f894 	bl	8007994 <_read_r>
 800786c:	2800      	cmp	r0, #0
 800786e:	bfab      	itete	ge
 8007870:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007872:	89a3      	ldrhlt	r3, [r4, #12]
 8007874:	181b      	addge	r3, r3, r0
 8007876:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800787a:	bfac      	ite	ge
 800787c:	6563      	strge	r3, [r4, #84]	; 0x54
 800787e:	81a3      	strhlt	r3, [r4, #12]
 8007880:	bd10      	pop	{r4, pc}

08007882 <__swrite>:
 8007882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007886:	461f      	mov	r7, r3
 8007888:	898b      	ldrh	r3, [r1, #12]
 800788a:	05db      	lsls	r3, r3, #23
 800788c:	4605      	mov	r5, r0
 800788e:	460c      	mov	r4, r1
 8007890:	4616      	mov	r6, r2
 8007892:	d505      	bpl.n	80078a0 <__swrite+0x1e>
 8007894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007898:	2302      	movs	r3, #2
 800789a:	2200      	movs	r2, #0
 800789c:	f000 f868 	bl	8007970 <_lseek_r>
 80078a0:	89a3      	ldrh	r3, [r4, #12]
 80078a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078aa:	81a3      	strh	r3, [r4, #12]
 80078ac:	4632      	mov	r2, r6
 80078ae:	463b      	mov	r3, r7
 80078b0:	4628      	mov	r0, r5
 80078b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078b6:	f000 b817 	b.w	80078e8 <_write_r>

080078ba <__sseek>:
 80078ba:	b510      	push	{r4, lr}
 80078bc:	460c      	mov	r4, r1
 80078be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078c2:	f000 f855 	bl	8007970 <_lseek_r>
 80078c6:	1c43      	adds	r3, r0, #1
 80078c8:	89a3      	ldrh	r3, [r4, #12]
 80078ca:	bf15      	itete	ne
 80078cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80078ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078d6:	81a3      	strheq	r3, [r4, #12]
 80078d8:	bf18      	it	ne
 80078da:	81a3      	strhne	r3, [r4, #12]
 80078dc:	bd10      	pop	{r4, pc}

080078de <__sclose>:
 80078de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078e2:	f000 b813 	b.w	800790c <_close_r>
	...

080078e8 <_write_r>:
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	4d07      	ldr	r5, [pc, #28]	; (8007908 <_write_r+0x20>)
 80078ec:	4604      	mov	r4, r0
 80078ee:	4608      	mov	r0, r1
 80078f0:	4611      	mov	r1, r2
 80078f2:	2200      	movs	r2, #0
 80078f4:	602a      	str	r2, [r5, #0]
 80078f6:	461a      	mov	r2, r3
 80078f8:	f7f9 fe51 	bl	800159e <_write>
 80078fc:	1c43      	adds	r3, r0, #1
 80078fe:	d102      	bne.n	8007906 <_write_r+0x1e>
 8007900:	682b      	ldr	r3, [r5, #0]
 8007902:	b103      	cbz	r3, 8007906 <_write_r+0x1e>
 8007904:	6023      	str	r3, [r4, #0]
 8007906:	bd38      	pop	{r3, r4, r5, pc}
 8007908:	200002f4 	.word	0x200002f4

0800790c <_close_r>:
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	4d06      	ldr	r5, [pc, #24]	; (8007928 <_close_r+0x1c>)
 8007910:	2300      	movs	r3, #0
 8007912:	4604      	mov	r4, r0
 8007914:	4608      	mov	r0, r1
 8007916:	602b      	str	r3, [r5, #0]
 8007918:	f7f9 fe5d 	bl	80015d6 <_close>
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	d102      	bne.n	8007926 <_close_r+0x1a>
 8007920:	682b      	ldr	r3, [r5, #0]
 8007922:	b103      	cbz	r3, 8007926 <_close_r+0x1a>
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	bd38      	pop	{r3, r4, r5, pc}
 8007928:	200002f4 	.word	0x200002f4

0800792c <_fstat_r>:
 800792c:	b538      	push	{r3, r4, r5, lr}
 800792e:	4d07      	ldr	r5, [pc, #28]	; (800794c <_fstat_r+0x20>)
 8007930:	2300      	movs	r3, #0
 8007932:	4604      	mov	r4, r0
 8007934:	4608      	mov	r0, r1
 8007936:	4611      	mov	r1, r2
 8007938:	602b      	str	r3, [r5, #0]
 800793a:	f7f9 fe58 	bl	80015ee <_fstat>
 800793e:	1c43      	adds	r3, r0, #1
 8007940:	d102      	bne.n	8007948 <_fstat_r+0x1c>
 8007942:	682b      	ldr	r3, [r5, #0]
 8007944:	b103      	cbz	r3, 8007948 <_fstat_r+0x1c>
 8007946:	6023      	str	r3, [r4, #0]
 8007948:	bd38      	pop	{r3, r4, r5, pc}
 800794a:	bf00      	nop
 800794c:	200002f4 	.word	0x200002f4

08007950 <_isatty_r>:
 8007950:	b538      	push	{r3, r4, r5, lr}
 8007952:	4d06      	ldr	r5, [pc, #24]	; (800796c <_isatty_r+0x1c>)
 8007954:	2300      	movs	r3, #0
 8007956:	4604      	mov	r4, r0
 8007958:	4608      	mov	r0, r1
 800795a:	602b      	str	r3, [r5, #0]
 800795c:	f7f9 fe57 	bl	800160e <_isatty>
 8007960:	1c43      	adds	r3, r0, #1
 8007962:	d102      	bne.n	800796a <_isatty_r+0x1a>
 8007964:	682b      	ldr	r3, [r5, #0]
 8007966:	b103      	cbz	r3, 800796a <_isatty_r+0x1a>
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	bd38      	pop	{r3, r4, r5, pc}
 800796c:	200002f4 	.word	0x200002f4

08007970 <_lseek_r>:
 8007970:	b538      	push	{r3, r4, r5, lr}
 8007972:	4d07      	ldr	r5, [pc, #28]	; (8007990 <_lseek_r+0x20>)
 8007974:	4604      	mov	r4, r0
 8007976:	4608      	mov	r0, r1
 8007978:	4611      	mov	r1, r2
 800797a:	2200      	movs	r2, #0
 800797c:	602a      	str	r2, [r5, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	f7f9 fe50 	bl	8001624 <_lseek>
 8007984:	1c43      	adds	r3, r0, #1
 8007986:	d102      	bne.n	800798e <_lseek_r+0x1e>
 8007988:	682b      	ldr	r3, [r5, #0]
 800798a:	b103      	cbz	r3, 800798e <_lseek_r+0x1e>
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	bd38      	pop	{r3, r4, r5, pc}
 8007990:	200002f4 	.word	0x200002f4

08007994 <_read_r>:
 8007994:	b538      	push	{r3, r4, r5, lr}
 8007996:	4d07      	ldr	r5, [pc, #28]	; (80079b4 <_read_r+0x20>)
 8007998:	4604      	mov	r4, r0
 800799a:	4608      	mov	r0, r1
 800799c:	4611      	mov	r1, r2
 800799e:	2200      	movs	r2, #0
 80079a0:	602a      	str	r2, [r5, #0]
 80079a2:	461a      	mov	r2, r3
 80079a4:	f7f9 fdde 	bl	8001564 <_read>
 80079a8:	1c43      	adds	r3, r0, #1
 80079aa:	d102      	bne.n	80079b2 <_read_r+0x1e>
 80079ac:	682b      	ldr	r3, [r5, #0]
 80079ae:	b103      	cbz	r3, 80079b2 <_read_r+0x1e>
 80079b0:	6023      	str	r3, [r4, #0]
 80079b2:	bd38      	pop	{r3, r4, r5, pc}
 80079b4:	200002f4 	.word	0x200002f4

080079b8 <_init>:
 80079b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ba:	bf00      	nop
 80079bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079be:	bc08      	pop	{r3}
 80079c0:	469e      	mov	lr, r3
 80079c2:	4770      	bx	lr

080079c4 <_fini>:
 80079c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c6:	bf00      	nop
 80079c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ca:	bc08      	pop	{r3}
 80079cc:	469e      	mov	lr, r3
 80079ce:	4770      	bx	lr
