
MotoVision_Senior_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08007748  08007748  00017748  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b9c  08007b9c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007b9c  08007b9c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b9c  08007b9c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b9c  08007b9c  00017b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ba0  08007ba0  00017ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00000118  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002fc  200002fc  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d1e1  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c3b  00000000  00000000  0002d3f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a40  00000000  00000000  0002f030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000988  00000000  00000000  0002fa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b5ca  00000000  00000000  000303f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dceb  00000000  00000000  0004b9c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d3f3  00000000  00000000  000596ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f6aa0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b50  00000000  00000000  000f6af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007730 	.word	0x08007730

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08007730 	.word	0x08007730

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <CheckDevice>:
uint8_t HIGH_ACCURACY_MODE = 0xEB;
uint8_t status;
uint8_t distance_low;
uint8_t distance_high;
uint16_t distance_cm;
HAL_StatusTypeDef CheckDevice(){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b0a2      	sub	sp, #136	; 0x88
 8000bac:	af00      	add	r7, sp, #0
	char msg[128];

	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, LIDAR_ADDR1 << 1, 10, HAL_MAX_DELAY);
 8000bae:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <CheckDevice+0x7c>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	b299      	uxth	r1, r3
 8000bb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bbc:	220a      	movs	r2, #10
 8000bbe:	481a      	ldr	r0, [pc, #104]	; (8000c28 <CheckDevice+0x80>)
 8000bc0:	f001 fa4e 	bl	8002060 <HAL_I2C_IsDeviceReady>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if(ret == HAL_OK)
 8000bca:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d111      	bne.n	8000bf6 <CheckDevice+0x4e>
	{
	  sprintf(msg, "Device is ready.\r\n");
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4915      	ldr	r1, [pc, #84]	; (8000c2c <CheckDevice+0x84>)
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f004 fb30 	bl	800523c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff faf6 	bl	80001d0 <strlen>
 8000be4:	4603      	mov	r3, r0
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	1d39      	adds	r1, r7, #4
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bee:	4810      	ldr	r0, [pc, #64]	; (8000c30 <CheckDevice+0x88>)
 8000bf0:	f003 fab2 	bl	8004158 <HAL_UART_Transmit>
 8000bf4:	e010      	b.n	8000c18 <CheckDevice+0x70>
	}
	else
	{
	  sprintf(msg, "Device is not connected.\r\n");
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	490e      	ldr	r1, [pc, #56]	; (8000c34 <CheckDevice+0x8c>)
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f004 fb1e 	bl	800523c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fae4 	bl	80001d0 <strlen>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	1d39      	adds	r1, r7, #4
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c12:	4807      	ldr	r0, [pc, #28]	; (8000c30 <CheckDevice+0x88>)
 8000c14:	f003 faa0 	bl	8004158 <HAL_UART_Transmit>
	}
	return ret;
 8000c18:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3788      	adds	r7, #136	; 0x88
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000000 	.word	0x20000000
 8000c28:	20000200 	.word	0x20000200
 8000c2c:	08007748 	.word	0x08007748
 8000c30:	20000254 	.word	0x20000254
 8000c34:	0800775c 	.word	0x0800775c

08000c38 <GetDistance>:
uint16_t GetDistance(){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af04      	add	r7, sp, #16
	// 1. Write 0x04 to register 0x00.
	HAL_I2C_Mem_Write(&hi2c1, LIDAR_ADDR1 << 1, ACQ_COMMAND, 1, &TAKE_DIST, 1, HAL_MAX_DELAY);
 8000c3e:	4b35      	ldr	r3, [pc, #212]	; (8000d14 <GetDistance+0xdc>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	b299      	uxth	r1, r3
 8000c48:	4b33      	ldr	r3, [pc, #204]	; (8000d18 <GetDistance+0xe0>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c52:	9302      	str	r3, [sp, #8]
 8000c54:	2301      	movs	r3, #1
 8000c56:	9301      	str	r3, [sp, #4]
 8000c58:	4b30      	ldr	r3, [pc, #192]	; (8000d1c <GetDistance+0xe4>)
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	4830      	ldr	r0, [pc, #192]	; (8000d20 <GetDistance+0xe8>)
 8000c60:	f000 ffd0 	bl	8001c04 <HAL_I2C_Mem_Write>
	int i = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	607b      	str	r3, [r7, #4]
	// 2. Read register 0x01.
	do {
		if(i > 1000) return 0;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c6e:	dd01      	ble.n	8000c74 <GetDistance+0x3c>
 8000c70:	2300      	movs	r3, #0
 8000c72:	e04b      	b.n	8000d0c <GetDistance+0xd4>
	  HAL_I2C_Mem_Read(&hi2c1, LIDAR_ADDR1 << 1, STATUS_REG, 1, &status, 1, HAL_MAX_DELAY);
 8000c74:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <GetDistance+0xdc>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	b299      	uxth	r1, r3
 8000c7e:	4b29      	ldr	r3, [pc, #164]	; (8000d24 <GetDistance+0xec>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c88:	9302      	str	r3, [sp, #8]
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	9301      	str	r3, [sp, #4]
 8000c8e:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <GetDistance+0xf0>)
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	2301      	movs	r3, #1
 8000c94:	4822      	ldr	r0, [pc, #136]	; (8000d20 <GetDistance+0xe8>)
 8000c96:	f001 f8c9 	bl	8001e2c <HAL_I2C_Mem_Read>
	  i++;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	607b      	str	r3, [r7, #4]
	} while (status & 0x01);
 8000ca0:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <GetDistance+0xf0>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d1dd      	bne.n	8000c68 <GetDistance+0x30>
	// 3. Repeat step 2 until bit 0 (LSB) goes low.

	// 4. Read two bytes from 0x10 (low byte 0x10 then high byte 0x11) to obtain the 16-bit measured distance in centimeters.
	HAL_I2C_Mem_Read(&hi2c1, LIDAR_ADDR1 << 1, DISTANCE_REG_LOW, 1, &distance_low, 1, HAL_MAX_DELAY);
 8000cac:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <GetDistance+0xdc>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	b299      	uxth	r1, r3
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <GetDistance+0xf4>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cc0:	9302      	str	r3, [sp, #8]
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	9301      	str	r3, [sp, #4]
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <GetDistance+0xf8>)
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	2301      	movs	r3, #1
 8000ccc:	4814      	ldr	r0, [pc, #80]	; (8000d20 <GetDistance+0xe8>)
 8000cce:	f001 f8ad 	bl	8001e2c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, LIDAR_ADDR1 << 1, DISTANCE_REG_HIGH, 1, &distance_high, 1, HAL_MAX_DELAY);
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <GetDistance+0xdc>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	b299      	uxth	r1, r3
 8000cdc:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <GetDistance+0xfc>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ce6:	9302      	str	r3, [sp, #8]
 8000ce8:	2301      	movs	r3, #1
 8000cea:	9301      	str	r3, [sp, #4]
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <GetDistance+0x100>)
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	480b      	ldr	r0, [pc, #44]	; (8000d20 <GetDistance+0xe8>)
 8000cf4:	f001 f89a 	bl	8001e2c <HAL_I2C_Mem_Read>

	return (((uint16_t)distance_high << 8) | distance_low);
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <GetDistance+0x100>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	021b      	lsls	r3, r3, #8
 8000cfe:	b21a      	sxth	r2, r3
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <GetDistance+0xf8>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	b21b      	sxth	r3, r3
 8000d06:	4313      	orrs	r3, r2
 8000d08:	b21b      	sxth	r3, r3
 8000d0a:	b29b      	uxth	r3, r3
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000000 	.word	0x20000000
 8000d18:	200002dc 	.word	0x200002dc
 8000d1c:	20000001 	.word	0x20000001
 8000d20:	20000200 	.word	0x20000200
 8000d24:	20000004 	.word	0x20000004
 8000d28:	200002dd 	.word	0x200002dd
 8000d2c:	20000002 	.word	0x20000002
 8000d30:	200002de 	.word	0x200002de
 8000d34:	20000003 	.word	0x20000003
 8000d38:	200002df 	.word	0x200002df

08000d3c <L_RED_LED>:
void L_RED_LED() {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	2102      	movs	r1, #2
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d48:	f000 feb4 	bl	8001ab4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2108      	movs	r1, #8
 8000d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d54:	f000 feae 	bl	8001ab4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2110      	movs	r1, #16
 8000d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d60:	f000 fea8 	bl	8001ab4 <HAL_GPIO_WritePin>
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <L_GREEN_LED>:
void L_GREEN_LED() {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2102      	movs	r1, #2
 8000d70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d74:	f000 fe9e 	bl	8001ab4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2108      	movs	r1, #8
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d80:	f000 fe98 	bl	8001ab4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2110      	movs	r1, #16
 8000d88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8c:	f000 fe92 	bl	8001ab4 <HAL_GPIO_WritePin>
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <L_YELLOW_LED>:
void L_YELLOW_LED() {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	2102      	movs	r1, #2
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da0:	f000 fe88 	bl	8001ab4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	2108      	movs	r1, #8
 8000da8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dac:	f000 fe82 	bl	8001ab4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2110      	movs	r1, #16
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db8:	f000 fe7c 	bl	8001ab4 <HAL_GPIO_WritePin>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <L_OFF_LED>:
void L_OFF_LED() {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dcc:	f000 fe72 	bl	8001ab4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2108      	movs	r1, #8
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd8:	f000 fe6c 	bl	8001ab4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2110      	movs	r1, #16
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de4:	f000 fe66 	bl	8001ab4 <HAL_GPIO_WritePin>
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0a0      	sub	sp, #128	; 0x80
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df2:	f000 fb51 	bl	8001498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df6:	f000 f84d 	bl	8000e94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfa:	f000 f90b 	bl	8001014 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dfe:	f000 f8d9 	bl	8000fb4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e02:	f000 f899 	bl	8000f38 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  char msg[128];

  while(CheckDevice() != HAL_OK) {}
 8000e06:	bf00      	nop
 8000e08:	f7ff fece 	bl	8000ba8 <CheckDevice>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1fa      	bne.n	8000e08 <main+0x1c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  distance_cm = GetDistance();
 8000e12:	f7ff ff11 	bl	8000c38 <GetDistance>
 8000e16:	4603      	mov	r3, r0
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <main+0x9c>)
 8000e1c:	801a      	strh	r2, [r3, #0]

	  sprintf(msg, "distance: %d\r\n", distance_cm);
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <main+0x9c>)
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	463b      	mov	r3, r7
 8000e26:	4919      	ldr	r1, [pc, #100]	; (8000e8c <main+0xa0>)
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f004 fa07 	bl	800523c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 8000e2e:	463b      	mov	r3, r7
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff f9cd 	bl	80001d0 <strlen>
 8000e36:	4603      	mov	r3, r0
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	4639      	mov	r1, r7
 8000e3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e40:	4813      	ldr	r0, [pc, #76]	; (8000e90 <main+0xa4>)
 8000e42:	f003 f989 	bl	8004158 <HAL_UART_Transmit>
	  HAL_Delay(250);
 8000e46:	20fa      	movs	r0, #250	; 0xfa
 8000e48:	f000 fb8c 	bl	8001564 <HAL_Delay>


	  if(distance_cm == 0)
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <main+0x9c>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d102      	bne.n	8000e5a <main+0x6e>
		  L_OFF_LED();
 8000e54:	f7ff ffb4 	bl	8000dc0 <L_OFF_LED>
 8000e58:	e7db      	b.n	8000e12 <main+0x26>
	  else if(distance_cm < 100)
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <main+0x9c>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	2b63      	cmp	r3, #99	; 0x63
 8000e60:	d802      	bhi.n	8000e68 <main+0x7c>
		  L_RED_LED();
 8000e62:	f7ff ff6b 	bl	8000d3c <L_RED_LED>
 8000e66:	e7d4      	b.n	8000e12 <main+0x26>
	  else if(distance_cm > 100)
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <main+0x9c>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	2b64      	cmp	r3, #100	; 0x64
 8000e6e:	d902      	bls.n	8000e76 <main+0x8a>
		  L_YELLOW_LED();
 8000e70:	f7ff ff90 	bl	8000d94 <L_YELLOW_LED>
 8000e74:	e7cd      	b.n	8000e12 <main+0x26>
	  else if(distance_cm > 500)
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <main+0x9c>)
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e7e:	d9c8      	bls.n	8000e12 <main+0x26>
		  L_GREEN_LED();
 8000e80:	f7ff ff72 	bl	8000d68 <L_GREEN_LED>
  {
 8000e84:	e7c5      	b.n	8000e12 <main+0x26>
 8000e86:	bf00      	nop
 8000e88:	200002e0 	.word	0x200002e0
 8000e8c:	08007778 	.word	0x08007778
 8000e90:	20000254 	.word	0x20000254

08000e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b096      	sub	sp, #88	; 0x58
 8000e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e9e:	2228      	movs	r2, #40	; 0x28
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f003 fd58 	bl	8004958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]
 8000ec6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ed0:	2310      	movs	r3, #16
 8000ed2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000edc:	4618      	mov	r0, r3
 8000ede:	f001 fd53 	bl	8002988 <HAL_RCC_OscConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ee8:	f000 f8de 	bl	80010a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eec:	230f      	movs	r3, #15
 8000eee:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f002 fd7c 	bl	8003a04 <HAL_RCC_ClockConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f12:	f000 f8c9 	bl	80010a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f16:	2320      	movs	r3, #32
 8000f18:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	4618      	mov	r0, r3
 8000f22:	f002 ffa5 	bl	8003e70 <HAL_RCCEx_PeriphCLKConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f2c:	f000 f8bc 	bl	80010a8 <Error_Handler>
  }
}
 8000f30:	bf00      	nop
 8000f32:	3758      	adds	r7, #88	; 0x58
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f3e:	4a1c      	ldr	r2, [pc, #112]	; (8000fb0 <MX_I2C1_Init+0x78>)
 8000f40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f44:	f240 220b 	movw	r2, #523	; 0x20b
 8000f48:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 196;
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f4c:	22c4      	movs	r2, #196	; 0xc4
 8000f4e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f68:	4b10      	ldr	r3, [pc, #64]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f74:	480d      	ldr	r0, [pc, #52]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f76:	f000 fdb5 	bl	8001ae4 <HAL_I2C_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f80:	f000 f892 	bl	80010a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f84:	2100      	movs	r1, #0
 8000f86:	4809      	ldr	r0, [pc, #36]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f88:	f001 fc46 	bl	8002818 <HAL_I2CEx_ConfigAnalogFilter>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000f92:	f000 f889 	bl	80010a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f96:	2100      	movs	r1, #0
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <MX_I2C1_Init+0x74>)
 8000f9a:	f001 fc88 	bl	80028ae <HAL_I2CEx_ConfigDigitalFilter>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000fa4:	f000 f880 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000200 	.word	0x20000200
 8000fb0:	40005400 	.word	0x40005400

08000fb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_USART2_UART_Init+0x58>)
 8000fba:	4a15      	ldr	r2, [pc, #84]	; (8001010 <MX_USART2_UART_Init+0x5c>)
 8000fbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000fbe:	4b13      	ldr	r3, [pc, #76]	; (800100c <MX_USART2_UART_Init+0x58>)
 8000fc0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000fc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_USART2_UART_Init+0x58>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_USART2_UART_Init+0x58>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_USART2_UART_Init+0x58>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_USART2_UART_Init+0x58>)
 8000fda:	220c      	movs	r2, #12
 8000fdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <MX_USART2_UART_Init+0x58>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_USART2_UART_Init+0x58>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <MX_USART2_UART_Init+0x58>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_USART2_UART_Init+0x58>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_USART2_UART_Init+0x58>)
 8000ff8:	f003 f860 	bl	80040bc <HAL_UART_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001002:	f000 f851 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000254 	.word	0x20000254
 8001010:	40004400 	.word	0x40004400

08001014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800102a:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <MX_GPIO_Init+0x90>)
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	4a1d      	ldr	r2, [pc, #116]	; (80010a4 <MX_GPIO_Init+0x90>)
 8001030:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001034:	6153      	str	r3, [r2, #20]
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_GPIO_Init+0x90>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <MX_GPIO_Init+0x90>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	4a17      	ldr	r2, [pc, #92]	; (80010a4 <MX_GPIO_Init+0x90>)
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	6153      	str	r3, [r2, #20]
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <MX_GPIO_Init+0x90>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <MX_GPIO_Init+0x90>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	4a11      	ldr	r2, [pc, #68]	; (80010a4 <MX_GPIO_Init+0x90>)
 8001060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001064:	6153      	str	r3, [r2, #20]
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_GPIO_Init+0x90>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L_RED_Pin|L_GREEN_Pin|L_BLUE_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	211a      	movs	r1, #26
 8001076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107a:	f000 fd1b 	bl	8001ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L_RED_Pin L_GREEN_Pin L_BLUE_Pin */
  GPIO_InitStruct.Pin = L_RED_Pin|L_GREEN_Pin|L_BLUE_Pin;
 800107e:	231a      	movs	r3, #26
 8001080:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001082:	2301      	movs	r3, #1
 8001084:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	4619      	mov	r1, r3
 8001094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001098:	f000 fb9a 	bl	80017d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800109c:	bf00      	nop
 800109e:	3720      	adds	r7, #32
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40021000 	.word	0x40021000

080010a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ac:	b672      	cpsid	i
}
 80010ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <Error_Handler+0x8>
	...

080010b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <HAL_MspInit+0x44>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	4a0e      	ldr	r2, [pc, #56]	; (80010f8 <HAL_MspInit+0x44>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6193      	str	r3, [r2, #24]
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <HAL_MspInit+0x44>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <HAL_MspInit+0x44>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	4a08      	ldr	r2, [pc, #32]	; (80010f8 <HAL_MspInit+0x44>)
 80010d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010dc:	61d3      	str	r3, [r2, #28]
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_MspInit+0x44>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000

080010fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a1f      	ldr	r2, [pc, #124]	; (8001198 <HAL_I2C_MspInit+0x9c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d137      	bne.n	800118e <HAL_I2C_MspInit+0x92>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	4b1f      	ldr	r3, [pc, #124]	; (800119c <HAL_I2C_MspInit+0xa0>)
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	4a1e      	ldr	r2, [pc, #120]	; (800119c <HAL_I2C_MspInit+0xa0>)
 8001124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001128:	6153      	str	r3, [r2, #20]
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <HAL_I2C_MspInit+0xa0>)
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001136:	23c0      	movs	r3, #192	; 0xc0
 8001138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800113a:	2312      	movs	r3, #18
 800113c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800113e:	2301      	movs	r3, #1
 8001140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001142:	2303      	movs	r3, #3
 8001144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001146:	2304      	movs	r3, #4
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	4813      	ldr	r0, [pc, #76]	; (80011a0 <HAL_I2C_MspInit+0xa4>)
 8001152:	f000 fb3d 	bl	80017d0 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 8001156:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800115a:	f001 fbf5 	bl	8002948 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 800115e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001162:	f001 fbf1 	bl	8002948 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <HAL_I2C_MspInit+0xa0>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	4a0c      	ldr	r2, [pc, #48]	; (800119c <HAL_I2C_MspInit+0xa0>)
 800116c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001170:	61d3      	str	r3, [r2, #28]
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_I2C_MspInit+0xa0>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	201f      	movs	r0, #31
 8001184:	f000 faed 	bl	8001762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001188:	201f      	movs	r0, #31
 800118a:	f000 fb06 	bl	800179a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	; 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40005400 	.word	0x40005400
 800119c:	40021000 	.word	0x40021000
 80011a0:	48000400 	.word	0x48000400

080011a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a18      	ldr	r2, [pc, #96]	; (8001224 <HAL_UART_MspInit+0x80>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d129      	bne.n	800121a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <HAL_UART_MspInit+0x84>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	4a17      	ldr	r2, [pc, #92]	; (8001228 <HAL_UART_MspInit+0x84>)
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d0:	61d3      	str	r3, [r2, #28]
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_UART_MspInit+0x84>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_UART_MspInit+0x84>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	4a11      	ldr	r2, [pc, #68]	; (8001228 <HAL_UART_MspInit+0x84>)
 80011e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e8:	6153      	str	r3, [r2, #20]
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <HAL_UART_MspInit+0x84>)
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80011f6:	f248 0304 	movw	r3, #32772	; 0x8004
 80011fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001208:	2307      	movs	r3, #7
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001216:	f000 fadb 	bl	80017d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800121a:	bf00      	nop
 800121c:	3728      	adds	r7, #40	; 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40004400 	.word	0x40004400
 8001228:	40021000 	.word	0x40021000

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <NMI_Handler+0x4>

08001232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <MemManage_Handler+0x4>

0800123e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <BusFault_Handler+0x4>

08001244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <UsageFault_Handler+0x4>

0800124a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001278:	f000 f954 	bl	8001524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}

08001280 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <I2C1_EV_IRQHandler+0x10>)
 8001286:	f000 fff4 	bl	8002272 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000200 	.word	0x20000200

08001294 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return 1;
 8001298:	2301      	movs	r3, #1
}
 800129a:	4618      	mov	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <_kill>:

int _kill(int pid, int sig)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012ae:	f003 fb29 	bl	8004904 <__errno>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2216      	movs	r2, #22
 80012b6:	601a      	str	r2, [r3, #0]
  return -1;
 80012b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_exit>:

void _exit (int status)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ffe7 	bl	80012a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012d6:	e7fe      	b.n	80012d6 <_exit+0x12>

080012d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	e00a      	b.n	8001300 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012ea:	f3af 8000 	nop.w
 80012ee:	4601      	mov	r1, r0
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	60ba      	str	r2, [r7, #8]
 80012f6:	b2ca      	uxtb	r2, r1
 80012f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	3301      	adds	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	429a      	cmp	r2, r3
 8001306:	dbf0      	blt.n	80012ea <_read+0x12>
  }

  return len;
 8001308:	687b      	ldr	r3, [r7, #4]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af00      	add	r7, sp, #0
 8001318:	60f8      	str	r0, [r7, #12]
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	e009      	b.n	8001338 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	60ba      	str	r2, [r7, #8]
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	3301      	adds	r3, #1
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	429a      	cmp	r2, r3
 800133e:	dbf1      	blt.n	8001324 <_write+0x12>
  }
  return len;
 8001340:	687b      	ldr	r3, [r7, #4]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <_close>:

int _close(int file)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001372:	605a      	str	r2, [r3, #4]
  return 0;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <_isatty>:

int _isatty(int file)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800138a:	2301      	movs	r3, #1
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013bc:	4a14      	ldr	r2, [pc, #80]	; (8001410 <_sbrk+0x5c>)
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <_sbrk+0x60>)
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <_sbrk+0x64>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d102      	bne.n	80013d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <_sbrk+0x64>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	; (800141c <_sbrk+0x68>)
 80013d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d207      	bcs.n	80013f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e4:	f003 fa8e 	bl	8004904 <__errno>
 80013e8:	4603      	mov	r3, r0
 80013ea:	220c      	movs	r2, #12
 80013ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013f2:	e009      	b.n	8001408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <_sbrk+0x64>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fa:	4b07      	ldr	r3, [pc, #28]	; (8001418 <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	4a05      	ldr	r2, [pc, #20]	; (8001418 <_sbrk+0x64>)
 8001404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20003000 	.word	0x20003000
 8001414:	00000400 	.word	0x00000400
 8001418:	200002e4 	.word	0x200002e4
 800141c:	20000300 	.word	0x20000300

08001420 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <SystemInit+0x20>)
 8001426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <SystemInit+0x20>)
 800142c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001444:	f8df d034 	ldr.w	sp, [pc, #52]	; 800147c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001448:	f7ff ffea 	bl	8001420 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800144c:	480c      	ldr	r0, [pc, #48]	; (8001480 <LoopForever+0x6>)
  ldr r1, =_edata
 800144e:	490d      	ldr	r1, [pc, #52]	; (8001484 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001450:	4a0d      	ldr	r2, [pc, #52]	; (8001488 <LoopForever+0xe>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001454:	e002      	b.n	800145c <LoopCopyDataInit>

08001456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145a:	3304      	adds	r3, #4

0800145c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800145c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001460:	d3f9      	bcc.n	8001456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001464:	4c0a      	ldr	r4, [pc, #40]	; (8001490 <LoopForever+0x16>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001468:	e001      	b.n	800146e <LoopFillZerobss>

0800146a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800146c:	3204      	adds	r2, #4

0800146e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001470:	d3fb      	bcc.n	800146a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001472:	f003 fa4d 	bl	8004910 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001476:	f7ff fcb9 	bl	8000dec <main>

0800147a <LoopForever>:

LoopForever:
    b LoopForever
 800147a:	e7fe      	b.n	800147a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800147c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001484:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001488:	08007ba4 	.word	0x08007ba4
  ldr r2, =_sbss
 800148c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001490:	200002fc 	.word	0x200002fc

08001494 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001494:	e7fe      	b.n	8001494 <ADC1_2_IRQHandler>
	...

08001498 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <HAL_Init+0x28>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a07      	ldr	r2, [pc, #28]	; (80014c0 <HAL_Init+0x28>)
 80014a2:	f043 0310 	orr.w	r3, r3, #16
 80014a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a8:	2003      	movs	r0, #3
 80014aa:	f000 f94f 	bl	800174c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ae:	2000      	movs	r0, #0
 80014b0:	f000 f808 	bl	80014c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b4:	f7ff fdfe 	bl	80010b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40022000 	.word	0x40022000

080014c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_InitTick+0x54>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_InitTick+0x58>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4619      	mov	r1, r3
 80014d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014da:	fbb3 f3f1 	udiv	r3, r3, r1
 80014de:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f967 	bl	80017b6 <HAL_SYSTICK_Config>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00e      	b.n	8001510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b0f      	cmp	r3, #15
 80014f6:	d80a      	bhi.n	800150e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f8:	2200      	movs	r2, #0
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001500:	f000 f92f 	bl	8001762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001504:	4a06      	ldr	r2, [pc, #24]	; (8001520 <HAL_InitTick+0x5c>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	e000      	b.n	8001510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000008 	.word	0x20000008
 800151c:	20000010 	.word	0x20000010
 8001520:	2000000c 	.word	0x2000000c

08001524 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_IncTick+0x20>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_IncTick+0x24>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4413      	add	r3, r2
 8001534:	4a04      	ldr	r2, [pc, #16]	; (8001548 <HAL_IncTick+0x24>)
 8001536:	6013      	str	r3, [r2, #0]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000010 	.word	0x20000010
 8001548:	200002e8 	.word	0x200002e8

0800154c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <HAL_GetTick+0x14>)
 8001552:	681b      	ldr	r3, [r3, #0]
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	200002e8 	.word	0x200002e8

08001564 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800156c:	f7ff ffee 	bl	800154c <HAL_GetTick>
 8001570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800157c:	d005      	beq.n	800158a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <HAL_Delay+0x44>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4413      	add	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800158a:	bf00      	nop
 800158c:	f7ff ffde 	bl	800154c <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	429a      	cmp	r2, r3
 800159a:	d8f7      	bhi.n	800158c <HAL_Delay+0x28>
  {
  }
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000010 	.word	0x20000010

080015ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <__NVIC_SetPriorityGrouping+0x44>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c8:	4013      	ands	r3, r2
 80015ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015de:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <__NVIC_SetPriorityGrouping+0x44>)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	60d3      	str	r3, [r2, #12]
}
 80015e4:	bf00      	nop
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <__NVIC_GetPriorityGrouping+0x18>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	0a1b      	lsrs	r3, r3, #8
 80015fe:	f003 0307 	and.w	r3, r3, #7
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	2b00      	cmp	r3, #0
 8001620:	db0b      	blt.n	800163a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	f003 021f 	and.w	r2, r3, #31
 8001628:	4907      	ldr	r1, [pc, #28]	; (8001648 <__NVIC_EnableIRQ+0x38>)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	095b      	lsrs	r3, r3, #5
 8001630:	2001      	movs	r0, #1
 8001632:	fa00 f202 	lsl.w	r2, r0, r2
 8001636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000e100 	.word	0xe000e100

0800164c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	6039      	str	r1, [r7, #0]
 8001656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165c:	2b00      	cmp	r3, #0
 800165e:	db0a      	blt.n	8001676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	b2da      	uxtb	r2, r3
 8001664:	490c      	ldr	r1, [pc, #48]	; (8001698 <__NVIC_SetPriority+0x4c>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	0112      	lsls	r2, r2, #4
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	440b      	add	r3, r1
 8001670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001674:	e00a      	b.n	800168c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4908      	ldr	r1, [pc, #32]	; (800169c <__NVIC_SetPriority+0x50>)
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	3b04      	subs	r3, #4
 8001684:	0112      	lsls	r2, r2, #4
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	440b      	add	r3, r1
 800168a:	761a      	strb	r2, [r3, #24]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000e100 	.word	0xe000e100
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b089      	sub	sp, #36	; 0x24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f1c3 0307 	rsb	r3, r3, #7
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	bf28      	it	cs
 80016be:	2304      	movcs	r3, #4
 80016c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3304      	adds	r3, #4
 80016c6:	2b06      	cmp	r3, #6
 80016c8:	d902      	bls.n	80016d0 <NVIC_EncodePriority+0x30>
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3b03      	subs	r3, #3
 80016ce:	e000      	b.n	80016d2 <NVIC_EncodePriority+0x32>
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43da      	mvns	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	401a      	ands	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	43d9      	mvns	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	4313      	orrs	r3, r2
         );
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3724      	adds	r7, #36	; 0x24
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001718:	d301      	bcc.n	800171e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800171a:	2301      	movs	r3, #1
 800171c:	e00f      	b.n	800173e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <SysTick_Config+0x40>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3b01      	subs	r3, #1
 8001724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001726:	210f      	movs	r1, #15
 8001728:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800172c:	f7ff ff8e 	bl	800164c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <SysTick_Config+0x40>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001736:	4b04      	ldr	r3, [pc, #16]	; (8001748 <SysTick_Config+0x40>)
 8001738:	2207      	movs	r2, #7
 800173a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	e000e010 	.word	0xe000e010

0800174c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ff29 	bl	80015ac <__NVIC_SetPriorityGrouping>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b086      	sub	sp, #24
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001774:	f7ff ff3e 	bl	80015f4 <__NVIC_GetPriorityGrouping>
 8001778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	68b9      	ldr	r1, [r7, #8]
 800177e:	6978      	ldr	r0, [r7, #20]
 8001780:	f7ff ff8e 	bl	80016a0 <NVIC_EncodePriority>
 8001784:	4602      	mov	r2, r0
 8001786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff5d 	bl	800164c <__NVIC_SetPriority>
}
 8001792:	bf00      	nop
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff31 	bl	8001610 <__NVIC_EnableIRQ>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ffa2 	bl	8001708 <SysTick_Config>
 80017c4:	4603      	mov	r3, r0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b087      	sub	sp, #28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017de:	e14e      	b.n	8001a7e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	2101      	movs	r1, #1
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ec:	4013      	ands	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 8140 	beq.w	8001a78 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b01      	cmp	r3, #1
 8001802:	d005      	beq.n	8001810 <HAL_GPIO_Init+0x40>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d130      	bne.n	8001872 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001846:	2201      	movs	r2, #1
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	091b      	lsrs	r3, r3, #4
 800185c:	f003 0201 	and.w	r2, r3, #1
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	2b03      	cmp	r3, #3
 800187c:	d017      	beq.n	80018ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d123      	bne.n	8001902 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	08da      	lsrs	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3208      	adds	r2, #8
 80018c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	220f      	movs	r2, #15
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	691a      	ldr	r2, [r3, #16]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	08da      	lsrs	r2, r3, #3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3208      	adds	r2, #8
 80018fc:	6939      	ldr	r1, [r7, #16]
 80018fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	2203      	movs	r2, #3
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 0203 	and.w	r2, r3, #3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 809a 	beq.w	8001a78 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001944:	4b55      	ldr	r3, [pc, #340]	; (8001a9c <HAL_GPIO_Init+0x2cc>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4a54      	ldr	r2, [pc, #336]	; (8001a9c <HAL_GPIO_Init+0x2cc>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6193      	str	r3, [r2, #24]
 8001950:	4b52      	ldr	r3, [pc, #328]	; (8001a9c <HAL_GPIO_Init+0x2cc>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800195c:	4a50      	ldr	r2, [pc, #320]	; (8001aa0 <HAL_GPIO_Init+0x2d0>)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	220f      	movs	r2, #15
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001986:	d013      	beq.n	80019b0 <HAL_GPIO_Init+0x1e0>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a46      	ldr	r2, [pc, #280]	; (8001aa4 <HAL_GPIO_Init+0x2d4>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d00d      	beq.n	80019ac <HAL_GPIO_Init+0x1dc>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a45      	ldr	r2, [pc, #276]	; (8001aa8 <HAL_GPIO_Init+0x2d8>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d007      	beq.n	80019a8 <HAL_GPIO_Init+0x1d8>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a44      	ldr	r2, [pc, #272]	; (8001aac <HAL_GPIO_Init+0x2dc>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d101      	bne.n	80019a4 <HAL_GPIO_Init+0x1d4>
 80019a0:	2303      	movs	r3, #3
 80019a2:	e006      	b.n	80019b2 <HAL_GPIO_Init+0x1e2>
 80019a4:	2305      	movs	r3, #5
 80019a6:	e004      	b.n	80019b2 <HAL_GPIO_Init+0x1e2>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e002      	b.n	80019b2 <HAL_GPIO_Init+0x1e2>
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <HAL_GPIO_Init+0x1e2>
 80019b0:	2300      	movs	r3, #0
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	f002 0203 	and.w	r2, r2, #3
 80019b8:	0092      	lsls	r2, r2, #2
 80019ba:	4093      	lsls	r3, r2
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019c2:	4937      	ldr	r1, [pc, #220]	; (8001aa0 <HAL_GPIO_Init+0x2d0>)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	3302      	adds	r3, #2
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019d0:	4b37      	ldr	r3, [pc, #220]	; (8001ab0 <HAL_GPIO_Init+0x2e0>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	43db      	mvns	r3, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019f4:	4a2e      	ldr	r2, [pc, #184]	; (8001ab0 <HAL_GPIO_Init+0x2e0>)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019fa:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <HAL_GPIO_Init+0x2e0>)
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a1e:	4a24      	ldr	r2, [pc, #144]	; (8001ab0 <HAL_GPIO_Init+0x2e0>)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a24:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <HAL_GPIO_Init+0x2e0>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a48:	4a19      	ldr	r2, [pc, #100]	; (8001ab0 <HAL_GPIO_Init+0x2e0>)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a4e:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <HAL_GPIO_Init+0x2e0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a72:	4a0f      	ldr	r2, [pc, #60]	; (8001ab0 <HAL_GPIO_Init+0x2e0>)
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	fa22 f303 	lsr.w	r3, r2, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f47f aea9 	bne.w	80017e0 <HAL_GPIO_Init+0x10>
  }
}
 8001a8e:	bf00      	nop
 8001a90:	bf00      	nop
 8001a92:	371c      	adds	r7, #28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	48000400 	.word	0x48000400
 8001aa8:	48000800 	.word	0x48000800
 8001aac:	48000c00 	.word	0x48000c00
 8001ab0:	40010400 	.word	0x40010400

08001ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	807b      	strh	r3, [r7, #2]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac4:	787b      	ldrb	r3, [r7, #1]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aca:	887a      	ldrh	r2, [r7, #2]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ad0:	e002      	b.n	8001ad8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ad2:	887a      	ldrh	r2, [r7, #2]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e081      	b.n	8001bfa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d106      	bne.n	8001b10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff faf6 	bl	80010fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2224      	movs	r2, #36	; 0x24
 8001b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0201 	bic.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d107      	bne.n	8001b5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	e006      	b.n	8001b6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d104      	bne.n	8001b7e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ba0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691a      	ldr	r2, [r3, #16]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69d9      	ldr	r1, [r3, #28]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1a      	ldr	r2, [r3, #32]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0201 	orr.w	r2, r2, #1
 8001bda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2220      	movs	r2, #32
 8001be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	4608      	mov	r0, r1
 8001c0e:	4611      	mov	r1, r2
 8001c10:	461a      	mov	r2, r3
 8001c12:	4603      	mov	r3, r0
 8001c14:	817b      	strh	r3, [r7, #10]
 8001c16:	460b      	mov	r3, r1
 8001c18:	813b      	strh	r3, [r7, #8]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b20      	cmp	r3, #32
 8001c28:	f040 80f9 	bne.w	8001e1e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <HAL_I2C_Mem_Write+0x34>
 8001c32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d105      	bne.n	8001c44 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c3e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0ed      	b.n	8001e20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_I2C_Mem_Write+0x4e>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e0e6      	b.n	8001e20 <HAL_I2C_Mem_Write+0x21c>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c5a:	f7ff fc77 	bl	800154c <HAL_GetTick>
 8001c5e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	2319      	movs	r3, #25
 8001c66:	2201      	movs	r2, #1
 8001c68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 fbe7 	bl	8002440 <I2C_WaitOnFlagUntilTimeout>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0d1      	b.n	8001e20 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2221      	movs	r2, #33	; 0x21
 8001c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2240      	movs	r2, #64	; 0x40
 8001c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a3a      	ldr	r2, [r7, #32]
 8001c96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ca4:	88f8      	ldrh	r0, [r7, #6]
 8001ca6:	893a      	ldrh	r2, [r7, #8]
 8001ca8:	8979      	ldrh	r1, [r7, #10]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	9301      	str	r3, [sp, #4]
 8001cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 faf7 	bl	80022a8 <I2C_RequestMemoryWrite>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0a9      	b.n	8001e20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	2bff      	cmp	r3, #255	; 0xff
 8001cd4:	d90e      	bls.n	8001cf4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	22ff      	movs	r2, #255	; 0xff
 8001cda:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	8979      	ldrh	r1, [r7, #10]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 fd61 	bl	80027b4 <I2C_TransferConfig>
 8001cf2:	e00f      	b.n	8001d14 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	8979      	ldrh	r1, [r7, #10]
 8001d06:	2300      	movs	r3, #0
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 fd50 	bl	80027b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f000 fbe0 	bl	80024de <I2C_WaitOnTXISFlagUntilTimeout>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e07b      	b.n	8001e20 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	781a      	ldrb	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d034      	beq.n	8001dcc <HAL_I2C_Mem_Write+0x1c8>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d130      	bne.n	8001dcc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d70:	2200      	movs	r2, #0
 8001d72:	2180      	movs	r1, #128	; 0x80
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 fb63 	bl	8002440 <I2C_WaitOnFlagUntilTimeout>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e04d      	b.n	8001e20 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	2bff      	cmp	r3, #255	; 0xff
 8001d8c:	d90e      	bls.n	8001dac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	22ff      	movs	r2, #255	; 0xff
 8001d92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	8979      	ldrh	r1, [r7, #10]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 fd05 	bl	80027b4 <I2C_TransferConfig>
 8001daa:	e00f      	b.n	8001dcc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	8979      	ldrh	r1, [r7, #10]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 fcf4 	bl	80027b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d19e      	bne.n	8001d14 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 fbc6 	bl	800256c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e01a      	b.n	8001e20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2220      	movs	r2, #32
 8001df0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <HAL_I2C_Mem_Write+0x224>)
 8001dfe:	400b      	ands	r3, r1
 8001e00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2220      	movs	r2, #32
 8001e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e000      	b.n	8001e20 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001e1e:	2302      	movs	r3, #2
  }
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	fe00e800 	.word	0xfe00e800

08001e2c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	4608      	mov	r0, r1
 8001e36:	4611      	mov	r1, r2
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	817b      	strh	r3, [r7, #10]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	813b      	strh	r3, [r7, #8]
 8001e42:	4613      	mov	r3, r2
 8001e44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b20      	cmp	r3, #32
 8001e50:	f040 80fd 	bne.w	800204e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <HAL_I2C_Mem_Read+0x34>
 8001e5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d105      	bne.n	8001e6c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e66:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0f1      	b.n	8002050 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d101      	bne.n	8001e7a <HAL_I2C_Mem_Read+0x4e>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e0ea      	b.n	8002050 <HAL_I2C_Mem_Read+0x224>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e82:	f7ff fb63 	bl	800154c <HAL_GetTick>
 8001e86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	2319      	movs	r3, #25
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f000 fad3 	bl	8002440 <I2C_WaitOnFlagUntilTimeout>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0d5      	b.n	8002050 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2222      	movs	r2, #34	; 0x22
 8001ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2240      	movs	r2, #64	; 0x40
 8001eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a3a      	ldr	r2, [r7, #32]
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ecc:	88f8      	ldrh	r0, [r7, #6]
 8001ece:	893a      	ldrh	r2, [r7, #8]
 8001ed0:	8979      	ldrh	r1, [r7, #10]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	9301      	str	r3, [sp, #4]
 8001ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	4603      	mov	r3, r0
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 fa37 	bl	8002350 <I2C_RequestMemoryRead>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0ad      	b.n	8002050 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	2bff      	cmp	r3, #255	; 0xff
 8001efc:	d90e      	bls.n	8001f1c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	22ff      	movs	r2, #255	; 0xff
 8001f02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	8979      	ldrh	r1, [r7, #10]
 8001f0c:	4b52      	ldr	r3, [pc, #328]	; (8002058 <HAL_I2C_Mem_Read+0x22c>)
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 fc4d 	bl	80027b4 <I2C_TransferConfig>
 8001f1a:	e00f      	b.n	8001f3c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	8979      	ldrh	r1, [r7, #10]
 8001f2e:	4b4a      	ldr	r3, [pc, #296]	; (8002058 <HAL_I2C_Mem_Read+0x22c>)
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 fc3c 	bl	80027b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f42:	2200      	movs	r2, #0
 8001f44:	2104      	movs	r1, #4
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 fa7a 	bl	8002440 <I2C_WaitOnFlagUntilTimeout>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e07c      	b.n	8002050 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	1c5a      	adds	r2, r3, #1
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f72:	3b01      	subs	r3, #1
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d034      	beq.n	8001ffc <HAL_I2C_Mem_Read+0x1d0>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d130      	bne.n	8001ffc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2180      	movs	r1, #128	; 0x80
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 fa4b 	bl	8002440 <I2C_WaitOnFlagUntilTimeout>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e04d      	b.n	8002050 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	2bff      	cmp	r3, #255	; 0xff
 8001fbc:	d90e      	bls.n	8001fdc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	22ff      	movs	r2, #255	; 0xff
 8001fc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	8979      	ldrh	r1, [r7, #10]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 fbed 	bl	80027b4 <I2C_TransferConfig>
 8001fda:	e00f      	b.n	8001ffc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	8979      	ldrh	r1, [r7, #10]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 fbdc 	bl	80027b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002000:	b29b      	uxth	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d19a      	bne.n	8001f3c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 faae 	bl	800256c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e01a      	b.n	8002050 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2220      	movs	r2, #32
 8002020:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_I2C_Mem_Read+0x230>)
 800202e:	400b      	ands	r3, r1
 8002030:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2220      	movs	r2, #32
 8002036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	e000      	b.n	8002050 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800204e:	2302      	movs	r3, #2
  }
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	80002400 	.word	0x80002400
 800205c:	fe00e800 	.word	0xfe00e800

08002060 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08a      	sub	sp, #40	; 0x28
 8002064:	af02      	add	r7, sp, #8
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	603b      	str	r3, [r7, #0]
 800206c:	460b      	mov	r3, r1
 800206e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b20      	cmp	r3, #32
 800207e:	f040 80f3 	bne.w	8002268 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800208c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002090:	d101      	bne.n	8002096 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002092:	2302      	movs	r3, #2
 8002094:	e0e9      	b.n	800226a <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800209c:	2b01      	cmp	r3, #1
 800209e:	d101      	bne.n	80020a4 <HAL_I2C_IsDeviceReady+0x44>
 80020a0:	2302      	movs	r3, #2
 80020a2:	e0e2      	b.n	800226a <HAL_I2C_IsDeviceReady+0x20a>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2224      	movs	r2, #36	; 0x24
 80020b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d107      	bne.n	80020d2 <HAL_I2C_IsDeviceReady+0x72>
 80020c2:	897b      	ldrh	r3, [r7, #10]
 80020c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020d0:	e006      	b.n	80020e0 <HAL_I2C_IsDeviceReady+0x80>
 80020d2:	897b      	ldrh	r3, [r7, #10]
 80020d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020dc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80020e6:	f7ff fa31 	bl	800154c <HAL_GetTick>
 80020ea:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f003 0320 	and.w	r3, r3, #32
 80020f6:	2b20      	cmp	r3, #32
 80020f8:	bf0c      	ite	eq
 80020fa:	2301      	moveq	r3, #1
 80020fc:	2300      	movne	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	f003 0310 	and.w	r3, r3, #16
 800210c:	2b10      	cmp	r3, #16
 800210e:	bf0c      	ite	eq
 8002110:	2301      	moveq	r3, #1
 8002112:	2300      	movne	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002118:	e034      	b.n	8002184 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002120:	d01a      	beq.n	8002158 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002122:	f7ff fa13 	bl	800154c <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d302      	bcc.n	8002138 <HAL_I2C_IsDeviceReady+0xd8>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10f      	bne.n	8002158 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002144:	f043 0220 	orr.w	r2, r3, #32
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e088      	b.n	800226a <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f003 0320 	and.w	r3, r3, #32
 8002162:	2b20      	cmp	r3, #32
 8002164:	bf0c      	ite	eq
 8002166:	2301      	moveq	r3, #1
 8002168:	2300      	movne	r3, #0
 800216a:	b2db      	uxtb	r3, r3
 800216c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f003 0310 	and.w	r3, r3, #16
 8002178:	2b10      	cmp	r3, #16
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002184:	7ffb      	ldrb	r3, [r7, #31]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d102      	bne.n	8002190 <HAL_I2C_IsDeviceReady+0x130>
 800218a:	7fbb      	ldrb	r3, [r7, #30]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0c4      	beq.n	800211a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	2b10      	cmp	r3, #16
 800219c:	d01a      	beq.n	80021d4 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2200      	movs	r2, #0
 80021a6:	2120      	movs	r1, #32
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 f949 	bl	8002440 <I2C_WaitOnFlagUntilTimeout>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e058      	b.n	800226a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2220      	movs	r2, #32
 80021be:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2220      	movs	r2, #32
 80021c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	e04a      	b.n	800226a <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	2200      	movs	r2, #0
 80021dc:	2120      	movs	r1, #32
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 f92e 	bl	8002440 <I2C_WaitOnFlagUntilTimeout>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e03d      	b.n	800226a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2210      	movs	r2, #16
 80021f4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2220      	movs	r2, #32
 80021fc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	429a      	cmp	r2, r3
 8002204:	d118      	bne.n	8002238 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002214:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2200      	movs	r2, #0
 800221e:	2120      	movs	r1, #32
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 f90d 	bl	8002440 <I2C_WaitOnFlagUntilTimeout>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e01c      	b.n	800226a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2220      	movs	r2, #32
 8002236:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	3301      	adds	r3, #1
 800223c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	429a      	cmp	r2, r3
 8002244:	f63f af39 	bhi.w	80020ba <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2220      	movs	r2, #32
 800224c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002254:	f043 0220 	orr.w	r2, r3, #32
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8002268:	2302      	movs	r3, #2
  }
}
 800226a:	4618      	mov	r0, r3
 800226c:	3720      	adds	r7, #32
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	68f9      	ldr	r1, [r7, #12]
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	4798      	blx	r3
  }
}
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	4608      	mov	r0, r1
 80022b2:	4611      	mov	r1, r2
 80022b4:	461a      	mov	r2, r3
 80022b6:	4603      	mov	r3, r0
 80022b8:	817b      	strh	r3, [r7, #10]
 80022ba:	460b      	mov	r3, r1
 80022bc:	813b      	strh	r3, [r7, #8]
 80022be:	4613      	mov	r3, r2
 80022c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	8979      	ldrh	r1, [r7, #10]
 80022c8:	4b20      	ldr	r3, [pc, #128]	; (800234c <I2C_RequestMemoryWrite+0xa4>)
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 fa6f 	bl	80027b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	69b9      	ldr	r1, [r7, #24]
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f8ff 	bl	80024de <I2C_WaitOnTXISFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e02c      	b.n	8002344 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d105      	bne.n	80022fc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022f0:	893b      	ldrh	r3, [r7, #8]
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	629a      	str	r2, [r3, #40]	; 0x28
 80022fa:	e015      	b.n	8002328 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022fc:	893b      	ldrh	r3, [r7, #8]
 80022fe:	0a1b      	lsrs	r3, r3, #8
 8002300:	b29b      	uxth	r3, r3
 8002302:	b2da      	uxtb	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800230a:	69fa      	ldr	r2, [r7, #28]
 800230c:	69b9      	ldr	r1, [r7, #24]
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 f8e5 	bl	80024de <I2C_WaitOnTXISFlagUntilTimeout>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e012      	b.n	8002344 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800231e:	893b      	ldrh	r3, [r7, #8]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	2200      	movs	r2, #0
 8002330:	2180      	movs	r1, #128	; 0x80
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f884 	bl	8002440 <I2C_WaitOnFlagUntilTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	80002000 	.word	0x80002000

08002350 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af02      	add	r7, sp, #8
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	4608      	mov	r0, r1
 800235a:	4611      	mov	r1, r2
 800235c:	461a      	mov	r2, r3
 800235e:	4603      	mov	r3, r0
 8002360:	817b      	strh	r3, [r7, #10]
 8002362:	460b      	mov	r3, r1
 8002364:	813b      	strh	r3, [r7, #8]
 8002366:	4613      	mov	r3, r2
 8002368:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	b2da      	uxtb	r2, r3
 800236e:	8979      	ldrh	r1, [r7, #10]
 8002370:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <I2C_RequestMemoryRead+0xa4>)
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2300      	movs	r3, #0
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 fa1c 	bl	80027b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	69b9      	ldr	r1, [r7, #24]
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 f8ac 	bl	80024de <I2C_WaitOnTXISFlagUntilTimeout>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e02c      	b.n	80023ea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d105      	bne.n	80023a2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002396:	893b      	ldrh	r3, [r7, #8]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	629a      	str	r2, [r3, #40]	; 0x28
 80023a0:	e015      	b.n	80023ce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80023a2:	893b      	ldrh	r3, [r7, #8]
 80023a4:	0a1b      	lsrs	r3, r3, #8
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023b0:	69fa      	ldr	r2, [r7, #28]
 80023b2:	69b9      	ldr	r1, [r7, #24]
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f892 	bl	80024de <I2C_WaitOnTXISFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e012      	b.n	80023ea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023c4:	893b      	ldrh	r3, [r7, #8]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	2200      	movs	r2, #0
 80023d6:	2140      	movs	r1, #64	; 0x40
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 f831 	bl	8002440 <I2C_WaitOnFlagUntilTimeout>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	80002000 	.word	0x80002000

080023f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b02      	cmp	r3, #2
 800240c:	d103      	bne.n	8002416 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2200      	movs	r2, #0
 8002414:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b01      	cmp	r3, #1
 8002422:	d007      	beq.n	8002434 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	619a      	str	r2, [r3, #24]
  }
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	603b      	str	r3, [r7, #0]
 800244c:	4613      	mov	r3, r2
 800244e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002450:	e031      	b.n	80024b6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002458:	d02d      	beq.n	80024b6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800245a:	f7ff f877 	bl	800154c <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d302      	bcc.n	8002470 <I2C_WaitOnFlagUntilTimeout+0x30>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d122      	bne.n	80024b6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699a      	ldr	r2, [r3, #24]
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	4013      	ands	r3, r2
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	429a      	cmp	r2, r3
 800247e:	bf0c      	ite	eq
 8002480:	2301      	moveq	r3, #1
 8002482:	2300      	movne	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	461a      	mov	r2, r3
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	429a      	cmp	r2, r3
 800248c:	d113      	bne.n	80024b6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f043 0220 	orr.w	r2, r3, #32
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2220      	movs	r2, #32
 800249e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e00f      	b.n	80024d6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	699a      	ldr	r2, [r3, #24]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	4013      	ands	r3, r2
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	bf0c      	ite	eq
 80024c6:	2301      	moveq	r3, #1
 80024c8:	2300      	movne	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	461a      	mov	r2, r3
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d0be      	beq.n	8002452 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024ea:	e033      	b.n	8002554 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	68b9      	ldr	r1, [r7, #8]
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 f87f 	bl	80025f4 <I2C_IsErrorOccurred>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e031      	b.n	8002564 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002506:	d025      	beq.n	8002554 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002508:	f7ff f820 	bl	800154c <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	429a      	cmp	r2, r3
 8002516:	d302      	bcc.n	800251e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d11a      	bne.n	8002554 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b02      	cmp	r3, #2
 800252a:	d013      	beq.n	8002554 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002530:	f043 0220 	orr.w	r2, r3, #32
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2220      	movs	r2, #32
 800253c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e007      	b.n	8002564 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b02      	cmp	r3, #2
 8002560:	d1c4      	bne.n	80024ec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002578:	e02f      	b.n	80025da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 f838 	bl	80025f4 <I2C_IsErrorOccurred>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e02d      	b.n	80025ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800258e:	f7fe ffdd 	bl	800154c <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	429a      	cmp	r2, r3
 800259c:	d302      	bcc.n	80025a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d11a      	bne.n	80025da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	d013      	beq.n	80025da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f043 0220 	orr.w	r2, r3, #32
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2220      	movs	r2, #32
 80025c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e007      	b.n	80025ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	f003 0320 	and.w	r3, r3, #32
 80025e4:	2b20      	cmp	r3, #32
 80025e6:	d1c8      	bne.n	800257a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	; 0x28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	f003 0310 	and.w	r3, r3, #16
 800261c:	2b00      	cmp	r3, #0
 800261e:	d068      	beq.n	80026f2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2210      	movs	r2, #16
 8002626:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002628:	e049      	b.n	80026be <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002630:	d045      	beq.n	80026be <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002632:	f7fe ff8b 	bl	800154c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	429a      	cmp	r2, r3
 8002640:	d302      	bcc.n	8002648 <I2C_IsErrorOccurred+0x54>
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d13a      	bne.n	80026be <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002652:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800265a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800266a:	d121      	bne.n	80026b0 <I2C_IsErrorOccurred+0xbc>
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002672:	d01d      	beq.n	80026b0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002674:	7cfb      	ldrb	r3, [r7, #19]
 8002676:	2b20      	cmp	r3, #32
 8002678:	d01a      	beq.n	80026b0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002688:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800268a:	f7fe ff5f 	bl	800154c <HAL_GetTick>
 800268e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002690:	e00e      	b.n	80026b0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002692:	f7fe ff5b 	bl	800154c <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b19      	cmp	r3, #25
 800269e:	d907      	bls.n	80026b0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	f043 0320 	orr.w	r3, r3, #32
 80026a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80026ae:	e006      	b.n	80026be <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	d1e9      	bne.n	8002692 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	2b20      	cmp	r3, #32
 80026ca:	d003      	beq.n	80026d4 <I2C_IsErrorOccurred+0xe0>
 80026cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0aa      	beq.n	800262a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80026d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d103      	bne.n	80026e4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2220      	movs	r2, #32
 80026e2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	f043 0304 	orr.w	r3, r3, #4
 80026ea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00b      	beq.n	800271c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002714:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00b      	beq.n	800273e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	f043 0308 	orr.w	r3, r3, #8
 800272c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002736:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00b      	beq.n	8002760 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	f043 0302 	orr.w	r3, r3, #2
 800274e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002758:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002764:	2b00      	cmp	r3, #0
 8002766:	d01c      	beq.n	80027a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f7ff fe45 	bl	80023f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6859      	ldr	r1, [r3, #4]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <I2C_IsErrorOccurred+0x1bc>)
 800277a:	400b      	ands	r3, r1
 800277c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	431a      	orrs	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2220      	movs	r2, #32
 800278e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80027a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3728      	adds	r7, #40	; 0x28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	fe00e800 	.word	0xfe00e800

080027b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b087      	sub	sp, #28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	607b      	str	r3, [r7, #4]
 80027be:	460b      	mov	r3, r1
 80027c0:	817b      	strh	r3, [r7, #10]
 80027c2:	4613      	mov	r3, r2
 80027c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027c6:	897b      	ldrh	r3, [r7, #10]
 80027c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027cc:	7a7b      	ldrb	r3, [r7, #9]
 80027ce:	041b      	lsls	r3, r3, #16
 80027d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	4313      	orrs	r3, r2
 80027de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	0d5b      	lsrs	r3, r3, #21
 80027ee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80027f2:	4b08      	ldr	r3, [pc, #32]	; (8002814 <I2C_TransferConfig+0x60>)
 80027f4:	430b      	orrs	r3, r1
 80027f6:	43db      	mvns	r3, r3
 80027f8:	ea02 0103 	and.w	r1, r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	430a      	orrs	r2, r1
 8002804:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002806:	bf00      	nop
 8002808:	371c      	adds	r7, #28
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	03ff63ff 	.word	0x03ff63ff

08002818 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b20      	cmp	r3, #32
 800282c:	d138      	bne.n	80028a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002838:	2302      	movs	r3, #2
 800283a:	e032      	b.n	80028a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2224      	movs	r2, #36	; 0x24
 8002848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0201 	bic.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800286a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6819      	ldr	r1, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	e000      	b.n	80028a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028a0:	2302      	movs	r3, #2
  }
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b085      	sub	sp, #20
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d139      	bne.n	8002938 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e033      	b.n	800293a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2224      	movs	r2, #36	; 0x24
 80028de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0201 	bic.w	r2, r2, #1
 80028f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002900:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	021b      	lsls	r3, r3, #8
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4313      	orrs	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	e000      	b.n	800293a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002938:	2302      	movs	r3, #2
  }
}
 800293a:	4618      	mov	r0, r3
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
	...

08002948 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6193      	str	r3, [r2, #24]
 800295c:	4b08      	ldr	r3, [pc, #32]	; (8002980 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4905      	ldr	r1, [pc, #20]	; (8002984 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4313      	orrs	r3, r2
 8002972:	600b      	str	r3, [r1, #0]
}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	40021000 	.word	0x40021000
 8002984:	40010000 	.word	0x40010000

08002988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800298e:	af00      	add	r7, sp, #0
 8002990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002994:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002998:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800299a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d102      	bne.n	80029ae <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	f001 b823 	b.w	80039f4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 817d 	beq.w	8002cbe <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80029c4:	4bbc      	ldr	r3, [pc, #752]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 030c 	and.w	r3, r3, #12
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d00c      	beq.n	80029ea <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029d0:	4bb9      	ldr	r3, [pc, #740]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d15c      	bne.n	8002a96 <HAL_RCC_OscConfig+0x10e>
 80029dc:	4bb6      	ldr	r3, [pc, #728]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e8:	d155      	bne.n	8002a96 <HAL_RCC_OscConfig+0x10e>
 80029ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ee:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a02:	fab3 f383 	clz	r3, r3
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d102      	bne.n	8002a1c <HAL_RCC_OscConfig+0x94>
 8002a16:	4ba8      	ldr	r3, [pc, #672]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	e015      	b.n	8002a48 <HAL_RCC_OscConfig+0xc0>
 8002a1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a20:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002a28:	fa93 f3a3 	rbit	r3, r3
 8002a2c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002a30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a34:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002a38:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a3c:	fa93 f3a3 	rbit	r3, r3
 8002a40:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002a44:	4b9c      	ldr	r3, [pc, #624]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a4c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002a50:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002a54:	fa92 f2a2 	rbit	r2, r2
 8002a58:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002a5c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002a60:	fab2 f282 	clz	r2, r2
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	f042 0220 	orr.w	r2, r2, #32
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	f002 021f 	and.w	r2, r2, #31
 8002a70:	2101      	movs	r1, #1
 8002a72:	fa01 f202 	lsl.w	r2, r1, r2
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 811f 	beq.w	8002cbc <HAL_RCC_OscConfig+0x334>
 8002a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f040 8116 	bne.w	8002cbc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f000 bfaf 	b.w	80039f4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa6:	d106      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x12e>
 8002aa8:	4b83      	ldr	r3, [pc, #524]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a82      	ldr	r2, [pc, #520]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 8002aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	e036      	b.n	8002b24 <HAL_RCC_OscConfig+0x19c>
 8002ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x158>
 8002ac6:	4b7c      	ldr	r3, [pc, #496]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a7b      	ldr	r2, [pc, #492]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 8002acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b79      	ldr	r3, [pc, #484]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a78      	ldr	r2, [pc, #480]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 8002ad8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e021      	b.n	8002b24 <HAL_RCC_OscConfig+0x19c>
 8002ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x184>
 8002af2:	4b71      	ldr	r3, [pc, #452]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a70      	ldr	r2, [pc, #448]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 8002af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	4b6e      	ldr	r3, [pc, #440]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a6d      	ldr	r2, [pc, #436]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 8002b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	e00b      	b.n	8002b24 <HAL_RCC_OscConfig+0x19c>
 8002b0c:	4b6a      	ldr	r3, [pc, #424]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a69      	ldr	r2, [pc, #420]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 8002b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	4b67      	ldr	r3, [pc, #412]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a66      	ldr	r2, [pc, #408]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 8002b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b22:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b24:	4b64      	ldr	r3, [pc, #400]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	f023 020f 	bic.w	r2, r3, #15
 8002b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	495f      	ldr	r1, [pc, #380]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d059      	beq.n	8002c02 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4e:	f7fe fcfd 	bl	800154c <HAL_GetTick>
 8002b52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b58:	f7fe fcf8 	bl	800154c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b64      	cmp	r3, #100	; 0x64
 8002b66:	d902      	bls.n	8002b6e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	f000 bf43 	b.w	80039f4 <HAL_RCC_OscConfig+0x106c>
 8002b6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b72:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002b82:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	fab3 f383 	clz	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d102      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x218>
 8002b9a:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	e015      	b.n	8002bcc <HAL_RCC_OscConfig+0x244>
 8002ba0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ba4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002bac:	fa93 f3a3 	rbit	r3, r3
 8002bb0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bb8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002bbc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002bc0:	fa93 f3a3 	rbit	r3, r3
 8002bc4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002bc8:	4b3b      	ldr	r3, [pc, #236]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bd0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002bd4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002bd8:	fa92 f2a2 	rbit	r2, r2
 8002bdc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002be0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002be4:	fab2 f282 	clz	r2, r2
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	f042 0220 	orr.w	r2, r2, #32
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	f002 021f 	and.w	r2, r2, #31
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0ab      	beq.n	8002b58 <HAL_RCC_OscConfig+0x1d0>
 8002c00:	e05d      	b.n	8002cbe <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c02:	f7fe fca3 	bl	800154c <HAL_GetTick>
 8002c06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c0c:	f7fe fc9e 	bl	800154c <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b64      	cmp	r3, #100	; 0x64
 8002c1a:	d902      	bls.n	8002c22 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	f000 bee9 	b.w	80039f4 <HAL_RCC_OscConfig+0x106c>
 8002c22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c26:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002c2e:	fa93 f3a3 	rbit	r3, r3
 8002c32:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002c36:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3a:	fab3 f383 	clz	r3, r3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	095b      	lsrs	r3, r3, #5
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d102      	bne.n	8002c54 <HAL_RCC_OscConfig+0x2cc>
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	e015      	b.n	8002c80 <HAL_RCC_OscConfig+0x2f8>
 8002c54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c58:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002c60:	fa93 f3a3 	rbit	r3, r3
 8002c64:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c6c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c70:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <HAL_RCC_OscConfig+0x330>)
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c84:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002c88:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002c8c:	fa92 f2a2 	rbit	r2, r2
 8002c90:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002c94:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002c98:	fab2 f282 	clz	r2, r2
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	f042 0220 	orr.w	r2, r2, #32
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	f002 021f 	and.w	r2, r2, #31
 8002ca8:	2101      	movs	r1, #1
 8002caa:	fa01 f202 	lsl.w	r2, r1, r2
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1ab      	bne.n	8002c0c <HAL_RCC_OscConfig+0x284>
 8002cb4:	e003      	b.n	8002cbe <HAL_RCC_OscConfig+0x336>
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 817d 	beq.w	8002fce <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cd4:	4ba6      	ldr	r3, [pc, #664]	; (8002f70 <HAL_RCC_OscConfig+0x5e8>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 030c 	and.w	r3, r3, #12
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00b      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ce0:	4ba3      	ldr	r3, [pc, #652]	; (8002f70 <HAL_RCC_OscConfig+0x5e8>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 030c 	and.w	r3, r3, #12
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d172      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x44a>
 8002cec:	4ba0      	ldr	r3, [pc, #640]	; (8002f70 <HAL_RCC_OscConfig+0x5e8>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d16c      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x44a>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002d0a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	095b      	lsrs	r3, r3, #5
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d102      	bne.n	8002d28 <HAL_RCC_OscConfig+0x3a0>
 8002d22:	4b93      	ldr	r3, [pc, #588]	; (8002f70 <HAL_RCC_OscConfig+0x5e8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	e013      	b.n	8002d50 <HAL_RCC_OscConfig+0x3c8>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002d32:	fa93 f3a3 	rbit	r3, r3
 8002d36:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002d40:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d44:	fa93 f3a3 	rbit	r3, r3
 8002d48:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002d4c:	4b88      	ldr	r3, [pc, #544]	; (8002f70 <HAL_RCC_OscConfig+0x5e8>)
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	2202      	movs	r2, #2
 8002d52:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002d56:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d5a:	fa92 f2a2 	rbit	r2, r2
 8002d5e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002d62:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002d66:	fab2 f282 	clz	r2, r2
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	f042 0220 	orr.w	r2, r2, #32
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	f002 021f 	and.w	r2, r2, #31
 8002d76:	2101      	movs	r1, #1
 8002d78:	fa01 f202 	lsl.w	r2, r1, r2
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCC_OscConfig+0x410>
 8002d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d002      	beq.n	8002d98 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	f000 be2e 	b.w	80039f4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d98:	4b75      	ldr	r3, [pc, #468]	; (8002f70 <HAL_RCC_OscConfig+0x5e8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	21f8      	movs	r1, #248	; 0xf8
 8002dae:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002db6:	fa91 f1a1 	rbit	r1, r1
 8002dba:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002dbe:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002dc2:	fab1 f181 	clz	r1, r1
 8002dc6:	b2c9      	uxtb	r1, r1
 8002dc8:	408b      	lsls	r3, r1
 8002dca:	4969      	ldr	r1, [pc, #420]	; (8002f70 <HAL_RCC_OscConfig+0x5e8>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd0:	e0fd      	b.n	8002fce <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 8088 	beq.w	8002ef4 <HAL_RCC_OscConfig+0x56c>
 8002de4:	2301      	movs	r3, #1
 8002de6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002df6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dfa:	fab3 f383 	clz	r3, r3
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7fe fb9c 	bl	800154c <HAL_GetTick>
 8002e14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e18:	e00a      	b.n	8002e30 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e1a:	f7fe fb97 	bl	800154c <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d902      	bls.n	8002e30 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	f000 bde2 	b.w	80039f4 <HAL_RCC_OscConfig+0x106c>
 8002e30:	2302      	movs	r3, #2
 8002e32:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002e3a:	fa93 f3a3 	rbit	r3, r3
 8002e3e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002e42:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e46:	fab3 f383 	clz	r3, r3
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	095b      	lsrs	r3, r3, #5
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d102      	bne.n	8002e60 <HAL_RCC_OscConfig+0x4d8>
 8002e5a:	4b45      	ldr	r3, [pc, #276]	; (8002f70 <HAL_RCC_OscConfig+0x5e8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	e013      	b.n	8002e88 <HAL_RCC_OscConfig+0x500>
 8002e60:	2302      	movs	r3, #2
 8002e62:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002e6a:	fa93 f3a3 	rbit	r3, r3
 8002e6e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e72:	2302      	movs	r3, #2
 8002e74:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002e78:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002e7c:	fa93 f3a3 	rbit	r3, r3
 8002e80:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002e84:	4b3a      	ldr	r3, [pc, #232]	; (8002f70 <HAL_RCC_OscConfig+0x5e8>)
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	2202      	movs	r2, #2
 8002e8a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002e8e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002e92:	fa92 f2a2 	rbit	r2, r2
 8002e96:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002e9a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002e9e:	fab2 f282 	clz	r2, r2
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	f042 0220 	orr.w	r2, r2, #32
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	f002 021f 	and.w	r2, r2, #31
 8002eae:	2101      	movs	r1, #1
 8002eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0af      	beq.n	8002e1a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eba:	4b2d      	ldr	r3, [pc, #180]	; (8002f70 <HAL_RCC_OscConfig+0x5e8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	21f8      	movs	r1, #248	; 0xf8
 8002ed0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ed8:	fa91 f1a1 	rbit	r1, r1
 8002edc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002ee0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002ee4:	fab1 f181 	clz	r1, r1
 8002ee8:	b2c9      	uxtb	r1, r1
 8002eea:	408b      	lsls	r3, r1
 8002eec:	4920      	ldr	r1, [pc, #128]	; (8002f70 <HAL_RCC_OscConfig+0x5e8>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	600b      	str	r3, [r1, #0]
 8002ef2:	e06c      	b.n	8002fce <HAL_RCC_OscConfig+0x646>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002f06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0a:	fab3 f383 	clz	r3, r3
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f20:	f7fe fb14 	bl	800154c <HAL_GetTick>
 8002f24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f28:	e00a      	b.n	8002f40 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f2a:	f7fe fb0f 	bl	800154c <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d902      	bls.n	8002f40 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	f000 bd5a 	b.w	80039f4 <HAL_RCC_OscConfig+0x106c>
 8002f40:	2302      	movs	r3, #2
 8002f42:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002f4a:	fa93 f3a3 	rbit	r3, r3
 8002f4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d104      	bne.n	8002f74 <HAL_RCC_OscConfig+0x5ec>
 8002f6a:	4b01      	ldr	r3, [pc, #4]	; (8002f70 <HAL_RCC_OscConfig+0x5e8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	e015      	b.n	8002f9c <HAL_RCC_OscConfig+0x614>
 8002f70:	40021000 	.word	0x40021000
 8002f74:	2302      	movs	r3, #2
 8002f76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f7e:	fa93 f3a3 	rbit	r3, r3
 8002f82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002f86:	2302      	movs	r3, #2
 8002f88:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f90:	fa93 f3a3 	rbit	r3, r3
 8002f94:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002f98:	4bc8      	ldr	r3, [pc, #800]	; (80032bc <HAL_RCC_OscConfig+0x934>)
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002fa2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002fa6:	fa92 f2a2 	rbit	r2, r2
 8002faa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002fae:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002fb2:	fab2 f282 	clz	r2, r2
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	f042 0220 	orr.w	r2, r2, #32
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	f002 021f 	and.w	r2, r2, #31
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1ad      	bne.n	8002f2a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 8110 	beq.w	8003204 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d079      	beq.n	80030e8 <HAL_RCC_OscConfig+0x760>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002ffe:	fa93 f3a3 	rbit	r3, r3
 8003002:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003006:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	461a      	mov	r2, r3
 8003012:	4bab      	ldr	r3, [pc, #684]	; (80032c0 <HAL_RCC_OscConfig+0x938>)
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	461a      	mov	r2, r3
 800301a:	2301      	movs	r3, #1
 800301c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301e:	f7fe fa95 	bl	800154c <HAL_GetTick>
 8003022:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003026:	e00a      	b.n	800303e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003028:	f7fe fa90 	bl	800154c <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d902      	bls.n	800303e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	f000 bcdb 	b.w	80039f4 <HAL_RCC_OscConfig+0x106c>
 800303e:	2302      	movs	r3, #2
 8003040:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003048:	fa93 f3a3 	rbit	r3, r3
 800304c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003054:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003058:	2202      	movs	r2, #2
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003060:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	fa93 f2a3 	rbit	r2, r3
 800306a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800307c:	2202      	movs	r2, #2
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	fa93 f2a3 	rbit	r2, r3
 800308e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003092:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003096:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003098:	4b88      	ldr	r3, [pc, #544]	; (80032bc <HAL_RCC_OscConfig+0x934>)
 800309a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800309c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80030a4:	2102      	movs	r1, #2
 80030a6:	6019      	str	r1, [r3, #0]
 80030a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	fa93 f1a3 	rbit	r1, r3
 80030b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030be:	6019      	str	r1, [r3, #0]
  return result;
 80030c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	2101      	movs	r1, #1
 80030dc:	fa01 f303 	lsl.w	r3, r1, r3
 80030e0:	4013      	ands	r3, r2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0a0      	beq.n	8003028 <HAL_RCC_OscConfig+0x6a0>
 80030e6:	e08d      	b.n	8003204 <HAL_RCC_OscConfig+0x87c>
 80030e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80030f0:	2201      	movs	r2, #1
 80030f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	fa93 f2a3 	rbit	r2, r3
 8003102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003106:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800310a:	601a      	str	r2, [r3, #0]
  return result;
 800310c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003110:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003114:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003116:	fab3 f383 	clz	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	4b68      	ldr	r3, [pc, #416]	; (80032c0 <HAL_RCC_OscConfig+0x938>)
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	461a      	mov	r2, r3
 8003126:	2300      	movs	r3, #0
 8003128:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312a:	f7fe fa0f 	bl	800154c <HAL_GetTick>
 800312e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003132:	e00a      	b.n	800314a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003134:	f7fe fa0a 	bl	800154c <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d902      	bls.n	800314a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	f000 bc55 	b.w	80039f4 <HAL_RCC_OscConfig+0x106c>
 800314a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003152:	2202      	movs	r2, #2
 8003154:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	fa93 f2a3 	rbit	r2, r3
 8003164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003168:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003172:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003176:	2202      	movs	r2, #2
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	fa93 f2a3 	rbit	r2, r3
 8003188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003196:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800319a:	2202      	movs	r2, #2
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	fa93 f2a3 	rbit	r2, r3
 80031ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80031b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b6:	4b41      	ldr	r3, [pc, #260]	; (80032bc <HAL_RCC_OscConfig+0x934>)
 80031b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80031c2:	2102      	movs	r1, #2
 80031c4:	6019      	str	r1, [r3, #0]
 80031c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	fa93 f1a3 	rbit	r1, r3
 80031d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80031dc:	6019      	str	r1, [r3, #0]
  return result;
 80031de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	fab3 f383 	clz	r3, r3
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	f003 031f 	and.w	r3, r3, #31
 80031f8:	2101      	movs	r1, #1
 80031fa:	fa01 f303 	lsl.w	r3, r1, r3
 80031fe:	4013      	ands	r3, r2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d197      	bne.n	8003134 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003208:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 81a1 	beq.w	800355c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800321a:	2300      	movs	r3, #0
 800321c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003220:	4b26      	ldr	r3, [pc, #152]	; (80032bc <HAL_RCC_OscConfig+0x934>)
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d116      	bne.n	800325a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800322c:	4b23      	ldr	r3, [pc, #140]	; (80032bc <HAL_RCC_OscConfig+0x934>)
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	4a22      	ldr	r2, [pc, #136]	; (80032bc <HAL_RCC_OscConfig+0x934>)
 8003232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003236:	61d3      	str	r3, [r2, #28]
 8003238:	4b20      	ldr	r3, [pc, #128]	; (80032bc <HAL_RCC_OscConfig+0x934>)
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003244:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003252:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003254:	2301      	movs	r3, #1
 8003256:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325a:	4b1a      	ldr	r3, [pc, #104]	; (80032c4 <HAL_RCC_OscConfig+0x93c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003262:	2b00      	cmp	r3, #0
 8003264:	d11a      	bne.n	800329c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003266:	4b17      	ldr	r3, [pc, #92]	; (80032c4 <HAL_RCC_OscConfig+0x93c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a16      	ldr	r2, [pc, #88]	; (80032c4 <HAL_RCC_OscConfig+0x93c>)
 800326c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003270:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003272:	f7fe f96b 	bl	800154c <HAL_GetTick>
 8003276:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327a:	e009      	b.n	8003290 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327c:	f7fe f966 	bl	800154c <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b64      	cmp	r3, #100	; 0x64
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e3b1      	b.n	80039f4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003290:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <HAL_RCC_OscConfig+0x93c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0ef      	beq.n	800327c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800329c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d10d      	bne.n	80032c8 <HAL_RCC_OscConfig+0x940>
 80032ac:	4b03      	ldr	r3, [pc, #12]	; (80032bc <HAL_RCC_OscConfig+0x934>)
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	4a02      	ldr	r2, [pc, #8]	; (80032bc <HAL_RCC_OscConfig+0x934>)
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	6213      	str	r3, [r2, #32]
 80032b8:	e03c      	b.n	8003334 <HAL_RCC_OscConfig+0x9ac>
 80032ba:	bf00      	nop
 80032bc:	40021000 	.word	0x40021000
 80032c0:	10908120 	.word	0x10908120
 80032c4:	40007000 	.word	0x40007000
 80032c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10c      	bne.n	80032f2 <HAL_RCC_OscConfig+0x96a>
 80032d8:	4bc1      	ldr	r3, [pc, #772]	; (80035e0 <HAL_RCC_OscConfig+0xc58>)
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	4ac0      	ldr	r2, [pc, #768]	; (80035e0 <HAL_RCC_OscConfig+0xc58>)
 80032de:	f023 0301 	bic.w	r3, r3, #1
 80032e2:	6213      	str	r3, [r2, #32]
 80032e4:	4bbe      	ldr	r3, [pc, #760]	; (80035e0 <HAL_RCC_OscConfig+0xc58>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	4abd      	ldr	r2, [pc, #756]	; (80035e0 <HAL_RCC_OscConfig+0xc58>)
 80032ea:	f023 0304 	bic.w	r3, r3, #4
 80032ee:	6213      	str	r3, [r2, #32]
 80032f0:	e020      	b.n	8003334 <HAL_RCC_OscConfig+0x9ac>
 80032f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	2b05      	cmp	r3, #5
 8003300:	d10c      	bne.n	800331c <HAL_RCC_OscConfig+0x994>
 8003302:	4bb7      	ldr	r3, [pc, #732]	; (80035e0 <HAL_RCC_OscConfig+0xc58>)
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	4ab6      	ldr	r2, [pc, #728]	; (80035e0 <HAL_RCC_OscConfig+0xc58>)
 8003308:	f043 0304 	orr.w	r3, r3, #4
 800330c:	6213      	str	r3, [r2, #32]
 800330e:	4bb4      	ldr	r3, [pc, #720]	; (80035e0 <HAL_RCC_OscConfig+0xc58>)
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	4ab3      	ldr	r2, [pc, #716]	; (80035e0 <HAL_RCC_OscConfig+0xc58>)
 8003314:	f043 0301 	orr.w	r3, r3, #1
 8003318:	6213      	str	r3, [r2, #32]
 800331a:	e00b      	b.n	8003334 <HAL_RCC_OscConfig+0x9ac>
 800331c:	4bb0      	ldr	r3, [pc, #704]	; (80035e0 <HAL_RCC_OscConfig+0xc58>)
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	4aaf      	ldr	r2, [pc, #700]	; (80035e0 <HAL_RCC_OscConfig+0xc58>)
 8003322:	f023 0301 	bic.w	r3, r3, #1
 8003326:	6213      	str	r3, [r2, #32]
 8003328:	4bad      	ldr	r3, [pc, #692]	; (80035e0 <HAL_RCC_OscConfig+0xc58>)
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	4aac      	ldr	r2, [pc, #688]	; (80035e0 <HAL_RCC_OscConfig+0xc58>)
 800332e:	f023 0304 	bic.w	r3, r3, #4
 8003332:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003338:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 8081 	beq.w	8003448 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003346:	f7fe f901 	bl	800154c <HAL_GetTick>
 800334a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334e:	e00b      	b.n	8003368 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003350:	f7fe f8fc 	bl	800154c <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003360:	4293      	cmp	r3, r2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e345      	b.n	80039f4 <HAL_RCC_OscConfig+0x106c>
 8003368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003370:	2202      	movs	r2, #2
 8003372:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003378:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	fa93 f2a3 	rbit	r2, r3
 8003382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003386:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003390:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003394:	2202      	movs	r2, #2
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	fa93 f2a3 	rbit	r2, r3
 80033a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033aa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80033ae:	601a      	str	r2, [r3, #0]
  return result;
 80033b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80033b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ba:	fab3 f383 	clz	r3, r3
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	095b      	lsrs	r3, r3, #5
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	f043 0302 	orr.w	r3, r3, #2
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d102      	bne.n	80033d4 <HAL_RCC_OscConfig+0xa4c>
 80033ce:	4b84      	ldr	r3, [pc, #528]	; (80035e0 <HAL_RCC_OscConfig+0xc58>)
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	e013      	b.n	80033fc <HAL_RCC_OscConfig+0xa74>
 80033d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80033dc:	2202      	movs	r2, #2
 80033de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	fa93 f2a3 	rbit	r2, r3
 80033ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	4b79      	ldr	r3, [pc, #484]	; (80035e0 <HAL_RCC_OscConfig+0xc58>)
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003400:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003404:	2102      	movs	r1, #2
 8003406:	6011      	str	r1, [r2, #0]
 8003408:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800340c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003410:	6812      	ldr	r2, [r2, #0]
 8003412:	fa92 f1a2 	rbit	r1, r2
 8003416:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800341a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800341e:	6011      	str	r1, [r2, #0]
  return result;
 8003420:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003424:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003428:	6812      	ldr	r2, [r2, #0]
 800342a:	fab2 f282 	clz	r2, r2
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	f002 021f 	and.w	r2, r2, #31
 800343a:	2101      	movs	r1, #1
 800343c:	fa01 f202 	lsl.w	r2, r1, r2
 8003440:	4013      	ands	r3, r2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d084      	beq.n	8003350 <HAL_RCC_OscConfig+0x9c8>
 8003446:	e07f      	b.n	8003548 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003448:	f7fe f880 	bl	800154c <HAL_GetTick>
 800344c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003450:	e00b      	b.n	800346a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003452:	f7fe f87b 	bl	800154c <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003462:	4293      	cmp	r3, r2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e2c4      	b.n	80039f4 <HAL_RCC_OscConfig+0x106c>
 800346a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003472:	2202      	movs	r2, #2
 8003474:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	fa93 f2a3 	rbit	r2, r3
 8003484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003488:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003492:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003496:	2202      	movs	r2, #2
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	fa93 f2a3 	rbit	r2, r3
 80034a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80034b0:	601a      	str	r2, [r3, #0]
  return result;
 80034b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80034ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034bc:	fab3 f383 	clz	r3, r3
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	f043 0302 	orr.w	r3, r3, #2
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d102      	bne.n	80034d6 <HAL_RCC_OscConfig+0xb4e>
 80034d0:	4b43      	ldr	r3, [pc, #268]	; (80035e0 <HAL_RCC_OscConfig+0xc58>)
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	e013      	b.n	80034fe <HAL_RCC_OscConfig+0xb76>
 80034d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034da:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80034de:	2202      	movs	r2, #2
 80034e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	fa93 f2a3 	rbit	r2, r3
 80034f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	4b39      	ldr	r3, [pc, #228]	; (80035e0 <HAL_RCC_OscConfig+0xc58>)
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003502:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003506:	2102      	movs	r1, #2
 8003508:	6011      	str	r1, [r2, #0]
 800350a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800350e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	fa92 f1a2 	rbit	r1, r2
 8003518:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800351c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003520:	6011      	str	r1, [r2, #0]
  return result;
 8003522:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003526:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800352a:	6812      	ldr	r2, [r2, #0]
 800352c:	fab2 f282 	clz	r2, r2
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	f002 021f 	and.w	r2, r2, #31
 800353c:	2101      	movs	r1, #1
 800353e:	fa01 f202 	lsl.w	r2, r1, r2
 8003542:	4013      	ands	r3, r2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d184      	bne.n	8003452 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003548:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800354c:	2b01      	cmp	r3, #1
 800354e:	d105      	bne.n	800355c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003550:	4b23      	ldr	r3, [pc, #140]	; (80035e0 <HAL_RCC_OscConfig+0xc58>)
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	4a22      	ldr	r2, [pc, #136]	; (80035e0 <HAL_RCC_OscConfig+0xc58>)
 8003556:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800355a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800355c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003560:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 8242 	beq.w	80039f2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800356e:	4b1c      	ldr	r3, [pc, #112]	; (80035e0 <HAL_RCC_OscConfig+0xc58>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	2b08      	cmp	r3, #8
 8003578:	f000 8213 	beq.w	80039a2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800357c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003580:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	2b02      	cmp	r3, #2
 800358a:	f040 8162 	bne.w	8003852 <HAL_RCC_OscConfig+0xeca>
 800358e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003592:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003596:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800359a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	fa93 f2a3 	rbit	r2, r3
 80035aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ae:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80035b2:	601a      	str	r2, [r3, #0]
  return result;
 80035b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80035bc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035be:	fab3 f383 	clz	r3, r3
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	461a      	mov	r2, r3
 80035d0:	2300      	movs	r3, #0
 80035d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d4:	f7fd ffba 	bl	800154c <HAL_GetTick>
 80035d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035dc:	e00c      	b.n	80035f8 <HAL_RCC_OscConfig+0xc70>
 80035de:	bf00      	nop
 80035e0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e4:	f7fd ffb2 	bl	800154c <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e1fd      	b.n	80039f4 <HAL_RCC_OscConfig+0x106c>
 80035f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003600:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003604:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800360a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	fa93 f2a3 	rbit	r2, r3
 8003614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003618:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800361c:	601a      	str	r2, [r3, #0]
  return result;
 800361e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003622:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003626:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003628:	fab3 f383 	clz	r3, r3
 800362c:	b2db      	uxtb	r3, r3
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	b2db      	uxtb	r3, r3
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	d102      	bne.n	8003642 <HAL_RCC_OscConfig+0xcba>
 800363c:	4bb0      	ldr	r3, [pc, #704]	; (8003900 <HAL_RCC_OscConfig+0xf78>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	e027      	b.n	8003692 <HAL_RCC_OscConfig+0xd0a>
 8003642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003646:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800364a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800364e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003654:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	fa93 f2a3 	rbit	r2, r3
 800365e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003662:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003670:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	fa93 f2a3 	rbit	r2, r3
 8003684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003688:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	4b9c      	ldr	r3, [pc, #624]	; (8003900 <HAL_RCC_OscConfig+0xf78>)
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003696:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800369a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800369e:	6011      	str	r1, [r2, #0]
 80036a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036a4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80036a8:	6812      	ldr	r2, [r2, #0]
 80036aa:	fa92 f1a2 	rbit	r1, r2
 80036ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036b2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80036b6:	6011      	str	r1, [r2, #0]
  return result;
 80036b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036bc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80036c0:	6812      	ldr	r2, [r2, #0]
 80036c2:	fab2 f282 	clz	r2, r2
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	f042 0220 	orr.w	r2, r2, #32
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	f002 021f 	and.w	r2, r2, #31
 80036d2:	2101      	movs	r1, #1
 80036d4:	fa01 f202 	lsl.w	r2, r1, r2
 80036d8:	4013      	ands	r3, r2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d182      	bne.n	80035e4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036de:	4b88      	ldr	r3, [pc, #544]	; (8003900 <HAL_RCC_OscConfig+0xf78>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80036f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	430b      	orrs	r3, r1
 8003700:	497f      	ldr	r1, [pc, #508]	; (8003900 <HAL_RCC_OscConfig+0xf78>)
 8003702:	4313      	orrs	r3, r2
 8003704:	604b      	str	r3, [r1, #4]
 8003706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800370e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003712:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003718:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	fa93 f2a3 	rbit	r2, r3
 8003722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003726:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800372a:	601a      	str	r2, [r3, #0]
  return result;
 800372c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003730:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003734:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003736:	fab3 f383 	clz	r3, r3
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003740:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	461a      	mov	r2, r3
 8003748:	2301      	movs	r3, #1
 800374a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374c:	f7fd fefe 	bl	800154c <HAL_GetTick>
 8003750:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003754:	e009      	b.n	800376a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003756:	f7fd fef9 	bl	800154c <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e144      	b.n	80039f4 <HAL_RCC_OscConfig+0x106c>
 800376a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003772:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003776:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	fa93 f2a3 	rbit	r2, r3
 8003786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800378a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800378e:	601a      	str	r2, [r3, #0]
  return result;
 8003790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003794:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003798:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800379a:	fab3 f383 	clz	r3, r3
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	095b      	lsrs	r3, r3, #5
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d102      	bne.n	80037b4 <HAL_RCC_OscConfig+0xe2c>
 80037ae:	4b54      	ldr	r3, [pc, #336]	; (8003900 <HAL_RCC_OscConfig+0xf78>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	e027      	b.n	8003804 <HAL_RCC_OscConfig+0xe7c>
 80037b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80037bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	fa93 f2a3 	rbit	r2, r3
 80037d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037de:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80037e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ec:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	fa93 f2a3 	rbit	r2, r3
 80037f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	4b3f      	ldr	r3, [pc, #252]	; (8003900 <HAL_RCC_OscConfig+0xf78>)
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003808:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800380c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003810:	6011      	str	r1, [r2, #0]
 8003812:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003816:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	fa92 f1a2 	rbit	r1, r2
 8003820:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003824:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003828:	6011      	str	r1, [r2, #0]
  return result;
 800382a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800382e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	fab2 f282 	clz	r2, r2
 8003838:	b2d2      	uxtb	r2, r2
 800383a:	f042 0220 	orr.w	r2, r2, #32
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	f002 021f 	and.w	r2, r2, #31
 8003844:	2101      	movs	r1, #1
 8003846:	fa01 f202 	lsl.w	r2, r1, r2
 800384a:	4013      	ands	r3, r2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d082      	beq.n	8003756 <HAL_RCC_OscConfig+0xdce>
 8003850:	e0cf      	b.n	80039f2 <HAL_RCC_OscConfig+0x106a>
 8003852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003856:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800385a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800385e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003864:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	fa93 f2a3 	rbit	r2, r3
 800386e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003872:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003876:	601a      	str	r2, [r3, #0]
  return result;
 8003878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003880:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003882:	fab3 f383 	clz	r3, r3
 8003886:	b2db      	uxtb	r3, r3
 8003888:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800388c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	461a      	mov	r2, r3
 8003894:	2300      	movs	r3, #0
 8003896:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003898:	f7fd fe58 	bl	800154c <HAL_GetTick>
 800389c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038a0:	e009      	b.n	80038b6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a2:	f7fd fe53 	bl	800154c <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e09e      	b.n	80039f4 <HAL_RCC_OscConfig+0x106c>
 80038b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ba:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80038be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	fa93 f2a3 	rbit	r2, r3
 80038d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80038da:	601a      	str	r2, [r3, #0]
  return result;
 80038dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80038e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038e6:	fab3 f383 	clz	r3, r3
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d104      	bne.n	8003904 <HAL_RCC_OscConfig+0xf7c>
 80038fa:	4b01      	ldr	r3, [pc, #4]	; (8003900 <HAL_RCC_OscConfig+0xf78>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	e029      	b.n	8003954 <HAL_RCC_OscConfig+0xfcc>
 8003900:	40021000 	.word	0x40021000
 8003904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003908:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800390c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003910:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003916:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	fa93 f2a3 	rbit	r2, r3
 8003920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003924:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003932:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	fa93 f2a3 	rbit	r2, r3
 8003946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800394a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	4b2b      	ldr	r3, [pc, #172]	; (8003a00 <HAL_RCC_OscConfig+0x1078>)
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003958:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800395c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003960:	6011      	str	r1, [r2, #0]
 8003962:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003966:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	fa92 f1a2 	rbit	r1, r2
 8003970:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003974:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003978:	6011      	str	r1, [r2, #0]
  return result;
 800397a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800397e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	fab2 f282 	clz	r2, r2
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	f042 0220 	orr.w	r2, r2, #32
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	f002 021f 	and.w	r2, r2, #31
 8003994:	2101      	movs	r1, #1
 8003996:	fa01 f202 	lsl.w	r2, r1, r2
 800399a:	4013      	ands	r3, r2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d180      	bne.n	80038a2 <HAL_RCC_OscConfig+0xf1a>
 80039a0:	e027      	b.n	80039f2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e01e      	b.n	80039f4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039b6:	4b12      	ldr	r3, [pc, #72]	; (8003a00 <HAL_RCC_OscConfig+0x1078>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039be:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039c2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d10b      	bne.n	80039ee <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80039d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d001      	beq.n	80039f2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40021000 	.word	0x40021000

08003a04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b09e      	sub	sp, #120	; 0x78
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e162      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a1c:	4b90      	ldr	r3, [pc, #576]	; (8003c60 <HAL_RCC_ClockConfig+0x25c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d910      	bls.n	8003a4c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2a:	4b8d      	ldr	r3, [pc, #564]	; (8003c60 <HAL_RCC_ClockConfig+0x25c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f023 0207 	bic.w	r2, r3, #7
 8003a32:	498b      	ldr	r1, [pc, #556]	; (8003c60 <HAL_RCC_ClockConfig+0x25c>)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3a:	4b89      	ldr	r3, [pc, #548]	; (8003c60 <HAL_RCC_ClockConfig+0x25c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d001      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e14a      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d008      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a58:	4b82      	ldr	r3, [pc, #520]	; (8003c64 <HAL_RCC_ClockConfig+0x260>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	497f      	ldr	r1, [pc, #508]	; (8003c64 <HAL_RCC_ClockConfig+0x260>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 80dc 	beq.w	8003c30 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d13c      	bne.n	8003afa <HAL_RCC_ClockConfig+0xf6>
 8003a80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a84:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a88:	fa93 f3a3 	rbit	r3, r3
 8003a8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a90:	fab3 f383 	clz	r3, r3
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	f043 0301 	orr.w	r3, r3, #1
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d102      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xa6>
 8003aa4:	4b6f      	ldr	r3, [pc, #444]	; (8003c64 <HAL_RCC_ClockConfig+0x260>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	e00f      	b.n	8003aca <HAL_RCC_ClockConfig+0xc6>
 8003aaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ab2:	fa93 f3a3 	rbit	r3, r3
 8003ab6:	667b      	str	r3, [r7, #100]	; 0x64
 8003ab8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003abc:	663b      	str	r3, [r7, #96]	; 0x60
 8003abe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ac0:	fa93 f3a3 	rbit	r3, r3
 8003ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ac6:	4b67      	ldr	r3, [pc, #412]	; (8003c64 <HAL_RCC_ClockConfig+0x260>)
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ace:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ad0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ad2:	fa92 f2a2 	rbit	r2, r2
 8003ad6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003ad8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ada:	fab2 f282 	clz	r2, r2
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	f042 0220 	orr.w	r2, r2, #32
 8003ae4:	b2d2      	uxtb	r2, r2
 8003ae6:	f002 021f 	and.w	r2, r2, #31
 8003aea:	2101      	movs	r1, #1
 8003aec:	fa01 f202 	lsl.w	r2, r1, r2
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d17b      	bne.n	8003bee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e0f3      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d13c      	bne.n	8003b7c <HAL_RCC_ClockConfig+0x178>
 8003b02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b0a:	fa93 f3a3 	rbit	r3, r3
 8003b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b12:	fab3 f383 	clz	r3, r3
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f043 0301 	orr.w	r3, r3, #1
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d102      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x128>
 8003b26:	4b4f      	ldr	r3, [pc, #316]	; (8003c64 <HAL_RCC_ClockConfig+0x260>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	e00f      	b.n	8003b4c <HAL_RCC_ClockConfig+0x148>
 8003b2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b34:	fa93 f3a3 	rbit	r3, r3
 8003b38:	647b      	str	r3, [r7, #68]	; 0x44
 8003b3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b3e:	643b      	str	r3, [r7, #64]	; 0x40
 8003b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b42:	fa93 f3a3 	rbit	r3, r3
 8003b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b48:	4b46      	ldr	r3, [pc, #280]	; (8003c64 <HAL_RCC_ClockConfig+0x260>)
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b50:	63ba      	str	r2, [r7, #56]	; 0x38
 8003b52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b54:	fa92 f2a2 	rbit	r2, r2
 8003b58:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003b5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b5c:	fab2 f282 	clz	r2, r2
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	f042 0220 	orr.w	r2, r2, #32
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	f002 021f 	and.w	r2, r2, #31
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d13a      	bne.n	8003bee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e0b2      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x2de>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b82:	fa93 f3a3 	rbit	r3, r3
 8003b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8a:	fab3 f383 	clz	r3, r3
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	095b      	lsrs	r3, r3, #5
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d102      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0x1a0>
 8003b9e:	4b31      	ldr	r3, [pc, #196]	; (8003c64 <HAL_RCC_ClockConfig+0x260>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	e00d      	b.n	8003bc0 <HAL_RCC_ClockConfig+0x1bc>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003baa:	fa93 f3a3 	rbit	r3, r3
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	623b      	str	r3, [r7, #32]
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	fa93 f3a3 	rbit	r3, r3
 8003bba:	61fb      	str	r3, [r7, #28]
 8003bbc:	4b29      	ldr	r3, [pc, #164]	; (8003c64 <HAL_RCC_ClockConfig+0x260>)
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	61ba      	str	r2, [r7, #24]
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	fa92 f2a2 	rbit	r2, r2
 8003bca:	617a      	str	r2, [r7, #20]
  return result;
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	fab2 f282 	clz	r2, r2
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	f042 0220 	orr.w	r2, r2, #32
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	f002 021f 	and.w	r2, r2, #31
 8003bde:	2101      	movs	r1, #1
 8003be0:	fa01 f202 	lsl.w	r2, r1, r2
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e079      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bee:	4b1d      	ldr	r3, [pc, #116]	; (8003c64 <HAL_RCC_ClockConfig+0x260>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f023 0203 	bic.w	r2, r3, #3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	491a      	ldr	r1, [pc, #104]	; (8003c64 <HAL_RCC_ClockConfig+0x260>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c00:	f7fd fca4 	bl	800154c <HAL_GetTick>
 8003c04:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c06:	e00a      	b.n	8003c1e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c08:	f7fd fca0 	bl	800154c <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e061      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1e:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <HAL_RCC_ClockConfig+0x260>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f003 020c 	and.w	r2, r3, #12
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d1eb      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c30:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <HAL_RCC_ClockConfig+0x25c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d214      	bcs.n	8003c68 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3e:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <HAL_RCC_ClockConfig+0x25c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f023 0207 	bic.w	r2, r3, #7
 8003c46:	4906      	ldr	r1, [pc, #24]	; (8003c60 <HAL_RCC_ClockConfig+0x25c>)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4e:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <HAL_RCC_ClockConfig+0x25c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d005      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e040      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x2de>
 8003c60:	40022000 	.word	0x40022000
 8003c64:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c74:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <HAL_RCC_ClockConfig+0x2e8>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	491a      	ldr	r1, [pc, #104]	; (8003cec <HAL_RCC_ClockConfig+0x2e8>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d009      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c92:	4b16      	ldr	r3, [pc, #88]	; (8003cec <HAL_RCC_ClockConfig+0x2e8>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	4912      	ldr	r1, [pc, #72]	; (8003cec <HAL_RCC_ClockConfig+0x2e8>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ca6:	f000 f829 	bl	8003cfc <HAL_RCC_GetSysClockFreq>
 8003caa:	4601      	mov	r1, r0
 8003cac:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <HAL_RCC_ClockConfig+0x2e8>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cb4:	22f0      	movs	r2, #240	; 0xf0
 8003cb6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	fa92 f2a2 	rbit	r2, r2
 8003cbe:	60fa      	str	r2, [r7, #12]
  return result;
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	fab2 f282 	clz	r2, r2
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	40d3      	lsrs	r3, r2
 8003cca:	4a09      	ldr	r2, [pc, #36]	; (8003cf0 <HAL_RCC_ClockConfig+0x2ec>)
 8003ccc:	5cd3      	ldrb	r3, [r2, r3]
 8003cce:	fa21 f303 	lsr.w	r3, r1, r3
 8003cd2:	4a08      	ldr	r2, [pc, #32]	; (8003cf4 <HAL_RCC_ClockConfig+0x2f0>)
 8003cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003cd6:	4b08      	ldr	r3, [pc, #32]	; (8003cf8 <HAL_RCC_ClockConfig+0x2f4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fd fbf2 	bl	80014c4 <HAL_InitTick>
  
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3778      	adds	r7, #120	; 0x78
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	08007788 	.word	0x08007788
 8003cf4:	20000008 	.word	0x20000008
 8003cf8:	2000000c 	.word	0x2000000c

08003cfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b08b      	sub	sp, #44	; 0x2c
 8003d00:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	61fb      	str	r3, [r7, #28]
 8003d06:	2300      	movs	r3, #0
 8003d08:	61bb      	str	r3, [r7, #24]
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003d16:	4b29      	ldr	r3, [pc, #164]	; (8003dbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f003 030c 	and.w	r3, r3, #12
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d002      	beq.n	8003d2c <HAL_RCC_GetSysClockFreq+0x30>
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d003      	beq.n	8003d32 <HAL_RCC_GetSysClockFreq+0x36>
 8003d2a:	e03c      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d2c:	4b24      	ldr	r3, [pc, #144]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d2e:	623b      	str	r3, [r7, #32]
      break;
 8003d30:	e03c      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003d38:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003d3c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	fa92 f2a2 	rbit	r2, r2
 8003d44:	607a      	str	r2, [r7, #4]
  return result;
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	fab2 f282 	clz	r2, r2
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	40d3      	lsrs	r3, r2
 8003d50:	4a1c      	ldr	r2, [pc, #112]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d52:	5cd3      	ldrb	r3, [r2, r3]
 8003d54:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003d56:	4b19      	ldr	r3, [pc, #100]	; (8003dbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	220f      	movs	r2, #15
 8003d60:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	fa92 f2a2 	rbit	r2, r2
 8003d68:	60fa      	str	r2, [r7, #12]
  return result;
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	fab2 f282 	clz	r2, r2
 8003d70:	b2d2      	uxtb	r2, r2
 8003d72:	40d3      	lsrs	r3, r2
 8003d74:	4a14      	ldr	r2, [pc, #80]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d76:	5cd3      	ldrb	r3, [r2, r3]
 8003d78:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d84:	4a0e      	ldr	r2, [pc, #56]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	fb02 f303 	mul.w	r3, r2, r3
 8003d92:	627b      	str	r3, [r7, #36]	; 0x24
 8003d94:	e004      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	4a0c      	ldr	r2, [pc, #48]	; (8003dcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d9a:	fb02 f303 	mul.w	r3, r2, r3
 8003d9e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	623b      	str	r3, [r7, #32]
      break;
 8003da4:	e002      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003da6:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003da8:	623b      	str	r3, [r7, #32]
      break;
 8003daa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dac:	6a3b      	ldr	r3, [r7, #32]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	372c      	adds	r7, #44	; 0x2c
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	007a1200 	.word	0x007a1200
 8003dc4:	080077a0 	.word	0x080077a0
 8003dc8:	080077b0 	.word	0x080077b0
 8003dcc:	003d0900 	.word	0x003d0900

08003dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd4:	4b03      	ldr	r3, [pc, #12]	; (8003de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	20000008 	.word	0x20000008

08003de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003dee:	f7ff ffef 	bl	8003dd0 <HAL_RCC_GetHCLKFreq>
 8003df2:	4601      	mov	r1, r0
 8003df4:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003dfc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003e00:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	fa92 f2a2 	rbit	r2, r2
 8003e08:	603a      	str	r2, [r7, #0]
  return result;
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	fab2 f282 	clz	r2, r2
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	40d3      	lsrs	r3, r2
 8003e14:	4a04      	ldr	r2, [pc, #16]	; (8003e28 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003e16:	5cd3      	ldrb	r3, [r2, r3]
 8003e18:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40021000 	.word	0x40021000
 8003e28:	08007798 	.word	0x08007798

08003e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003e32:	f7ff ffcd 	bl	8003dd0 <HAL_RCC_GetHCLKFreq>
 8003e36:	4601      	mov	r1, r0
 8003e38:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003e40:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003e44:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	fa92 f2a2 	rbit	r2, r2
 8003e4c:	603a      	str	r2, [r7, #0]
  return result;
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	fab2 f282 	clz	r2, r2
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	40d3      	lsrs	r3, r2
 8003e58:	4a04      	ldr	r2, [pc, #16]	; (8003e6c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003e5a:	5cd3      	ldrb	r3, [r2, r3]
 8003e5c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003e60:	4618      	mov	r0, r3
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	08007798 	.word	0x08007798

08003e70 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b092      	sub	sp, #72	; 0x48
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003e80:	2300      	movs	r3, #0
 8003e82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 80cd 	beq.w	800402e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e94:	4b86      	ldr	r3, [pc, #536]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10e      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea0:	4b83      	ldr	r3, [pc, #524]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	4a82      	ldr	r2, [pc, #520]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eaa:	61d3      	str	r3, [r2, #28]
 8003eac:	4b80      	ldr	r3, [pc, #512]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	60bb      	str	r3, [r7, #8]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebe:	4b7d      	ldr	r3, [pc, #500]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d118      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eca:	4b7a      	ldr	r3, [pc, #488]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a79      	ldr	r2, [pc, #484]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ed6:	f7fd fb39 	bl	800154c <HAL_GetTick>
 8003eda:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003edc:	e008      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ede:	f7fd fb35 	bl	800154c <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b64      	cmp	r3, #100	; 0x64
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e0db      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef0:	4b70      	ldr	r3, [pc, #448]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0f0      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003efc:	4b6c      	ldr	r3, [pc, #432]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f04:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d07d      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d076      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f1a:	4b65      	ldr	r3, [pc, #404]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f28:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2c:	fa93 f3a3 	rbit	r3, r3
 8003f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f34:	fab3 f383 	clz	r3, r3
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	4b5e      	ldr	r3, [pc, #376]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	461a      	mov	r2, r3
 8003f44:	2301      	movs	r3, #1
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f50:	fa93 f3a3 	rbit	r3, r3
 8003f54:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f58:	fab3 f383 	clz	r3, r3
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	461a      	mov	r2, r3
 8003f60:	4b55      	ldr	r3, [pc, #340]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f62:	4413      	add	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	461a      	mov	r2, r3
 8003f68:	2300      	movs	r3, #0
 8003f6a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f6c:	4a50      	ldr	r2, [pc, #320]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f70:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d045      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7c:	f7fd fae6 	bl	800154c <HAL_GetTick>
 8003f80:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f82:	e00a      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f84:	f7fd fae2 	bl	800154c <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e086      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa0:	fa93 f3a3 	rbit	r3, r3
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	623b      	str	r3, [r7, #32]
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	fa93 f3a3 	rbit	r3, r3
 8003fb0:	61fb      	str	r3, [r7, #28]
  return result;
 8003fb2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb4:	fab3 f383 	clz	r3, r3
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	f043 0302 	orr.w	r3, r3, #2
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d102      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003fc8:	4b39      	ldr	r3, [pc, #228]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	e007      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	fa93 f3a3 	rbit	r3, r3
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	4b35      	ldr	r3, [pc, #212]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	2202      	movs	r2, #2
 8003fe0:	613a      	str	r2, [r7, #16]
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	fa92 f2a2 	rbit	r2, r2
 8003fe8:	60fa      	str	r2, [r7, #12]
  return result;
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	fab2 f282 	clz	r2, r2
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	f002 021f 	and.w	r2, r2, #31
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8004002:	4013      	ands	r3, r2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0bd      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004008:	4b29      	ldr	r3, [pc, #164]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	4926      	ldr	r1, [pc, #152]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004016:	4313      	orrs	r3, r2
 8004018:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800401a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800401e:	2b01      	cmp	r3, #1
 8004020:	d105      	bne.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004022:	4b23      	ldr	r3, [pc, #140]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	4a22      	ldr	r2, [pc, #136]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800402c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d008      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800403a:	4b1d      	ldr	r3, [pc, #116]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	f023 0203 	bic.w	r2, r3, #3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	491a      	ldr	r1, [pc, #104]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004048:	4313      	orrs	r3, r2
 800404a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0320 	and.w	r3, r3, #32
 8004054:	2b00      	cmp	r3, #0
 8004056:	d008      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004058:	4b15      	ldr	r3, [pc, #84]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800405a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405c:	f023 0210 	bic.w	r2, r3, #16
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4912      	ldr	r1, [pc, #72]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004066:	4313      	orrs	r3, r2
 8004068:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004072:	2b00      	cmp	r3, #0
 8004074:	d008      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004076:	4b0e      	ldr	r3, [pc, #56]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	490b      	ldr	r1, [pc, #44]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004084:	4313      	orrs	r3, r2
 8004086:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004094:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	4903      	ldr	r1, [pc, #12]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3748      	adds	r7, #72	; 0x48
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40021000 	.word	0x40021000
 80040b4:	40007000 	.word	0x40007000
 80040b8:	10908100 	.word	0x10908100

080040bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e040      	b.n	8004150 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fd f860 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2224      	movs	r2, #36	; 0x24
 80040e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0201 	bic.w	r2, r2, #1
 80040f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f8b6 	bl	800426c <UART_SetConfig>
 8004100:	4603      	mov	r3, r0
 8004102:	2b01      	cmp	r3, #1
 8004104:	d101      	bne.n	800410a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e022      	b.n	8004150 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f9e0 	bl	80044d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004126:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004136:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 fa67 	bl	800461c <UART_CheckIdleState>
 800414e:	4603      	mov	r3, r0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08a      	sub	sp, #40	; 0x28
 800415c:	af02      	add	r7, sp, #8
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	4613      	mov	r3, r2
 8004166:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800416c:	2b20      	cmp	r3, #32
 800416e:	d178      	bne.n	8004262 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <HAL_UART_Transmit+0x24>
 8004176:	88fb      	ldrh	r3, [r7, #6]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e071      	b.n	8004264 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2221      	movs	r2, #33	; 0x21
 800418c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800418e:	f7fd f9dd 	bl	800154c <HAL_GetTick>
 8004192:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	88fa      	ldrh	r2, [r7, #6]
 8004198:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	88fa      	ldrh	r2, [r7, #6]
 80041a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ac:	d108      	bne.n	80041c0 <HAL_UART_Transmit+0x68>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d104      	bne.n	80041c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	61bb      	str	r3, [r7, #24]
 80041be:	e003      	b.n	80041c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041c8:	e030      	b.n	800422c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2200      	movs	r2, #0
 80041d2:	2180      	movs	r1, #128	; 0x80
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 fac9 	bl	800476c <UART_WaitOnFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d004      	beq.n	80041ea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2220      	movs	r2, #32
 80041e4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e03c      	b.n	8004264 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10b      	bne.n	8004208 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	881a      	ldrh	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041fc:	b292      	uxth	r2, r2
 80041fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	3302      	adds	r3, #2
 8004204:	61bb      	str	r3, [r7, #24]
 8004206:	e008      	b.n	800421a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	781a      	ldrb	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	b292      	uxth	r2, r2
 8004212:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	3301      	adds	r3, #1
 8004218:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1c8      	bne.n	80041ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2200      	movs	r2, #0
 8004240:	2140      	movs	r1, #64	; 0x40
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 fa92 	bl	800476c <UART_WaitOnFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d004      	beq.n	8004258 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2220      	movs	r2, #32
 8004252:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e005      	b.n	8004264 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2220      	movs	r2, #32
 800425c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	e000      	b.n	8004264 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004262:	2302      	movs	r3, #2
  }
}
 8004264:	4618      	mov	r0, r3
 8004266:	3720      	adds	r7, #32
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	431a      	orrs	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	4b8a      	ldr	r3, [pc, #552]	; (80044c0 <UART_SetConfig+0x254>)
 8004298:	4013      	ands	r3, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6812      	ldr	r2, [r2, #0]
 800429e:	6979      	ldr	r1, [r7, #20]
 80042a0:	430b      	orrs	r3, r1
 80042a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	430a      	orrs	r2, r1
 80042dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a78      	ldr	r2, [pc, #480]	; (80044c4 <UART_SetConfig+0x258>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d120      	bne.n	800432a <UART_SetConfig+0xbe>
 80042e8:	4b77      	ldr	r3, [pc, #476]	; (80044c8 <UART_SetConfig+0x25c>)
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	f003 0303 	and.w	r3, r3, #3
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d817      	bhi.n	8004324 <UART_SetConfig+0xb8>
 80042f4:	a201      	add	r2, pc, #4	; (adr r2, 80042fc <UART_SetConfig+0x90>)
 80042f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fa:	bf00      	nop
 80042fc:	0800430d 	.word	0x0800430d
 8004300:	08004319 	.word	0x08004319
 8004304:	0800431f 	.word	0x0800431f
 8004308:	08004313 	.word	0x08004313
 800430c:	2300      	movs	r3, #0
 800430e:	77fb      	strb	r3, [r7, #31]
 8004310:	e01d      	b.n	800434e <UART_SetConfig+0xe2>
 8004312:	2302      	movs	r3, #2
 8004314:	77fb      	strb	r3, [r7, #31]
 8004316:	e01a      	b.n	800434e <UART_SetConfig+0xe2>
 8004318:	2304      	movs	r3, #4
 800431a:	77fb      	strb	r3, [r7, #31]
 800431c:	e017      	b.n	800434e <UART_SetConfig+0xe2>
 800431e:	2308      	movs	r3, #8
 8004320:	77fb      	strb	r3, [r7, #31]
 8004322:	e014      	b.n	800434e <UART_SetConfig+0xe2>
 8004324:	2310      	movs	r3, #16
 8004326:	77fb      	strb	r3, [r7, #31]
 8004328:	e011      	b.n	800434e <UART_SetConfig+0xe2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a67      	ldr	r2, [pc, #412]	; (80044cc <UART_SetConfig+0x260>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d102      	bne.n	800433a <UART_SetConfig+0xce>
 8004334:	2300      	movs	r3, #0
 8004336:	77fb      	strb	r3, [r7, #31]
 8004338:	e009      	b.n	800434e <UART_SetConfig+0xe2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a64      	ldr	r2, [pc, #400]	; (80044d0 <UART_SetConfig+0x264>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d102      	bne.n	800434a <UART_SetConfig+0xde>
 8004344:	2300      	movs	r3, #0
 8004346:	77fb      	strb	r3, [r7, #31]
 8004348:	e001      	b.n	800434e <UART_SetConfig+0xe2>
 800434a:	2310      	movs	r3, #16
 800434c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004356:	d15a      	bne.n	800440e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004358:	7ffb      	ldrb	r3, [r7, #31]
 800435a:	2b08      	cmp	r3, #8
 800435c:	d827      	bhi.n	80043ae <UART_SetConfig+0x142>
 800435e:	a201      	add	r2, pc, #4	; (adr r2, 8004364 <UART_SetConfig+0xf8>)
 8004360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004364:	08004389 	.word	0x08004389
 8004368:	08004391 	.word	0x08004391
 800436c:	08004399 	.word	0x08004399
 8004370:	080043af 	.word	0x080043af
 8004374:	0800439f 	.word	0x0800439f
 8004378:	080043af 	.word	0x080043af
 800437c:	080043af 	.word	0x080043af
 8004380:	080043af 	.word	0x080043af
 8004384:	080043a7 	.word	0x080043a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004388:	f7ff fd2e 	bl	8003de8 <HAL_RCC_GetPCLK1Freq>
 800438c:	61b8      	str	r0, [r7, #24]
        break;
 800438e:	e013      	b.n	80043b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004390:	f7ff fd4c 	bl	8003e2c <HAL_RCC_GetPCLK2Freq>
 8004394:	61b8      	str	r0, [r7, #24]
        break;
 8004396:	e00f      	b.n	80043b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004398:	4b4e      	ldr	r3, [pc, #312]	; (80044d4 <UART_SetConfig+0x268>)
 800439a:	61bb      	str	r3, [r7, #24]
        break;
 800439c:	e00c      	b.n	80043b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800439e:	f7ff fcad 	bl	8003cfc <HAL_RCC_GetSysClockFreq>
 80043a2:	61b8      	str	r0, [r7, #24]
        break;
 80043a4:	e008      	b.n	80043b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043aa:	61bb      	str	r3, [r7, #24]
        break;
 80043ac:	e004      	b.n	80043b8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	77bb      	strb	r3, [r7, #30]
        break;
 80043b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d074      	beq.n	80044a8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	005a      	lsls	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	085b      	lsrs	r3, r3, #1
 80043c8:	441a      	add	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	2b0f      	cmp	r3, #15
 80043d8:	d916      	bls.n	8004408 <UART_SetConfig+0x19c>
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e0:	d212      	bcs.n	8004408 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	f023 030f 	bic.w	r3, r3, #15
 80043ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	085b      	lsrs	r3, r3, #1
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	89fb      	ldrh	r3, [r7, #14]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	89fa      	ldrh	r2, [r7, #14]
 8004404:	60da      	str	r2, [r3, #12]
 8004406:	e04f      	b.n	80044a8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	77bb      	strb	r3, [r7, #30]
 800440c:	e04c      	b.n	80044a8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800440e:	7ffb      	ldrb	r3, [r7, #31]
 8004410:	2b08      	cmp	r3, #8
 8004412:	d828      	bhi.n	8004466 <UART_SetConfig+0x1fa>
 8004414:	a201      	add	r2, pc, #4	; (adr r2, 800441c <UART_SetConfig+0x1b0>)
 8004416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441a:	bf00      	nop
 800441c:	08004441 	.word	0x08004441
 8004420:	08004449 	.word	0x08004449
 8004424:	08004451 	.word	0x08004451
 8004428:	08004467 	.word	0x08004467
 800442c:	08004457 	.word	0x08004457
 8004430:	08004467 	.word	0x08004467
 8004434:	08004467 	.word	0x08004467
 8004438:	08004467 	.word	0x08004467
 800443c:	0800445f 	.word	0x0800445f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004440:	f7ff fcd2 	bl	8003de8 <HAL_RCC_GetPCLK1Freq>
 8004444:	61b8      	str	r0, [r7, #24]
        break;
 8004446:	e013      	b.n	8004470 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004448:	f7ff fcf0 	bl	8003e2c <HAL_RCC_GetPCLK2Freq>
 800444c:	61b8      	str	r0, [r7, #24]
        break;
 800444e:	e00f      	b.n	8004470 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004450:	4b20      	ldr	r3, [pc, #128]	; (80044d4 <UART_SetConfig+0x268>)
 8004452:	61bb      	str	r3, [r7, #24]
        break;
 8004454:	e00c      	b.n	8004470 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004456:	f7ff fc51 	bl	8003cfc <HAL_RCC_GetSysClockFreq>
 800445a:	61b8      	str	r0, [r7, #24]
        break;
 800445c:	e008      	b.n	8004470 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800445e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004462:	61bb      	str	r3, [r7, #24]
        break;
 8004464:	e004      	b.n	8004470 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	77bb      	strb	r3, [r7, #30]
        break;
 800446e:	bf00      	nop
    }

    if (pclk != 0U)
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d018      	beq.n	80044a8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	085a      	lsrs	r2, r3, #1
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	441a      	add	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	fbb2 f3f3 	udiv	r3, r2, r3
 8004488:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b0f      	cmp	r3, #15
 800448e:	d909      	bls.n	80044a4 <UART_SetConfig+0x238>
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004496:	d205      	bcs.n	80044a4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	b29a      	uxth	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	60da      	str	r2, [r3, #12]
 80044a2:	e001      	b.n	80044a8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80044b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3720      	adds	r7, #32
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	efff69f3 	.word	0xefff69f3
 80044c4:	40013800 	.word	0x40013800
 80044c8:	40021000 	.word	0x40021000
 80044cc:	40004400 	.word	0x40004400
 80044d0:	40004800 	.word	0x40004800
 80044d4:	007a1200 	.word	0x007a1200

080044d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	f003 0310 	and.w	r3, r3, #16
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01a      	beq.n	80045ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d6:	d10a      	bne.n	80045ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	605a      	str	r2, [r3, #4]
  }
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b098      	sub	sp, #96	; 0x60
 8004620:	af02      	add	r7, sp, #8
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800462c:	f7fc ff8e 	bl	800154c <HAL_GetTick>
 8004630:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0308 	and.w	r3, r3, #8
 800463c:	2b08      	cmp	r3, #8
 800463e:	d12e      	bne.n	800469e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004640:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004648:	2200      	movs	r2, #0
 800464a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f88c 	bl	800476c <UART_WaitOnFlagUntilTimeout>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d021      	beq.n	800469e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004662:	e853 3f00 	ldrex	r3, [r3]
 8004666:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800466e:	653b      	str	r3, [r7, #80]	; 0x50
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	461a      	mov	r2, r3
 8004676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004678:	647b      	str	r3, [r7, #68]	; 0x44
 800467a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800467e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004680:	e841 2300 	strex	r3, r2, [r1]
 8004684:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e6      	bne.n	800465a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e062      	b.n	8004764 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d149      	bne.n	8004740 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046b4:	2200      	movs	r2, #0
 80046b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f856 	bl	800476c <UART_WaitOnFlagUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d03c      	beq.n	8004740 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	e853 3f00 	ldrex	r3, [r3]
 80046d2:	623b      	str	r3, [r7, #32]
   return(result);
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046e4:	633b      	str	r3, [r7, #48]	; 0x30
 80046e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ec:	e841 2300 	strex	r3, r2, [r1]
 80046f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e6      	bne.n	80046c6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3308      	adds	r3, #8
 80046fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	60fb      	str	r3, [r7, #12]
   return(result);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0301 	bic.w	r3, r3, #1
 800470e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3308      	adds	r3, #8
 8004716:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004718:	61fa      	str	r2, [r7, #28]
 800471a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	69b9      	ldr	r1, [r7, #24]
 800471e:	69fa      	ldr	r2, [r7, #28]
 8004720:	e841 2300 	strex	r3, r2, [r1]
 8004724:	617b      	str	r3, [r7, #20]
   return(result);
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e5      	bne.n	80046f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2220      	movs	r2, #32
 8004730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e011      	b.n	8004764 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2220      	movs	r2, #32
 800474a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3758      	adds	r7, #88	; 0x58
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	603b      	str	r3, [r7, #0]
 8004778:	4613      	mov	r3, r2
 800477a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800477c:	e049      	b.n	8004812 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004784:	d045      	beq.n	8004812 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004786:	f7fc fee1 	bl	800154c <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	429a      	cmp	r2, r3
 8004794:	d302      	bcc.n	800479c <UART_WaitOnFlagUntilTimeout+0x30>
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e048      	b.n	8004832 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d031      	beq.n	8004812 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	f003 0308 	and.w	r3, r3, #8
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d110      	bne.n	80047de <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2208      	movs	r2, #8
 80047c2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 f838 	bl	800483a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2208      	movs	r2, #8
 80047ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e029      	b.n	8004832 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	69db      	ldr	r3, [r3, #28]
 80047e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ec:	d111      	bne.n	8004812 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 f81e 	bl	800483a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2220      	movs	r2, #32
 8004802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e00f      	b.n	8004832 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	69da      	ldr	r2, [r3, #28]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	4013      	ands	r3, r2
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	429a      	cmp	r2, r3
 8004820:	bf0c      	ite	eq
 8004822:	2301      	moveq	r3, #1
 8004824:	2300      	movne	r3, #0
 8004826:	b2db      	uxtb	r3, r3
 8004828:	461a      	mov	r2, r3
 800482a:	79fb      	ldrb	r3, [r7, #7]
 800482c:	429a      	cmp	r2, r3
 800482e:	d0a6      	beq.n	800477e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800483a:	b480      	push	{r7}
 800483c:	b095      	sub	sp, #84	; 0x54
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484a:	e853 3f00 	ldrex	r3, [r3]
 800484e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004852:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	461a      	mov	r2, r3
 800485e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004860:	643b      	str	r3, [r7, #64]	; 0x40
 8004862:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004864:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004866:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004868:	e841 2300 	strex	r3, r2, [r1]
 800486c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800486e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1e6      	bne.n	8004842 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	3308      	adds	r3, #8
 800487a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	e853 3f00 	ldrex	r3, [r3]
 8004882:	61fb      	str	r3, [r7, #28]
   return(result);
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f023 0301 	bic.w	r3, r3, #1
 800488a:	64bb      	str	r3, [r7, #72]	; 0x48
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3308      	adds	r3, #8
 8004892:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004894:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004896:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004898:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800489a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800489c:	e841 2300 	strex	r3, r2, [r1]
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1e5      	bne.n	8004874 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d118      	bne.n	80048e2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	e853 3f00 	ldrex	r3, [r3]
 80048bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f023 0310 	bic.w	r3, r3, #16
 80048c4:	647b      	str	r3, [r7, #68]	; 0x44
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	461a      	mov	r2, r3
 80048cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ce:	61bb      	str	r3, [r7, #24]
 80048d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	6979      	ldr	r1, [r7, #20]
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	613b      	str	r3, [r7, #16]
   return(result);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e6      	bne.n	80048b0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80048f6:	bf00      	nop
 80048f8:	3754      	adds	r7, #84	; 0x54
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
	...

08004904 <__errno>:
 8004904:	4b01      	ldr	r3, [pc, #4]	; (800490c <__errno+0x8>)
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	20000014 	.word	0x20000014

08004910 <__libc_init_array>:
 8004910:	b570      	push	{r4, r5, r6, lr}
 8004912:	4d0d      	ldr	r5, [pc, #52]	; (8004948 <__libc_init_array+0x38>)
 8004914:	4c0d      	ldr	r4, [pc, #52]	; (800494c <__libc_init_array+0x3c>)
 8004916:	1b64      	subs	r4, r4, r5
 8004918:	10a4      	asrs	r4, r4, #2
 800491a:	2600      	movs	r6, #0
 800491c:	42a6      	cmp	r6, r4
 800491e:	d109      	bne.n	8004934 <__libc_init_array+0x24>
 8004920:	4d0b      	ldr	r5, [pc, #44]	; (8004950 <__libc_init_array+0x40>)
 8004922:	4c0c      	ldr	r4, [pc, #48]	; (8004954 <__libc_init_array+0x44>)
 8004924:	f002 ff04 	bl	8007730 <_init>
 8004928:	1b64      	subs	r4, r4, r5
 800492a:	10a4      	asrs	r4, r4, #2
 800492c:	2600      	movs	r6, #0
 800492e:	42a6      	cmp	r6, r4
 8004930:	d105      	bne.n	800493e <__libc_init_array+0x2e>
 8004932:	bd70      	pop	{r4, r5, r6, pc}
 8004934:	f855 3b04 	ldr.w	r3, [r5], #4
 8004938:	4798      	blx	r3
 800493a:	3601      	adds	r6, #1
 800493c:	e7ee      	b.n	800491c <__libc_init_array+0xc>
 800493e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004942:	4798      	blx	r3
 8004944:	3601      	adds	r6, #1
 8004946:	e7f2      	b.n	800492e <__libc_init_array+0x1e>
 8004948:	08007b9c 	.word	0x08007b9c
 800494c:	08007b9c 	.word	0x08007b9c
 8004950:	08007b9c 	.word	0x08007b9c
 8004954:	08007ba0 	.word	0x08007ba0

08004958 <memset>:
 8004958:	4402      	add	r2, r0
 800495a:	4603      	mov	r3, r0
 800495c:	4293      	cmp	r3, r2
 800495e:	d100      	bne.n	8004962 <memset+0xa>
 8004960:	4770      	bx	lr
 8004962:	f803 1b01 	strb.w	r1, [r3], #1
 8004966:	e7f9      	b.n	800495c <memset+0x4>

08004968 <__cvt>:
 8004968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800496c:	ec55 4b10 	vmov	r4, r5, d0
 8004970:	2d00      	cmp	r5, #0
 8004972:	460e      	mov	r6, r1
 8004974:	4619      	mov	r1, r3
 8004976:	462b      	mov	r3, r5
 8004978:	bfbb      	ittet	lt
 800497a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800497e:	461d      	movlt	r5, r3
 8004980:	2300      	movge	r3, #0
 8004982:	232d      	movlt	r3, #45	; 0x2d
 8004984:	700b      	strb	r3, [r1, #0]
 8004986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004988:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800498c:	4691      	mov	r9, r2
 800498e:	f023 0820 	bic.w	r8, r3, #32
 8004992:	bfbc      	itt	lt
 8004994:	4622      	movlt	r2, r4
 8004996:	4614      	movlt	r4, r2
 8004998:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800499c:	d005      	beq.n	80049aa <__cvt+0x42>
 800499e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80049a2:	d100      	bne.n	80049a6 <__cvt+0x3e>
 80049a4:	3601      	adds	r6, #1
 80049a6:	2102      	movs	r1, #2
 80049a8:	e000      	b.n	80049ac <__cvt+0x44>
 80049aa:	2103      	movs	r1, #3
 80049ac:	ab03      	add	r3, sp, #12
 80049ae:	9301      	str	r3, [sp, #4]
 80049b0:	ab02      	add	r3, sp, #8
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	ec45 4b10 	vmov	d0, r4, r5
 80049b8:	4653      	mov	r3, sl
 80049ba:	4632      	mov	r2, r6
 80049bc:	f000 fcec 	bl	8005398 <_dtoa_r>
 80049c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80049c4:	4607      	mov	r7, r0
 80049c6:	d102      	bne.n	80049ce <__cvt+0x66>
 80049c8:	f019 0f01 	tst.w	r9, #1
 80049cc:	d022      	beq.n	8004a14 <__cvt+0xac>
 80049ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049d2:	eb07 0906 	add.w	r9, r7, r6
 80049d6:	d110      	bne.n	80049fa <__cvt+0x92>
 80049d8:	783b      	ldrb	r3, [r7, #0]
 80049da:	2b30      	cmp	r3, #48	; 0x30
 80049dc:	d10a      	bne.n	80049f4 <__cvt+0x8c>
 80049de:	2200      	movs	r2, #0
 80049e0:	2300      	movs	r3, #0
 80049e2:	4620      	mov	r0, r4
 80049e4:	4629      	mov	r1, r5
 80049e6:	f7fc f86f 	bl	8000ac8 <__aeabi_dcmpeq>
 80049ea:	b918      	cbnz	r0, 80049f4 <__cvt+0x8c>
 80049ec:	f1c6 0601 	rsb	r6, r6, #1
 80049f0:	f8ca 6000 	str.w	r6, [sl]
 80049f4:	f8da 3000 	ldr.w	r3, [sl]
 80049f8:	4499      	add	r9, r3
 80049fa:	2200      	movs	r2, #0
 80049fc:	2300      	movs	r3, #0
 80049fe:	4620      	mov	r0, r4
 8004a00:	4629      	mov	r1, r5
 8004a02:	f7fc f861 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a06:	b108      	cbz	r0, 8004a0c <__cvt+0xa4>
 8004a08:	f8cd 900c 	str.w	r9, [sp, #12]
 8004a0c:	2230      	movs	r2, #48	; 0x30
 8004a0e:	9b03      	ldr	r3, [sp, #12]
 8004a10:	454b      	cmp	r3, r9
 8004a12:	d307      	bcc.n	8004a24 <__cvt+0xbc>
 8004a14:	9b03      	ldr	r3, [sp, #12]
 8004a16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a18:	1bdb      	subs	r3, r3, r7
 8004a1a:	4638      	mov	r0, r7
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	b004      	add	sp, #16
 8004a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a24:	1c59      	adds	r1, r3, #1
 8004a26:	9103      	str	r1, [sp, #12]
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	e7f0      	b.n	8004a0e <__cvt+0xa6>

08004a2c <__exponent>:
 8004a2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2900      	cmp	r1, #0
 8004a32:	bfb8      	it	lt
 8004a34:	4249      	neglt	r1, r1
 8004a36:	f803 2b02 	strb.w	r2, [r3], #2
 8004a3a:	bfb4      	ite	lt
 8004a3c:	222d      	movlt	r2, #45	; 0x2d
 8004a3e:	222b      	movge	r2, #43	; 0x2b
 8004a40:	2909      	cmp	r1, #9
 8004a42:	7042      	strb	r2, [r0, #1]
 8004a44:	dd2a      	ble.n	8004a9c <__exponent+0x70>
 8004a46:	f10d 0407 	add.w	r4, sp, #7
 8004a4a:	46a4      	mov	ip, r4
 8004a4c:	270a      	movs	r7, #10
 8004a4e:	46a6      	mov	lr, r4
 8004a50:	460a      	mov	r2, r1
 8004a52:	fb91 f6f7 	sdiv	r6, r1, r7
 8004a56:	fb07 1516 	mls	r5, r7, r6, r1
 8004a5a:	3530      	adds	r5, #48	; 0x30
 8004a5c:	2a63      	cmp	r2, #99	; 0x63
 8004a5e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004a62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004a66:	4631      	mov	r1, r6
 8004a68:	dcf1      	bgt.n	8004a4e <__exponent+0x22>
 8004a6a:	3130      	adds	r1, #48	; 0x30
 8004a6c:	f1ae 0502 	sub.w	r5, lr, #2
 8004a70:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004a74:	1c44      	adds	r4, r0, #1
 8004a76:	4629      	mov	r1, r5
 8004a78:	4561      	cmp	r1, ip
 8004a7a:	d30a      	bcc.n	8004a92 <__exponent+0x66>
 8004a7c:	f10d 0209 	add.w	r2, sp, #9
 8004a80:	eba2 020e 	sub.w	r2, r2, lr
 8004a84:	4565      	cmp	r5, ip
 8004a86:	bf88      	it	hi
 8004a88:	2200      	movhi	r2, #0
 8004a8a:	4413      	add	r3, r2
 8004a8c:	1a18      	subs	r0, r3, r0
 8004a8e:	b003      	add	sp, #12
 8004a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a96:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004a9a:	e7ed      	b.n	8004a78 <__exponent+0x4c>
 8004a9c:	2330      	movs	r3, #48	; 0x30
 8004a9e:	3130      	adds	r1, #48	; 0x30
 8004aa0:	7083      	strb	r3, [r0, #2]
 8004aa2:	70c1      	strb	r1, [r0, #3]
 8004aa4:	1d03      	adds	r3, r0, #4
 8004aa6:	e7f1      	b.n	8004a8c <__exponent+0x60>

08004aa8 <_printf_float>:
 8004aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aac:	ed2d 8b02 	vpush	{d8}
 8004ab0:	b08d      	sub	sp, #52	; 0x34
 8004ab2:	460c      	mov	r4, r1
 8004ab4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004ab8:	4616      	mov	r6, r2
 8004aba:	461f      	mov	r7, r3
 8004abc:	4605      	mov	r5, r0
 8004abe:	f001 fa59 	bl	8005f74 <_localeconv_r>
 8004ac2:	f8d0 a000 	ldr.w	sl, [r0]
 8004ac6:	4650      	mov	r0, sl
 8004ac8:	f7fb fb82 	bl	80001d0 <strlen>
 8004acc:	2300      	movs	r3, #0
 8004ace:	930a      	str	r3, [sp, #40]	; 0x28
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	9305      	str	r3, [sp, #20]
 8004ad4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ad8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004adc:	3307      	adds	r3, #7
 8004ade:	f023 0307 	bic.w	r3, r3, #7
 8004ae2:	f103 0208 	add.w	r2, r3, #8
 8004ae6:	f8c8 2000 	str.w	r2, [r8]
 8004aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004af2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004af6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004afa:	9307      	str	r3, [sp, #28]
 8004afc:	f8cd 8018 	str.w	r8, [sp, #24]
 8004b00:	ee08 0a10 	vmov	s16, r0
 8004b04:	4b9f      	ldr	r3, [pc, #636]	; (8004d84 <_printf_float+0x2dc>)
 8004b06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b0e:	f7fc f80d 	bl	8000b2c <__aeabi_dcmpun>
 8004b12:	bb88      	cbnz	r0, 8004b78 <_printf_float+0xd0>
 8004b14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b18:	4b9a      	ldr	r3, [pc, #616]	; (8004d84 <_printf_float+0x2dc>)
 8004b1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b1e:	f7fb ffe7 	bl	8000af0 <__aeabi_dcmple>
 8004b22:	bb48      	cbnz	r0, 8004b78 <_printf_float+0xd0>
 8004b24:	2200      	movs	r2, #0
 8004b26:	2300      	movs	r3, #0
 8004b28:	4640      	mov	r0, r8
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	f7fb ffd6 	bl	8000adc <__aeabi_dcmplt>
 8004b30:	b110      	cbz	r0, 8004b38 <_printf_float+0x90>
 8004b32:	232d      	movs	r3, #45	; 0x2d
 8004b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b38:	4b93      	ldr	r3, [pc, #588]	; (8004d88 <_printf_float+0x2e0>)
 8004b3a:	4894      	ldr	r0, [pc, #592]	; (8004d8c <_printf_float+0x2e4>)
 8004b3c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004b40:	bf94      	ite	ls
 8004b42:	4698      	movls	r8, r3
 8004b44:	4680      	movhi	r8, r0
 8004b46:	2303      	movs	r3, #3
 8004b48:	6123      	str	r3, [r4, #16]
 8004b4a:	9b05      	ldr	r3, [sp, #20]
 8004b4c:	f023 0204 	bic.w	r2, r3, #4
 8004b50:	6022      	str	r2, [r4, #0]
 8004b52:	f04f 0900 	mov.w	r9, #0
 8004b56:	9700      	str	r7, [sp, #0]
 8004b58:	4633      	mov	r3, r6
 8004b5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004b5c:	4621      	mov	r1, r4
 8004b5e:	4628      	mov	r0, r5
 8004b60:	f000 f9d8 	bl	8004f14 <_printf_common>
 8004b64:	3001      	adds	r0, #1
 8004b66:	f040 8090 	bne.w	8004c8a <_printf_float+0x1e2>
 8004b6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b6e:	b00d      	add	sp, #52	; 0x34
 8004b70:	ecbd 8b02 	vpop	{d8}
 8004b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b78:	4642      	mov	r2, r8
 8004b7a:	464b      	mov	r3, r9
 8004b7c:	4640      	mov	r0, r8
 8004b7e:	4649      	mov	r1, r9
 8004b80:	f7fb ffd4 	bl	8000b2c <__aeabi_dcmpun>
 8004b84:	b140      	cbz	r0, 8004b98 <_printf_float+0xf0>
 8004b86:	464b      	mov	r3, r9
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	bfbc      	itt	lt
 8004b8c:	232d      	movlt	r3, #45	; 0x2d
 8004b8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b92:	487f      	ldr	r0, [pc, #508]	; (8004d90 <_printf_float+0x2e8>)
 8004b94:	4b7f      	ldr	r3, [pc, #508]	; (8004d94 <_printf_float+0x2ec>)
 8004b96:	e7d1      	b.n	8004b3c <_printf_float+0x94>
 8004b98:	6863      	ldr	r3, [r4, #4]
 8004b9a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004b9e:	9206      	str	r2, [sp, #24]
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	d13f      	bne.n	8004c24 <_printf_float+0x17c>
 8004ba4:	2306      	movs	r3, #6
 8004ba6:	6063      	str	r3, [r4, #4]
 8004ba8:	9b05      	ldr	r3, [sp, #20]
 8004baa:	6861      	ldr	r1, [r4, #4]
 8004bac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	9303      	str	r3, [sp, #12]
 8004bb4:	ab0a      	add	r3, sp, #40	; 0x28
 8004bb6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004bba:	ab09      	add	r3, sp, #36	; 0x24
 8004bbc:	ec49 8b10 	vmov	d0, r8, r9
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	6022      	str	r2, [r4, #0]
 8004bc4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004bc8:	4628      	mov	r0, r5
 8004bca:	f7ff fecd 	bl	8004968 <__cvt>
 8004bce:	9b06      	ldr	r3, [sp, #24]
 8004bd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004bd2:	2b47      	cmp	r3, #71	; 0x47
 8004bd4:	4680      	mov	r8, r0
 8004bd6:	d108      	bne.n	8004bea <_printf_float+0x142>
 8004bd8:	1cc8      	adds	r0, r1, #3
 8004bda:	db02      	blt.n	8004be2 <_printf_float+0x13a>
 8004bdc:	6863      	ldr	r3, [r4, #4]
 8004bde:	4299      	cmp	r1, r3
 8004be0:	dd41      	ble.n	8004c66 <_printf_float+0x1be>
 8004be2:	f1ab 0b02 	sub.w	fp, fp, #2
 8004be6:	fa5f fb8b 	uxtb.w	fp, fp
 8004bea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004bee:	d820      	bhi.n	8004c32 <_printf_float+0x18a>
 8004bf0:	3901      	subs	r1, #1
 8004bf2:	465a      	mov	r2, fp
 8004bf4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004bf8:	9109      	str	r1, [sp, #36]	; 0x24
 8004bfa:	f7ff ff17 	bl	8004a2c <__exponent>
 8004bfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c00:	1813      	adds	r3, r2, r0
 8004c02:	2a01      	cmp	r2, #1
 8004c04:	4681      	mov	r9, r0
 8004c06:	6123      	str	r3, [r4, #16]
 8004c08:	dc02      	bgt.n	8004c10 <_printf_float+0x168>
 8004c0a:	6822      	ldr	r2, [r4, #0]
 8004c0c:	07d2      	lsls	r2, r2, #31
 8004c0e:	d501      	bpl.n	8004c14 <_printf_float+0x16c>
 8004c10:	3301      	adds	r3, #1
 8004c12:	6123      	str	r3, [r4, #16]
 8004c14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d09c      	beq.n	8004b56 <_printf_float+0xae>
 8004c1c:	232d      	movs	r3, #45	; 0x2d
 8004c1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c22:	e798      	b.n	8004b56 <_printf_float+0xae>
 8004c24:	9a06      	ldr	r2, [sp, #24]
 8004c26:	2a47      	cmp	r2, #71	; 0x47
 8004c28:	d1be      	bne.n	8004ba8 <_printf_float+0x100>
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1bc      	bne.n	8004ba8 <_printf_float+0x100>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e7b9      	b.n	8004ba6 <_printf_float+0xfe>
 8004c32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004c36:	d118      	bne.n	8004c6a <_printf_float+0x1c2>
 8004c38:	2900      	cmp	r1, #0
 8004c3a:	6863      	ldr	r3, [r4, #4]
 8004c3c:	dd0b      	ble.n	8004c56 <_printf_float+0x1ae>
 8004c3e:	6121      	str	r1, [r4, #16]
 8004c40:	b913      	cbnz	r3, 8004c48 <_printf_float+0x1a0>
 8004c42:	6822      	ldr	r2, [r4, #0]
 8004c44:	07d0      	lsls	r0, r2, #31
 8004c46:	d502      	bpl.n	8004c4e <_printf_float+0x1a6>
 8004c48:	3301      	adds	r3, #1
 8004c4a:	440b      	add	r3, r1
 8004c4c:	6123      	str	r3, [r4, #16]
 8004c4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004c50:	f04f 0900 	mov.w	r9, #0
 8004c54:	e7de      	b.n	8004c14 <_printf_float+0x16c>
 8004c56:	b913      	cbnz	r3, 8004c5e <_printf_float+0x1b6>
 8004c58:	6822      	ldr	r2, [r4, #0]
 8004c5a:	07d2      	lsls	r2, r2, #31
 8004c5c:	d501      	bpl.n	8004c62 <_printf_float+0x1ba>
 8004c5e:	3302      	adds	r3, #2
 8004c60:	e7f4      	b.n	8004c4c <_printf_float+0x1a4>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e7f2      	b.n	8004c4c <_printf_float+0x1a4>
 8004c66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c6c:	4299      	cmp	r1, r3
 8004c6e:	db05      	blt.n	8004c7c <_printf_float+0x1d4>
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	6121      	str	r1, [r4, #16]
 8004c74:	07d8      	lsls	r0, r3, #31
 8004c76:	d5ea      	bpl.n	8004c4e <_printf_float+0x1a6>
 8004c78:	1c4b      	adds	r3, r1, #1
 8004c7a:	e7e7      	b.n	8004c4c <_printf_float+0x1a4>
 8004c7c:	2900      	cmp	r1, #0
 8004c7e:	bfd4      	ite	le
 8004c80:	f1c1 0202 	rsble	r2, r1, #2
 8004c84:	2201      	movgt	r2, #1
 8004c86:	4413      	add	r3, r2
 8004c88:	e7e0      	b.n	8004c4c <_printf_float+0x1a4>
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	055a      	lsls	r2, r3, #21
 8004c8e:	d407      	bmi.n	8004ca0 <_printf_float+0x1f8>
 8004c90:	6923      	ldr	r3, [r4, #16]
 8004c92:	4642      	mov	r2, r8
 8004c94:	4631      	mov	r1, r6
 8004c96:	4628      	mov	r0, r5
 8004c98:	47b8      	blx	r7
 8004c9a:	3001      	adds	r0, #1
 8004c9c:	d12c      	bne.n	8004cf8 <_printf_float+0x250>
 8004c9e:	e764      	b.n	8004b6a <_printf_float+0xc2>
 8004ca0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004ca4:	f240 80e0 	bls.w	8004e68 <_printf_float+0x3c0>
 8004ca8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cac:	2200      	movs	r2, #0
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f7fb ff0a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d034      	beq.n	8004d22 <_printf_float+0x27a>
 8004cb8:	4a37      	ldr	r2, [pc, #220]	; (8004d98 <_printf_float+0x2f0>)
 8004cba:	2301      	movs	r3, #1
 8004cbc:	4631      	mov	r1, r6
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	47b8      	blx	r7
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	f43f af51 	beq.w	8004b6a <_printf_float+0xc2>
 8004cc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	db02      	blt.n	8004cd6 <_printf_float+0x22e>
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	07d8      	lsls	r0, r3, #31
 8004cd4:	d510      	bpl.n	8004cf8 <_printf_float+0x250>
 8004cd6:	ee18 3a10 	vmov	r3, s16
 8004cda:	4652      	mov	r2, sl
 8004cdc:	4631      	mov	r1, r6
 8004cde:	4628      	mov	r0, r5
 8004ce0:	47b8      	blx	r7
 8004ce2:	3001      	adds	r0, #1
 8004ce4:	f43f af41 	beq.w	8004b6a <_printf_float+0xc2>
 8004ce8:	f04f 0800 	mov.w	r8, #0
 8004cec:	f104 091a 	add.w	r9, r4, #26
 8004cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	4543      	cmp	r3, r8
 8004cf6:	dc09      	bgt.n	8004d0c <_printf_float+0x264>
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	079b      	lsls	r3, r3, #30
 8004cfc:	f100 8105 	bmi.w	8004f0a <_printf_float+0x462>
 8004d00:	68e0      	ldr	r0, [r4, #12]
 8004d02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d04:	4298      	cmp	r0, r3
 8004d06:	bfb8      	it	lt
 8004d08:	4618      	movlt	r0, r3
 8004d0a:	e730      	b.n	8004b6e <_printf_float+0xc6>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	464a      	mov	r2, r9
 8004d10:	4631      	mov	r1, r6
 8004d12:	4628      	mov	r0, r5
 8004d14:	47b8      	blx	r7
 8004d16:	3001      	adds	r0, #1
 8004d18:	f43f af27 	beq.w	8004b6a <_printf_float+0xc2>
 8004d1c:	f108 0801 	add.w	r8, r8, #1
 8004d20:	e7e6      	b.n	8004cf0 <_printf_float+0x248>
 8004d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	dc39      	bgt.n	8004d9c <_printf_float+0x2f4>
 8004d28:	4a1b      	ldr	r2, [pc, #108]	; (8004d98 <_printf_float+0x2f0>)
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	4631      	mov	r1, r6
 8004d2e:	4628      	mov	r0, r5
 8004d30:	47b8      	blx	r7
 8004d32:	3001      	adds	r0, #1
 8004d34:	f43f af19 	beq.w	8004b6a <_printf_float+0xc2>
 8004d38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	d102      	bne.n	8004d46 <_printf_float+0x29e>
 8004d40:	6823      	ldr	r3, [r4, #0]
 8004d42:	07d9      	lsls	r1, r3, #31
 8004d44:	d5d8      	bpl.n	8004cf8 <_printf_float+0x250>
 8004d46:	ee18 3a10 	vmov	r3, s16
 8004d4a:	4652      	mov	r2, sl
 8004d4c:	4631      	mov	r1, r6
 8004d4e:	4628      	mov	r0, r5
 8004d50:	47b8      	blx	r7
 8004d52:	3001      	adds	r0, #1
 8004d54:	f43f af09 	beq.w	8004b6a <_printf_float+0xc2>
 8004d58:	f04f 0900 	mov.w	r9, #0
 8004d5c:	f104 0a1a 	add.w	sl, r4, #26
 8004d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d62:	425b      	negs	r3, r3
 8004d64:	454b      	cmp	r3, r9
 8004d66:	dc01      	bgt.n	8004d6c <_printf_float+0x2c4>
 8004d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d6a:	e792      	b.n	8004c92 <_printf_float+0x1ea>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	4652      	mov	r2, sl
 8004d70:	4631      	mov	r1, r6
 8004d72:	4628      	mov	r0, r5
 8004d74:	47b8      	blx	r7
 8004d76:	3001      	adds	r0, #1
 8004d78:	f43f aef7 	beq.w	8004b6a <_printf_float+0xc2>
 8004d7c:	f109 0901 	add.w	r9, r9, #1
 8004d80:	e7ee      	b.n	8004d60 <_printf_float+0x2b8>
 8004d82:	bf00      	nop
 8004d84:	7fefffff 	.word	0x7fefffff
 8004d88:	080077c4 	.word	0x080077c4
 8004d8c:	080077c8 	.word	0x080077c8
 8004d90:	080077d0 	.word	0x080077d0
 8004d94:	080077cc 	.word	0x080077cc
 8004d98:	080077d4 	.word	0x080077d4
 8004d9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004da0:	429a      	cmp	r2, r3
 8004da2:	bfa8      	it	ge
 8004da4:	461a      	movge	r2, r3
 8004da6:	2a00      	cmp	r2, #0
 8004da8:	4691      	mov	r9, r2
 8004daa:	dc37      	bgt.n	8004e1c <_printf_float+0x374>
 8004dac:	f04f 0b00 	mov.w	fp, #0
 8004db0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004db4:	f104 021a 	add.w	r2, r4, #26
 8004db8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004dba:	9305      	str	r3, [sp, #20]
 8004dbc:	eba3 0309 	sub.w	r3, r3, r9
 8004dc0:	455b      	cmp	r3, fp
 8004dc2:	dc33      	bgt.n	8004e2c <_printf_float+0x384>
 8004dc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	db3b      	blt.n	8004e44 <_printf_float+0x39c>
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	07da      	lsls	r2, r3, #31
 8004dd0:	d438      	bmi.n	8004e44 <_printf_float+0x39c>
 8004dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dd4:	9a05      	ldr	r2, [sp, #20]
 8004dd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004dd8:	1a9a      	subs	r2, r3, r2
 8004dda:	eba3 0901 	sub.w	r9, r3, r1
 8004dde:	4591      	cmp	r9, r2
 8004de0:	bfa8      	it	ge
 8004de2:	4691      	movge	r9, r2
 8004de4:	f1b9 0f00 	cmp.w	r9, #0
 8004de8:	dc35      	bgt.n	8004e56 <_printf_float+0x3ae>
 8004dea:	f04f 0800 	mov.w	r8, #0
 8004dee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004df2:	f104 0a1a 	add.w	sl, r4, #26
 8004df6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dfa:	1a9b      	subs	r3, r3, r2
 8004dfc:	eba3 0309 	sub.w	r3, r3, r9
 8004e00:	4543      	cmp	r3, r8
 8004e02:	f77f af79 	ble.w	8004cf8 <_printf_float+0x250>
 8004e06:	2301      	movs	r3, #1
 8004e08:	4652      	mov	r2, sl
 8004e0a:	4631      	mov	r1, r6
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	47b8      	blx	r7
 8004e10:	3001      	adds	r0, #1
 8004e12:	f43f aeaa 	beq.w	8004b6a <_printf_float+0xc2>
 8004e16:	f108 0801 	add.w	r8, r8, #1
 8004e1a:	e7ec      	b.n	8004df6 <_printf_float+0x34e>
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	4631      	mov	r1, r6
 8004e20:	4642      	mov	r2, r8
 8004e22:	4628      	mov	r0, r5
 8004e24:	47b8      	blx	r7
 8004e26:	3001      	adds	r0, #1
 8004e28:	d1c0      	bne.n	8004dac <_printf_float+0x304>
 8004e2a:	e69e      	b.n	8004b6a <_printf_float+0xc2>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	4631      	mov	r1, r6
 8004e30:	4628      	mov	r0, r5
 8004e32:	9205      	str	r2, [sp, #20]
 8004e34:	47b8      	blx	r7
 8004e36:	3001      	adds	r0, #1
 8004e38:	f43f ae97 	beq.w	8004b6a <_printf_float+0xc2>
 8004e3c:	9a05      	ldr	r2, [sp, #20]
 8004e3e:	f10b 0b01 	add.w	fp, fp, #1
 8004e42:	e7b9      	b.n	8004db8 <_printf_float+0x310>
 8004e44:	ee18 3a10 	vmov	r3, s16
 8004e48:	4652      	mov	r2, sl
 8004e4a:	4631      	mov	r1, r6
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	47b8      	blx	r7
 8004e50:	3001      	adds	r0, #1
 8004e52:	d1be      	bne.n	8004dd2 <_printf_float+0x32a>
 8004e54:	e689      	b.n	8004b6a <_printf_float+0xc2>
 8004e56:	9a05      	ldr	r2, [sp, #20]
 8004e58:	464b      	mov	r3, r9
 8004e5a:	4442      	add	r2, r8
 8004e5c:	4631      	mov	r1, r6
 8004e5e:	4628      	mov	r0, r5
 8004e60:	47b8      	blx	r7
 8004e62:	3001      	adds	r0, #1
 8004e64:	d1c1      	bne.n	8004dea <_printf_float+0x342>
 8004e66:	e680      	b.n	8004b6a <_printf_float+0xc2>
 8004e68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e6a:	2a01      	cmp	r2, #1
 8004e6c:	dc01      	bgt.n	8004e72 <_printf_float+0x3ca>
 8004e6e:	07db      	lsls	r3, r3, #31
 8004e70:	d538      	bpl.n	8004ee4 <_printf_float+0x43c>
 8004e72:	2301      	movs	r3, #1
 8004e74:	4642      	mov	r2, r8
 8004e76:	4631      	mov	r1, r6
 8004e78:	4628      	mov	r0, r5
 8004e7a:	47b8      	blx	r7
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	f43f ae74 	beq.w	8004b6a <_printf_float+0xc2>
 8004e82:	ee18 3a10 	vmov	r3, s16
 8004e86:	4652      	mov	r2, sl
 8004e88:	4631      	mov	r1, r6
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	47b8      	blx	r7
 8004e8e:	3001      	adds	r0, #1
 8004e90:	f43f ae6b 	beq.w	8004b6a <_printf_float+0xc2>
 8004e94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e98:	2200      	movs	r2, #0
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f7fb fe14 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ea0:	b9d8      	cbnz	r0, 8004eda <_printf_float+0x432>
 8004ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ea4:	f108 0201 	add.w	r2, r8, #1
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	4631      	mov	r1, r6
 8004eac:	4628      	mov	r0, r5
 8004eae:	47b8      	blx	r7
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	d10e      	bne.n	8004ed2 <_printf_float+0x42a>
 8004eb4:	e659      	b.n	8004b6a <_printf_float+0xc2>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	4652      	mov	r2, sl
 8004eba:	4631      	mov	r1, r6
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	47b8      	blx	r7
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	f43f ae52 	beq.w	8004b6a <_printf_float+0xc2>
 8004ec6:	f108 0801 	add.w	r8, r8, #1
 8004eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	4543      	cmp	r3, r8
 8004ed0:	dcf1      	bgt.n	8004eb6 <_printf_float+0x40e>
 8004ed2:	464b      	mov	r3, r9
 8004ed4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ed8:	e6dc      	b.n	8004c94 <_printf_float+0x1ec>
 8004eda:	f04f 0800 	mov.w	r8, #0
 8004ede:	f104 0a1a 	add.w	sl, r4, #26
 8004ee2:	e7f2      	b.n	8004eca <_printf_float+0x422>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	4642      	mov	r2, r8
 8004ee8:	e7df      	b.n	8004eaa <_printf_float+0x402>
 8004eea:	2301      	movs	r3, #1
 8004eec:	464a      	mov	r2, r9
 8004eee:	4631      	mov	r1, r6
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	47b8      	blx	r7
 8004ef4:	3001      	adds	r0, #1
 8004ef6:	f43f ae38 	beq.w	8004b6a <_printf_float+0xc2>
 8004efa:	f108 0801 	add.w	r8, r8, #1
 8004efe:	68e3      	ldr	r3, [r4, #12]
 8004f00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f02:	1a5b      	subs	r3, r3, r1
 8004f04:	4543      	cmp	r3, r8
 8004f06:	dcf0      	bgt.n	8004eea <_printf_float+0x442>
 8004f08:	e6fa      	b.n	8004d00 <_printf_float+0x258>
 8004f0a:	f04f 0800 	mov.w	r8, #0
 8004f0e:	f104 0919 	add.w	r9, r4, #25
 8004f12:	e7f4      	b.n	8004efe <_printf_float+0x456>

08004f14 <_printf_common>:
 8004f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f18:	4616      	mov	r6, r2
 8004f1a:	4699      	mov	r9, r3
 8004f1c:	688a      	ldr	r2, [r1, #8]
 8004f1e:	690b      	ldr	r3, [r1, #16]
 8004f20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f24:	4293      	cmp	r3, r2
 8004f26:	bfb8      	it	lt
 8004f28:	4613      	movlt	r3, r2
 8004f2a:	6033      	str	r3, [r6, #0]
 8004f2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f30:	4607      	mov	r7, r0
 8004f32:	460c      	mov	r4, r1
 8004f34:	b10a      	cbz	r2, 8004f3a <_printf_common+0x26>
 8004f36:	3301      	adds	r3, #1
 8004f38:	6033      	str	r3, [r6, #0]
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	0699      	lsls	r1, r3, #26
 8004f3e:	bf42      	ittt	mi
 8004f40:	6833      	ldrmi	r3, [r6, #0]
 8004f42:	3302      	addmi	r3, #2
 8004f44:	6033      	strmi	r3, [r6, #0]
 8004f46:	6825      	ldr	r5, [r4, #0]
 8004f48:	f015 0506 	ands.w	r5, r5, #6
 8004f4c:	d106      	bne.n	8004f5c <_printf_common+0x48>
 8004f4e:	f104 0a19 	add.w	sl, r4, #25
 8004f52:	68e3      	ldr	r3, [r4, #12]
 8004f54:	6832      	ldr	r2, [r6, #0]
 8004f56:	1a9b      	subs	r3, r3, r2
 8004f58:	42ab      	cmp	r3, r5
 8004f5a:	dc26      	bgt.n	8004faa <_printf_common+0x96>
 8004f5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f60:	1e13      	subs	r3, r2, #0
 8004f62:	6822      	ldr	r2, [r4, #0]
 8004f64:	bf18      	it	ne
 8004f66:	2301      	movne	r3, #1
 8004f68:	0692      	lsls	r2, r2, #26
 8004f6a:	d42b      	bmi.n	8004fc4 <_printf_common+0xb0>
 8004f6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f70:	4649      	mov	r1, r9
 8004f72:	4638      	mov	r0, r7
 8004f74:	47c0      	blx	r8
 8004f76:	3001      	adds	r0, #1
 8004f78:	d01e      	beq.n	8004fb8 <_printf_common+0xa4>
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	68e5      	ldr	r5, [r4, #12]
 8004f7e:	6832      	ldr	r2, [r6, #0]
 8004f80:	f003 0306 	and.w	r3, r3, #6
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	bf08      	it	eq
 8004f88:	1aad      	subeq	r5, r5, r2
 8004f8a:	68a3      	ldr	r3, [r4, #8]
 8004f8c:	6922      	ldr	r2, [r4, #16]
 8004f8e:	bf0c      	ite	eq
 8004f90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f94:	2500      	movne	r5, #0
 8004f96:	4293      	cmp	r3, r2
 8004f98:	bfc4      	itt	gt
 8004f9a:	1a9b      	subgt	r3, r3, r2
 8004f9c:	18ed      	addgt	r5, r5, r3
 8004f9e:	2600      	movs	r6, #0
 8004fa0:	341a      	adds	r4, #26
 8004fa2:	42b5      	cmp	r5, r6
 8004fa4:	d11a      	bne.n	8004fdc <_printf_common+0xc8>
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	e008      	b.n	8004fbc <_printf_common+0xa8>
 8004faa:	2301      	movs	r3, #1
 8004fac:	4652      	mov	r2, sl
 8004fae:	4649      	mov	r1, r9
 8004fb0:	4638      	mov	r0, r7
 8004fb2:	47c0      	blx	r8
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	d103      	bne.n	8004fc0 <_printf_common+0xac>
 8004fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc0:	3501      	adds	r5, #1
 8004fc2:	e7c6      	b.n	8004f52 <_printf_common+0x3e>
 8004fc4:	18e1      	adds	r1, r4, r3
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	2030      	movs	r0, #48	; 0x30
 8004fca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fce:	4422      	add	r2, r4
 8004fd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fd8:	3302      	adds	r3, #2
 8004fda:	e7c7      	b.n	8004f6c <_printf_common+0x58>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	4622      	mov	r2, r4
 8004fe0:	4649      	mov	r1, r9
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	47c0      	blx	r8
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	d0e6      	beq.n	8004fb8 <_printf_common+0xa4>
 8004fea:	3601      	adds	r6, #1
 8004fec:	e7d9      	b.n	8004fa2 <_printf_common+0x8e>
	...

08004ff0 <_printf_i>:
 8004ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff4:	7e0f      	ldrb	r7, [r1, #24]
 8004ff6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ff8:	2f78      	cmp	r7, #120	; 0x78
 8004ffa:	4691      	mov	r9, r2
 8004ffc:	4680      	mov	r8, r0
 8004ffe:	460c      	mov	r4, r1
 8005000:	469a      	mov	sl, r3
 8005002:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005006:	d807      	bhi.n	8005018 <_printf_i+0x28>
 8005008:	2f62      	cmp	r7, #98	; 0x62
 800500a:	d80a      	bhi.n	8005022 <_printf_i+0x32>
 800500c:	2f00      	cmp	r7, #0
 800500e:	f000 80d8 	beq.w	80051c2 <_printf_i+0x1d2>
 8005012:	2f58      	cmp	r7, #88	; 0x58
 8005014:	f000 80a3 	beq.w	800515e <_printf_i+0x16e>
 8005018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800501c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005020:	e03a      	b.n	8005098 <_printf_i+0xa8>
 8005022:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005026:	2b15      	cmp	r3, #21
 8005028:	d8f6      	bhi.n	8005018 <_printf_i+0x28>
 800502a:	a101      	add	r1, pc, #4	; (adr r1, 8005030 <_printf_i+0x40>)
 800502c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005030:	08005089 	.word	0x08005089
 8005034:	0800509d 	.word	0x0800509d
 8005038:	08005019 	.word	0x08005019
 800503c:	08005019 	.word	0x08005019
 8005040:	08005019 	.word	0x08005019
 8005044:	08005019 	.word	0x08005019
 8005048:	0800509d 	.word	0x0800509d
 800504c:	08005019 	.word	0x08005019
 8005050:	08005019 	.word	0x08005019
 8005054:	08005019 	.word	0x08005019
 8005058:	08005019 	.word	0x08005019
 800505c:	080051a9 	.word	0x080051a9
 8005060:	080050cd 	.word	0x080050cd
 8005064:	0800518b 	.word	0x0800518b
 8005068:	08005019 	.word	0x08005019
 800506c:	08005019 	.word	0x08005019
 8005070:	080051cb 	.word	0x080051cb
 8005074:	08005019 	.word	0x08005019
 8005078:	080050cd 	.word	0x080050cd
 800507c:	08005019 	.word	0x08005019
 8005080:	08005019 	.word	0x08005019
 8005084:	08005193 	.word	0x08005193
 8005088:	682b      	ldr	r3, [r5, #0]
 800508a:	1d1a      	adds	r2, r3, #4
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	602a      	str	r2, [r5, #0]
 8005090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005098:	2301      	movs	r3, #1
 800509a:	e0a3      	b.n	80051e4 <_printf_i+0x1f4>
 800509c:	6820      	ldr	r0, [r4, #0]
 800509e:	6829      	ldr	r1, [r5, #0]
 80050a0:	0606      	lsls	r6, r0, #24
 80050a2:	f101 0304 	add.w	r3, r1, #4
 80050a6:	d50a      	bpl.n	80050be <_printf_i+0xce>
 80050a8:	680e      	ldr	r6, [r1, #0]
 80050aa:	602b      	str	r3, [r5, #0]
 80050ac:	2e00      	cmp	r6, #0
 80050ae:	da03      	bge.n	80050b8 <_printf_i+0xc8>
 80050b0:	232d      	movs	r3, #45	; 0x2d
 80050b2:	4276      	negs	r6, r6
 80050b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050b8:	485e      	ldr	r0, [pc, #376]	; (8005234 <_printf_i+0x244>)
 80050ba:	230a      	movs	r3, #10
 80050bc:	e019      	b.n	80050f2 <_printf_i+0x102>
 80050be:	680e      	ldr	r6, [r1, #0]
 80050c0:	602b      	str	r3, [r5, #0]
 80050c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050c6:	bf18      	it	ne
 80050c8:	b236      	sxthne	r6, r6
 80050ca:	e7ef      	b.n	80050ac <_printf_i+0xbc>
 80050cc:	682b      	ldr	r3, [r5, #0]
 80050ce:	6820      	ldr	r0, [r4, #0]
 80050d0:	1d19      	adds	r1, r3, #4
 80050d2:	6029      	str	r1, [r5, #0]
 80050d4:	0601      	lsls	r1, r0, #24
 80050d6:	d501      	bpl.n	80050dc <_printf_i+0xec>
 80050d8:	681e      	ldr	r6, [r3, #0]
 80050da:	e002      	b.n	80050e2 <_printf_i+0xf2>
 80050dc:	0646      	lsls	r6, r0, #25
 80050de:	d5fb      	bpl.n	80050d8 <_printf_i+0xe8>
 80050e0:	881e      	ldrh	r6, [r3, #0]
 80050e2:	4854      	ldr	r0, [pc, #336]	; (8005234 <_printf_i+0x244>)
 80050e4:	2f6f      	cmp	r7, #111	; 0x6f
 80050e6:	bf0c      	ite	eq
 80050e8:	2308      	moveq	r3, #8
 80050ea:	230a      	movne	r3, #10
 80050ec:	2100      	movs	r1, #0
 80050ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050f2:	6865      	ldr	r5, [r4, #4]
 80050f4:	60a5      	str	r5, [r4, #8]
 80050f6:	2d00      	cmp	r5, #0
 80050f8:	bfa2      	ittt	ge
 80050fa:	6821      	ldrge	r1, [r4, #0]
 80050fc:	f021 0104 	bicge.w	r1, r1, #4
 8005100:	6021      	strge	r1, [r4, #0]
 8005102:	b90e      	cbnz	r6, 8005108 <_printf_i+0x118>
 8005104:	2d00      	cmp	r5, #0
 8005106:	d04d      	beq.n	80051a4 <_printf_i+0x1b4>
 8005108:	4615      	mov	r5, r2
 800510a:	fbb6 f1f3 	udiv	r1, r6, r3
 800510e:	fb03 6711 	mls	r7, r3, r1, r6
 8005112:	5dc7      	ldrb	r7, [r0, r7]
 8005114:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005118:	4637      	mov	r7, r6
 800511a:	42bb      	cmp	r3, r7
 800511c:	460e      	mov	r6, r1
 800511e:	d9f4      	bls.n	800510a <_printf_i+0x11a>
 8005120:	2b08      	cmp	r3, #8
 8005122:	d10b      	bne.n	800513c <_printf_i+0x14c>
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	07de      	lsls	r6, r3, #31
 8005128:	d508      	bpl.n	800513c <_printf_i+0x14c>
 800512a:	6923      	ldr	r3, [r4, #16]
 800512c:	6861      	ldr	r1, [r4, #4]
 800512e:	4299      	cmp	r1, r3
 8005130:	bfde      	ittt	le
 8005132:	2330      	movle	r3, #48	; 0x30
 8005134:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005138:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800513c:	1b52      	subs	r2, r2, r5
 800513e:	6122      	str	r2, [r4, #16]
 8005140:	f8cd a000 	str.w	sl, [sp]
 8005144:	464b      	mov	r3, r9
 8005146:	aa03      	add	r2, sp, #12
 8005148:	4621      	mov	r1, r4
 800514a:	4640      	mov	r0, r8
 800514c:	f7ff fee2 	bl	8004f14 <_printf_common>
 8005150:	3001      	adds	r0, #1
 8005152:	d14c      	bne.n	80051ee <_printf_i+0x1fe>
 8005154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005158:	b004      	add	sp, #16
 800515a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800515e:	4835      	ldr	r0, [pc, #212]	; (8005234 <_printf_i+0x244>)
 8005160:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005164:	6829      	ldr	r1, [r5, #0]
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	f851 6b04 	ldr.w	r6, [r1], #4
 800516c:	6029      	str	r1, [r5, #0]
 800516e:	061d      	lsls	r5, r3, #24
 8005170:	d514      	bpl.n	800519c <_printf_i+0x1ac>
 8005172:	07df      	lsls	r7, r3, #31
 8005174:	bf44      	itt	mi
 8005176:	f043 0320 	orrmi.w	r3, r3, #32
 800517a:	6023      	strmi	r3, [r4, #0]
 800517c:	b91e      	cbnz	r6, 8005186 <_printf_i+0x196>
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	f023 0320 	bic.w	r3, r3, #32
 8005184:	6023      	str	r3, [r4, #0]
 8005186:	2310      	movs	r3, #16
 8005188:	e7b0      	b.n	80050ec <_printf_i+0xfc>
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	f043 0320 	orr.w	r3, r3, #32
 8005190:	6023      	str	r3, [r4, #0]
 8005192:	2378      	movs	r3, #120	; 0x78
 8005194:	4828      	ldr	r0, [pc, #160]	; (8005238 <_printf_i+0x248>)
 8005196:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800519a:	e7e3      	b.n	8005164 <_printf_i+0x174>
 800519c:	0659      	lsls	r1, r3, #25
 800519e:	bf48      	it	mi
 80051a0:	b2b6      	uxthmi	r6, r6
 80051a2:	e7e6      	b.n	8005172 <_printf_i+0x182>
 80051a4:	4615      	mov	r5, r2
 80051a6:	e7bb      	b.n	8005120 <_printf_i+0x130>
 80051a8:	682b      	ldr	r3, [r5, #0]
 80051aa:	6826      	ldr	r6, [r4, #0]
 80051ac:	6961      	ldr	r1, [r4, #20]
 80051ae:	1d18      	adds	r0, r3, #4
 80051b0:	6028      	str	r0, [r5, #0]
 80051b2:	0635      	lsls	r5, r6, #24
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	d501      	bpl.n	80051bc <_printf_i+0x1cc>
 80051b8:	6019      	str	r1, [r3, #0]
 80051ba:	e002      	b.n	80051c2 <_printf_i+0x1d2>
 80051bc:	0670      	lsls	r0, r6, #25
 80051be:	d5fb      	bpl.n	80051b8 <_printf_i+0x1c8>
 80051c0:	8019      	strh	r1, [r3, #0]
 80051c2:	2300      	movs	r3, #0
 80051c4:	6123      	str	r3, [r4, #16]
 80051c6:	4615      	mov	r5, r2
 80051c8:	e7ba      	b.n	8005140 <_printf_i+0x150>
 80051ca:	682b      	ldr	r3, [r5, #0]
 80051cc:	1d1a      	adds	r2, r3, #4
 80051ce:	602a      	str	r2, [r5, #0]
 80051d0:	681d      	ldr	r5, [r3, #0]
 80051d2:	6862      	ldr	r2, [r4, #4]
 80051d4:	2100      	movs	r1, #0
 80051d6:	4628      	mov	r0, r5
 80051d8:	f7fb f802 	bl	80001e0 <memchr>
 80051dc:	b108      	cbz	r0, 80051e2 <_printf_i+0x1f2>
 80051de:	1b40      	subs	r0, r0, r5
 80051e0:	6060      	str	r0, [r4, #4]
 80051e2:	6863      	ldr	r3, [r4, #4]
 80051e4:	6123      	str	r3, [r4, #16]
 80051e6:	2300      	movs	r3, #0
 80051e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ec:	e7a8      	b.n	8005140 <_printf_i+0x150>
 80051ee:	6923      	ldr	r3, [r4, #16]
 80051f0:	462a      	mov	r2, r5
 80051f2:	4649      	mov	r1, r9
 80051f4:	4640      	mov	r0, r8
 80051f6:	47d0      	blx	sl
 80051f8:	3001      	adds	r0, #1
 80051fa:	d0ab      	beq.n	8005154 <_printf_i+0x164>
 80051fc:	6823      	ldr	r3, [r4, #0]
 80051fe:	079b      	lsls	r3, r3, #30
 8005200:	d413      	bmi.n	800522a <_printf_i+0x23a>
 8005202:	68e0      	ldr	r0, [r4, #12]
 8005204:	9b03      	ldr	r3, [sp, #12]
 8005206:	4298      	cmp	r0, r3
 8005208:	bfb8      	it	lt
 800520a:	4618      	movlt	r0, r3
 800520c:	e7a4      	b.n	8005158 <_printf_i+0x168>
 800520e:	2301      	movs	r3, #1
 8005210:	4632      	mov	r2, r6
 8005212:	4649      	mov	r1, r9
 8005214:	4640      	mov	r0, r8
 8005216:	47d0      	blx	sl
 8005218:	3001      	adds	r0, #1
 800521a:	d09b      	beq.n	8005154 <_printf_i+0x164>
 800521c:	3501      	adds	r5, #1
 800521e:	68e3      	ldr	r3, [r4, #12]
 8005220:	9903      	ldr	r1, [sp, #12]
 8005222:	1a5b      	subs	r3, r3, r1
 8005224:	42ab      	cmp	r3, r5
 8005226:	dcf2      	bgt.n	800520e <_printf_i+0x21e>
 8005228:	e7eb      	b.n	8005202 <_printf_i+0x212>
 800522a:	2500      	movs	r5, #0
 800522c:	f104 0619 	add.w	r6, r4, #25
 8005230:	e7f5      	b.n	800521e <_printf_i+0x22e>
 8005232:	bf00      	nop
 8005234:	080077d6 	.word	0x080077d6
 8005238:	080077e7 	.word	0x080077e7

0800523c <siprintf>:
 800523c:	b40e      	push	{r1, r2, r3}
 800523e:	b500      	push	{lr}
 8005240:	b09c      	sub	sp, #112	; 0x70
 8005242:	ab1d      	add	r3, sp, #116	; 0x74
 8005244:	9002      	str	r0, [sp, #8]
 8005246:	9006      	str	r0, [sp, #24]
 8005248:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800524c:	4809      	ldr	r0, [pc, #36]	; (8005274 <siprintf+0x38>)
 800524e:	9107      	str	r1, [sp, #28]
 8005250:	9104      	str	r1, [sp, #16]
 8005252:	4909      	ldr	r1, [pc, #36]	; (8005278 <siprintf+0x3c>)
 8005254:	f853 2b04 	ldr.w	r2, [r3], #4
 8005258:	9105      	str	r1, [sp, #20]
 800525a:	6800      	ldr	r0, [r0, #0]
 800525c:	9301      	str	r3, [sp, #4]
 800525e:	a902      	add	r1, sp, #8
 8005260:	f001 fb78 	bl	8006954 <_svfiprintf_r>
 8005264:	9b02      	ldr	r3, [sp, #8]
 8005266:	2200      	movs	r2, #0
 8005268:	701a      	strb	r2, [r3, #0]
 800526a:	b01c      	add	sp, #112	; 0x70
 800526c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005270:	b003      	add	sp, #12
 8005272:	4770      	bx	lr
 8005274:	20000014 	.word	0x20000014
 8005278:	ffff0208 	.word	0xffff0208

0800527c <quorem>:
 800527c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005280:	6903      	ldr	r3, [r0, #16]
 8005282:	690c      	ldr	r4, [r1, #16]
 8005284:	42a3      	cmp	r3, r4
 8005286:	4607      	mov	r7, r0
 8005288:	f2c0 8081 	blt.w	800538e <quorem+0x112>
 800528c:	3c01      	subs	r4, #1
 800528e:	f101 0814 	add.w	r8, r1, #20
 8005292:	f100 0514 	add.w	r5, r0, #20
 8005296:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800529a:	9301      	str	r3, [sp, #4]
 800529c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052a4:	3301      	adds	r3, #1
 80052a6:	429a      	cmp	r2, r3
 80052a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80052ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80052b4:	d331      	bcc.n	800531a <quorem+0x9e>
 80052b6:	f04f 0e00 	mov.w	lr, #0
 80052ba:	4640      	mov	r0, r8
 80052bc:	46ac      	mov	ip, r5
 80052be:	46f2      	mov	sl, lr
 80052c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80052c4:	b293      	uxth	r3, r2
 80052c6:	fb06 e303 	mla	r3, r6, r3, lr
 80052ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	ebaa 0303 	sub.w	r3, sl, r3
 80052d4:	f8dc a000 	ldr.w	sl, [ip]
 80052d8:	0c12      	lsrs	r2, r2, #16
 80052da:	fa13 f38a 	uxtah	r3, r3, sl
 80052de:	fb06 e202 	mla	r2, r6, r2, lr
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	9b00      	ldr	r3, [sp, #0]
 80052e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80052ea:	b292      	uxth	r2, r2
 80052ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80052f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052f4:	f8bd 3000 	ldrh.w	r3, [sp]
 80052f8:	4581      	cmp	r9, r0
 80052fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052fe:	f84c 3b04 	str.w	r3, [ip], #4
 8005302:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005306:	d2db      	bcs.n	80052c0 <quorem+0x44>
 8005308:	f855 300b 	ldr.w	r3, [r5, fp]
 800530c:	b92b      	cbnz	r3, 800531a <quorem+0x9e>
 800530e:	9b01      	ldr	r3, [sp, #4]
 8005310:	3b04      	subs	r3, #4
 8005312:	429d      	cmp	r5, r3
 8005314:	461a      	mov	r2, r3
 8005316:	d32e      	bcc.n	8005376 <quorem+0xfa>
 8005318:	613c      	str	r4, [r7, #16]
 800531a:	4638      	mov	r0, r7
 800531c:	f001 f8c6 	bl	80064ac <__mcmp>
 8005320:	2800      	cmp	r0, #0
 8005322:	db24      	blt.n	800536e <quorem+0xf2>
 8005324:	3601      	adds	r6, #1
 8005326:	4628      	mov	r0, r5
 8005328:	f04f 0c00 	mov.w	ip, #0
 800532c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005330:	f8d0 e000 	ldr.w	lr, [r0]
 8005334:	b293      	uxth	r3, r2
 8005336:	ebac 0303 	sub.w	r3, ip, r3
 800533a:	0c12      	lsrs	r2, r2, #16
 800533c:	fa13 f38e 	uxtah	r3, r3, lr
 8005340:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005344:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005348:	b29b      	uxth	r3, r3
 800534a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800534e:	45c1      	cmp	r9, r8
 8005350:	f840 3b04 	str.w	r3, [r0], #4
 8005354:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005358:	d2e8      	bcs.n	800532c <quorem+0xb0>
 800535a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800535e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005362:	b922      	cbnz	r2, 800536e <quorem+0xf2>
 8005364:	3b04      	subs	r3, #4
 8005366:	429d      	cmp	r5, r3
 8005368:	461a      	mov	r2, r3
 800536a:	d30a      	bcc.n	8005382 <quorem+0x106>
 800536c:	613c      	str	r4, [r7, #16]
 800536e:	4630      	mov	r0, r6
 8005370:	b003      	add	sp, #12
 8005372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005376:	6812      	ldr	r2, [r2, #0]
 8005378:	3b04      	subs	r3, #4
 800537a:	2a00      	cmp	r2, #0
 800537c:	d1cc      	bne.n	8005318 <quorem+0x9c>
 800537e:	3c01      	subs	r4, #1
 8005380:	e7c7      	b.n	8005312 <quorem+0x96>
 8005382:	6812      	ldr	r2, [r2, #0]
 8005384:	3b04      	subs	r3, #4
 8005386:	2a00      	cmp	r2, #0
 8005388:	d1f0      	bne.n	800536c <quorem+0xf0>
 800538a:	3c01      	subs	r4, #1
 800538c:	e7eb      	b.n	8005366 <quorem+0xea>
 800538e:	2000      	movs	r0, #0
 8005390:	e7ee      	b.n	8005370 <quorem+0xf4>
 8005392:	0000      	movs	r0, r0
 8005394:	0000      	movs	r0, r0
	...

08005398 <_dtoa_r>:
 8005398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539c:	ed2d 8b04 	vpush	{d8-d9}
 80053a0:	ec57 6b10 	vmov	r6, r7, d0
 80053a4:	b093      	sub	sp, #76	; 0x4c
 80053a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80053a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80053ac:	9106      	str	r1, [sp, #24]
 80053ae:	ee10 aa10 	vmov	sl, s0
 80053b2:	4604      	mov	r4, r0
 80053b4:	9209      	str	r2, [sp, #36]	; 0x24
 80053b6:	930c      	str	r3, [sp, #48]	; 0x30
 80053b8:	46bb      	mov	fp, r7
 80053ba:	b975      	cbnz	r5, 80053da <_dtoa_r+0x42>
 80053bc:	2010      	movs	r0, #16
 80053be:	f000 fddd 	bl	8005f7c <malloc>
 80053c2:	4602      	mov	r2, r0
 80053c4:	6260      	str	r0, [r4, #36]	; 0x24
 80053c6:	b920      	cbnz	r0, 80053d2 <_dtoa_r+0x3a>
 80053c8:	4ba7      	ldr	r3, [pc, #668]	; (8005668 <_dtoa_r+0x2d0>)
 80053ca:	21ea      	movs	r1, #234	; 0xea
 80053cc:	48a7      	ldr	r0, [pc, #668]	; (800566c <_dtoa_r+0x2d4>)
 80053ce:	f001 fbd1 	bl	8006b74 <__assert_func>
 80053d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80053d6:	6005      	str	r5, [r0, #0]
 80053d8:	60c5      	str	r5, [r0, #12]
 80053da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053dc:	6819      	ldr	r1, [r3, #0]
 80053de:	b151      	cbz	r1, 80053f6 <_dtoa_r+0x5e>
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	604a      	str	r2, [r1, #4]
 80053e4:	2301      	movs	r3, #1
 80053e6:	4093      	lsls	r3, r2
 80053e8:	608b      	str	r3, [r1, #8]
 80053ea:	4620      	mov	r0, r4
 80053ec:	f000 fe1c 	bl	8006028 <_Bfree>
 80053f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053f2:	2200      	movs	r2, #0
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	1e3b      	subs	r3, r7, #0
 80053f8:	bfaa      	itet	ge
 80053fa:	2300      	movge	r3, #0
 80053fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005400:	f8c8 3000 	strge.w	r3, [r8]
 8005404:	4b9a      	ldr	r3, [pc, #616]	; (8005670 <_dtoa_r+0x2d8>)
 8005406:	bfbc      	itt	lt
 8005408:	2201      	movlt	r2, #1
 800540a:	f8c8 2000 	strlt.w	r2, [r8]
 800540e:	ea33 030b 	bics.w	r3, r3, fp
 8005412:	d11b      	bne.n	800544c <_dtoa_r+0xb4>
 8005414:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005416:	f242 730f 	movw	r3, #9999	; 0x270f
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005420:	4333      	orrs	r3, r6
 8005422:	f000 8592 	beq.w	8005f4a <_dtoa_r+0xbb2>
 8005426:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005428:	b963      	cbnz	r3, 8005444 <_dtoa_r+0xac>
 800542a:	4b92      	ldr	r3, [pc, #584]	; (8005674 <_dtoa_r+0x2dc>)
 800542c:	e022      	b.n	8005474 <_dtoa_r+0xdc>
 800542e:	4b92      	ldr	r3, [pc, #584]	; (8005678 <_dtoa_r+0x2e0>)
 8005430:	9301      	str	r3, [sp, #4]
 8005432:	3308      	adds	r3, #8
 8005434:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005436:	6013      	str	r3, [r2, #0]
 8005438:	9801      	ldr	r0, [sp, #4]
 800543a:	b013      	add	sp, #76	; 0x4c
 800543c:	ecbd 8b04 	vpop	{d8-d9}
 8005440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005444:	4b8b      	ldr	r3, [pc, #556]	; (8005674 <_dtoa_r+0x2dc>)
 8005446:	9301      	str	r3, [sp, #4]
 8005448:	3303      	adds	r3, #3
 800544a:	e7f3      	b.n	8005434 <_dtoa_r+0x9c>
 800544c:	2200      	movs	r2, #0
 800544e:	2300      	movs	r3, #0
 8005450:	4650      	mov	r0, sl
 8005452:	4659      	mov	r1, fp
 8005454:	f7fb fb38 	bl	8000ac8 <__aeabi_dcmpeq>
 8005458:	ec4b ab19 	vmov	d9, sl, fp
 800545c:	4680      	mov	r8, r0
 800545e:	b158      	cbz	r0, 8005478 <_dtoa_r+0xe0>
 8005460:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005462:	2301      	movs	r3, #1
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 856b 	beq.w	8005f44 <_dtoa_r+0xbac>
 800546e:	4883      	ldr	r0, [pc, #524]	; (800567c <_dtoa_r+0x2e4>)
 8005470:	6018      	str	r0, [r3, #0]
 8005472:	1e43      	subs	r3, r0, #1
 8005474:	9301      	str	r3, [sp, #4]
 8005476:	e7df      	b.n	8005438 <_dtoa_r+0xa0>
 8005478:	ec4b ab10 	vmov	d0, sl, fp
 800547c:	aa10      	add	r2, sp, #64	; 0x40
 800547e:	a911      	add	r1, sp, #68	; 0x44
 8005480:	4620      	mov	r0, r4
 8005482:	f001 f8b9 	bl	80065f8 <__d2b>
 8005486:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800548a:	ee08 0a10 	vmov	s16, r0
 800548e:	2d00      	cmp	r5, #0
 8005490:	f000 8084 	beq.w	800559c <_dtoa_r+0x204>
 8005494:	ee19 3a90 	vmov	r3, s19
 8005498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800549c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80054a0:	4656      	mov	r6, sl
 80054a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80054a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80054aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80054ae:	4b74      	ldr	r3, [pc, #464]	; (8005680 <_dtoa_r+0x2e8>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	4630      	mov	r0, r6
 80054b4:	4639      	mov	r1, r7
 80054b6:	f7fa fee7 	bl	8000288 <__aeabi_dsub>
 80054ba:	a365      	add	r3, pc, #404	; (adr r3, 8005650 <_dtoa_r+0x2b8>)
 80054bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c0:	f7fb f89a 	bl	80005f8 <__aeabi_dmul>
 80054c4:	a364      	add	r3, pc, #400	; (adr r3, 8005658 <_dtoa_r+0x2c0>)
 80054c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ca:	f7fa fedf 	bl	800028c <__adddf3>
 80054ce:	4606      	mov	r6, r0
 80054d0:	4628      	mov	r0, r5
 80054d2:	460f      	mov	r7, r1
 80054d4:	f7fb f826 	bl	8000524 <__aeabi_i2d>
 80054d8:	a361      	add	r3, pc, #388	; (adr r3, 8005660 <_dtoa_r+0x2c8>)
 80054da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054de:	f7fb f88b 	bl	80005f8 <__aeabi_dmul>
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	4630      	mov	r0, r6
 80054e8:	4639      	mov	r1, r7
 80054ea:	f7fa fecf 	bl	800028c <__adddf3>
 80054ee:	4606      	mov	r6, r0
 80054f0:	460f      	mov	r7, r1
 80054f2:	f7fb fb31 	bl	8000b58 <__aeabi_d2iz>
 80054f6:	2200      	movs	r2, #0
 80054f8:	9000      	str	r0, [sp, #0]
 80054fa:	2300      	movs	r3, #0
 80054fc:	4630      	mov	r0, r6
 80054fe:	4639      	mov	r1, r7
 8005500:	f7fb faec 	bl	8000adc <__aeabi_dcmplt>
 8005504:	b150      	cbz	r0, 800551c <_dtoa_r+0x184>
 8005506:	9800      	ldr	r0, [sp, #0]
 8005508:	f7fb f80c 	bl	8000524 <__aeabi_i2d>
 800550c:	4632      	mov	r2, r6
 800550e:	463b      	mov	r3, r7
 8005510:	f7fb fada 	bl	8000ac8 <__aeabi_dcmpeq>
 8005514:	b910      	cbnz	r0, 800551c <_dtoa_r+0x184>
 8005516:	9b00      	ldr	r3, [sp, #0]
 8005518:	3b01      	subs	r3, #1
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	9b00      	ldr	r3, [sp, #0]
 800551e:	2b16      	cmp	r3, #22
 8005520:	d85a      	bhi.n	80055d8 <_dtoa_r+0x240>
 8005522:	9a00      	ldr	r2, [sp, #0]
 8005524:	4b57      	ldr	r3, [pc, #348]	; (8005684 <_dtoa_r+0x2ec>)
 8005526:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800552a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552e:	ec51 0b19 	vmov	r0, r1, d9
 8005532:	f7fb fad3 	bl	8000adc <__aeabi_dcmplt>
 8005536:	2800      	cmp	r0, #0
 8005538:	d050      	beq.n	80055dc <_dtoa_r+0x244>
 800553a:	9b00      	ldr	r3, [sp, #0]
 800553c:	3b01      	subs	r3, #1
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	2300      	movs	r3, #0
 8005542:	930b      	str	r3, [sp, #44]	; 0x2c
 8005544:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005546:	1b5d      	subs	r5, r3, r5
 8005548:	1e6b      	subs	r3, r5, #1
 800554a:	9305      	str	r3, [sp, #20]
 800554c:	bf45      	ittet	mi
 800554e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005552:	9304      	strmi	r3, [sp, #16]
 8005554:	2300      	movpl	r3, #0
 8005556:	2300      	movmi	r3, #0
 8005558:	bf4c      	ite	mi
 800555a:	9305      	strmi	r3, [sp, #20]
 800555c:	9304      	strpl	r3, [sp, #16]
 800555e:	9b00      	ldr	r3, [sp, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	db3d      	blt.n	80055e0 <_dtoa_r+0x248>
 8005564:	9b05      	ldr	r3, [sp, #20]
 8005566:	9a00      	ldr	r2, [sp, #0]
 8005568:	920a      	str	r2, [sp, #40]	; 0x28
 800556a:	4413      	add	r3, r2
 800556c:	9305      	str	r3, [sp, #20]
 800556e:	2300      	movs	r3, #0
 8005570:	9307      	str	r3, [sp, #28]
 8005572:	9b06      	ldr	r3, [sp, #24]
 8005574:	2b09      	cmp	r3, #9
 8005576:	f200 8089 	bhi.w	800568c <_dtoa_r+0x2f4>
 800557a:	2b05      	cmp	r3, #5
 800557c:	bfc4      	itt	gt
 800557e:	3b04      	subgt	r3, #4
 8005580:	9306      	strgt	r3, [sp, #24]
 8005582:	9b06      	ldr	r3, [sp, #24]
 8005584:	f1a3 0302 	sub.w	r3, r3, #2
 8005588:	bfcc      	ite	gt
 800558a:	2500      	movgt	r5, #0
 800558c:	2501      	movle	r5, #1
 800558e:	2b03      	cmp	r3, #3
 8005590:	f200 8087 	bhi.w	80056a2 <_dtoa_r+0x30a>
 8005594:	e8df f003 	tbb	[pc, r3]
 8005598:	59383a2d 	.word	0x59383a2d
 800559c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80055a0:	441d      	add	r5, r3
 80055a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80055a6:	2b20      	cmp	r3, #32
 80055a8:	bfc1      	itttt	gt
 80055aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80055ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80055b2:	fa0b f303 	lslgt.w	r3, fp, r3
 80055b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80055ba:	bfda      	itte	le
 80055bc:	f1c3 0320 	rsble	r3, r3, #32
 80055c0:	fa06 f003 	lslle.w	r0, r6, r3
 80055c4:	4318      	orrgt	r0, r3
 80055c6:	f7fa ff9d 	bl	8000504 <__aeabi_ui2d>
 80055ca:	2301      	movs	r3, #1
 80055cc:	4606      	mov	r6, r0
 80055ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80055d2:	3d01      	subs	r5, #1
 80055d4:	930e      	str	r3, [sp, #56]	; 0x38
 80055d6:	e76a      	b.n	80054ae <_dtoa_r+0x116>
 80055d8:	2301      	movs	r3, #1
 80055da:	e7b2      	b.n	8005542 <_dtoa_r+0x1aa>
 80055dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80055de:	e7b1      	b.n	8005544 <_dtoa_r+0x1ac>
 80055e0:	9b04      	ldr	r3, [sp, #16]
 80055e2:	9a00      	ldr	r2, [sp, #0]
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	9304      	str	r3, [sp, #16]
 80055e8:	4253      	negs	r3, r2
 80055ea:	9307      	str	r3, [sp, #28]
 80055ec:	2300      	movs	r3, #0
 80055ee:	930a      	str	r3, [sp, #40]	; 0x28
 80055f0:	e7bf      	b.n	8005572 <_dtoa_r+0x1da>
 80055f2:	2300      	movs	r3, #0
 80055f4:	9308      	str	r3, [sp, #32]
 80055f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	dc55      	bgt.n	80056a8 <_dtoa_r+0x310>
 80055fc:	2301      	movs	r3, #1
 80055fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005602:	461a      	mov	r2, r3
 8005604:	9209      	str	r2, [sp, #36]	; 0x24
 8005606:	e00c      	b.n	8005622 <_dtoa_r+0x28a>
 8005608:	2301      	movs	r3, #1
 800560a:	e7f3      	b.n	80055f4 <_dtoa_r+0x25c>
 800560c:	2300      	movs	r3, #0
 800560e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005610:	9308      	str	r3, [sp, #32]
 8005612:	9b00      	ldr	r3, [sp, #0]
 8005614:	4413      	add	r3, r2
 8005616:	9302      	str	r3, [sp, #8]
 8005618:	3301      	adds	r3, #1
 800561a:	2b01      	cmp	r3, #1
 800561c:	9303      	str	r3, [sp, #12]
 800561e:	bfb8      	it	lt
 8005620:	2301      	movlt	r3, #1
 8005622:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005624:	2200      	movs	r2, #0
 8005626:	6042      	str	r2, [r0, #4]
 8005628:	2204      	movs	r2, #4
 800562a:	f102 0614 	add.w	r6, r2, #20
 800562e:	429e      	cmp	r6, r3
 8005630:	6841      	ldr	r1, [r0, #4]
 8005632:	d93d      	bls.n	80056b0 <_dtoa_r+0x318>
 8005634:	4620      	mov	r0, r4
 8005636:	f000 fcb7 	bl	8005fa8 <_Balloc>
 800563a:	9001      	str	r0, [sp, #4]
 800563c:	2800      	cmp	r0, #0
 800563e:	d13b      	bne.n	80056b8 <_dtoa_r+0x320>
 8005640:	4b11      	ldr	r3, [pc, #68]	; (8005688 <_dtoa_r+0x2f0>)
 8005642:	4602      	mov	r2, r0
 8005644:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005648:	e6c0      	b.n	80053cc <_dtoa_r+0x34>
 800564a:	2301      	movs	r3, #1
 800564c:	e7df      	b.n	800560e <_dtoa_r+0x276>
 800564e:	bf00      	nop
 8005650:	636f4361 	.word	0x636f4361
 8005654:	3fd287a7 	.word	0x3fd287a7
 8005658:	8b60c8b3 	.word	0x8b60c8b3
 800565c:	3fc68a28 	.word	0x3fc68a28
 8005660:	509f79fb 	.word	0x509f79fb
 8005664:	3fd34413 	.word	0x3fd34413
 8005668:	08007805 	.word	0x08007805
 800566c:	0800781c 	.word	0x0800781c
 8005670:	7ff00000 	.word	0x7ff00000
 8005674:	08007801 	.word	0x08007801
 8005678:	080077f8 	.word	0x080077f8
 800567c:	080077d5 	.word	0x080077d5
 8005680:	3ff80000 	.word	0x3ff80000
 8005684:	08007910 	.word	0x08007910
 8005688:	08007877 	.word	0x08007877
 800568c:	2501      	movs	r5, #1
 800568e:	2300      	movs	r3, #0
 8005690:	9306      	str	r3, [sp, #24]
 8005692:	9508      	str	r5, [sp, #32]
 8005694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005698:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800569c:	2200      	movs	r2, #0
 800569e:	2312      	movs	r3, #18
 80056a0:	e7b0      	b.n	8005604 <_dtoa_r+0x26c>
 80056a2:	2301      	movs	r3, #1
 80056a4:	9308      	str	r3, [sp, #32]
 80056a6:	e7f5      	b.n	8005694 <_dtoa_r+0x2fc>
 80056a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80056ae:	e7b8      	b.n	8005622 <_dtoa_r+0x28a>
 80056b0:	3101      	adds	r1, #1
 80056b2:	6041      	str	r1, [r0, #4]
 80056b4:	0052      	lsls	r2, r2, #1
 80056b6:	e7b8      	b.n	800562a <_dtoa_r+0x292>
 80056b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056ba:	9a01      	ldr	r2, [sp, #4]
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	9b03      	ldr	r3, [sp, #12]
 80056c0:	2b0e      	cmp	r3, #14
 80056c2:	f200 809d 	bhi.w	8005800 <_dtoa_r+0x468>
 80056c6:	2d00      	cmp	r5, #0
 80056c8:	f000 809a 	beq.w	8005800 <_dtoa_r+0x468>
 80056cc:	9b00      	ldr	r3, [sp, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	dd32      	ble.n	8005738 <_dtoa_r+0x3a0>
 80056d2:	4ab7      	ldr	r2, [pc, #732]	; (80059b0 <_dtoa_r+0x618>)
 80056d4:	f003 030f 	and.w	r3, r3, #15
 80056d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80056dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80056e0:	9b00      	ldr	r3, [sp, #0]
 80056e2:	05d8      	lsls	r0, r3, #23
 80056e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80056e8:	d516      	bpl.n	8005718 <_dtoa_r+0x380>
 80056ea:	4bb2      	ldr	r3, [pc, #712]	; (80059b4 <_dtoa_r+0x61c>)
 80056ec:	ec51 0b19 	vmov	r0, r1, d9
 80056f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056f4:	f7fb f8aa 	bl	800084c <__aeabi_ddiv>
 80056f8:	f007 070f 	and.w	r7, r7, #15
 80056fc:	4682      	mov	sl, r0
 80056fe:	468b      	mov	fp, r1
 8005700:	2503      	movs	r5, #3
 8005702:	4eac      	ldr	r6, [pc, #688]	; (80059b4 <_dtoa_r+0x61c>)
 8005704:	b957      	cbnz	r7, 800571c <_dtoa_r+0x384>
 8005706:	4642      	mov	r2, r8
 8005708:	464b      	mov	r3, r9
 800570a:	4650      	mov	r0, sl
 800570c:	4659      	mov	r1, fp
 800570e:	f7fb f89d 	bl	800084c <__aeabi_ddiv>
 8005712:	4682      	mov	sl, r0
 8005714:	468b      	mov	fp, r1
 8005716:	e028      	b.n	800576a <_dtoa_r+0x3d2>
 8005718:	2502      	movs	r5, #2
 800571a:	e7f2      	b.n	8005702 <_dtoa_r+0x36a>
 800571c:	07f9      	lsls	r1, r7, #31
 800571e:	d508      	bpl.n	8005732 <_dtoa_r+0x39a>
 8005720:	4640      	mov	r0, r8
 8005722:	4649      	mov	r1, r9
 8005724:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005728:	f7fa ff66 	bl	80005f8 <__aeabi_dmul>
 800572c:	3501      	adds	r5, #1
 800572e:	4680      	mov	r8, r0
 8005730:	4689      	mov	r9, r1
 8005732:	107f      	asrs	r7, r7, #1
 8005734:	3608      	adds	r6, #8
 8005736:	e7e5      	b.n	8005704 <_dtoa_r+0x36c>
 8005738:	f000 809b 	beq.w	8005872 <_dtoa_r+0x4da>
 800573c:	9b00      	ldr	r3, [sp, #0]
 800573e:	4f9d      	ldr	r7, [pc, #628]	; (80059b4 <_dtoa_r+0x61c>)
 8005740:	425e      	negs	r6, r3
 8005742:	4b9b      	ldr	r3, [pc, #620]	; (80059b0 <_dtoa_r+0x618>)
 8005744:	f006 020f 	and.w	r2, r6, #15
 8005748:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005750:	ec51 0b19 	vmov	r0, r1, d9
 8005754:	f7fa ff50 	bl	80005f8 <__aeabi_dmul>
 8005758:	1136      	asrs	r6, r6, #4
 800575a:	4682      	mov	sl, r0
 800575c:	468b      	mov	fp, r1
 800575e:	2300      	movs	r3, #0
 8005760:	2502      	movs	r5, #2
 8005762:	2e00      	cmp	r6, #0
 8005764:	d17a      	bne.n	800585c <_dtoa_r+0x4c4>
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1d3      	bne.n	8005712 <_dtoa_r+0x37a>
 800576a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 8082 	beq.w	8005876 <_dtoa_r+0x4de>
 8005772:	4b91      	ldr	r3, [pc, #580]	; (80059b8 <_dtoa_r+0x620>)
 8005774:	2200      	movs	r2, #0
 8005776:	4650      	mov	r0, sl
 8005778:	4659      	mov	r1, fp
 800577a:	f7fb f9af 	bl	8000adc <__aeabi_dcmplt>
 800577e:	2800      	cmp	r0, #0
 8005780:	d079      	beq.n	8005876 <_dtoa_r+0x4de>
 8005782:	9b03      	ldr	r3, [sp, #12]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d076      	beq.n	8005876 <_dtoa_r+0x4de>
 8005788:	9b02      	ldr	r3, [sp, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	dd36      	ble.n	80057fc <_dtoa_r+0x464>
 800578e:	9b00      	ldr	r3, [sp, #0]
 8005790:	4650      	mov	r0, sl
 8005792:	4659      	mov	r1, fp
 8005794:	1e5f      	subs	r7, r3, #1
 8005796:	2200      	movs	r2, #0
 8005798:	4b88      	ldr	r3, [pc, #544]	; (80059bc <_dtoa_r+0x624>)
 800579a:	f7fa ff2d 	bl	80005f8 <__aeabi_dmul>
 800579e:	9e02      	ldr	r6, [sp, #8]
 80057a0:	4682      	mov	sl, r0
 80057a2:	468b      	mov	fp, r1
 80057a4:	3501      	adds	r5, #1
 80057a6:	4628      	mov	r0, r5
 80057a8:	f7fa febc 	bl	8000524 <__aeabi_i2d>
 80057ac:	4652      	mov	r2, sl
 80057ae:	465b      	mov	r3, fp
 80057b0:	f7fa ff22 	bl	80005f8 <__aeabi_dmul>
 80057b4:	4b82      	ldr	r3, [pc, #520]	; (80059c0 <_dtoa_r+0x628>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	f7fa fd68 	bl	800028c <__adddf3>
 80057bc:	46d0      	mov	r8, sl
 80057be:	46d9      	mov	r9, fp
 80057c0:	4682      	mov	sl, r0
 80057c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80057c6:	2e00      	cmp	r6, #0
 80057c8:	d158      	bne.n	800587c <_dtoa_r+0x4e4>
 80057ca:	4b7e      	ldr	r3, [pc, #504]	; (80059c4 <_dtoa_r+0x62c>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	4640      	mov	r0, r8
 80057d0:	4649      	mov	r1, r9
 80057d2:	f7fa fd59 	bl	8000288 <__aeabi_dsub>
 80057d6:	4652      	mov	r2, sl
 80057d8:	465b      	mov	r3, fp
 80057da:	4680      	mov	r8, r0
 80057dc:	4689      	mov	r9, r1
 80057de:	f7fb f99b 	bl	8000b18 <__aeabi_dcmpgt>
 80057e2:	2800      	cmp	r0, #0
 80057e4:	f040 8295 	bne.w	8005d12 <_dtoa_r+0x97a>
 80057e8:	4652      	mov	r2, sl
 80057ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80057ee:	4640      	mov	r0, r8
 80057f0:	4649      	mov	r1, r9
 80057f2:	f7fb f973 	bl	8000adc <__aeabi_dcmplt>
 80057f6:	2800      	cmp	r0, #0
 80057f8:	f040 8289 	bne.w	8005d0e <_dtoa_r+0x976>
 80057fc:	ec5b ab19 	vmov	sl, fp, d9
 8005800:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005802:	2b00      	cmp	r3, #0
 8005804:	f2c0 8148 	blt.w	8005a98 <_dtoa_r+0x700>
 8005808:	9a00      	ldr	r2, [sp, #0]
 800580a:	2a0e      	cmp	r2, #14
 800580c:	f300 8144 	bgt.w	8005a98 <_dtoa_r+0x700>
 8005810:	4b67      	ldr	r3, [pc, #412]	; (80059b0 <_dtoa_r+0x618>)
 8005812:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005816:	e9d3 8900 	ldrd	r8, r9, [r3]
 800581a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800581c:	2b00      	cmp	r3, #0
 800581e:	f280 80d5 	bge.w	80059cc <_dtoa_r+0x634>
 8005822:	9b03      	ldr	r3, [sp, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	f300 80d1 	bgt.w	80059cc <_dtoa_r+0x634>
 800582a:	f040 826f 	bne.w	8005d0c <_dtoa_r+0x974>
 800582e:	4b65      	ldr	r3, [pc, #404]	; (80059c4 <_dtoa_r+0x62c>)
 8005830:	2200      	movs	r2, #0
 8005832:	4640      	mov	r0, r8
 8005834:	4649      	mov	r1, r9
 8005836:	f7fa fedf 	bl	80005f8 <__aeabi_dmul>
 800583a:	4652      	mov	r2, sl
 800583c:	465b      	mov	r3, fp
 800583e:	f7fb f961 	bl	8000b04 <__aeabi_dcmpge>
 8005842:	9e03      	ldr	r6, [sp, #12]
 8005844:	4637      	mov	r7, r6
 8005846:	2800      	cmp	r0, #0
 8005848:	f040 8245 	bne.w	8005cd6 <_dtoa_r+0x93e>
 800584c:	9d01      	ldr	r5, [sp, #4]
 800584e:	2331      	movs	r3, #49	; 0x31
 8005850:	f805 3b01 	strb.w	r3, [r5], #1
 8005854:	9b00      	ldr	r3, [sp, #0]
 8005856:	3301      	adds	r3, #1
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	e240      	b.n	8005cde <_dtoa_r+0x946>
 800585c:	07f2      	lsls	r2, r6, #31
 800585e:	d505      	bpl.n	800586c <_dtoa_r+0x4d4>
 8005860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005864:	f7fa fec8 	bl	80005f8 <__aeabi_dmul>
 8005868:	3501      	adds	r5, #1
 800586a:	2301      	movs	r3, #1
 800586c:	1076      	asrs	r6, r6, #1
 800586e:	3708      	adds	r7, #8
 8005870:	e777      	b.n	8005762 <_dtoa_r+0x3ca>
 8005872:	2502      	movs	r5, #2
 8005874:	e779      	b.n	800576a <_dtoa_r+0x3d2>
 8005876:	9f00      	ldr	r7, [sp, #0]
 8005878:	9e03      	ldr	r6, [sp, #12]
 800587a:	e794      	b.n	80057a6 <_dtoa_r+0x40e>
 800587c:	9901      	ldr	r1, [sp, #4]
 800587e:	4b4c      	ldr	r3, [pc, #304]	; (80059b0 <_dtoa_r+0x618>)
 8005880:	4431      	add	r1, r6
 8005882:	910d      	str	r1, [sp, #52]	; 0x34
 8005884:	9908      	ldr	r1, [sp, #32]
 8005886:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800588a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800588e:	2900      	cmp	r1, #0
 8005890:	d043      	beq.n	800591a <_dtoa_r+0x582>
 8005892:	494d      	ldr	r1, [pc, #308]	; (80059c8 <_dtoa_r+0x630>)
 8005894:	2000      	movs	r0, #0
 8005896:	f7fa ffd9 	bl	800084c <__aeabi_ddiv>
 800589a:	4652      	mov	r2, sl
 800589c:	465b      	mov	r3, fp
 800589e:	f7fa fcf3 	bl	8000288 <__aeabi_dsub>
 80058a2:	9d01      	ldr	r5, [sp, #4]
 80058a4:	4682      	mov	sl, r0
 80058a6:	468b      	mov	fp, r1
 80058a8:	4649      	mov	r1, r9
 80058aa:	4640      	mov	r0, r8
 80058ac:	f7fb f954 	bl	8000b58 <__aeabi_d2iz>
 80058b0:	4606      	mov	r6, r0
 80058b2:	f7fa fe37 	bl	8000524 <__aeabi_i2d>
 80058b6:	4602      	mov	r2, r0
 80058b8:	460b      	mov	r3, r1
 80058ba:	4640      	mov	r0, r8
 80058bc:	4649      	mov	r1, r9
 80058be:	f7fa fce3 	bl	8000288 <__aeabi_dsub>
 80058c2:	3630      	adds	r6, #48	; 0x30
 80058c4:	f805 6b01 	strb.w	r6, [r5], #1
 80058c8:	4652      	mov	r2, sl
 80058ca:	465b      	mov	r3, fp
 80058cc:	4680      	mov	r8, r0
 80058ce:	4689      	mov	r9, r1
 80058d0:	f7fb f904 	bl	8000adc <__aeabi_dcmplt>
 80058d4:	2800      	cmp	r0, #0
 80058d6:	d163      	bne.n	80059a0 <_dtoa_r+0x608>
 80058d8:	4642      	mov	r2, r8
 80058da:	464b      	mov	r3, r9
 80058dc:	4936      	ldr	r1, [pc, #216]	; (80059b8 <_dtoa_r+0x620>)
 80058de:	2000      	movs	r0, #0
 80058e0:	f7fa fcd2 	bl	8000288 <__aeabi_dsub>
 80058e4:	4652      	mov	r2, sl
 80058e6:	465b      	mov	r3, fp
 80058e8:	f7fb f8f8 	bl	8000adc <__aeabi_dcmplt>
 80058ec:	2800      	cmp	r0, #0
 80058ee:	f040 80b5 	bne.w	8005a5c <_dtoa_r+0x6c4>
 80058f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058f4:	429d      	cmp	r5, r3
 80058f6:	d081      	beq.n	80057fc <_dtoa_r+0x464>
 80058f8:	4b30      	ldr	r3, [pc, #192]	; (80059bc <_dtoa_r+0x624>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	4650      	mov	r0, sl
 80058fe:	4659      	mov	r1, fp
 8005900:	f7fa fe7a 	bl	80005f8 <__aeabi_dmul>
 8005904:	4b2d      	ldr	r3, [pc, #180]	; (80059bc <_dtoa_r+0x624>)
 8005906:	4682      	mov	sl, r0
 8005908:	468b      	mov	fp, r1
 800590a:	4640      	mov	r0, r8
 800590c:	4649      	mov	r1, r9
 800590e:	2200      	movs	r2, #0
 8005910:	f7fa fe72 	bl	80005f8 <__aeabi_dmul>
 8005914:	4680      	mov	r8, r0
 8005916:	4689      	mov	r9, r1
 8005918:	e7c6      	b.n	80058a8 <_dtoa_r+0x510>
 800591a:	4650      	mov	r0, sl
 800591c:	4659      	mov	r1, fp
 800591e:	f7fa fe6b 	bl	80005f8 <__aeabi_dmul>
 8005922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005924:	9d01      	ldr	r5, [sp, #4]
 8005926:	930f      	str	r3, [sp, #60]	; 0x3c
 8005928:	4682      	mov	sl, r0
 800592a:	468b      	mov	fp, r1
 800592c:	4649      	mov	r1, r9
 800592e:	4640      	mov	r0, r8
 8005930:	f7fb f912 	bl	8000b58 <__aeabi_d2iz>
 8005934:	4606      	mov	r6, r0
 8005936:	f7fa fdf5 	bl	8000524 <__aeabi_i2d>
 800593a:	3630      	adds	r6, #48	; 0x30
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4640      	mov	r0, r8
 8005942:	4649      	mov	r1, r9
 8005944:	f7fa fca0 	bl	8000288 <__aeabi_dsub>
 8005948:	f805 6b01 	strb.w	r6, [r5], #1
 800594c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800594e:	429d      	cmp	r5, r3
 8005950:	4680      	mov	r8, r0
 8005952:	4689      	mov	r9, r1
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	d124      	bne.n	80059a4 <_dtoa_r+0x60c>
 800595a:	4b1b      	ldr	r3, [pc, #108]	; (80059c8 <_dtoa_r+0x630>)
 800595c:	4650      	mov	r0, sl
 800595e:	4659      	mov	r1, fp
 8005960:	f7fa fc94 	bl	800028c <__adddf3>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4640      	mov	r0, r8
 800596a:	4649      	mov	r1, r9
 800596c:	f7fb f8d4 	bl	8000b18 <__aeabi_dcmpgt>
 8005970:	2800      	cmp	r0, #0
 8005972:	d173      	bne.n	8005a5c <_dtoa_r+0x6c4>
 8005974:	4652      	mov	r2, sl
 8005976:	465b      	mov	r3, fp
 8005978:	4913      	ldr	r1, [pc, #76]	; (80059c8 <_dtoa_r+0x630>)
 800597a:	2000      	movs	r0, #0
 800597c:	f7fa fc84 	bl	8000288 <__aeabi_dsub>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	4640      	mov	r0, r8
 8005986:	4649      	mov	r1, r9
 8005988:	f7fb f8a8 	bl	8000adc <__aeabi_dcmplt>
 800598c:	2800      	cmp	r0, #0
 800598e:	f43f af35 	beq.w	80057fc <_dtoa_r+0x464>
 8005992:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005994:	1e6b      	subs	r3, r5, #1
 8005996:	930f      	str	r3, [sp, #60]	; 0x3c
 8005998:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800599c:	2b30      	cmp	r3, #48	; 0x30
 800599e:	d0f8      	beq.n	8005992 <_dtoa_r+0x5fa>
 80059a0:	9700      	str	r7, [sp, #0]
 80059a2:	e049      	b.n	8005a38 <_dtoa_r+0x6a0>
 80059a4:	4b05      	ldr	r3, [pc, #20]	; (80059bc <_dtoa_r+0x624>)
 80059a6:	f7fa fe27 	bl	80005f8 <__aeabi_dmul>
 80059aa:	4680      	mov	r8, r0
 80059ac:	4689      	mov	r9, r1
 80059ae:	e7bd      	b.n	800592c <_dtoa_r+0x594>
 80059b0:	08007910 	.word	0x08007910
 80059b4:	080078e8 	.word	0x080078e8
 80059b8:	3ff00000 	.word	0x3ff00000
 80059bc:	40240000 	.word	0x40240000
 80059c0:	401c0000 	.word	0x401c0000
 80059c4:	40140000 	.word	0x40140000
 80059c8:	3fe00000 	.word	0x3fe00000
 80059cc:	9d01      	ldr	r5, [sp, #4]
 80059ce:	4656      	mov	r6, sl
 80059d0:	465f      	mov	r7, fp
 80059d2:	4642      	mov	r2, r8
 80059d4:	464b      	mov	r3, r9
 80059d6:	4630      	mov	r0, r6
 80059d8:	4639      	mov	r1, r7
 80059da:	f7fa ff37 	bl	800084c <__aeabi_ddiv>
 80059de:	f7fb f8bb 	bl	8000b58 <__aeabi_d2iz>
 80059e2:	4682      	mov	sl, r0
 80059e4:	f7fa fd9e 	bl	8000524 <__aeabi_i2d>
 80059e8:	4642      	mov	r2, r8
 80059ea:	464b      	mov	r3, r9
 80059ec:	f7fa fe04 	bl	80005f8 <__aeabi_dmul>
 80059f0:	4602      	mov	r2, r0
 80059f2:	460b      	mov	r3, r1
 80059f4:	4630      	mov	r0, r6
 80059f6:	4639      	mov	r1, r7
 80059f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80059fc:	f7fa fc44 	bl	8000288 <__aeabi_dsub>
 8005a00:	f805 6b01 	strb.w	r6, [r5], #1
 8005a04:	9e01      	ldr	r6, [sp, #4]
 8005a06:	9f03      	ldr	r7, [sp, #12]
 8005a08:	1bae      	subs	r6, r5, r6
 8005a0a:	42b7      	cmp	r7, r6
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	d135      	bne.n	8005a7e <_dtoa_r+0x6e6>
 8005a12:	f7fa fc3b 	bl	800028c <__adddf3>
 8005a16:	4642      	mov	r2, r8
 8005a18:	464b      	mov	r3, r9
 8005a1a:	4606      	mov	r6, r0
 8005a1c:	460f      	mov	r7, r1
 8005a1e:	f7fb f87b 	bl	8000b18 <__aeabi_dcmpgt>
 8005a22:	b9d0      	cbnz	r0, 8005a5a <_dtoa_r+0x6c2>
 8005a24:	4642      	mov	r2, r8
 8005a26:	464b      	mov	r3, r9
 8005a28:	4630      	mov	r0, r6
 8005a2a:	4639      	mov	r1, r7
 8005a2c:	f7fb f84c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a30:	b110      	cbz	r0, 8005a38 <_dtoa_r+0x6a0>
 8005a32:	f01a 0f01 	tst.w	sl, #1
 8005a36:	d110      	bne.n	8005a5a <_dtoa_r+0x6c2>
 8005a38:	4620      	mov	r0, r4
 8005a3a:	ee18 1a10 	vmov	r1, s16
 8005a3e:	f000 faf3 	bl	8006028 <_Bfree>
 8005a42:	2300      	movs	r3, #0
 8005a44:	9800      	ldr	r0, [sp, #0]
 8005a46:	702b      	strb	r3, [r5, #0]
 8005a48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	6018      	str	r0, [r3, #0]
 8005a4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f43f acf1 	beq.w	8005438 <_dtoa_r+0xa0>
 8005a56:	601d      	str	r5, [r3, #0]
 8005a58:	e4ee      	b.n	8005438 <_dtoa_r+0xa0>
 8005a5a:	9f00      	ldr	r7, [sp, #0]
 8005a5c:	462b      	mov	r3, r5
 8005a5e:	461d      	mov	r5, r3
 8005a60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a64:	2a39      	cmp	r2, #57	; 0x39
 8005a66:	d106      	bne.n	8005a76 <_dtoa_r+0x6de>
 8005a68:	9a01      	ldr	r2, [sp, #4]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d1f7      	bne.n	8005a5e <_dtoa_r+0x6c6>
 8005a6e:	9901      	ldr	r1, [sp, #4]
 8005a70:	2230      	movs	r2, #48	; 0x30
 8005a72:	3701      	adds	r7, #1
 8005a74:	700a      	strb	r2, [r1, #0]
 8005a76:	781a      	ldrb	r2, [r3, #0]
 8005a78:	3201      	adds	r2, #1
 8005a7a:	701a      	strb	r2, [r3, #0]
 8005a7c:	e790      	b.n	80059a0 <_dtoa_r+0x608>
 8005a7e:	4ba6      	ldr	r3, [pc, #664]	; (8005d18 <_dtoa_r+0x980>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	f7fa fdb9 	bl	80005f8 <__aeabi_dmul>
 8005a86:	2200      	movs	r2, #0
 8005a88:	2300      	movs	r3, #0
 8005a8a:	4606      	mov	r6, r0
 8005a8c:	460f      	mov	r7, r1
 8005a8e:	f7fb f81b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a92:	2800      	cmp	r0, #0
 8005a94:	d09d      	beq.n	80059d2 <_dtoa_r+0x63a>
 8005a96:	e7cf      	b.n	8005a38 <_dtoa_r+0x6a0>
 8005a98:	9a08      	ldr	r2, [sp, #32]
 8005a9a:	2a00      	cmp	r2, #0
 8005a9c:	f000 80d7 	beq.w	8005c4e <_dtoa_r+0x8b6>
 8005aa0:	9a06      	ldr	r2, [sp, #24]
 8005aa2:	2a01      	cmp	r2, #1
 8005aa4:	f300 80ba 	bgt.w	8005c1c <_dtoa_r+0x884>
 8005aa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005aaa:	2a00      	cmp	r2, #0
 8005aac:	f000 80b2 	beq.w	8005c14 <_dtoa_r+0x87c>
 8005ab0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ab4:	9e07      	ldr	r6, [sp, #28]
 8005ab6:	9d04      	ldr	r5, [sp, #16]
 8005ab8:	9a04      	ldr	r2, [sp, #16]
 8005aba:	441a      	add	r2, r3
 8005abc:	9204      	str	r2, [sp, #16]
 8005abe:	9a05      	ldr	r2, [sp, #20]
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	441a      	add	r2, r3
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	9205      	str	r2, [sp, #20]
 8005ac8:	f000 fb66 	bl	8006198 <__i2b>
 8005acc:	4607      	mov	r7, r0
 8005ace:	2d00      	cmp	r5, #0
 8005ad0:	dd0c      	ble.n	8005aec <_dtoa_r+0x754>
 8005ad2:	9b05      	ldr	r3, [sp, #20]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	dd09      	ble.n	8005aec <_dtoa_r+0x754>
 8005ad8:	42ab      	cmp	r3, r5
 8005ada:	9a04      	ldr	r2, [sp, #16]
 8005adc:	bfa8      	it	ge
 8005ade:	462b      	movge	r3, r5
 8005ae0:	1ad2      	subs	r2, r2, r3
 8005ae2:	9204      	str	r2, [sp, #16]
 8005ae4:	9a05      	ldr	r2, [sp, #20]
 8005ae6:	1aed      	subs	r5, r5, r3
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	9305      	str	r3, [sp, #20]
 8005aec:	9b07      	ldr	r3, [sp, #28]
 8005aee:	b31b      	cbz	r3, 8005b38 <_dtoa_r+0x7a0>
 8005af0:	9b08      	ldr	r3, [sp, #32]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 80af 	beq.w	8005c56 <_dtoa_r+0x8be>
 8005af8:	2e00      	cmp	r6, #0
 8005afa:	dd13      	ble.n	8005b24 <_dtoa_r+0x78c>
 8005afc:	4639      	mov	r1, r7
 8005afe:	4632      	mov	r2, r6
 8005b00:	4620      	mov	r0, r4
 8005b02:	f000 fc09 	bl	8006318 <__pow5mult>
 8005b06:	ee18 2a10 	vmov	r2, s16
 8005b0a:	4601      	mov	r1, r0
 8005b0c:	4607      	mov	r7, r0
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f000 fb58 	bl	80061c4 <__multiply>
 8005b14:	ee18 1a10 	vmov	r1, s16
 8005b18:	4680      	mov	r8, r0
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	f000 fa84 	bl	8006028 <_Bfree>
 8005b20:	ee08 8a10 	vmov	s16, r8
 8005b24:	9b07      	ldr	r3, [sp, #28]
 8005b26:	1b9a      	subs	r2, r3, r6
 8005b28:	d006      	beq.n	8005b38 <_dtoa_r+0x7a0>
 8005b2a:	ee18 1a10 	vmov	r1, s16
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f000 fbf2 	bl	8006318 <__pow5mult>
 8005b34:	ee08 0a10 	vmov	s16, r0
 8005b38:	2101      	movs	r1, #1
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	f000 fb2c 	bl	8006198 <__i2b>
 8005b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	4606      	mov	r6, r0
 8005b46:	f340 8088 	ble.w	8005c5a <_dtoa_r+0x8c2>
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	4601      	mov	r1, r0
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f000 fbe2 	bl	8006318 <__pow5mult>
 8005b54:	9b06      	ldr	r3, [sp, #24]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	4606      	mov	r6, r0
 8005b5a:	f340 8081 	ble.w	8005c60 <_dtoa_r+0x8c8>
 8005b5e:	f04f 0800 	mov.w	r8, #0
 8005b62:	6933      	ldr	r3, [r6, #16]
 8005b64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005b68:	6918      	ldr	r0, [r3, #16]
 8005b6a:	f000 fac5 	bl	80060f8 <__hi0bits>
 8005b6e:	f1c0 0020 	rsb	r0, r0, #32
 8005b72:	9b05      	ldr	r3, [sp, #20]
 8005b74:	4418      	add	r0, r3
 8005b76:	f010 001f 	ands.w	r0, r0, #31
 8005b7a:	f000 8092 	beq.w	8005ca2 <_dtoa_r+0x90a>
 8005b7e:	f1c0 0320 	rsb	r3, r0, #32
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	f340 808a 	ble.w	8005c9c <_dtoa_r+0x904>
 8005b88:	f1c0 001c 	rsb	r0, r0, #28
 8005b8c:	9b04      	ldr	r3, [sp, #16]
 8005b8e:	4403      	add	r3, r0
 8005b90:	9304      	str	r3, [sp, #16]
 8005b92:	9b05      	ldr	r3, [sp, #20]
 8005b94:	4403      	add	r3, r0
 8005b96:	4405      	add	r5, r0
 8005b98:	9305      	str	r3, [sp, #20]
 8005b9a:	9b04      	ldr	r3, [sp, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	dd07      	ble.n	8005bb0 <_dtoa_r+0x818>
 8005ba0:	ee18 1a10 	vmov	r1, s16
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f000 fc10 	bl	80063cc <__lshift>
 8005bac:	ee08 0a10 	vmov	s16, r0
 8005bb0:	9b05      	ldr	r3, [sp, #20]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	dd05      	ble.n	8005bc2 <_dtoa_r+0x82a>
 8005bb6:	4631      	mov	r1, r6
 8005bb8:	461a      	mov	r2, r3
 8005bba:	4620      	mov	r0, r4
 8005bbc:	f000 fc06 	bl	80063cc <__lshift>
 8005bc0:	4606      	mov	r6, r0
 8005bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d06e      	beq.n	8005ca6 <_dtoa_r+0x90e>
 8005bc8:	ee18 0a10 	vmov	r0, s16
 8005bcc:	4631      	mov	r1, r6
 8005bce:	f000 fc6d 	bl	80064ac <__mcmp>
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	da67      	bge.n	8005ca6 <_dtoa_r+0x90e>
 8005bd6:	9b00      	ldr	r3, [sp, #0]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	ee18 1a10 	vmov	r1, s16
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	220a      	movs	r2, #10
 8005be2:	2300      	movs	r3, #0
 8005be4:	4620      	mov	r0, r4
 8005be6:	f000 fa41 	bl	800606c <__multadd>
 8005bea:	9b08      	ldr	r3, [sp, #32]
 8005bec:	ee08 0a10 	vmov	s16, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 81b1 	beq.w	8005f58 <_dtoa_r+0xbc0>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	4639      	mov	r1, r7
 8005bfa:	220a      	movs	r2, #10
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	f000 fa35 	bl	800606c <__multadd>
 8005c02:	9b02      	ldr	r3, [sp, #8]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	4607      	mov	r7, r0
 8005c08:	f300 808e 	bgt.w	8005d28 <_dtoa_r+0x990>
 8005c0c:	9b06      	ldr	r3, [sp, #24]
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	dc51      	bgt.n	8005cb6 <_dtoa_r+0x91e>
 8005c12:	e089      	b.n	8005d28 <_dtoa_r+0x990>
 8005c14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005c1a:	e74b      	b.n	8005ab4 <_dtoa_r+0x71c>
 8005c1c:	9b03      	ldr	r3, [sp, #12]
 8005c1e:	1e5e      	subs	r6, r3, #1
 8005c20:	9b07      	ldr	r3, [sp, #28]
 8005c22:	42b3      	cmp	r3, r6
 8005c24:	bfbf      	itttt	lt
 8005c26:	9b07      	ldrlt	r3, [sp, #28]
 8005c28:	9607      	strlt	r6, [sp, #28]
 8005c2a:	1af2      	sublt	r2, r6, r3
 8005c2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005c2e:	bfb6      	itet	lt
 8005c30:	189b      	addlt	r3, r3, r2
 8005c32:	1b9e      	subge	r6, r3, r6
 8005c34:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005c36:	9b03      	ldr	r3, [sp, #12]
 8005c38:	bfb8      	it	lt
 8005c3a:	2600      	movlt	r6, #0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	bfb7      	itett	lt
 8005c40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005c44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005c48:	1a9d      	sublt	r5, r3, r2
 8005c4a:	2300      	movlt	r3, #0
 8005c4c:	e734      	b.n	8005ab8 <_dtoa_r+0x720>
 8005c4e:	9e07      	ldr	r6, [sp, #28]
 8005c50:	9d04      	ldr	r5, [sp, #16]
 8005c52:	9f08      	ldr	r7, [sp, #32]
 8005c54:	e73b      	b.n	8005ace <_dtoa_r+0x736>
 8005c56:	9a07      	ldr	r2, [sp, #28]
 8005c58:	e767      	b.n	8005b2a <_dtoa_r+0x792>
 8005c5a:	9b06      	ldr	r3, [sp, #24]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	dc18      	bgt.n	8005c92 <_dtoa_r+0x8fa>
 8005c60:	f1ba 0f00 	cmp.w	sl, #0
 8005c64:	d115      	bne.n	8005c92 <_dtoa_r+0x8fa>
 8005c66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005c6a:	b993      	cbnz	r3, 8005c92 <_dtoa_r+0x8fa>
 8005c6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005c70:	0d1b      	lsrs	r3, r3, #20
 8005c72:	051b      	lsls	r3, r3, #20
 8005c74:	b183      	cbz	r3, 8005c98 <_dtoa_r+0x900>
 8005c76:	9b04      	ldr	r3, [sp, #16]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	9304      	str	r3, [sp, #16]
 8005c7c:	9b05      	ldr	r3, [sp, #20]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	9305      	str	r3, [sp, #20]
 8005c82:	f04f 0801 	mov.w	r8, #1
 8005c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f47f af6a 	bne.w	8005b62 <_dtoa_r+0x7ca>
 8005c8e:	2001      	movs	r0, #1
 8005c90:	e76f      	b.n	8005b72 <_dtoa_r+0x7da>
 8005c92:	f04f 0800 	mov.w	r8, #0
 8005c96:	e7f6      	b.n	8005c86 <_dtoa_r+0x8ee>
 8005c98:	4698      	mov	r8, r3
 8005c9a:	e7f4      	b.n	8005c86 <_dtoa_r+0x8ee>
 8005c9c:	f43f af7d 	beq.w	8005b9a <_dtoa_r+0x802>
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	301c      	adds	r0, #28
 8005ca4:	e772      	b.n	8005b8c <_dtoa_r+0x7f4>
 8005ca6:	9b03      	ldr	r3, [sp, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	dc37      	bgt.n	8005d1c <_dtoa_r+0x984>
 8005cac:	9b06      	ldr	r3, [sp, #24]
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	dd34      	ble.n	8005d1c <_dtoa_r+0x984>
 8005cb2:	9b03      	ldr	r3, [sp, #12]
 8005cb4:	9302      	str	r3, [sp, #8]
 8005cb6:	9b02      	ldr	r3, [sp, #8]
 8005cb8:	b96b      	cbnz	r3, 8005cd6 <_dtoa_r+0x93e>
 8005cba:	4631      	mov	r1, r6
 8005cbc:	2205      	movs	r2, #5
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	f000 f9d4 	bl	800606c <__multadd>
 8005cc4:	4601      	mov	r1, r0
 8005cc6:	4606      	mov	r6, r0
 8005cc8:	ee18 0a10 	vmov	r0, s16
 8005ccc:	f000 fbee 	bl	80064ac <__mcmp>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	f73f adbb 	bgt.w	800584c <_dtoa_r+0x4b4>
 8005cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cd8:	9d01      	ldr	r5, [sp, #4]
 8005cda:	43db      	mvns	r3, r3
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	f04f 0800 	mov.w	r8, #0
 8005ce2:	4631      	mov	r1, r6
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	f000 f99f 	bl	8006028 <_Bfree>
 8005cea:	2f00      	cmp	r7, #0
 8005cec:	f43f aea4 	beq.w	8005a38 <_dtoa_r+0x6a0>
 8005cf0:	f1b8 0f00 	cmp.w	r8, #0
 8005cf4:	d005      	beq.n	8005d02 <_dtoa_r+0x96a>
 8005cf6:	45b8      	cmp	r8, r7
 8005cf8:	d003      	beq.n	8005d02 <_dtoa_r+0x96a>
 8005cfa:	4641      	mov	r1, r8
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f000 f993 	bl	8006028 <_Bfree>
 8005d02:	4639      	mov	r1, r7
 8005d04:	4620      	mov	r0, r4
 8005d06:	f000 f98f 	bl	8006028 <_Bfree>
 8005d0a:	e695      	b.n	8005a38 <_dtoa_r+0x6a0>
 8005d0c:	2600      	movs	r6, #0
 8005d0e:	4637      	mov	r7, r6
 8005d10:	e7e1      	b.n	8005cd6 <_dtoa_r+0x93e>
 8005d12:	9700      	str	r7, [sp, #0]
 8005d14:	4637      	mov	r7, r6
 8005d16:	e599      	b.n	800584c <_dtoa_r+0x4b4>
 8005d18:	40240000 	.word	0x40240000
 8005d1c:	9b08      	ldr	r3, [sp, #32]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 80ca 	beq.w	8005eb8 <_dtoa_r+0xb20>
 8005d24:	9b03      	ldr	r3, [sp, #12]
 8005d26:	9302      	str	r3, [sp, #8]
 8005d28:	2d00      	cmp	r5, #0
 8005d2a:	dd05      	ble.n	8005d38 <_dtoa_r+0x9a0>
 8005d2c:	4639      	mov	r1, r7
 8005d2e:	462a      	mov	r2, r5
 8005d30:	4620      	mov	r0, r4
 8005d32:	f000 fb4b 	bl	80063cc <__lshift>
 8005d36:	4607      	mov	r7, r0
 8005d38:	f1b8 0f00 	cmp.w	r8, #0
 8005d3c:	d05b      	beq.n	8005df6 <_dtoa_r+0xa5e>
 8005d3e:	6879      	ldr	r1, [r7, #4]
 8005d40:	4620      	mov	r0, r4
 8005d42:	f000 f931 	bl	8005fa8 <_Balloc>
 8005d46:	4605      	mov	r5, r0
 8005d48:	b928      	cbnz	r0, 8005d56 <_dtoa_r+0x9be>
 8005d4a:	4b87      	ldr	r3, [pc, #540]	; (8005f68 <_dtoa_r+0xbd0>)
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005d52:	f7ff bb3b 	b.w	80053cc <_dtoa_r+0x34>
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	3202      	adds	r2, #2
 8005d5a:	0092      	lsls	r2, r2, #2
 8005d5c:	f107 010c 	add.w	r1, r7, #12
 8005d60:	300c      	adds	r0, #12
 8005d62:	f000 f913 	bl	8005f8c <memcpy>
 8005d66:	2201      	movs	r2, #1
 8005d68:	4629      	mov	r1, r5
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	f000 fb2e 	bl	80063cc <__lshift>
 8005d70:	9b01      	ldr	r3, [sp, #4]
 8005d72:	f103 0901 	add.w	r9, r3, #1
 8005d76:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	9305      	str	r3, [sp, #20]
 8005d7e:	f00a 0301 	and.w	r3, sl, #1
 8005d82:	46b8      	mov	r8, r7
 8005d84:	9304      	str	r3, [sp, #16]
 8005d86:	4607      	mov	r7, r0
 8005d88:	4631      	mov	r1, r6
 8005d8a:	ee18 0a10 	vmov	r0, s16
 8005d8e:	f7ff fa75 	bl	800527c <quorem>
 8005d92:	4641      	mov	r1, r8
 8005d94:	9002      	str	r0, [sp, #8]
 8005d96:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005d9a:	ee18 0a10 	vmov	r0, s16
 8005d9e:	f000 fb85 	bl	80064ac <__mcmp>
 8005da2:	463a      	mov	r2, r7
 8005da4:	9003      	str	r0, [sp, #12]
 8005da6:	4631      	mov	r1, r6
 8005da8:	4620      	mov	r0, r4
 8005daa:	f000 fb9b 	bl	80064e4 <__mdiff>
 8005dae:	68c2      	ldr	r2, [r0, #12]
 8005db0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8005db4:	4605      	mov	r5, r0
 8005db6:	bb02      	cbnz	r2, 8005dfa <_dtoa_r+0xa62>
 8005db8:	4601      	mov	r1, r0
 8005dba:	ee18 0a10 	vmov	r0, s16
 8005dbe:	f000 fb75 	bl	80064ac <__mcmp>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	9207      	str	r2, [sp, #28]
 8005dca:	f000 f92d 	bl	8006028 <_Bfree>
 8005dce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005dd2:	ea43 0102 	orr.w	r1, r3, r2
 8005dd6:	9b04      	ldr	r3, [sp, #16]
 8005dd8:	430b      	orrs	r3, r1
 8005dda:	464d      	mov	r5, r9
 8005ddc:	d10f      	bne.n	8005dfe <_dtoa_r+0xa66>
 8005dde:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005de2:	d02a      	beq.n	8005e3a <_dtoa_r+0xaa2>
 8005de4:	9b03      	ldr	r3, [sp, #12]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	dd02      	ble.n	8005df0 <_dtoa_r+0xa58>
 8005dea:	9b02      	ldr	r3, [sp, #8]
 8005dec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005df0:	f88b a000 	strb.w	sl, [fp]
 8005df4:	e775      	b.n	8005ce2 <_dtoa_r+0x94a>
 8005df6:	4638      	mov	r0, r7
 8005df8:	e7ba      	b.n	8005d70 <_dtoa_r+0x9d8>
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	e7e2      	b.n	8005dc4 <_dtoa_r+0xa2c>
 8005dfe:	9b03      	ldr	r3, [sp, #12]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	db04      	blt.n	8005e0e <_dtoa_r+0xa76>
 8005e04:	9906      	ldr	r1, [sp, #24]
 8005e06:	430b      	orrs	r3, r1
 8005e08:	9904      	ldr	r1, [sp, #16]
 8005e0a:	430b      	orrs	r3, r1
 8005e0c:	d122      	bne.n	8005e54 <_dtoa_r+0xabc>
 8005e0e:	2a00      	cmp	r2, #0
 8005e10:	ddee      	ble.n	8005df0 <_dtoa_r+0xa58>
 8005e12:	ee18 1a10 	vmov	r1, s16
 8005e16:	2201      	movs	r2, #1
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f000 fad7 	bl	80063cc <__lshift>
 8005e1e:	4631      	mov	r1, r6
 8005e20:	ee08 0a10 	vmov	s16, r0
 8005e24:	f000 fb42 	bl	80064ac <__mcmp>
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	dc03      	bgt.n	8005e34 <_dtoa_r+0xa9c>
 8005e2c:	d1e0      	bne.n	8005df0 <_dtoa_r+0xa58>
 8005e2e:	f01a 0f01 	tst.w	sl, #1
 8005e32:	d0dd      	beq.n	8005df0 <_dtoa_r+0xa58>
 8005e34:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005e38:	d1d7      	bne.n	8005dea <_dtoa_r+0xa52>
 8005e3a:	2339      	movs	r3, #57	; 0x39
 8005e3c:	f88b 3000 	strb.w	r3, [fp]
 8005e40:	462b      	mov	r3, r5
 8005e42:	461d      	mov	r5, r3
 8005e44:	3b01      	subs	r3, #1
 8005e46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005e4a:	2a39      	cmp	r2, #57	; 0x39
 8005e4c:	d071      	beq.n	8005f32 <_dtoa_r+0xb9a>
 8005e4e:	3201      	adds	r2, #1
 8005e50:	701a      	strb	r2, [r3, #0]
 8005e52:	e746      	b.n	8005ce2 <_dtoa_r+0x94a>
 8005e54:	2a00      	cmp	r2, #0
 8005e56:	dd07      	ble.n	8005e68 <_dtoa_r+0xad0>
 8005e58:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005e5c:	d0ed      	beq.n	8005e3a <_dtoa_r+0xaa2>
 8005e5e:	f10a 0301 	add.w	r3, sl, #1
 8005e62:	f88b 3000 	strb.w	r3, [fp]
 8005e66:	e73c      	b.n	8005ce2 <_dtoa_r+0x94a>
 8005e68:	9b05      	ldr	r3, [sp, #20]
 8005e6a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005e6e:	4599      	cmp	r9, r3
 8005e70:	d047      	beq.n	8005f02 <_dtoa_r+0xb6a>
 8005e72:	ee18 1a10 	vmov	r1, s16
 8005e76:	2300      	movs	r3, #0
 8005e78:	220a      	movs	r2, #10
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f000 f8f6 	bl	800606c <__multadd>
 8005e80:	45b8      	cmp	r8, r7
 8005e82:	ee08 0a10 	vmov	s16, r0
 8005e86:	f04f 0300 	mov.w	r3, #0
 8005e8a:	f04f 020a 	mov.w	r2, #10
 8005e8e:	4641      	mov	r1, r8
 8005e90:	4620      	mov	r0, r4
 8005e92:	d106      	bne.n	8005ea2 <_dtoa_r+0xb0a>
 8005e94:	f000 f8ea 	bl	800606c <__multadd>
 8005e98:	4680      	mov	r8, r0
 8005e9a:	4607      	mov	r7, r0
 8005e9c:	f109 0901 	add.w	r9, r9, #1
 8005ea0:	e772      	b.n	8005d88 <_dtoa_r+0x9f0>
 8005ea2:	f000 f8e3 	bl	800606c <__multadd>
 8005ea6:	4639      	mov	r1, r7
 8005ea8:	4680      	mov	r8, r0
 8005eaa:	2300      	movs	r3, #0
 8005eac:	220a      	movs	r2, #10
 8005eae:	4620      	mov	r0, r4
 8005eb0:	f000 f8dc 	bl	800606c <__multadd>
 8005eb4:	4607      	mov	r7, r0
 8005eb6:	e7f1      	b.n	8005e9c <_dtoa_r+0xb04>
 8005eb8:	9b03      	ldr	r3, [sp, #12]
 8005eba:	9302      	str	r3, [sp, #8]
 8005ebc:	9d01      	ldr	r5, [sp, #4]
 8005ebe:	ee18 0a10 	vmov	r0, s16
 8005ec2:	4631      	mov	r1, r6
 8005ec4:	f7ff f9da 	bl	800527c <quorem>
 8005ec8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005ecc:	9b01      	ldr	r3, [sp, #4]
 8005ece:	f805 ab01 	strb.w	sl, [r5], #1
 8005ed2:	1aea      	subs	r2, r5, r3
 8005ed4:	9b02      	ldr	r3, [sp, #8]
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	dd09      	ble.n	8005eee <_dtoa_r+0xb56>
 8005eda:	ee18 1a10 	vmov	r1, s16
 8005ede:	2300      	movs	r3, #0
 8005ee0:	220a      	movs	r2, #10
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f000 f8c2 	bl	800606c <__multadd>
 8005ee8:	ee08 0a10 	vmov	s16, r0
 8005eec:	e7e7      	b.n	8005ebe <_dtoa_r+0xb26>
 8005eee:	9b02      	ldr	r3, [sp, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	bfc8      	it	gt
 8005ef4:	461d      	movgt	r5, r3
 8005ef6:	9b01      	ldr	r3, [sp, #4]
 8005ef8:	bfd8      	it	le
 8005efa:	2501      	movle	r5, #1
 8005efc:	441d      	add	r5, r3
 8005efe:	f04f 0800 	mov.w	r8, #0
 8005f02:	ee18 1a10 	vmov	r1, s16
 8005f06:	2201      	movs	r2, #1
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f000 fa5f 	bl	80063cc <__lshift>
 8005f0e:	4631      	mov	r1, r6
 8005f10:	ee08 0a10 	vmov	s16, r0
 8005f14:	f000 faca 	bl	80064ac <__mcmp>
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	dc91      	bgt.n	8005e40 <_dtoa_r+0xaa8>
 8005f1c:	d102      	bne.n	8005f24 <_dtoa_r+0xb8c>
 8005f1e:	f01a 0f01 	tst.w	sl, #1
 8005f22:	d18d      	bne.n	8005e40 <_dtoa_r+0xaa8>
 8005f24:	462b      	mov	r3, r5
 8005f26:	461d      	mov	r5, r3
 8005f28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f2c:	2a30      	cmp	r2, #48	; 0x30
 8005f2e:	d0fa      	beq.n	8005f26 <_dtoa_r+0xb8e>
 8005f30:	e6d7      	b.n	8005ce2 <_dtoa_r+0x94a>
 8005f32:	9a01      	ldr	r2, [sp, #4]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d184      	bne.n	8005e42 <_dtoa_r+0xaaa>
 8005f38:	9b00      	ldr	r3, [sp, #0]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	2331      	movs	r3, #49	; 0x31
 8005f40:	7013      	strb	r3, [r2, #0]
 8005f42:	e6ce      	b.n	8005ce2 <_dtoa_r+0x94a>
 8005f44:	4b09      	ldr	r3, [pc, #36]	; (8005f6c <_dtoa_r+0xbd4>)
 8005f46:	f7ff ba95 	b.w	8005474 <_dtoa_r+0xdc>
 8005f4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f47f aa6e 	bne.w	800542e <_dtoa_r+0x96>
 8005f52:	4b07      	ldr	r3, [pc, #28]	; (8005f70 <_dtoa_r+0xbd8>)
 8005f54:	f7ff ba8e 	b.w	8005474 <_dtoa_r+0xdc>
 8005f58:	9b02      	ldr	r3, [sp, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	dcae      	bgt.n	8005ebc <_dtoa_r+0xb24>
 8005f5e:	9b06      	ldr	r3, [sp, #24]
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	f73f aea8 	bgt.w	8005cb6 <_dtoa_r+0x91e>
 8005f66:	e7a9      	b.n	8005ebc <_dtoa_r+0xb24>
 8005f68:	08007877 	.word	0x08007877
 8005f6c:	080077d4 	.word	0x080077d4
 8005f70:	080077f8 	.word	0x080077f8

08005f74 <_localeconv_r>:
 8005f74:	4800      	ldr	r0, [pc, #0]	; (8005f78 <_localeconv_r+0x4>)
 8005f76:	4770      	bx	lr
 8005f78:	20000168 	.word	0x20000168

08005f7c <malloc>:
 8005f7c:	4b02      	ldr	r3, [pc, #8]	; (8005f88 <malloc+0xc>)
 8005f7e:	4601      	mov	r1, r0
 8005f80:	6818      	ldr	r0, [r3, #0]
 8005f82:	f000 bc17 	b.w	80067b4 <_malloc_r>
 8005f86:	bf00      	nop
 8005f88:	20000014 	.word	0x20000014

08005f8c <memcpy>:
 8005f8c:	440a      	add	r2, r1
 8005f8e:	4291      	cmp	r1, r2
 8005f90:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005f94:	d100      	bne.n	8005f98 <memcpy+0xc>
 8005f96:	4770      	bx	lr
 8005f98:	b510      	push	{r4, lr}
 8005f9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fa2:	4291      	cmp	r1, r2
 8005fa4:	d1f9      	bne.n	8005f9a <memcpy+0xe>
 8005fa6:	bd10      	pop	{r4, pc}

08005fa8 <_Balloc>:
 8005fa8:	b570      	push	{r4, r5, r6, lr}
 8005faa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005fac:	4604      	mov	r4, r0
 8005fae:	460d      	mov	r5, r1
 8005fb0:	b976      	cbnz	r6, 8005fd0 <_Balloc+0x28>
 8005fb2:	2010      	movs	r0, #16
 8005fb4:	f7ff ffe2 	bl	8005f7c <malloc>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	6260      	str	r0, [r4, #36]	; 0x24
 8005fbc:	b920      	cbnz	r0, 8005fc8 <_Balloc+0x20>
 8005fbe:	4b18      	ldr	r3, [pc, #96]	; (8006020 <_Balloc+0x78>)
 8005fc0:	4818      	ldr	r0, [pc, #96]	; (8006024 <_Balloc+0x7c>)
 8005fc2:	2166      	movs	r1, #102	; 0x66
 8005fc4:	f000 fdd6 	bl	8006b74 <__assert_func>
 8005fc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fcc:	6006      	str	r6, [r0, #0]
 8005fce:	60c6      	str	r6, [r0, #12]
 8005fd0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005fd2:	68f3      	ldr	r3, [r6, #12]
 8005fd4:	b183      	cbz	r3, 8005ff8 <_Balloc+0x50>
 8005fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005fde:	b9b8      	cbnz	r0, 8006010 <_Balloc+0x68>
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	fa01 f605 	lsl.w	r6, r1, r5
 8005fe6:	1d72      	adds	r2, r6, #5
 8005fe8:	0092      	lsls	r2, r2, #2
 8005fea:	4620      	mov	r0, r4
 8005fec:	f000 fb60 	bl	80066b0 <_calloc_r>
 8005ff0:	b160      	cbz	r0, 800600c <_Balloc+0x64>
 8005ff2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ff6:	e00e      	b.n	8006016 <_Balloc+0x6e>
 8005ff8:	2221      	movs	r2, #33	; 0x21
 8005ffa:	2104      	movs	r1, #4
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f000 fb57 	bl	80066b0 <_calloc_r>
 8006002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006004:	60f0      	str	r0, [r6, #12]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1e4      	bne.n	8005fd6 <_Balloc+0x2e>
 800600c:	2000      	movs	r0, #0
 800600e:	bd70      	pop	{r4, r5, r6, pc}
 8006010:	6802      	ldr	r2, [r0, #0]
 8006012:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006016:	2300      	movs	r3, #0
 8006018:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800601c:	e7f7      	b.n	800600e <_Balloc+0x66>
 800601e:	bf00      	nop
 8006020:	08007805 	.word	0x08007805
 8006024:	08007888 	.word	0x08007888

08006028 <_Bfree>:
 8006028:	b570      	push	{r4, r5, r6, lr}
 800602a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800602c:	4605      	mov	r5, r0
 800602e:	460c      	mov	r4, r1
 8006030:	b976      	cbnz	r6, 8006050 <_Bfree+0x28>
 8006032:	2010      	movs	r0, #16
 8006034:	f7ff ffa2 	bl	8005f7c <malloc>
 8006038:	4602      	mov	r2, r0
 800603a:	6268      	str	r0, [r5, #36]	; 0x24
 800603c:	b920      	cbnz	r0, 8006048 <_Bfree+0x20>
 800603e:	4b09      	ldr	r3, [pc, #36]	; (8006064 <_Bfree+0x3c>)
 8006040:	4809      	ldr	r0, [pc, #36]	; (8006068 <_Bfree+0x40>)
 8006042:	218a      	movs	r1, #138	; 0x8a
 8006044:	f000 fd96 	bl	8006b74 <__assert_func>
 8006048:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800604c:	6006      	str	r6, [r0, #0]
 800604e:	60c6      	str	r6, [r0, #12]
 8006050:	b13c      	cbz	r4, 8006062 <_Bfree+0x3a>
 8006052:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006054:	6862      	ldr	r2, [r4, #4]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800605c:	6021      	str	r1, [r4, #0]
 800605e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006062:	bd70      	pop	{r4, r5, r6, pc}
 8006064:	08007805 	.word	0x08007805
 8006068:	08007888 	.word	0x08007888

0800606c <__multadd>:
 800606c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006070:	690d      	ldr	r5, [r1, #16]
 8006072:	4607      	mov	r7, r0
 8006074:	460c      	mov	r4, r1
 8006076:	461e      	mov	r6, r3
 8006078:	f101 0c14 	add.w	ip, r1, #20
 800607c:	2000      	movs	r0, #0
 800607e:	f8dc 3000 	ldr.w	r3, [ip]
 8006082:	b299      	uxth	r1, r3
 8006084:	fb02 6101 	mla	r1, r2, r1, r6
 8006088:	0c1e      	lsrs	r6, r3, #16
 800608a:	0c0b      	lsrs	r3, r1, #16
 800608c:	fb02 3306 	mla	r3, r2, r6, r3
 8006090:	b289      	uxth	r1, r1
 8006092:	3001      	adds	r0, #1
 8006094:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006098:	4285      	cmp	r5, r0
 800609a:	f84c 1b04 	str.w	r1, [ip], #4
 800609e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80060a2:	dcec      	bgt.n	800607e <__multadd+0x12>
 80060a4:	b30e      	cbz	r6, 80060ea <__multadd+0x7e>
 80060a6:	68a3      	ldr	r3, [r4, #8]
 80060a8:	42ab      	cmp	r3, r5
 80060aa:	dc19      	bgt.n	80060e0 <__multadd+0x74>
 80060ac:	6861      	ldr	r1, [r4, #4]
 80060ae:	4638      	mov	r0, r7
 80060b0:	3101      	adds	r1, #1
 80060b2:	f7ff ff79 	bl	8005fa8 <_Balloc>
 80060b6:	4680      	mov	r8, r0
 80060b8:	b928      	cbnz	r0, 80060c6 <__multadd+0x5a>
 80060ba:	4602      	mov	r2, r0
 80060bc:	4b0c      	ldr	r3, [pc, #48]	; (80060f0 <__multadd+0x84>)
 80060be:	480d      	ldr	r0, [pc, #52]	; (80060f4 <__multadd+0x88>)
 80060c0:	21b5      	movs	r1, #181	; 0xb5
 80060c2:	f000 fd57 	bl	8006b74 <__assert_func>
 80060c6:	6922      	ldr	r2, [r4, #16]
 80060c8:	3202      	adds	r2, #2
 80060ca:	f104 010c 	add.w	r1, r4, #12
 80060ce:	0092      	lsls	r2, r2, #2
 80060d0:	300c      	adds	r0, #12
 80060d2:	f7ff ff5b 	bl	8005f8c <memcpy>
 80060d6:	4621      	mov	r1, r4
 80060d8:	4638      	mov	r0, r7
 80060da:	f7ff ffa5 	bl	8006028 <_Bfree>
 80060de:	4644      	mov	r4, r8
 80060e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80060e4:	3501      	adds	r5, #1
 80060e6:	615e      	str	r6, [r3, #20]
 80060e8:	6125      	str	r5, [r4, #16]
 80060ea:	4620      	mov	r0, r4
 80060ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060f0:	08007877 	.word	0x08007877
 80060f4:	08007888 	.word	0x08007888

080060f8 <__hi0bits>:
 80060f8:	0c03      	lsrs	r3, r0, #16
 80060fa:	041b      	lsls	r3, r3, #16
 80060fc:	b9d3      	cbnz	r3, 8006134 <__hi0bits+0x3c>
 80060fe:	0400      	lsls	r0, r0, #16
 8006100:	2310      	movs	r3, #16
 8006102:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006106:	bf04      	itt	eq
 8006108:	0200      	lsleq	r0, r0, #8
 800610a:	3308      	addeq	r3, #8
 800610c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006110:	bf04      	itt	eq
 8006112:	0100      	lsleq	r0, r0, #4
 8006114:	3304      	addeq	r3, #4
 8006116:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800611a:	bf04      	itt	eq
 800611c:	0080      	lsleq	r0, r0, #2
 800611e:	3302      	addeq	r3, #2
 8006120:	2800      	cmp	r0, #0
 8006122:	db05      	blt.n	8006130 <__hi0bits+0x38>
 8006124:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006128:	f103 0301 	add.w	r3, r3, #1
 800612c:	bf08      	it	eq
 800612e:	2320      	moveq	r3, #32
 8006130:	4618      	mov	r0, r3
 8006132:	4770      	bx	lr
 8006134:	2300      	movs	r3, #0
 8006136:	e7e4      	b.n	8006102 <__hi0bits+0xa>

08006138 <__lo0bits>:
 8006138:	6803      	ldr	r3, [r0, #0]
 800613a:	f013 0207 	ands.w	r2, r3, #7
 800613e:	4601      	mov	r1, r0
 8006140:	d00b      	beq.n	800615a <__lo0bits+0x22>
 8006142:	07da      	lsls	r2, r3, #31
 8006144:	d423      	bmi.n	800618e <__lo0bits+0x56>
 8006146:	0798      	lsls	r0, r3, #30
 8006148:	bf49      	itett	mi
 800614a:	085b      	lsrmi	r3, r3, #1
 800614c:	089b      	lsrpl	r3, r3, #2
 800614e:	2001      	movmi	r0, #1
 8006150:	600b      	strmi	r3, [r1, #0]
 8006152:	bf5c      	itt	pl
 8006154:	600b      	strpl	r3, [r1, #0]
 8006156:	2002      	movpl	r0, #2
 8006158:	4770      	bx	lr
 800615a:	b298      	uxth	r0, r3
 800615c:	b9a8      	cbnz	r0, 800618a <__lo0bits+0x52>
 800615e:	0c1b      	lsrs	r3, r3, #16
 8006160:	2010      	movs	r0, #16
 8006162:	b2da      	uxtb	r2, r3
 8006164:	b90a      	cbnz	r2, 800616a <__lo0bits+0x32>
 8006166:	3008      	adds	r0, #8
 8006168:	0a1b      	lsrs	r3, r3, #8
 800616a:	071a      	lsls	r2, r3, #28
 800616c:	bf04      	itt	eq
 800616e:	091b      	lsreq	r3, r3, #4
 8006170:	3004      	addeq	r0, #4
 8006172:	079a      	lsls	r2, r3, #30
 8006174:	bf04      	itt	eq
 8006176:	089b      	lsreq	r3, r3, #2
 8006178:	3002      	addeq	r0, #2
 800617a:	07da      	lsls	r2, r3, #31
 800617c:	d403      	bmi.n	8006186 <__lo0bits+0x4e>
 800617e:	085b      	lsrs	r3, r3, #1
 8006180:	f100 0001 	add.w	r0, r0, #1
 8006184:	d005      	beq.n	8006192 <__lo0bits+0x5a>
 8006186:	600b      	str	r3, [r1, #0]
 8006188:	4770      	bx	lr
 800618a:	4610      	mov	r0, r2
 800618c:	e7e9      	b.n	8006162 <__lo0bits+0x2a>
 800618e:	2000      	movs	r0, #0
 8006190:	4770      	bx	lr
 8006192:	2020      	movs	r0, #32
 8006194:	4770      	bx	lr
	...

08006198 <__i2b>:
 8006198:	b510      	push	{r4, lr}
 800619a:	460c      	mov	r4, r1
 800619c:	2101      	movs	r1, #1
 800619e:	f7ff ff03 	bl	8005fa8 <_Balloc>
 80061a2:	4602      	mov	r2, r0
 80061a4:	b928      	cbnz	r0, 80061b2 <__i2b+0x1a>
 80061a6:	4b05      	ldr	r3, [pc, #20]	; (80061bc <__i2b+0x24>)
 80061a8:	4805      	ldr	r0, [pc, #20]	; (80061c0 <__i2b+0x28>)
 80061aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80061ae:	f000 fce1 	bl	8006b74 <__assert_func>
 80061b2:	2301      	movs	r3, #1
 80061b4:	6144      	str	r4, [r0, #20]
 80061b6:	6103      	str	r3, [r0, #16]
 80061b8:	bd10      	pop	{r4, pc}
 80061ba:	bf00      	nop
 80061bc:	08007877 	.word	0x08007877
 80061c0:	08007888 	.word	0x08007888

080061c4 <__multiply>:
 80061c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c8:	4691      	mov	r9, r2
 80061ca:	690a      	ldr	r2, [r1, #16]
 80061cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	bfb8      	it	lt
 80061d4:	460b      	movlt	r3, r1
 80061d6:	460c      	mov	r4, r1
 80061d8:	bfbc      	itt	lt
 80061da:	464c      	movlt	r4, r9
 80061dc:	4699      	movlt	r9, r3
 80061de:	6927      	ldr	r7, [r4, #16]
 80061e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80061e4:	68a3      	ldr	r3, [r4, #8]
 80061e6:	6861      	ldr	r1, [r4, #4]
 80061e8:	eb07 060a 	add.w	r6, r7, sl
 80061ec:	42b3      	cmp	r3, r6
 80061ee:	b085      	sub	sp, #20
 80061f0:	bfb8      	it	lt
 80061f2:	3101      	addlt	r1, #1
 80061f4:	f7ff fed8 	bl	8005fa8 <_Balloc>
 80061f8:	b930      	cbnz	r0, 8006208 <__multiply+0x44>
 80061fa:	4602      	mov	r2, r0
 80061fc:	4b44      	ldr	r3, [pc, #272]	; (8006310 <__multiply+0x14c>)
 80061fe:	4845      	ldr	r0, [pc, #276]	; (8006314 <__multiply+0x150>)
 8006200:	f240 115d 	movw	r1, #349	; 0x15d
 8006204:	f000 fcb6 	bl	8006b74 <__assert_func>
 8006208:	f100 0514 	add.w	r5, r0, #20
 800620c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006210:	462b      	mov	r3, r5
 8006212:	2200      	movs	r2, #0
 8006214:	4543      	cmp	r3, r8
 8006216:	d321      	bcc.n	800625c <__multiply+0x98>
 8006218:	f104 0314 	add.w	r3, r4, #20
 800621c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006220:	f109 0314 	add.w	r3, r9, #20
 8006224:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006228:	9202      	str	r2, [sp, #8]
 800622a:	1b3a      	subs	r2, r7, r4
 800622c:	3a15      	subs	r2, #21
 800622e:	f022 0203 	bic.w	r2, r2, #3
 8006232:	3204      	adds	r2, #4
 8006234:	f104 0115 	add.w	r1, r4, #21
 8006238:	428f      	cmp	r7, r1
 800623a:	bf38      	it	cc
 800623c:	2204      	movcc	r2, #4
 800623e:	9201      	str	r2, [sp, #4]
 8006240:	9a02      	ldr	r2, [sp, #8]
 8006242:	9303      	str	r3, [sp, #12]
 8006244:	429a      	cmp	r2, r3
 8006246:	d80c      	bhi.n	8006262 <__multiply+0x9e>
 8006248:	2e00      	cmp	r6, #0
 800624a:	dd03      	ble.n	8006254 <__multiply+0x90>
 800624c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006250:	2b00      	cmp	r3, #0
 8006252:	d05a      	beq.n	800630a <__multiply+0x146>
 8006254:	6106      	str	r6, [r0, #16]
 8006256:	b005      	add	sp, #20
 8006258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800625c:	f843 2b04 	str.w	r2, [r3], #4
 8006260:	e7d8      	b.n	8006214 <__multiply+0x50>
 8006262:	f8b3 a000 	ldrh.w	sl, [r3]
 8006266:	f1ba 0f00 	cmp.w	sl, #0
 800626a:	d024      	beq.n	80062b6 <__multiply+0xf2>
 800626c:	f104 0e14 	add.w	lr, r4, #20
 8006270:	46a9      	mov	r9, r5
 8006272:	f04f 0c00 	mov.w	ip, #0
 8006276:	f85e 2b04 	ldr.w	r2, [lr], #4
 800627a:	f8d9 1000 	ldr.w	r1, [r9]
 800627e:	fa1f fb82 	uxth.w	fp, r2
 8006282:	b289      	uxth	r1, r1
 8006284:	fb0a 110b 	mla	r1, sl, fp, r1
 8006288:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800628c:	f8d9 2000 	ldr.w	r2, [r9]
 8006290:	4461      	add	r1, ip
 8006292:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006296:	fb0a c20b 	mla	r2, sl, fp, ip
 800629a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800629e:	b289      	uxth	r1, r1
 80062a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80062a4:	4577      	cmp	r7, lr
 80062a6:	f849 1b04 	str.w	r1, [r9], #4
 80062aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80062ae:	d8e2      	bhi.n	8006276 <__multiply+0xb2>
 80062b0:	9a01      	ldr	r2, [sp, #4]
 80062b2:	f845 c002 	str.w	ip, [r5, r2]
 80062b6:	9a03      	ldr	r2, [sp, #12]
 80062b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80062bc:	3304      	adds	r3, #4
 80062be:	f1b9 0f00 	cmp.w	r9, #0
 80062c2:	d020      	beq.n	8006306 <__multiply+0x142>
 80062c4:	6829      	ldr	r1, [r5, #0]
 80062c6:	f104 0c14 	add.w	ip, r4, #20
 80062ca:	46ae      	mov	lr, r5
 80062cc:	f04f 0a00 	mov.w	sl, #0
 80062d0:	f8bc b000 	ldrh.w	fp, [ip]
 80062d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80062d8:	fb09 220b 	mla	r2, r9, fp, r2
 80062dc:	4492      	add	sl, r2
 80062de:	b289      	uxth	r1, r1
 80062e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80062e4:	f84e 1b04 	str.w	r1, [lr], #4
 80062e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80062ec:	f8be 1000 	ldrh.w	r1, [lr]
 80062f0:	0c12      	lsrs	r2, r2, #16
 80062f2:	fb09 1102 	mla	r1, r9, r2, r1
 80062f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80062fa:	4567      	cmp	r7, ip
 80062fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006300:	d8e6      	bhi.n	80062d0 <__multiply+0x10c>
 8006302:	9a01      	ldr	r2, [sp, #4]
 8006304:	50a9      	str	r1, [r5, r2]
 8006306:	3504      	adds	r5, #4
 8006308:	e79a      	b.n	8006240 <__multiply+0x7c>
 800630a:	3e01      	subs	r6, #1
 800630c:	e79c      	b.n	8006248 <__multiply+0x84>
 800630e:	bf00      	nop
 8006310:	08007877 	.word	0x08007877
 8006314:	08007888 	.word	0x08007888

08006318 <__pow5mult>:
 8006318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800631c:	4615      	mov	r5, r2
 800631e:	f012 0203 	ands.w	r2, r2, #3
 8006322:	4606      	mov	r6, r0
 8006324:	460f      	mov	r7, r1
 8006326:	d007      	beq.n	8006338 <__pow5mult+0x20>
 8006328:	4c25      	ldr	r4, [pc, #148]	; (80063c0 <__pow5mult+0xa8>)
 800632a:	3a01      	subs	r2, #1
 800632c:	2300      	movs	r3, #0
 800632e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006332:	f7ff fe9b 	bl	800606c <__multadd>
 8006336:	4607      	mov	r7, r0
 8006338:	10ad      	asrs	r5, r5, #2
 800633a:	d03d      	beq.n	80063b8 <__pow5mult+0xa0>
 800633c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800633e:	b97c      	cbnz	r4, 8006360 <__pow5mult+0x48>
 8006340:	2010      	movs	r0, #16
 8006342:	f7ff fe1b 	bl	8005f7c <malloc>
 8006346:	4602      	mov	r2, r0
 8006348:	6270      	str	r0, [r6, #36]	; 0x24
 800634a:	b928      	cbnz	r0, 8006358 <__pow5mult+0x40>
 800634c:	4b1d      	ldr	r3, [pc, #116]	; (80063c4 <__pow5mult+0xac>)
 800634e:	481e      	ldr	r0, [pc, #120]	; (80063c8 <__pow5mult+0xb0>)
 8006350:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006354:	f000 fc0e 	bl	8006b74 <__assert_func>
 8006358:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800635c:	6004      	str	r4, [r0, #0]
 800635e:	60c4      	str	r4, [r0, #12]
 8006360:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006364:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006368:	b94c      	cbnz	r4, 800637e <__pow5mult+0x66>
 800636a:	f240 2171 	movw	r1, #625	; 0x271
 800636e:	4630      	mov	r0, r6
 8006370:	f7ff ff12 	bl	8006198 <__i2b>
 8006374:	2300      	movs	r3, #0
 8006376:	f8c8 0008 	str.w	r0, [r8, #8]
 800637a:	4604      	mov	r4, r0
 800637c:	6003      	str	r3, [r0, #0]
 800637e:	f04f 0900 	mov.w	r9, #0
 8006382:	07eb      	lsls	r3, r5, #31
 8006384:	d50a      	bpl.n	800639c <__pow5mult+0x84>
 8006386:	4639      	mov	r1, r7
 8006388:	4622      	mov	r2, r4
 800638a:	4630      	mov	r0, r6
 800638c:	f7ff ff1a 	bl	80061c4 <__multiply>
 8006390:	4639      	mov	r1, r7
 8006392:	4680      	mov	r8, r0
 8006394:	4630      	mov	r0, r6
 8006396:	f7ff fe47 	bl	8006028 <_Bfree>
 800639a:	4647      	mov	r7, r8
 800639c:	106d      	asrs	r5, r5, #1
 800639e:	d00b      	beq.n	80063b8 <__pow5mult+0xa0>
 80063a0:	6820      	ldr	r0, [r4, #0]
 80063a2:	b938      	cbnz	r0, 80063b4 <__pow5mult+0x9c>
 80063a4:	4622      	mov	r2, r4
 80063a6:	4621      	mov	r1, r4
 80063a8:	4630      	mov	r0, r6
 80063aa:	f7ff ff0b 	bl	80061c4 <__multiply>
 80063ae:	6020      	str	r0, [r4, #0]
 80063b0:	f8c0 9000 	str.w	r9, [r0]
 80063b4:	4604      	mov	r4, r0
 80063b6:	e7e4      	b.n	8006382 <__pow5mult+0x6a>
 80063b8:	4638      	mov	r0, r7
 80063ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063be:	bf00      	nop
 80063c0:	080079d8 	.word	0x080079d8
 80063c4:	08007805 	.word	0x08007805
 80063c8:	08007888 	.word	0x08007888

080063cc <__lshift>:
 80063cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063d0:	460c      	mov	r4, r1
 80063d2:	6849      	ldr	r1, [r1, #4]
 80063d4:	6923      	ldr	r3, [r4, #16]
 80063d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80063da:	68a3      	ldr	r3, [r4, #8]
 80063dc:	4607      	mov	r7, r0
 80063de:	4691      	mov	r9, r2
 80063e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80063e4:	f108 0601 	add.w	r6, r8, #1
 80063e8:	42b3      	cmp	r3, r6
 80063ea:	db0b      	blt.n	8006404 <__lshift+0x38>
 80063ec:	4638      	mov	r0, r7
 80063ee:	f7ff fddb 	bl	8005fa8 <_Balloc>
 80063f2:	4605      	mov	r5, r0
 80063f4:	b948      	cbnz	r0, 800640a <__lshift+0x3e>
 80063f6:	4602      	mov	r2, r0
 80063f8:	4b2a      	ldr	r3, [pc, #168]	; (80064a4 <__lshift+0xd8>)
 80063fa:	482b      	ldr	r0, [pc, #172]	; (80064a8 <__lshift+0xdc>)
 80063fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006400:	f000 fbb8 	bl	8006b74 <__assert_func>
 8006404:	3101      	adds	r1, #1
 8006406:	005b      	lsls	r3, r3, #1
 8006408:	e7ee      	b.n	80063e8 <__lshift+0x1c>
 800640a:	2300      	movs	r3, #0
 800640c:	f100 0114 	add.w	r1, r0, #20
 8006410:	f100 0210 	add.w	r2, r0, #16
 8006414:	4618      	mov	r0, r3
 8006416:	4553      	cmp	r3, sl
 8006418:	db37      	blt.n	800648a <__lshift+0xbe>
 800641a:	6920      	ldr	r0, [r4, #16]
 800641c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006420:	f104 0314 	add.w	r3, r4, #20
 8006424:	f019 091f 	ands.w	r9, r9, #31
 8006428:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800642c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006430:	d02f      	beq.n	8006492 <__lshift+0xc6>
 8006432:	f1c9 0e20 	rsb	lr, r9, #32
 8006436:	468a      	mov	sl, r1
 8006438:	f04f 0c00 	mov.w	ip, #0
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	fa02 f209 	lsl.w	r2, r2, r9
 8006442:	ea42 020c 	orr.w	r2, r2, ip
 8006446:	f84a 2b04 	str.w	r2, [sl], #4
 800644a:	f853 2b04 	ldr.w	r2, [r3], #4
 800644e:	4298      	cmp	r0, r3
 8006450:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006454:	d8f2      	bhi.n	800643c <__lshift+0x70>
 8006456:	1b03      	subs	r3, r0, r4
 8006458:	3b15      	subs	r3, #21
 800645a:	f023 0303 	bic.w	r3, r3, #3
 800645e:	3304      	adds	r3, #4
 8006460:	f104 0215 	add.w	r2, r4, #21
 8006464:	4290      	cmp	r0, r2
 8006466:	bf38      	it	cc
 8006468:	2304      	movcc	r3, #4
 800646a:	f841 c003 	str.w	ip, [r1, r3]
 800646e:	f1bc 0f00 	cmp.w	ip, #0
 8006472:	d001      	beq.n	8006478 <__lshift+0xac>
 8006474:	f108 0602 	add.w	r6, r8, #2
 8006478:	3e01      	subs	r6, #1
 800647a:	4638      	mov	r0, r7
 800647c:	612e      	str	r6, [r5, #16]
 800647e:	4621      	mov	r1, r4
 8006480:	f7ff fdd2 	bl	8006028 <_Bfree>
 8006484:	4628      	mov	r0, r5
 8006486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800648a:	f842 0f04 	str.w	r0, [r2, #4]!
 800648e:	3301      	adds	r3, #1
 8006490:	e7c1      	b.n	8006416 <__lshift+0x4a>
 8006492:	3904      	subs	r1, #4
 8006494:	f853 2b04 	ldr.w	r2, [r3], #4
 8006498:	f841 2f04 	str.w	r2, [r1, #4]!
 800649c:	4298      	cmp	r0, r3
 800649e:	d8f9      	bhi.n	8006494 <__lshift+0xc8>
 80064a0:	e7ea      	b.n	8006478 <__lshift+0xac>
 80064a2:	bf00      	nop
 80064a4:	08007877 	.word	0x08007877
 80064a8:	08007888 	.word	0x08007888

080064ac <__mcmp>:
 80064ac:	b530      	push	{r4, r5, lr}
 80064ae:	6902      	ldr	r2, [r0, #16]
 80064b0:	690c      	ldr	r4, [r1, #16]
 80064b2:	1b12      	subs	r2, r2, r4
 80064b4:	d10e      	bne.n	80064d4 <__mcmp+0x28>
 80064b6:	f100 0314 	add.w	r3, r0, #20
 80064ba:	3114      	adds	r1, #20
 80064bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80064c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80064c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80064c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80064cc:	42a5      	cmp	r5, r4
 80064ce:	d003      	beq.n	80064d8 <__mcmp+0x2c>
 80064d0:	d305      	bcc.n	80064de <__mcmp+0x32>
 80064d2:	2201      	movs	r2, #1
 80064d4:	4610      	mov	r0, r2
 80064d6:	bd30      	pop	{r4, r5, pc}
 80064d8:	4283      	cmp	r3, r0
 80064da:	d3f3      	bcc.n	80064c4 <__mcmp+0x18>
 80064dc:	e7fa      	b.n	80064d4 <__mcmp+0x28>
 80064de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064e2:	e7f7      	b.n	80064d4 <__mcmp+0x28>

080064e4 <__mdiff>:
 80064e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e8:	460c      	mov	r4, r1
 80064ea:	4606      	mov	r6, r0
 80064ec:	4611      	mov	r1, r2
 80064ee:	4620      	mov	r0, r4
 80064f0:	4690      	mov	r8, r2
 80064f2:	f7ff ffdb 	bl	80064ac <__mcmp>
 80064f6:	1e05      	subs	r5, r0, #0
 80064f8:	d110      	bne.n	800651c <__mdiff+0x38>
 80064fa:	4629      	mov	r1, r5
 80064fc:	4630      	mov	r0, r6
 80064fe:	f7ff fd53 	bl	8005fa8 <_Balloc>
 8006502:	b930      	cbnz	r0, 8006512 <__mdiff+0x2e>
 8006504:	4b3a      	ldr	r3, [pc, #232]	; (80065f0 <__mdiff+0x10c>)
 8006506:	4602      	mov	r2, r0
 8006508:	f240 2132 	movw	r1, #562	; 0x232
 800650c:	4839      	ldr	r0, [pc, #228]	; (80065f4 <__mdiff+0x110>)
 800650e:	f000 fb31 	bl	8006b74 <__assert_func>
 8006512:	2301      	movs	r3, #1
 8006514:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006518:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800651c:	bfa4      	itt	ge
 800651e:	4643      	movge	r3, r8
 8006520:	46a0      	movge	r8, r4
 8006522:	4630      	mov	r0, r6
 8006524:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006528:	bfa6      	itte	ge
 800652a:	461c      	movge	r4, r3
 800652c:	2500      	movge	r5, #0
 800652e:	2501      	movlt	r5, #1
 8006530:	f7ff fd3a 	bl	8005fa8 <_Balloc>
 8006534:	b920      	cbnz	r0, 8006540 <__mdiff+0x5c>
 8006536:	4b2e      	ldr	r3, [pc, #184]	; (80065f0 <__mdiff+0x10c>)
 8006538:	4602      	mov	r2, r0
 800653a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800653e:	e7e5      	b.n	800650c <__mdiff+0x28>
 8006540:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006544:	6926      	ldr	r6, [r4, #16]
 8006546:	60c5      	str	r5, [r0, #12]
 8006548:	f104 0914 	add.w	r9, r4, #20
 800654c:	f108 0514 	add.w	r5, r8, #20
 8006550:	f100 0e14 	add.w	lr, r0, #20
 8006554:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006558:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800655c:	f108 0210 	add.w	r2, r8, #16
 8006560:	46f2      	mov	sl, lr
 8006562:	2100      	movs	r1, #0
 8006564:	f859 3b04 	ldr.w	r3, [r9], #4
 8006568:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800656c:	fa1f f883 	uxth.w	r8, r3
 8006570:	fa11 f18b 	uxtah	r1, r1, fp
 8006574:	0c1b      	lsrs	r3, r3, #16
 8006576:	eba1 0808 	sub.w	r8, r1, r8
 800657a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800657e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006582:	fa1f f888 	uxth.w	r8, r8
 8006586:	1419      	asrs	r1, r3, #16
 8006588:	454e      	cmp	r6, r9
 800658a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800658e:	f84a 3b04 	str.w	r3, [sl], #4
 8006592:	d8e7      	bhi.n	8006564 <__mdiff+0x80>
 8006594:	1b33      	subs	r3, r6, r4
 8006596:	3b15      	subs	r3, #21
 8006598:	f023 0303 	bic.w	r3, r3, #3
 800659c:	3304      	adds	r3, #4
 800659e:	3415      	adds	r4, #21
 80065a0:	42a6      	cmp	r6, r4
 80065a2:	bf38      	it	cc
 80065a4:	2304      	movcc	r3, #4
 80065a6:	441d      	add	r5, r3
 80065a8:	4473      	add	r3, lr
 80065aa:	469e      	mov	lr, r3
 80065ac:	462e      	mov	r6, r5
 80065ae:	4566      	cmp	r6, ip
 80065b0:	d30e      	bcc.n	80065d0 <__mdiff+0xec>
 80065b2:	f10c 0203 	add.w	r2, ip, #3
 80065b6:	1b52      	subs	r2, r2, r5
 80065b8:	f022 0203 	bic.w	r2, r2, #3
 80065bc:	3d03      	subs	r5, #3
 80065be:	45ac      	cmp	ip, r5
 80065c0:	bf38      	it	cc
 80065c2:	2200      	movcc	r2, #0
 80065c4:	441a      	add	r2, r3
 80065c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80065ca:	b17b      	cbz	r3, 80065ec <__mdiff+0x108>
 80065cc:	6107      	str	r7, [r0, #16]
 80065ce:	e7a3      	b.n	8006518 <__mdiff+0x34>
 80065d0:	f856 8b04 	ldr.w	r8, [r6], #4
 80065d4:	fa11 f288 	uxtah	r2, r1, r8
 80065d8:	1414      	asrs	r4, r2, #16
 80065da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80065de:	b292      	uxth	r2, r2
 80065e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80065e4:	f84e 2b04 	str.w	r2, [lr], #4
 80065e8:	1421      	asrs	r1, r4, #16
 80065ea:	e7e0      	b.n	80065ae <__mdiff+0xca>
 80065ec:	3f01      	subs	r7, #1
 80065ee:	e7ea      	b.n	80065c6 <__mdiff+0xe2>
 80065f0:	08007877 	.word	0x08007877
 80065f4:	08007888 	.word	0x08007888

080065f8 <__d2b>:
 80065f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80065fc:	4689      	mov	r9, r1
 80065fe:	2101      	movs	r1, #1
 8006600:	ec57 6b10 	vmov	r6, r7, d0
 8006604:	4690      	mov	r8, r2
 8006606:	f7ff fccf 	bl	8005fa8 <_Balloc>
 800660a:	4604      	mov	r4, r0
 800660c:	b930      	cbnz	r0, 800661c <__d2b+0x24>
 800660e:	4602      	mov	r2, r0
 8006610:	4b25      	ldr	r3, [pc, #148]	; (80066a8 <__d2b+0xb0>)
 8006612:	4826      	ldr	r0, [pc, #152]	; (80066ac <__d2b+0xb4>)
 8006614:	f240 310a 	movw	r1, #778	; 0x30a
 8006618:	f000 faac 	bl	8006b74 <__assert_func>
 800661c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006620:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006624:	bb35      	cbnz	r5, 8006674 <__d2b+0x7c>
 8006626:	2e00      	cmp	r6, #0
 8006628:	9301      	str	r3, [sp, #4]
 800662a:	d028      	beq.n	800667e <__d2b+0x86>
 800662c:	4668      	mov	r0, sp
 800662e:	9600      	str	r6, [sp, #0]
 8006630:	f7ff fd82 	bl	8006138 <__lo0bits>
 8006634:	9900      	ldr	r1, [sp, #0]
 8006636:	b300      	cbz	r0, 800667a <__d2b+0x82>
 8006638:	9a01      	ldr	r2, [sp, #4]
 800663a:	f1c0 0320 	rsb	r3, r0, #32
 800663e:	fa02 f303 	lsl.w	r3, r2, r3
 8006642:	430b      	orrs	r3, r1
 8006644:	40c2      	lsrs	r2, r0
 8006646:	6163      	str	r3, [r4, #20]
 8006648:	9201      	str	r2, [sp, #4]
 800664a:	9b01      	ldr	r3, [sp, #4]
 800664c:	61a3      	str	r3, [r4, #24]
 800664e:	2b00      	cmp	r3, #0
 8006650:	bf14      	ite	ne
 8006652:	2202      	movne	r2, #2
 8006654:	2201      	moveq	r2, #1
 8006656:	6122      	str	r2, [r4, #16]
 8006658:	b1d5      	cbz	r5, 8006690 <__d2b+0x98>
 800665a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800665e:	4405      	add	r5, r0
 8006660:	f8c9 5000 	str.w	r5, [r9]
 8006664:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006668:	f8c8 0000 	str.w	r0, [r8]
 800666c:	4620      	mov	r0, r4
 800666e:	b003      	add	sp, #12
 8006670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006678:	e7d5      	b.n	8006626 <__d2b+0x2e>
 800667a:	6161      	str	r1, [r4, #20]
 800667c:	e7e5      	b.n	800664a <__d2b+0x52>
 800667e:	a801      	add	r0, sp, #4
 8006680:	f7ff fd5a 	bl	8006138 <__lo0bits>
 8006684:	9b01      	ldr	r3, [sp, #4]
 8006686:	6163      	str	r3, [r4, #20]
 8006688:	2201      	movs	r2, #1
 800668a:	6122      	str	r2, [r4, #16]
 800668c:	3020      	adds	r0, #32
 800668e:	e7e3      	b.n	8006658 <__d2b+0x60>
 8006690:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006694:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006698:	f8c9 0000 	str.w	r0, [r9]
 800669c:	6918      	ldr	r0, [r3, #16]
 800669e:	f7ff fd2b 	bl	80060f8 <__hi0bits>
 80066a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80066a6:	e7df      	b.n	8006668 <__d2b+0x70>
 80066a8:	08007877 	.word	0x08007877
 80066ac:	08007888 	.word	0x08007888

080066b0 <_calloc_r>:
 80066b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066b2:	fba1 2402 	umull	r2, r4, r1, r2
 80066b6:	b94c      	cbnz	r4, 80066cc <_calloc_r+0x1c>
 80066b8:	4611      	mov	r1, r2
 80066ba:	9201      	str	r2, [sp, #4]
 80066bc:	f000 f87a 	bl	80067b4 <_malloc_r>
 80066c0:	9a01      	ldr	r2, [sp, #4]
 80066c2:	4605      	mov	r5, r0
 80066c4:	b930      	cbnz	r0, 80066d4 <_calloc_r+0x24>
 80066c6:	4628      	mov	r0, r5
 80066c8:	b003      	add	sp, #12
 80066ca:	bd30      	pop	{r4, r5, pc}
 80066cc:	220c      	movs	r2, #12
 80066ce:	6002      	str	r2, [r0, #0]
 80066d0:	2500      	movs	r5, #0
 80066d2:	e7f8      	b.n	80066c6 <_calloc_r+0x16>
 80066d4:	4621      	mov	r1, r4
 80066d6:	f7fe f93f 	bl	8004958 <memset>
 80066da:	e7f4      	b.n	80066c6 <_calloc_r+0x16>

080066dc <_free_r>:
 80066dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066de:	2900      	cmp	r1, #0
 80066e0:	d044      	beq.n	800676c <_free_r+0x90>
 80066e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066e6:	9001      	str	r0, [sp, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f1a1 0404 	sub.w	r4, r1, #4
 80066ee:	bfb8      	it	lt
 80066f0:	18e4      	addlt	r4, r4, r3
 80066f2:	f000 fa9b 	bl	8006c2c <__malloc_lock>
 80066f6:	4a1e      	ldr	r2, [pc, #120]	; (8006770 <_free_r+0x94>)
 80066f8:	9801      	ldr	r0, [sp, #4]
 80066fa:	6813      	ldr	r3, [r2, #0]
 80066fc:	b933      	cbnz	r3, 800670c <_free_r+0x30>
 80066fe:	6063      	str	r3, [r4, #4]
 8006700:	6014      	str	r4, [r2, #0]
 8006702:	b003      	add	sp, #12
 8006704:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006708:	f000 ba96 	b.w	8006c38 <__malloc_unlock>
 800670c:	42a3      	cmp	r3, r4
 800670e:	d908      	bls.n	8006722 <_free_r+0x46>
 8006710:	6825      	ldr	r5, [r4, #0]
 8006712:	1961      	adds	r1, r4, r5
 8006714:	428b      	cmp	r3, r1
 8006716:	bf01      	itttt	eq
 8006718:	6819      	ldreq	r1, [r3, #0]
 800671a:	685b      	ldreq	r3, [r3, #4]
 800671c:	1949      	addeq	r1, r1, r5
 800671e:	6021      	streq	r1, [r4, #0]
 8006720:	e7ed      	b.n	80066fe <_free_r+0x22>
 8006722:	461a      	mov	r2, r3
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	b10b      	cbz	r3, 800672c <_free_r+0x50>
 8006728:	42a3      	cmp	r3, r4
 800672a:	d9fa      	bls.n	8006722 <_free_r+0x46>
 800672c:	6811      	ldr	r1, [r2, #0]
 800672e:	1855      	adds	r5, r2, r1
 8006730:	42a5      	cmp	r5, r4
 8006732:	d10b      	bne.n	800674c <_free_r+0x70>
 8006734:	6824      	ldr	r4, [r4, #0]
 8006736:	4421      	add	r1, r4
 8006738:	1854      	adds	r4, r2, r1
 800673a:	42a3      	cmp	r3, r4
 800673c:	6011      	str	r1, [r2, #0]
 800673e:	d1e0      	bne.n	8006702 <_free_r+0x26>
 8006740:	681c      	ldr	r4, [r3, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	6053      	str	r3, [r2, #4]
 8006746:	4421      	add	r1, r4
 8006748:	6011      	str	r1, [r2, #0]
 800674a:	e7da      	b.n	8006702 <_free_r+0x26>
 800674c:	d902      	bls.n	8006754 <_free_r+0x78>
 800674e:	230c      	movs	r3, #12
 8006750:	6003      	str	r3, [r0, #0]
 8006752:	e7d6      	b.n	8006702 <_free_r+0x26>
 8006754:	6825      	ldr	r5, [r4, #0]
 8006756:	1961      	adds	r1, r4, r5
 8006758:	428b      	cmp	r3, r1
 800675a:	bf04      	itt	eq
 800675c:	6819      	ldreq	r1, [r3, #0]
 800675e:	685b      	ldreq	r3, [r3, #4]
 8006760:	6063      	str	r3, [r4, #4]
 8006762:	bf04      	itt	eq
 8006764:	1949      	addeq	r1, r1, r5
 8006766:	6021      	streq	r1, [r4, #0]
 8006768:	6054      	str	r4, [r2, #4]
 800676a:	e7ca      	b.n	8006702 <_free_r+0x26>
 800676c:	b003      	add	sp, #12
 800676e:	bd30      	pop	{r4, r5, pc}
 8006770:	200002ec 	.word	0x200002ec

08006774 <sbrk_aligned>:
 8006774:	b570      	push	{r4, r5, r6, lr}
 8006776:	4e0e      	ldr	r6, [pc, #56]	; (80067b0 <sbrk_aligned+0x3c>)
 8006778:	460c      	mov	r4, r1
 800677a:	6831      	ldr	r1, [r6, #0]
 800677c:	4605      	mov	r5, r0
 800677e:	b911      	cbnz	r1, 8006786 <sbrk_aligned+0x12>
 8006780:	f000 f9e8 	bl	8006b54 <_sbrk_r>
 8006784:	6030      	str	r0, [r6, #0]
 8006786:	4621      	mov	r1, r4
 8006788:	4628      	mov	r0, r5
 800678a:	f000 f9e3 	bl	8006b54 <_sbrk_r>
 800678e:	1c43      	adds	r3, r0, #1
 8006790:	d00a      	beq.n	80067a8 <sbrk_aligned+0x34>
 8006792:	1cc4      	adds	r4, r0, #3
 8006794:	f024 0403 	bic.w	r4, r4, #3
 8006798:	42a0      	cmp	r0, r4
 800679a:	d007      	beq.n	80067ac <sbrk_aligned+0x38>
 800679c:	1a21      	subs	r1, r4, r0
 800679e:	4628      	mov	r0, r5
 80067a0:	f000 f9d8 	bl	8006b54 <_sbrk_r>
 80067a4:	3001      	adds	r0, #1
 80067a6:	d101      	bne.n	80067ac <sbrk_aligned+0x38>
 80067a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80067ac:	4620      	mov	r0, r4
 80067ae:	bd70      	pop	{r4, r5, r6, pc}
 80067b0:	200002f0 	.word	0x200002f0

080067b4 <_malloc_r>:
 80067b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067b8:	1ccd      	adds	r5, r1, #3
 80067ba:	f025 0503 	bic.w	r5, r5, #3
 80067be:	3508      	adds	r5, #8
 80067c0:	2d0c      	cmp	r5, #12
 80067c2:	bf38      	it	cc
 80067c4:	250c      	movcc	r5, #12
 80067c6:	2d00      	cmp	r5, #0
 80067c8:	4607      	mov	r7, r0
 80067ca:	db01      	blt.n	80067d0 <_malloc_r+0x1c>
 80067cc:	42a9      	cmp	r1, r5
 80067ce:	d905      	bls.n	80067dc <_malloc_r+0x28>
 80067d0:	230c      	movs	r3, #12
 80067d2:	603b      	str	r3, [r7, #0]
 80067d4:	2600      	movs	r6, #0
 80067d6:	4630      	mov	r0, r6
 80067d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067dc:	4e2e      	ldr	r6, [pc, #184]	; (8006898 <_malloc_r+0xe4>)
 80067de:	f000 fa25 	bl	8006c2c <__malloc_lock>
 80067e2:	6833      	ldr	r3, [r6, #0]
 80067e4:	461c      	mov	r4, r3
 80067e6:	bb34      	cbnz	r4, 8006836 <_malloc_r+0x82>
 80067e8:	4629      	mov	r1, r5
 80067ea:	4638      	mov	r0, r7
 80067ec:	f7ff ffc2 	bl	8006774 <sbrk_aligned>
 80067f0:	1c43      	adds	r3, r0, #1
 80067f2:	4604      	mov	r4, r0
 80067f4:	d14d      	bne.n	8006892 <_malloc_r+0xde>
 80067f6:	6834      	ldr	r4, [r6, #0]
 80067f8:	4626      	mov	r6, r4
 80067fa:	2e00      	cmp	r6, #0
 80067fc:	d140      	bne.n	8006880 <_malloc_r+0xcc>
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	4631      	mov	r1, r6
 8006802:	4638      	mov	r0, r7
 8006804:	eb04 0803 	add.w	r8, r4, r3
 8006808:	f000 f9a4 	bl	8006b54 <_sbrk_r>
 800680c:	4580      	cmp	r8, r0
 800680e:	d13a      	bne.n	8006886 <_malloc_r+0xd2>
 8006810:	6821      	ldr	r1, [r4, #0]
 8006812:	3503      	adds	r5, #3
 8006814:	1a6d      	subs	r5, r5, r1
 8006816:	f025 0503 	bic.w	r5, r5, #3
 800681a:	3508      	adds	r5, #8
 800681c:	2d0c      	cmp	r5, #12
 800681e:	bf38      	it	cc
 8006820:	250c      	movcc	r5, #12
 8006822:	4629      	mov	r1, r5
 8006824:	4638      	mov	r0, r7
 8006826:	f7ff ffa5 	bl	8006774 <sbrk_aligned>
 800682a:	3001      	adds	r0, #1
 800682c:	d02b      	beq.n	8006886 <_malloc_r+0xd2>
 800682e:	6823      	ldr	r3, [r4, #0]
 8006830:	442b      	add	r3, r5
 8006832:	6023      	str	r3, [r4, #0]
 8006834:	e00e      	b.n	8006854 <_malloc_r+0xa0>
 8006836:	6822      	ldr	r2, [r4, #0]
 8006838:	1b52      	subs	r2, r2, r5
 800683a:	d41e      	bmi.n	800687a <_malloc_r+0xc6>
 800683c:	2a0b      	cmp	r2, #11
 800683e:	d916      	bls.n	800686e <_malloc_r+0xba>
 8006840:	1961      	adds	r1, r4, r5
 8006842:	42a3      	cmp	r3, r4
 8006844:	6025      	str	r5, [r4, #0]
 8006846:	bf18      	it	ne
 8006848:	6059      	strne	r1, [r3, #4]
 800684a:	6863      	ldr	r3, [r4, #4]
 800684c:	bf08      	it	eq
 800684e:	6031      	streq	r1, [r6, #0]
 8006850:	5162      	str	r2, [r4, r5]
 8006852:	604b      	str	r3, [r1, #4]
 8006854:	4638      	mov	r0, r7
 8006856:	f104 060b 	add.w	r6, r4, #11
 800685a:	f000 f9ed 	bl	8006c38 <__malloc_unlock>
 800685e:	f026 0607 	bic.w	r6, r6, #7
 8006862:	1d23      	adds	r3, r4, #4
 8006864:	1af2      	subs	r2, r6, r3
 8006866:	d0b6      	beq.n	80067d6 <_malloc_r+0x22>
 8006868:	1b9b      	subs	r3, r3, r6
 800686a:	50a3      	str	r3, [r4, r2]
 800686c:	e7b3      	b.n	80067d6 <_malloc_r+0x22>
 800686e:	6862      	ldr	r2, [r4, #4]
 8006870:	42a3      	cmp	r3, r4
 8006872:	bf0c      	ite	eq
 8006874:	6032      	streq	r2, [r6, #0]
 8006876:	605a      	strne	r2, [r3, #4]
 8006878:	e7ec      	b.n	8006854 <_malloc_r+0xa0>
 800687a:	4623      	mov	r3, r4
 800687c:	6864      	ldr	r4, [r4, #4]
 800687e:	e7b2      	b.n	80067e6 <_malloc_r+0x32>
 8006880:	4634      	mov	r4, r6
 8006882:	6876      	ldr	r6, [r6, #4]
 8006884:	e7b9      	b.n	80067fa <_malloc_r+0x46>
 8006886:	230c      	movs	r3, #12
 8006888:	603b      	str	r3, [r7, #0]
 800688a:	4638      	mov	r0, r7
 800688c:	f000 f9d4 	bl	8006c38 <__malloc_unlock>
 8006890:	e7a1      	b.n	80067d6 <_malloc_r+0x22>
 8006892:	6025      	str	r5, [r4, #0]
 8006894:	e7de      	b.n	8006854 <_malloc_r+0xa0>
 8006896:	bf00      	nop
 8006898:	200002ec 	.word	0x200002ec

0800689c <__ssputs_r>:
 800689c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068a0:	688e      	ldr	r6, [r1, #8]
 80068a2:	429e      	cmp	r6, r3
 80068a4:	4682      	mov	sl, r0
 80068a6:	460c      	mov	r4, r1
 80068a8:	4690      	mov	r8, r2
 80068aa:	461f      	mov	r7, r3
 80068ac:	d838      	bhi.n	8006920 <__ssputs_r+0x84>
 80068ae:	898a      	ldrh	r2, [r1, #12]
 80068b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80068b4:	d032      	beq.n	800691c <__ssputs_r+0x80>
 80068b6:	6825      	ldr	r5, [r4, #0]
 80068b8:	6909      	ldr	r1, [r1, #16]
 80068ba:	eba5 0901 	sub.w	r9, r5, r1
 80068be:	6965      	ldr	r5, [r4, #20]
 80068c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068c8:	3301      	adds	r3, #1
 80068ca:	444b      	add	r3, r9
 80068cc:	106d      	asrs	r5, r5, #1
 80068ce:	429d      	cmp	r5, r3
 80068d0:	bf38      	it	cc
 80068d2:	461d      	movcc	r5, r3
 80068d4:	0553      	lsls	r3, r2, #21
 80068d6:	d531      	bpl.n	800693c <__ssputs_r+0xa0>
 80068d8:	4629      	mov	r1, r5
 80068da:	f7ff ff6b 	bl	80067b4 <_malloc_r>
 80068de:	4606      	mov	r6, r0
 80068e0:	b950      	cbnz	r0, 80068f8 <__ssputs_r+0x5c>
 80068e2:	230c      	movs	r3, #12
 80068e4:	f8ca 3000 	str.w	r3, [sl]
 80068e8:	89a3      	ldrh	r3, [r4, #12]
 80068ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068ee:	81a3      	strh	r3, [r4, #12]
 80068f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068f8:	6921      	ldr	r1, [r4, #16]
 80068fa:	464a      	mov	r2, r9
 80068fc:	f7ff fb46 	bl	8005f8c <memcpy>
 8006900:	89a3      	ldrh	r3, [r4, #12]
 8006902:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800690a:	81a3      	strh	r3, [r4, #12]
 800690c:	6126      	str	r6, [r4, #16]
 800690e:	6165      	str	r5, [r4, #20]
 8006910:	444e      	add	r6, r9
 8006912:	eba5 0509 	sub.w	r5, r5, r9
 8006916:	6026      	str	r6, [r4, #0]
 8006918:	60a5      	str	r5, [r4, #8]
 800691a:	463e      	mov	r6, r7
 800691c:	42be      	cmp	r6, r7
 800691e:	d900      	bls.n	8006922 <__ssputs_r+0x86>
 8006920:	463e      	mov	r6, r7
 8006922:	6820      	ldr	r0, [r4, #0]
 8006924:	4632      	mov	r2, r6
 8006926:	4641      	mov	r1, r8
 8006928:	f000 f966 	bl	8006bf8 <memmove>
 800692c:	68a3      	ldr	r3, [r4, #8]
 800692e:	1b9b      	subs	r3, r3, r6
 8006930:	60a3      	str	r3, [r4, #8]
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	4433      	add	r3, r6
 8006936:	6023      	str	r3, [r4, #0]
 8006938:	2000      	movs	r0, #0
 800693a:	e7db      	b.n	80068f4 <__ssputs_r+0x58>
 800693c:	462a      	mov	r2, r5
 800693e:	f000 f981 	bl	8006c44 <_realloc_r>
 8006942:	4606      	mov	r6, r0
 8006944:	2800      	cmp	r0, #0
 8006946:	d1e1      	bne.n	800690c <__ssputs_r+0x70>
 8006948:	6921      	ldr	r1, [r4, #16]
 800694a:	4650      	mov	r0, sl
 800694c:	f7ff fec6 	bl	80066dc <_free_r>
 8006950:	e7c7      	b.n	80068e2 <__ssputs_r+0x46>
	...

08006954 <_svfiprintf_r>:
 8006954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006958:	4698      	mov	r8, r3
 800695a:	898b      	ldrh	r3, [r1, #12]
 800695c:	061b      	lsls	r3, r3, #24
 800695e:	b09d      	sub	sp, #116	; 0x74
 8006960:	4607      	mov	r7, r0
 8006962:	460d      	mov	r5, r1
 8006964:	4614      	mov	r4, r2
 8006966:	d50e      	bpl.n	8006986 <_svfiprintf_r+0x32>
 8006968:	690b      	ldr	r3, [r1, #16]
 800696a:	b963      	cbnz	r3, 8006986 <_svfiprintf_r+0x32>
 800696c:	2140      	movs	r1, #64	; 0x40
 800696e:	f7ff ff21 	bl	80067b4 <_malloc_r>
 8006972:	6028      	str	r0, [r5, #0]
 8006974:	6128      	str	r0, [r5, #16]
 8006976:	b920      	cbnz	r0, 8006982 <_svfiprintf_r+0x2e>
 8006978:	230c      	movs	r3, #12
 800697a:	603b      	str	r3, [r7, #0]
 800697c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006980:	e0d1      	b.n	8006b26 <_svfiprintf_r+0x1d2>
 8006982:	2340      	movs	r3, #64	; 0x40
 8006984:	616b      	str	r3, [r5, #20]
 8006986:	2300      	movs	r3, #0
 8006988:	9309      	str	r3, [sp, #36]	; 0x24
 800698a:	2320      	movs	r3, #32
 800698c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006990:	f8cd 800c 	str.w	r8, [sp, #12]
 8006994:	2330      	movs	r3, #48	; 0x30
 8006996:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006b40 <_svfiprintf_r+0x1ec>
 800699a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800699e:	f04f 0901 	mov.w	r9, #1
 80069a2:	4623      	mov	r3, r4
 80069a4:	469a      	mov	sl, r3
 80069a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069aa:	b10a      	cbz	r2, 80069b0 <_svfiprintf_r+0x5c>
 80069ac:	2a25      	cmp	r2, #37	; 0x25
 80069ae:	d1f9      	bne.n	80069a4 <_svfiprintf_r+0x50>
 80069b0:	ebba 0b04 	subs.w	fp, sl, r4
 80069b4:	d00b      	beq.n	80069ce <_svfiprintf_r+0x7a>
 80069b6:	465b      	mov	r3, fp
 80069b8:	4622      	mov	r2, r4
 80069ba:	4629      	mov	r1, r5
 80069bc:	4638      	mov	r0, r7
 80069be:	f7ff ff6d 	bl	800689c <__ssputs_r>
 80069c2:	3001      	adds	r0, #1
 80069c4:	f000 80aa 	beq.w	8006b1c <_svfiprintf_r+0x1c8>
 80069c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069ca:	445a      	add	r2, fp
 80069cc:	9209      	str	r2, [sp, #36]	; 0x24
 80069ce:	f89a 3000 	ldrb.w	r3, [sl]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 80a2 	beq.w	8006b1c <_svfiprintf_r+0x1c8>
 80069d8:	2300      	movs	r3, #0
 80069da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069e2:	f10a 0a01 	add.w	sl, sl, #1
 80069e6:	9304      	str	r3, [sp, #16]
 80069e8:	9307      	str	r3, [sp, #28]
 80069ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069ee:	931a      	str	r3, [sp, #104]	; 0x68
 80069f0:	4654      	mov	r4, sl
 80069f2:	2205      	movs	r2, #5
 80069f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069f8:	4851      	ldr	r0, [pc, #324]	; (8006b40 <_svfiprintf_r+0x1ec>)
 80069fa:	f7f9 fbf1 	bl	80001e0 <memchr>
 80069fe:	9a04      	ldr	r2, [sp, #16]
 8006a00:	b9d8      	cbnz	r0, 8006a3a <_svfiprintf_r+0xe6>
 8006a02:	06d0      	lsls	r0, r2, #27
 8006a04:	bf44      	itt	mi
 8006a06:	2320      	movmi	r3, #32
 8006a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a0c:	0711      	lsls	r1, r2, #28
 8006a0e:	bf44      	itt	mi
 8006a10:	232b      	movmi	r3, #43	; 0x2b
 8006a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a16:	f89a 3000 	ldrb.w	r3, [sl]
 8006a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8006a1c:	d015      	beq.n	8006a4a <_svfiprintf_r+0xf6>
 8006a1e:	9a07      	ldr	r2, [sp, #28]
 8006a20:	4654      	mov	r4, sl
 8006a22:	2000      	movs	r0, #0
 8006a24:	f04f 0c0a 	mov.w	ip, #10
 8006a28:	4621      	mov	r1, r4
 8006a2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a2e:	3b30      	subs	r3, #48	; 0x30
 8006a30:	2b09      	cmp	r3, #9
 8006a32:	d94e      	bls.n	8006ad2 <_svfiprintf_r+0x17e>
 8006a34:	b1b0      	cbz	r0, 8006a64 <_svfiprintf_r+0x110>
 8006a36:	9207      	str	r2, [sp, #28]
 8006a38:	e014      	b.n	8006a64 <_svfiprintf_r+0x110>
 8006a3a:	eba0 0308 	sub.w	r3, r0, r8
 8006a3e:	fa09 f303 	lsl.w	r3, r9, r3
 8006a42:	4313      	orrs	r3, r2
 8006a44:	9304      	str	r3, [sp, #16]
 8006a46:	46a2      	mov	sl, r4
 8006a48:	e7d2      	b.n	80069f0 <_svfiprintf_r+0x9c>
 8006a4a:	9b03      	ldr	r3, [sp, #12]
 8006a4c:	1d19      	adds	r1, r3, #4
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	9103      	str	r1, [sp, #12]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	bfbb      	ittet	lt
 8006a56:	425b      	neglt	r3, r3
 8006a58:	f042 0202 	orrlt.w	r2, r2, #2
 8006a5c:	9307      	strge	r3, [sp, #28]
 8006a5e:	9307      	strlt	r3, [sp, #28]
 8006a60:	bfb8      	it	lt
 8006a62:	9204      	strlt	r2, [sp, #16]
 8006a64:	7823      	ldrb	r3, [r4, #0]
 8006a66:	2b2e      	cmp	r3, #46	; 0x2e
 8006a68:	d10c      	bne.n	8006a84 <_svfiprintf_r+0x130>
 8006a6a:	7863      	ldrb	r3, [r4, #1]
 8006a6c:	2b2a      	cmp	r3, #42	; 0x2a
 8006a6e:	d135      	bne.n	8006adc <_svfiprintf_r+0x188>
 8006a70:	9b03      	ldr	r3, [sp, #12]
 8006a72:	1d1a      	adds	r2, r3, #4
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	9203      	str	r2, [sp, #12]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	bfb8      	it	lt
 8006a7c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006a80:	3402      	adds	r4, #2
 8006a82:	9305      	str	r3, [sp, #20]
 8006a84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006b50 <_svfiprintf_r+0x1fc>
 8006a88:	7821      	ldrb	r1, [r4, #0]
 8006a8a:	2203      	movs	r2, #3
 8006a8c:	4650      	mov	r0, sl
 8006a8e:	f7f9 fba7 	bl	80001e0 <memchr>
 8006a92:	b140      	cbz	r0, 8006aa6 <_svfiprintf_r+0x152>
 8006a94:	2340      	movs	r3, #64	; 0x40
 8006a96:	eba0 000a 	sub.w	r0, r0, sl
 8006a9a:	fa03 f000 	lsl.w	r0, r3, r0
 8006a9e:	9b04      	ldr	r3, [sp, #16]
 8006aa0:	4303      	orrs	r3, r0
 8006aa2:	3401      	adds	r4, #1
 8006aa4:	9304      	str	r3, [sp, #16]
 8006aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aaa:	4826      	ldr	r0, [pc, #152]	; (8006b44 <_svfiprintf_r+0x1f0>)
 8006aac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ab0:	2206      	movs	r2, #6
 8006ab2:	f7f9 fb95 	bl	80001e0 <memchr>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	d038      	beq.n	8006b2c <_svfiprintf_r+0x1d8>
 8006aba:	4b23      	ldr	r3, [pc, #140]	; (8006b48 <_svfiprintf_r+0x1f4>)
 8006abc:	bb1b      	cbnz	r3, 8006b06 <_svfiprintf_r+0x1b2>
 8006abe:	9b03      	ldr	r3, [sp, #12]
 8006ac0:	3307      	adds	r3, #7
 8006ac2:	f023 0307 	bic.w	r3, r3, #7
 8006ac6:	3308      	adds	r3, #8
 8006ac8:	9303      	str	r3, [sp, #12]
 8006aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006acc:	4433      	add	r3, r6
 8006ace:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad0:	e767      	b.n	80069a2 <_svfiprintf_r+0x4e>
 8006ad2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ad6:	460c      	mov	r4, r1
 8006ad8:	2001      	movs	r0, #1
 8006ada:	e7a5      	b.n	8006a28 <_svfiprintf_r+0xd4>
 8006adc:	2300      	movs	r3, #0
 8006ade:	3401      	adds	r4, #1
 8006ae0:	9305      	str	r3, [sp, #20]
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	f04f 0c0a 	mov.w	ip, #10
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006aee:	3a30      	subs	r2, #48	; 0x30
 8006af0:	2a09      	cmp	r2, #9
 8006af2:	d903      	bls.n	8006afc <_svfiprintf_r+0x1a8>
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d0c5      	beq.n	8006a84 <_svfiprintf_r+0x130>
 8006af8:	9105      	str	r1, [sp, #20]
 8006afa:	e7c3      	b.n	8006a84 <_svfiprintf_r+0x130>
 8006afc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b00:	4604      	mov	r4, r0
 8006b02:	2301      	movs	r3, #1
 8006b04:	e7f0      	b.n	8006ae8 <_svfiprintf_r+0x194>
 8006b06:	ab03      	add	r3, sp, #12
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	462a      	mov	r2, r5
 8006b0c:	4b0f      	ldr	r3, [pc, #60]	; (8006b4c <_svfiprintf_r+0x1f8>)
 8006b0e:	a904      	add	r1, sp, #16
 8006b10:	4638      	mov	r0, r7
 8006b12:	f7fd ffc9 	bl	8004aa8 <_printf_float>
 8006b16:	1c42      	adds	r2, r0, #1
 8006b18:	4606      	mov	r6, r0
 8006b1a:	d1d6      	bne.n	8006aca <_svfiprintf_r+0x176>
 8006b1c:	89ab      	ldrh	r3, [r5, #12]
 8006b1e:	065b      	lsls	r3, r3, #25
 8006b20:	f53f af2c 	bmi.w	800697c <_svfiprintf_r+0x28>
 8006b24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b26:	b01d      	add	sp, #116	; 0x74
 8006b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b2c:	ab03      	add	r3, sp, #12
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	462a      	mov	r2, r5
 8006b32:	4b06      	ldr	r3, [pc, #24]	; (8006b4c <_svfiprintf_r+0x1f8>)
 8006b34:	a904      	add	r1, sp, #16
 8006b36:	4638      	mov	r0, r7
 8006b38:	f7fe fa5a 	bl	8004ff0 <_printf_i>
 8006b3c:	e7eb      	b.n	8006b16 <_svfiprintf_r+0x1c2>
 8006b3e:	bf00      	nop
 8006b40:	080079e4 	.word	0x080079e4
 8006b44:	080079ee 	.word	0x080079ee
 8006b48:	08004aa9 	.word	0x08004aa9
 8006b4c:	0800689d 	.word	0x0800689d
 8006b50:	080079ea 	.word	0x080079ea

08006b54 <_sbrk_r>:
 8006b54:	b538      	push	{r3, r4, r5, lr}
 8006b56:	4d06      	ldr	r5, [pc, #24]	; (8006b70 <_sbrk_r+0x1c>)
 8006b58:	2300      	movs	r3, #0
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	4608      	mov	r0, r1
 8006b5e:	602b      	str	r3, [r5, #0]
 8006b60:	f7fa fc28 	bl	80013b4 <_sbrk>
 8006b64:	1c43      	adds	r3, r0, #1
 8006b66:	d102      	bne.n	8006b6e <_sbrk_r+0x1a>
 8006b68:	682b      	ldr	r3, [r5, #0]
 8006b6a:	b103      	cbz	r3, 8006b6e <_sbrk_r+0x1a>
 8006b6c:	6023      	str	r3, [r4, #0]
 8006b6e:	bd38      	pop	{r3, r4, r5, pc}
 8006b70:	200002f4 	.word	0x200002f4

08006b74 <__assert_func>:
 8006b74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b76:	4614      	mov	r4, r2
 8006b78:	461a      	mov	r2, r3
 8006b7a:	4b09      	ldr	r3, [pc, #36]	; (8006ba0 <__assert_func+0x2c>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4605      	mov	r5, r0
 8006b80:	68d8      	ldr	r0, [r3, #12]
 8006b82:	b14c      	cbz	r4, 8006b98 <__assert_func+0x24>
 8006b84:	4b07      	ldr	r3, [pc, #28]	; (8006ba4 <__assert_func+0x30>)
 8006b86:	9100      	str	r1, [sp, #0]
 8006b88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b8c:	4906      	ldr	r1, [pc, #24]	; (8006ba8 <__assert_func+0x34>)
 8006b8e:	462b      	mov	r3, r5
 8006b90:	f000 f80e 	bl	8006bb0 <fiprintf>
 8006b94:	f000 faac 	bl	80070f0 <abort>
 8006b98:	4b04      	ldr	r3, [pc, #16]	; (8006bac <__assert_func+0x38>)
 8006b9a:	461c      	mov	r4, r3
 8006b9c:	e7f3      	b.n	8006b86 <__assert_func+0x12>
 8006b9e:	bf00      	nop
 8006ba0:	20000014 	.word	0x20000014
 8006ba4:	080079f5 	.word	0x080079f5
 8006ba8:	08007a02 	.word	0x08007a02
 8006bac:	08007a30 	.word	0x08007a30

08006bb0 <fiprintf>:
 8006bb0:	b40e      	push	{r1, r2, r3}
 8006bb2:	b503      	push	{r0, r1, lr}
 8006bb4:	4601      	mov	r1, r0
 8006bb6:	ab03      	add	r3, sp, #12
 8006bb8:	4805      	ldr	r0, [pc, #20]	; (8006bd0 <fiprintf+0x20>)
 8006bba:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bbe:	6800      	ldr	r0, [r0, #0]
 8006bc0:	9301      	str	r3, [sp, #4]
 8006bc2:	f000 f897 	bl	8006cf4 <_vfiprintf_r>
 8006bc6:	b002      	add	sp, #8
 8006bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bcc:	b003      	add	sp, #12
 8006bce:	4770      	bx	lr
 8006bd0:	20000014 	.word	0x20000014

08006bd4 <__ascii_mbtowc>:
 8006bd4:	b082      	sub	sp, #8
 8006bd6:	b901      	cbnz	r1, 8006bda <__ascii_mbtowc+0x6>
 8006bd8:	a901      	add	r1, sp, #4
 8006bda:	b142      	cbz	r2, 8006bee <__ascii_mbtowc+0x1a>
 8006bdc:	b14b      	cbz	r3, 8006bf2 <__ascii_mbtowc+0x1e>
 8006bde:	7813      	ldrb	r3, [r2, #0]
 8006be0:	600b      	str	r3, [r1, #0]
 8006be2:	7812      	ldrb	r2, [r2, #0]
 8006be4:	1e10      	subs	r0, r2, #0
 8006be6:	bf18      	it	ne
 8006be8:	2001      	movne	r0, #1
 8006bea:	b002      	add	sp, #8
 8006bec:	4770      	bx	lr
 8006bee:	4610      	mov	r0, r2
 8006bf0:	e7fb      	b.n	8006bea <__ascii_mbtowc+0x16>
 8006bf2:	f06f 0001 	mvn.w	r0, #1
 8006bf6:	e7f8      	b.n	8006bea <__ascii_mbtowc+0x16>

08006bf8 <memmove>:
 8006bf8:	4288      	cmp	r0, r1
 8006bfa:	b510      	push	{r4, lr}
 8006bfc:	eb01 0402 	add.w	r4, r1, r2
 8006c00:	d902      	bls.n	8006c08 <memmove+0x10>
 8006c02:	4284      	cmp	r4, r0
 8006c04:	4623      	mov	r3, r4
 8006c06:	d807      	bhi.n	8006c18 <memmove+0x20>
 8006c08:	1e43      	subs	r3, r0, #1
 8006c0a:	42a1      	cmp	r1, r4
 8006c0c:	d008      	beq.n	8006c20 <memmove+0x28>
 8006c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c16:	e7f8      	b.n	8006c0a <memmove+0x12>
 8006c18:	4402      	add	r2, r0
 8006c1a:	4601      	mov	r1, r0
 8006c1c:	428a      	cmp	r2, r1
 8006c1e:	d100      	bne.n	8006c22 <memmove+0x2a>
 8006c20:	bd10      	pop	{r4, pc}
 8006c22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c2a:	e7f7      	b.n	8006c1c <memmove+0x24>

08006c2c <__malloc_lock>:
 8006c2c:	4801      	ldr	r0, [pc, #4]	; (8006c34 <__malloc_lock+0x8>)
 8006c2e:	f000 bc1f 	b.w	8007470 <__retarget_lock_acquire_recursive>
 8006c32:	bf00      	nop
 8006c34:	200002f8 	.word	0x200002f8

08006c38 <__malloc_unlock>:
 8006c38:	4801      	ldr	r0, [pc, #4]	; (8006c40 <__malloc_unlock+0x8>)
 8006c3a:	f000 bc1a 	b.w	8007472 <__retarget_lock_release_recursive>
 8006c3e:	bf00      	nop
 8006c40:	200002f8 	.word	0x200002f8

08006c44 <_realloc_r>:
 8006c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c48:	4680      	mov	r8, r0
 8006c4a:	4614      	mov	r4, r2
 8006c4c:	460e      	mov	r6, r1
 8006c4e:	b921      	cbnz	r1, 8006c5a <_realloc_r+0x16>
 8006c50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c54:	4611      	mov	r1, r2
 8006c56:	f7ff bdad 	b.w	80067b4 <_malloc_r>
 8006c5a:	b92a      	cbnz	r2, 8006c68 <_realloc_r+0x24>
 8006c5c:	f7ff fd3e 	bl	80066dc <_free_r>
 8006c60:	4625      	mov	r5, r4
 8006c62:	4628      	mov	r0, r5
 8006c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c68:	f000 fc6a 	bl	8007540 <_malloc_usable_size_r>
 8006c6c:	4284      	cmp	r4, r0
 8006c6e:	4607      	mov	r7, r0
 8006c70:	d802      	bhi.n	8006c78 <_realloc_r+0x34>
 8006c72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c76:	d812      	bhi.n	8006c9e <_realloc_r+0x5a>
 8006c78:	4621      	mov	r1, r4
 8006c7a:	4640      	mov	r0, r8
 8006c7c:	f7ff fd9a 	bl	80067b4 <_malloc_r>
 8006c80:	4605      	mov	r5, r0
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d0ed      	beq.n	8006c62 <_realloc_r+0x1e>
 8006c86:	42bc      	cmp	r4, r7
 8006c88:	4622      	mov	r2, r4
 8006c8a:	4631      	mov	r1, r6
 8006c8c:	bf28      	it	cs
 8006c8e:	463a      	movcs	r2, r7
 8006c90:	f7ff f97c 	bl	8005f8c <memcpy>
 8006c94:	4631      	mov	r1, r6
 8006c96:	4640      	mov	r0, r8
 8006c98:	f7ff fd20 	bl	80066dc <_free_r>
 8006c9c:	e7e1      	b.n	8006c62 <_realloc_r+0x1e>
 8006c9e:	4635      	mov	r5, r6
 8006ca0:	e7df      	b.n	8006c62 <_realloc_r+0x1e>

08006ca2 <__sfputc_r>:
 8006ca2:	6893      	ldr	r3, [r2, #8]
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	b410      	push	{r4}
 8006caa:	6093      	str	r3, [r2, #8]
 8006cac:	da08      	bge.n	8006cc0 <__sfputc_r+0x1e>
 8006cae:	6994      	ldr	r4, [r2, #24]
 8006cb0:	42a3      	cmp	r3, r4
 8006cb2:	db01      	blt.n	8006cb8 <__sfputc_r+0x16>
 8006cb4:	290a      	cmp	r1, #10
 8006cb6:	d103      	bne.n	8006cc0 <__sfputc_r+0x1e>
 8006cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cbc:	f000 b94a 	b.w	8006f54 <__swbuf_r>
 8006cc0:	6813      	ldr	r3, [r2, #0]
 8006cc2:	1c58      	adds	r0, r3, #1
 8006cc4:	6010      	str	r0, [r2, #0]
 8006cc6:	7019      	strb	r1, [r3, #0]
 8006cc8:	4608      	mov	r0, r1
 8006cca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <__sfputs_r>:
 8006cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	460f      	mov	r7, r1
 8006cd6:	4614      	mov	r4, r2
 8006cd8:	18d5      	adds	r5, r2, r3
 8006cda:	42ac      	cmp	r4, r5
 8006cdc:	d101      	bne.n	8006ce2 <__sfputs_r+0x12>
 8006cde:	2000      	movs	r0, #0
 8006ce0:	e007      	b.n	8006cf2 <__sfputs_r+0x22>
 8006ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ce6:	463a      	mov	r2, r7
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f7ff ffda 	bl	8006ca2 <__sfputc_r>
 8006cee:	1c43      	adds	r3, r0, #1
 8006cf0:	d1f3      	bne.n	8006cda <__sfputs_r+0xa>
 8006cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006cf4 <_vfiprintf_r>:
 8006cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf8:	460d      	mov	r5, r1
 8006cfa:	b09d      	sub	sp, #116	; 0x74
 8006cfc:	4614      	mov	r4, r2
 8006cfe:	4698      	mov	r8, r3
 8006d00:	4606      	mov	r6, r0
 8006d02:	b118      	cbz	r0, 8006d0c <_vfiprintf_r+0x18>
 8006d04:	6983      	ldr	r3, [r0, #24]
 8006d06:	b90b      	cbnz	r3, 8006d0c <_vfiprintf_r+0x18>
 8006d08:	f000 fb14 	bl	8007334 <__sinit>
 8006d0c:	4b89      	ldr	r3, [pc, #548]	; (8006f34 <_vfiprintf_r+0x240>)
 8006d0e:	429d      	cmp	r5, r3
 8006d10:	d11b      	bne.n	8006d4a <_vfiprintf_r+0x56>
 8006d12:	6875      	ldr	r5, [r6, #4]
 8006d14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d16:	07d9      	lsls	r1, r3, #31
 8006d18:	d405      	bmi.n	8006d26 <_vfiprintf_r+0x32>
 8006d1a:	89ab      	ldrh	r3, [r5, #12]
 8006d1c:	059a      	lsls	r2, r3, #22
 8006d1e:	d402      	bmi.n	8006d26 <_vfiprintf_r+0x32>
 8006d20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d22:	f000 fba5 	bl	8007470 <__retarget_lock_acquire_recursive>
 8006d26:	89ab      	ldrh	r3, [r5, #12]
 8006d28:	071b      	lsls	r3, r3, #28
 8006d2a:	d501      	bpl.n	8006d30 <_vfiprintf_r+0x3c>
 8006d2c:	692b      	ldr	r3, [r5, #16]
 8006d2e:	b9eb      	cbnz	r3, 8006d6c <_vfiprintf_r+0x78>
 8006d30:	4629      	mov	r1, r5
 8006d32:	4630      	mov	r0, r6
 8006d34:	f000 f96e 	bl	8007014 <__swsetup_r>
 8006d38:	b1c0      	cbz	r0, 8006d6c <_vfiprintf_r+0x78>
 8006d3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d3c:	07dc      	lsls	r4, r3, #31
 8006d3e:	d50e      	bpl.n	8006d5e <_vfiprintf_r+0x6a>
 8006d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d44:	b01d      	add	sp, #116	; 0x74
 8006d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d4a:	4b7b      	ldr	r3, [pc, #492]	; (8006f38 <_vfiprintf_r+0x244>)
 8006d4c:	429d      	cmp	r5, r3
 8006d4e:	d101      	bne.n	8006d54 <_vfiprintf_r+0x60>
 8006d50:	68b5      	ldr	r5, [r6, #8]
 8006d52:	e7df      	b.n	8006d14 <_vfiprintf_r+0x20>
 8006d54:	4b79      	ldr	r3, [pc, #484]	; (8006f3c <_vfiprintf_r+0x248>)
 8006d56:	429d      	cmp	r5, r3
 8006d58:	bf08      	it	eq
 8006d5a:	68f5      	ldreq	r5, [r6, #12]
 8006d5c:	e7da      	b.n	8006d14 <_vfiprintf_r+0x20>
 8006d5e:	89ab      	ldrh	r3, [r5, #12]
 8006d60:	0598      	lsls	r0, r3, #22
 8006d62:	d4ed      	bmi.n	8006d40 <_vfiprintf_r+0x4c>
 8006d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d66:	f000 fb84 	bl	8007472 <__retarget_lock_release_recursive>
 8006d6a:	e7e9      	b.n	8006d40 <_vfiprintf_r+0x4c>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d70:	2320      	movs	r3, #32
 8006d72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d76:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d7a:	2330      	movs	r3, #48	; 0x30
 8006d7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006f40 <_vfiprintf_r+0x24c>
 8006d80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d84:	f04f 0901 	mov.w	r9, #1
 8006d88:	4623      	mov	r3, r4
 8006d8a:	469a      	mov	sl, r3
 8006d8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d90:	b10a      	cbz	r2, 8006d96 <_vfiprintf_r+0xa2>
 8006d92:	2a25      	cmp	r2, #37	; 0x25
 8006d94:	d1f9      	bne.n	8006d8a <_vfiprintf_r+0x96>
 8006d96:	ebba 0b04 	subs.w	fp, sl, r4
 8006d9a:	d00b      	beq.n	8006db4 <_vfiprintf_r+0xc0>
 8006d9c:	465b      	mov	r3, fp
 8006d9e:	4622      	mov	r2, r4
 8006da0:	4629      	mov	r1, r5
 8006da2:	4630      	mov	r0, r6
 8006da4:	f7ff ff94 	bl	8006cd0 <__sfputs_r>
 8006da8:	3001      	adds	r0, #1
 8006daa:	f000 80aa 	beq.w	8006f02 <_vfiprintf_r+0x20e>
 8006dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006db0:	445a      	add	r2, fp
 8006db2:	9209      	str	r2, [sp, #36]	; 0x24
 8006db4:	f89a 3000 	ldrb.w	r3, [sl]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 80a2 	beq.w	8006f02 <_vfiprintf_r+0x20e>
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dc8:	f10a 0a01 	add.w	sl, sl, #1
 8006dcc:	9304      	str	r3, [sp, #16]
 8006dce:	9307      	str	r3, [sp, #28]
 8006dd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dd4:	931a      	str	r3, [sp, #104]	; 0x68
 8006dd6:	4654      	mov	r4, sl
 8006dd8:	2205      	movs	r2, #5
 8006dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dde:	4858      	ldr	r0, [pc, #352]	; (8006f40 <_vfiprintf_r+0x24c>)
 8006de0:	f7f9 f9fe 	bl	80001e0 <memchr>
 8006de4:	9a04      	ldr	r2, [sp, #16]
 8006de6:	b9d8      	cbnz	r0, 8006e20 <_vfiprintf_r+0x12c>
 8006de8:	06d1      	lsls	r1, r2, #27
 8006dea:	bf44      	itt	mi
 8006dec:	2320      	movmi	r3, #32
 8006dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006df2:	0713      	lsls	r3, r2, #28
 8006df4:	bf44      	itt	mi
 8006df6:	232b      	movmi	r3, #43	; 0x2b
 8006df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8006e00:	2b2a      	cmp	r3, #42	; 0x2a
 8006e02:	d015      	beq.n	8006e30 <_vfiprintf_r+0x13c>
 8006e04:	9a07      	ldr	r2, [sp, #28]
 8006e06:	4654      	mov	r4, sl
 8006e08:	2000      	movs	r0, #0
 8006e0a:	f04f 0c0a 	mov.w	ip, #10
 8006e0e:	4621      	mov	r1, r4
 8006e10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e14:	3b30      	subs	r3, #48	; 0x30
 8006e16:	2b09      	cmp	r3, #9
 8006e18:	d94e      	bls.n	8006eb8 <_vfiprintf_r+0x1c4>
 8006e1a:	b1b0      	cbz	r0, 8006e4a <_vfiprintf_r+0x156>
 8006e1c:	9207      	str	r2, [sp, #28]
 8006e1e:	e014      	b.n	8006e4a <_vfiprintf_r+0x156>
 8006e20:	eba0 0308 	sub.w	r3, r0, r8
 8006e24:	fa09 f303 	lsl.w	r3, r9, r3
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	9304      	str	r3, [sp, #16]
 8006e2c:	46a2      	mov	sl, r4
 8006e2e:	e7d2      	b.n	8006dd6 <_vfiprintf_r+0xe2>
 8006e30:	9b03      	ldr	r3, [sp, #12]
 8006e32:	1d19      	adds	r1, r3, #4
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	9103      	str	r1, [sp, #12]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	bfbb      	ittet	lt
 8006e3c:	425b      	neglt	r3, r3
 8006e3e:	f042 0202 	orrlt.w	r2, r2, #2
 8006e42:	9307      	strge	r3, [sp, #28]
 8006e44:	9307      	strlt	r3, [sp, #28]
 8006e46:	bfb8      	it	lt
 8006e48:	9204      	strlt	r2, [sp, #16]
 8006e4a:	7823      	ldrb	r3, [r4, #0]
 8006e4c:	2b2e      	cmp	r3, #46	; 0x2e
 8006e4e:	d10c      	bne.n	8006e6a <_vfiprintf_r+0x176>
 8006e50:	7863      	ldrb	r3, [r4, #1]
 8006e52:	2b2a      	cmp	r3, #42	; 0x2a
 8006e54:	d135      	bne.n	8006ec2 <_vfiprintf_r+0x1ce>
 8006e56:	9b03      	ldr	r3, [sp, #12]
 8006e58:	1d1a      	adds	r2, r3, #4
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	9203      	str	r2, [sp, #12]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	bfb8      	it	lt
 8006e62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006e66:	3402      	adds	r4, #2
 8006e68:	9305      	str	r3, [sp, #20]
 8006e6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006f50 <_vfiprintf_r+0x25c>
 8006e6e:	7821      	ldrb	r1, [r4, #0]
 8006e70:	2203      	movs	r2, #3
 8006e72:	4650      	mov	r0, sl
 8006e74:	f7f9 f9b4 	bl	80001e0 <memchr>
 8006e78:	b140      	cbz	r0, 8006e8c <_vfiprintf_r+0x198>
 8006e7a:	2340      	movs	r3, #64	; 0x40
 8006e7c:	eba0 000a 	sub.w	r0, r0, sl
 8006e80:	fa03 f000 	lsl.w	r0, r3, r0
 8006e84:	9b04      	ldr	r3, [sp, #16]
 8006e86:	4303      	orrs	r3, r0
 8006e88:	3401      	adds	r4, #1
 8006e8a:	9304      	str	r3, [sp, #16]
 8006e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e90:	482c      	ldr	r0, [pc, #176]	; (8006f44 <_vfiprintf_r+0x250>)
 8006e92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e96:	2206      	movs	r2, #6
 8006e98:	f7f9 f9a2 	bl	80001e0 <memchr>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	d03f      	beq.n	8006f20 <_vfiprintf_r+0x22c>
 8006ea0:	4b29      	ldr	r3, [pc, #164]	; (8006f48 <_vfiprintf_r+0x254>)
 8006ea2:	bb1b      	cbnz	r3, 8006eec <_vfiprintf_r+0x1f8>
 8006ea4:	9b03      	ldr	r3, [sp, #12]
 8006ea6:	3307      	adds	r3, #7
 8006ea8:	f023 0307 	bic.w	r3, r3, #7
 8006eac:	3308      	adds	r3, #8
 8006eae:	9303      	str	r3, [sp, #12]
 8006eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb2:	443b      	add	r3, r7
 8006eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8006eb6:	e767      	b.n	8006d88 <_vfiprintf_r+0x94>
 8006eb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ebc:	460c      	mov	r4, r1
 8006ebe:	2001      	movs	r0, #1
 8006ec0:	e7a5      	b.n	8006e0e <_vfiprintf_r+0x11a>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	3401      	adds	r4, #1
 8006ec6:	9305      	str	r3, [sp, #20]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	f04f 0c0a 	mov.w	ip, #10
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ed4:	3a30      	subs	r2, #48	; 0x30
 8006ed6:	2a09      	cmp	r2, #9
 8006ed8:	d903      	bls.n	8006ee2 <_vfiprintf_r+0x1ee>
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d0c5      	beq.n	8006e6a <_vfiprintf_r+0x176>
 8006ede:	9105      	str	r1, [sp, #20]
 8006ee0:	e7c3      	b.n	8006e6a <_vfiprintf_r+0x176>
 8006ee2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e7f0      	b.n	8006ece <_vfiprintf_r+0x1da>
 8006eec:	ab03      	add	r3, sp, #12
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	462a      	mov	r2, r5
 8006ef2:	4b16      	ldr	r3, [pc, #88]	; (8006f4c <_vfiprintf_r+0x258>)
 8006ef4:	a904      	add	r1, sp, #16
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	f7fd fdd6 	bl	8004aa8 <_printf_float>
 8006efc:	4607      	mov	r7, r0
 8006efe:	1c78      	adds	r0, r7, #1
 8006f00:	d1d6      	bne.n	8006eb0 <_vfiprintf_r+0x1bc>
 8006f02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f04:	07d9      	lsls	r1, r3, #31
 8006f06:	d405      	bmi.n	8006f14 <_vfiprintf_r+0x220>
 8006f08:	89ab      	ldrh	r3, [r5, #12]
 8006f0a:	059a      	lsls	r2, r3, #22
 8006f0c:	d402      	bmi.n	8006f14 <_vfiprintf_r+0x220>
 8006f0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f10:	f000 faaf 	bl	8007472 <__retarget_lock_release_recursive>
 8006f14:	89ab      	ldrh	r3, [r5, #12]
 8006f16:	065b      	lsls	r3, r3, #25
 8006f18:	f53f af12 	bmi.w	8006d40 <_vfiprintf_r+0x4c>
 8006f1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f1e:	e711      	b.n	8006d44 <_vfiprintf_r+0x50>
 8006f20:	ab03      	add	r3, sp, #12
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	462a      	mov	r2, r5
 8006f26:	4b09      	ldr	r3, [pc, #36]	; (8006f4c <_vfiprintf_r+0x258>)
 8006f28:	a904      	add	r1, sp, #16
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	f7fe f860 	bl	8004ff0 <_printf_i>
 8006f30:	e7e4      	b.n	8006efc <_vfiprintf_r+0x208>
 8006f32:	bf00      	nop
 8006f34:	08007b5c 	.word	0x08007b5c
 8006f38:	08007b7c 	.word	0x08007b7c
 8006f3c:	08007b3c 	.word	0x08007b3c
 8006f40:	080079e4 	.word	0x080079e4
 8006f44:	080079ee 	.word	0x080079ee
 8006f48:	08004aa9 	.word	0x08004aa9
 8006f4c:	08006cd1 	.word	0x08006cd1
 8006f50:	080079ea 	.word	0x080079ea

08006f54 <__swbuf_r>:
 8006f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f56:	460e      	mov	r6, r1
 8006f58:	4614      	mov	r4, r2
 8006f5a:	4605      	mov	r5, r0
 8006f5c:	b118      	cbz	r0, 8006f66 <__swbuf_r+0x12>
 8006f5e:	6983      	ldr	r3, [r0, #24]
 8006f60:	b90b      	cbnz	r3, 8006f66 <__swbuf_r+0x12>
 8006f62:	f000 f9e7 	bl	8007334 <__sinit>
 8006f66:	4b21      	ldr	r3, [pc, #132]	; (8006fec <__swbuf_r+0x98>)
 8006f68:	429c      	cmp	r4, r3
 8006f6a:	d12b      	bne.n	8006fc4 <__swbuf_r+0x70>
 8006f6c:	686c      	ldr	r4, [r5, #4]
 8006f6e:	69a3      	ldr	r3, [r4, #24]
 8006f70:	60a3      	str	r3, [r4, #8]
 8006f72:	89a3      	ldrh	r3, [r4, #12]
 8006f74:	071a      	lsls	r2, r3, #28
 8006f76:	d52f      	bpl.n	8006fd8 <__swbuf_r+0x84>
 8006f78:	6923      	ldr	r3, [r4, #16]
 8006f7a:	b36b      	cbz	r3, 8006fd8 <__swbuf_r+0x84>
 8006f7c:	6923      	ldr	r3, [r4, #16]
 8006f7e:	6820      	ldr	r0, [r4, #0]
 8006f80:	1ac0      	subs	r0, r0, r3
 8006f82:	6963      	ldr	r3, [r4, #20]
 8006f84:	b2f6      	uxtb	r6, r6
 8006f86:	4283      	cmp	r3, r0
 8006f88:	4637      	mov	r7, r6
 8006f8a:	dc04      	bgt.n	8006f96 <__swbuf_r+0x42>
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	4628      	mov	r0, r5
 8006f90:	f000 f93c 	bl	800720c <_fflush_r>
 8006f94:	bb30      	cbnz	r0, 8006fe4 <__swbuf_r+0x90>
 8006f96:	68a3      	ldr	r3, [r4, #8]
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	60a3      	str	r3, [r4, #8]
 8006f9c:	6823      	ldr	r3, [r4, #0]
 8006f9e:	1c5a      	adds	r2, r3, #1
 8006fa0:	6022      	str	r2, [r4, #0]
 8006fa2:	701e      	strb	r6, [r3, #0]
 8006fa4:	6963      	ldr	r3, [r4, #20]
 8006fa6:	3001      	adds	r0, #1
 8006fa8:	4283      	cmp	r3, r0
 8006faa:	d004      	beq.n	8006fb6 <__swbuf_r+0x62>
 8006fac:	89a3      	ldrh	r3, [r4, #12]
 8006fae:	07db      	lsls	r3, r3, #31
 8006fb0:	d506      	bpl.n	8006fc0 <__swbuf_r+0x6c>
 8006fb2:	2e0a      	cmp	r6, #10
 8006fb4:	d104      	bne.n	8006fc0 <__swbuf_r+0x6c>
 8006fb6:	4621      	mov	r1, r4
 8006fb8:	4628      	mov	r0, r5
 8006fba:	f000 f927 	bl	800720c <_fflush_r>
 8006fbe:	b988      	cbnz	r0, 8006fe4 <__swbuf_r+0x90>
 8006fc0:	4638      	mov	r0, r7
 8006fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fc4:	4b0a      	ldr	r3, [pc, #40]	; (8006ff0 <__swbuf_r+0x9c>)
 8006fc6:	429c      	cmp	r4, r3
 8006fc8:	d101      	bne.n	8006fce <__swbuf_r+0x7a>
 8006fca:	68ac      	ldr	r4, [r5, #8]
 8006fcc:	e7cf      	b.n	8006f6e <__swbuf_r+0x1a>
 8006fce:	4b09      	ldr	r3, [pc, #36]	; (8006ff4 <__swbuf_r+0xa0>)
 8006fd0:	429c      	cmp	r4, r3
 8006fd2:	bf08      	it	eq
 8006fd4:	68ec      	ldreq	r4, [r5, #12]
 8006fd6:	e7ca      	b.n	8006f6e <__swbuf_r+0x1a>
 8006fd8:	4621      	mov	r1, r4
 8006fda:	4628      	mov	r0, r5
 8006fdc:	f000 f81a 	bl	8007014 <__swsetup_r>
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	d0cb      	beq.n	8006f7c <__swbuf_r+0x28>
 8006fe4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006fe8:	e7ea      	b.n	8006fc0 <__swbuf_r+0x6c>
 8006fea:	bf00      	nop
 8006fec:	08007b5c 	.word	0x08007b5c
 8006ff0:	08007b7c 	.word	0x08007b7c
 8006ff4:	08007b3c 	.word	0x08007b3c

08006ff8 <__ascii_wctomb>:
 8006ff8:	b149      	cbz	r1, 800700e <__ascii_wctomb+0x16>
 8006ffa:	2aff      	cmp	r2, #255	; 0xff
 8006ffc:	bf85      	ittet	hi
 8006ffe:	238a      	movhi	r3, #138	; 0x8a
 8007000:	6003      	strhi	r3, [r0, #0]
 8007002:	700a      	strbls	r2, [r1, #0]
 8007004:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007008:	bf98      	it	ls
 800700a:	2001      	movls	r0, #1
 800700c:	4770      	bx	lr
 800700e:	4608      	mov	r0, r1
 8007010:	4770      	bx	lr
	...

08007014 <__swsetup_r>:
 8007014:	4b32      	ldr	r3, [pc, #200]	; (80070e0 <__swsetup_r+0xcc>)
 8007016:	b570      	push	{r4, r5, r6, lr}
 8007018:	681d      	ldr	r5, [r3, #0]
 800701a:	4606      	mov	r6, r0
 800701c:	460c      	mov	r4, r1
 800701e:	b125      	cbz	r5, 800702a <__swsetup_r+0x16>
 8007020:	69ab      	ldr	r3, [r5, #24]
 8007022:	b913      	cbnz	r3, 800702a <__swsetup_r+0x16>
 8007024:	4628      	mov	r0, r5
 8007026:	f000 f985 	bl	8007334 <__sinit>
 800702a:	4b2e      	ldr	r3, [pc, #184]	; (80070e4 <__swsetup_r+0xd0>)
 800702c:	429c      	cmp	r4, r3
 800702e:	d10f      	bne.n	8007050 <__swsetup_r+0x3c>
 8007030:	686c      	ldr	r4, [r5, #4]
 8007032:	89a3      	ldrh	r3, [r4, #12]
 8007034:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007038:	0719      	lsls	r1, r3, #28
 800703a:	d42c      	bmi.n	8007096 <__swsetup_r+0x82>
 800703c:	06dd      	lsls	r5, r3, #27
 800703e:	d411      	bmi.n	8007064 <__swsetup_r+0x50>
 8007040:	2309      	movs	r3, #9
 8007042:	6033      	str	r3, [r6, #0]
 8007044:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007048:	81a3      	strh	r3, [r4, #12]
 800704a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800704e:	e03e      	b.n	80070ce <__swsetup_r+0xba>
 8007050:	4b25      	ldr	r3, [pc, #148]	; (80070e8 <__swsetup_r+0xd4>)
 8007052:	429c      	cmp	r4, r3
 8007054:	d101      	bne.n	800705a <__swsetup_r+0x46>
 8007056:	68ac      	ldr	r4, [r5, #8]
 8007058:	e7eb      	b.n	8007032 <__swsetup_r+0x1e>
 800705a:	4b24      	ldr	r3, [pc, #144]	; (80070ec <__swsetup_r+0xd8>)
 800705c:	429c      	cmp	r4, r3
 800705e:	bf08      	it	eq
 8007060:	68ec      	ldreq	r4, [r5, #12]
 8007062:	e7e6      	b.n	8007032 <__swsetup_r+0x1e>
 8007064:	0758      	lsls	r0, r3, #29
 8007066:	d512      	bpl.n	800708e <__swsetup_r+0x7a>
 8007068:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800706a:	b141      	cbz	r1, 800707e <__swsetup_r+0x6a>
 800706c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007070:	4299      	cmp	r1, r3
 8007072:	d002      	beq.n	800707a <__swsetup_r+0x66>
 8007074:	4630      	mov	r0, r6
 8007076:	f7ff fb31 	bl	80066dc <_free_r>
 800707a:	2300      	movs	r3, #0
 800707c:	6363      	str	r3, [r4, #52]	; 0x34
 800707e:	89a3      	ldrh	r3, [r4, #12]
 8007080:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007084:	81a3      	strh	r3, [r4, #12]
 8007086:	2300      	movs	r3, #0
 8007088:	6063      	str	r3, [r4, #4]
 800708a:	6923      	ldr	r3, [r4, #16]
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	89a3      	ldrh	r3, [r4, #12]
 8007090:	f043 0308 	orr.w	r3, r3, #8
 8007094:	81a3      	strh	r3, [r4, #12]
 8007096:	6923      	ldr	r3, [r4, #16]
 8007098:	b94b      	cbnz	r3, 80070ae <__swsetup_r+0x9a>
 800709a:	89a3      	ldrh	r3, [r4, #12]
 800709c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80070a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070a4:	d003      	beq.n	80070ae <__swsetup_r+0x9a>
 80070a6:	4621      	mov	r1, r4
 80070a8:	4630      	mov	r0, r6
 80070aa:	f000 fa09 	bl	80074c0 <__smakebuf_r>
 80070ae:	89a0      	ldrh	r0, [r4, #12]
 80070b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070b4:	f010 0301 	ands.w	r3, r0, #1
 80070b8:	d00a      	beq.n	80070d0 <__swsetup_r+0xbc>
 80070ba:	2300      	movs	r3, #0
 80070bc:	60a3      	str	r3, [r4, #8]
 80070be:	6963      	ldr	r3, [r4, #20]
 80070c0:	425b      	negs	r3, r3
 80070c2:	61a3      	str	r3, [r4, #24]
 80070c4:	6923      	ldr	r3, [r4, #16]
 80070c6:	b943      	cbnz	r3, 80070da <__swsetup_r+0xc6>
 80070c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80070cc:	d1ba      	bne.n	8007044 <__swsetup_r+0x30>
 80070ce:	bd70      	pop	{r4, r5, r6, pc}
 80070d0:	0781      	lsls	r1, r0, #30
 80070d2:	bf58      	it	pl
 80070d4:	6963      	ldrpl	r3, [r4, #20]
 80070d6:	60a3      	str	r3, [r4, #8]
 80070d8:	e7f4      	b.n	80070c4 <__swsetup_r+0xb0>
 80070da:	2000      	movs	r0, #0
 80070dc:	e7f7      	b.n	80070ce <__swsetup_r+0xba>
 80070de:	bf00      	nop
 80070e0:	20000014 	.word	0x20000014
 80070e4:	08007b5c 	.word	0x08007b5c
 80070e8:	08007b7c 	.word	0x08007b7c
 80070ec:	08007b3c 	.word	0x08007b3c

080070f0 <abort>:
 80070f0:	b508      	push	{r3, lr}
 80070f2:	2006      	movs	r0, #6
 80070f4:	f000 fa54 	bl	80075a0 <raise>
 80070f8:	2001      	movs	r0, #1
 80070fa:	f7fa f8e3 	bl	80012c4 <_exit>
	...

08007100 <__sflush_r>:
 8007100:	898a      	ldrh	r2, [r1, #12]
 8007102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007106:	4605      	mov	r5, r0
 8007108:	0710      	lsls	r0, r2, #28
 800710a:	460c      	mov	r4, r1
 800710c:	d458      	bmi.n	80071c0 <__sflush_r+0xc0>
 800710e:	684b      	ldr	r3, [r1, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	dc05      	bgt.n	8007120 <__sflush_r+0x20>
 8007114:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007116:	2b00      	cmp	r3, #0
 8007118:	dc02      	bgt.n	8007120 <__sflush_r+0x20>
 800711a:	2000      	movs	r0, #0
 800711c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007120:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007122:	2e00      	cmp	r6, #0
 8007124:	d0f9      	beq.n	800711a <__sflush_r+0x1a>
 8007126:	2300      	movs	r3, #0
 8007128:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800712c:	682f      	ldr	r7, [r5, #0]
 800712e:	602b      	str	r3, [r5, #0]
 8007130:	d032      	beq.n	8007198 <__sflush_r+0x98>
 8007132:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007134:	89a3      	ldrh	r3, [r4, #12]
 8007136:	075a      	lsls	r2, r3, #29
 8007138:	d505      	bpl.n	8007146 <__sflush_r+0x46>
 800713a:	6863      	ldr	r3, [r4, #4]
 800713c:	1ac0      	subs	r0, r0, r3
 800713e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007140:	b10b      	cbz	r3, 8007146 <__sflush_r+0x46>
 8007142:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007144:	1ac0      	subs	r0, r0, r3
 8007146:	2300      	movs	r3, #0
 8007148:	4602      	mov	r2, r0
 800714a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800714c:	6a21      	ldr	r1, [r4, #32]
 800714e:	4628      	mov	r0, r5
 8007150:	47b0      	blx	r6
 8007152:	1c43      	adds	r3, r0, #1
 8007154:	89a3      	ldrh	r3, [r4, #12]
 8007156:	d106      	bne.n	8007166 <__sflush_r+0x66>
 8007158:	6829      	ldr	r1, [r5, #0]
 800715a:	291d      	cmp	r1, #29
 800715c:	d82c      	bhi.n	80071b8 <__sflush_r+0xb8>
 800715e:	4a2a      	ldr	r2, [pc, #168]	; (8007208 <__sflush_r+0x108>)
 8007160:	40ca      	lsrs	r2, r1
 8007162:	07d6      	lsls	r6, r2, #31
 8007164:	d528      	bpl.n	80071b8 <__sflush_r+0xb8>
 8007166:	2200      	movs	r2, #0
 8007168:	6062      	str	r2, [r4, #4]
 800716a:	04d9      	lsls	r1, r3, #19
 800716c:	6922      	ldr	r2, [r4, #16]
 800716e:	6022      	str	r2, [r4, #0]
 8007170:	d504      	bpl.n	800717c <__sflush_r+0x7c>
 8007172:	1c42      	adds	r2, r0, #1
 8007174:	d101      	bne.n	800717a <__sflush_r+0x7a>
 8007176:	682b      	ldr	r3, [r5, #0]
 8007178:	b903      	cbnz	r3, 800717c <__sflush_r+0x7c>
 800717a:	6560      	str	r0, [r4, #84]	; 0x54
 800717c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800717e:	602f      	str	r7, [r5, #0]
 8007180:	2900      	cmp	r1, #0
 8007182:	d0ca      	beq.n	800711a <__sflush_r+0x1a>
 8007184:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007188:	4299      	cmp	r1, r3
 800718a:	d002      	beq.n	8007192 <__sflush_r+0x92>
 800718c:	4628      	mov	r0, r5
 800718e:	f7ff faa5 	bl	80066dc <_free_r>
 8007192:	2000      	movs	r0, #0
 8007194:	6360      	str	r0, [r4, #52]	; 0x34
 8007196:	e7c1      	b.n	800711c <__sflush_r+0x1c>
 8007198:	6a21      	ldr	r1, [r4, #32]
 800719a:	2301      	movs	r3, #1
 800719c:	4628      	mov	r0, r5
 800719e:	47b0      	blx	r6
 80071a0:	1c41      	adds	r1, r0, #1
 80071a2:	d1c7      	bne.n	8007134 <__sflush_r+0x34>
 80071a4:	682b      	ldr	r3, [r5, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d0c4      	beq.n	8007134 <__sflush_r+0x34>
 80071aa:	2b1d      	cmp	r3, #29
 80071ac:	d001      	beq.n	80071b2 <__sflush_r+0xb2>
 80071ae:	2b16      	cmp	r3, #22
 80071b0:	d101      	bne.n	80071b6 <__sflush_r+0xb6>
 80071b2:	602f      	str	r7, [r5, #0]
 80071b4:	e7b1      	b.n	800711a <__sflush_r+0x1a>
 80071b6:	89a3      	ldrh	r3, [r4, #12]
 80071b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071bc:	81a3      	strh	r3, [r4, #12]
 80071be:	e7ad      	b.n	800711c <__sflush_r+0x1c>
 80071c0:	690f      	ldr	r7, [r1, #16]
 80071c2:	2f00      	cmp	r7, #0
 80071c4:	d0a9      	beq.n	800711a <__sflush_r+0x1a>
 80071c6:	0793      	lsls	r3, r2, #30
 80071c8:	680e      	ldr	r6, [r1, #0]
 80071ca:	bf08      	it	eq
 80071cc:	694b      	ldreq	r3, [r1, #20]
 80071ce:	600f      	str	r7, [r1, #0]
 80071d0:	bf18      	it	ne
 80071d2:	2300      	movne	r3, #0
 80071d4:	eba6 0807 	sub.w	r8, r6, r7
 80071d8:	608b      	str	r3, [r1, #8]
 80071da:	f1b8 0f00 	cmp.w	r8, #0
 80071de:	dd9c      	ble.n	800711a <__sflush_r+0x1a>
 80071e0:	6a21      	ldr	r1, [r4, #32]
 80071e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80071e4:	4643      	mov	r3, r8
 80071e6:	463a      	mov	r2, r7
 80071e8:	4628      	mov	r0, r5
 80071ea:	47b0      	blx	r6
 80071ec:	2800      	cmp	r0, #0
 80071ee:	dc06      	bgt.n	80071fe <__sflush_r+0xfe>
 80071f0:	89a3      	ldrh	r3, [r4, #12]
 80071f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071f6:	81a3      	strh	r3, [r4, #12]
 80071f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071fc:	e78e      	b.n	800711c <__sflush_r+0x1c>
 80071fe:	4407      	add	r7, r0
 8007200:	eba8 0800 	sub.w	r8, r8, r0
 8007204:	e7e9      	b.n	80071da <__sflush_r+0xda>
 8007206:	bf00      	nop
 8007208:	20400001 	.word	0x20400001

0800720c <_fflush_r>:
 800720c:	b538      	push	{r3, r4, r5, lr}
 800720e:	690b      	ldr	r3, [r1, #16]
 8007210:	4605      	mov	r5, r0
 8007212:	460c      	mov	r4, r1
 8007214:	b913      	cbnz	r3, 800721c <_fflush_r+0x10>
 8007216:	2500      	movs	r5, #0
 8007218:	4628      	mov	r0, r5
 800721a:	bd38      	pop	{r3, r4, r5, pc}
 800721c:	b118      	cbz	r0, 8007226 <_fflush_r+0x1a>
 800721e:	6983      	ldr	r3, [r0, #24]
 8007220:	b90b      	cbnz	r3, 8007226 <_fflush_r+0x1a>
 8007222:	f000 f887 	bl	8007334 <__sinit>
 8007226:	4b14      	ldr	r3, [pc, #80]	; (8007278 <_fflush_r+0x6c>)
 8007228:	429c      	cmp	r4, r3
 800722a:	d11b      	bne.n	8007264 <_fflush_r+0x58>
 800722c:	686c      	ldr	r4, [r5, #4]
 800722e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d0ef      	beq.n	8007216 <_fflush_r+0xa>
 8007236:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007238:	07d0      	lsls	r0, r2, #31
 800723a:	d404      	bmi.n	8007246 <_fflush_r+0x3a>
 800723c:	0599      	lsls	r1, r3, #22
 800723e:	d402      	bmi.n	8007246 <_fflush_r+0x3a>
 8007240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007242:	f000 f915 	bl	8007470 <__retarget_lock_acquire_recursive>
 8007246:	4628      	mov	r0, r5
 8007248:	4621      	mov	r1, r4
 800724a:	f7ff ff59 	bl	8007100 <__sflush_r>
 800724e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007250:	07da      	lsls	r2, r3, #31
 8007252:	4605      	mov	r5, r0
 8007254:	d4e0      	bmi.n	8007218 <_fflush_r+0xc>
 8007256:	89a3      	ldrh	r3, [r4, #12]
 8007258:	059b      	lsls	r3, r3, #22
 800725a:	d4dd      	bmi.n	8007218 <_fflush_r+0xc>
 800725c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800725e:	f000 f908 	bl	8007472 <__retarget_lock_release_recursive>
 8007262:	e7d9      	b.n	8007218 <_fflush_r+0xc>
 8007264:	4b05      	ldr	r3, [pc, #20]	; (800727c <_fflush_r+0x70>)
 8007266:	429c      	cmp	r4, r3
 8007268:	d101      	bne.n	800726e <_fflush_r+0x62>
 800726a:	68ac      	ldr	r4, [r5, #8]
 800726c:	e7df      	b.n	800722e <_fflush_r+0x22>
 800726e:	4b04      	ldr	r3, [pc, #16]	; (8007280 <_fflush_r+0x74>)
 8007270:	429c      	cmp	r4, r3
 8007272:	bf08      	it	eq
 8007274:	68ec      	ldreq	r4, [r5, #12]
 8007276:	e7da      	b.n	800722e <_fflush_r+0x22>
 8007278:	08007b5c 	.word	0x08007b5c
 800727c:	08007b7c 	.word	0x08007b7c
 8007280:	08007b3c 	.word	0x08007b3c

08007284 <std>:
 8007284:	2300      	movs	r3, #0
 8007286:	b510      	push	{r4, lr}
 8007288:	4604      	mov	r4, r0
 800728a:	e9c0 3300 	strd	r3, r3, [r0]
 800728e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007292:	6083      	str	r3, [r0, #8]
 8007294:	8181      	strh	r1, [r0, #12]
 8007296:	6643      	str	r3, [r0, #100]	; 0x64
 8007298:	81c2      	strh	r2, [r0, #14]
 800729a:	6183      	str	r3, [r0, #24]
 800729c:	4619      	mov	r1, r3
 800729e:	2208      	movs	r2, #8
 80072a0:	305c      	adds	r0, #92	; 0x5c
 80072a2:	f7fd fb59 	bl	8004958 <memset>
 80072a6:	4b05      	ldr	r3, [pc, #20]	; (80072bc <std+0x38>)
 80072a8:	6263      	str	r3, [r4, #36]	; 0x24
 80072aa:	4b05      	ldr	r3, [pc, #20]	; (80072c0 <std+0x3c>)
 80072ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80072ae:	4b05      	ldr	r3, [pc, #20]	; (80072c4 <std+0x40>)
 80072b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80072b2:	4b05      	ldr	r3, [pc, #20]	; (80072c8 <std+0x44>)
 80072b4:	6224      	str	r4, [r4, #32]
 80072b6:	6323      	str	r3, [r4, #48]	; 0x30
 80072b8:	bd10      	pop	{r4, pc}
 80072ba:	bf00      	nop
 80072bc:	080075d9 	.word	0x080075d9
 80072c0:	080075fb 	.word	0x080075fb
 80072c4:	08007633 	.word	0x08007633
 80072c8:	08007657 	.word	0x08007657

080072cc <_cleanup_r>:
 80072cc:	4901      	ldr	r1, [pc, #4]	; (80072d4 <_cleanup_r+0x8>)
 80072ce:	f000 b8af 	b.w	8007430 <_fwalk_reent>
 80072d2:	bf00      	nop
 80072d4:	0800720d 	.word	0x0800720d

080072d8 <__sfmoreglue>:
 80072d8:	b570      	push	{r4, r5, r6, lr}
 80072da:	2268      	movs	r2, #104	; 0x68
 80072dc:	1e4d      	subs	r5, r1, #1
 80072de:	4355      	muls	r5, r2
 80072e0:	460e      	mov	r6, r1
 80072e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80072e6:	f7ff fa65 	bl	80067b4 <_malloc_r>
 80072ea:	4604      	mov	r4, r0
 80072ec:	b140      	cbz	r0, 8007300 <__sfmoreglue+0x28>
 80072ee:	2100      	movs	r1, #0
 80072f0:	e9c0 1600 	strd	r1, r6, [r0]
 80072f4:	300c      	adds	r0, #12
 80072f6:	60a0      	str	r0, [r4, #8]
 80072f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80072fc:	f7fd fb2c 	bl	8004958 <memset>
 8007300:	4620      	mov	r0, r4
 8007302:	bd70      	pop	{r4, r5, r6, pc}

08007304 <__sfp_lock_acquire>:
 8007304:	4801      	ldr	r0, [pc, #4]	; (800730c <__sfp_lock_acquire+0x8>)
 8007306:	f000 b8b3 	b.w	8007470 <__retarget_lock_acquire_recursive>
 800730a:	bf00      	nop
 800730c:	200002f9 	.word	0x200002f9

08007310 <__sfp_lock_release>:
 8007310:	4801      	ldr	r0, [pc, #4]	; (8007318 <__sfp_lock_release+0x8>)
 8007312:	f000 b8ae 	b.w	8007472 <__retarget_lock_release_recursive>
 8007316:	bf00      	nop
 8007318:	200002f9 	.word	0x200002f9

0800731c <__sinit_lock_acquire>:
 800731c:	4801      	ldr	r0, [pc, #4]	; (8007324 <__sinit_lock_acquire+0x8>)
 800731e:	f000 b8a7 	b.w	8007470 <__retarget_lock_acquire_recursive>
 8007322:	bf00      	nop
 8007324:	200002fa 	.word	0x200002fa

08007328 <__sinit_lock_release>:
 8007328:	4801      	ldr	r0, [pc, #4]	; (8007330 <__sinit_lock_release+0x8>)
 800732a:	f000 b8a2 	b.w	8007472 <__retarget_lock_release_recursive>
 800732e:	bf00      	nop
 8007330:	200002fa 	.word	0x200002fa

08007334 <__sinit>:
 8007334:	b510      	push	{r4, lr}
 8007336:	4604      	mov	r4, r0
 8007338:	f7ff fff0 	bl	800731c <__sinit_lock_acquire>
 800733c:	69a3      	ldr	r3, [r4, #24]
 800733e:	b11b      	cbz	r3, 8007348 <__sinit+0x14>
 8007340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007344:	f7ff bff0 	b.w	8007328 <__sinit_lock_release>
 8007348:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800734c:	6523      	str	r3, [r4, #80]	; 0x50
 800734e:	4b13      	ldr	r3, [pc, #76]	; (800739c <__sinit+0x68>)
 8007350:	4a13      	ldr	r2, [pc, #76]	; (80073a0 <__sinit+0x6c>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	62a2      	str	r2, [r4, #40]	; 0x28
 8007356:	42a3      	cmp	r3, r4
 8007358:	bf04      	itt	eq
 800735a:	2301      	moveq	r3, #1
 800735c:	61a3      	streq	r3, [r4, #24]
 800735e:	4620      	mov	r0, r4
 8007360:	f000 f820 	bl	80073a4 <__sfp>
 8007364:	6060      	str	r0, [r4, #4]
 8007366:	4620      	mov	r0, r4
 8007368:	f000 f81c 	bl	80073a4 <__sfp>
 800736c:	60a0      	str	r0, [r4, #8]
 800736e:	4620      	mov	r0, r4
 8007370:	f000 f818 	bl	80073a4 <__sfp>
 8007374:	2200      	movs	r2, #0
 8007376:	60e0      	str	r0, [r4, #12]
 8007378:	2104      	movs	r1, #4
 800737a:	6860      	ldr	r0, [r4, #4]
 800737c:	f7ff ff82 	bl	8007284 <std>
 8007380:	68a0      	ldr	r0, [r4, #8]
 8007382:	2201      	movs	r2, #1
 8007384:	2109      	movs	r1, #9
 8007386:	f7ff ff7d 	bl	8007284 <std>
 800738a:	68e0      	ldr	r0, [r4, #12]
 800738c:	2202      	movs	r2, #2
 800738e:	2112      	movs	r1, #18
 8007390:	f7ff ff78 	bl	8007284 <std>
 8007394:	2301      	movs	r3, #1
 8007396:	61a3      	str	r3, [r4, #24]
 8007398:	e7d2      	b.n	8007340 <__sinit+0xc>
 800739a:	bf00      	nop
 800739c:	080077c0 	.word	0x080077c0
 80073a0:	080072cd 	.word	0x080072cd

080073a4 <__sfp>:
 80073a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a6:	4607      	mov	r7, r0
 80073a8:	f7ff ffac 	bl	8007304 <__sfp_lock_acquire>
 80073ac:	4b1e      	ldr	r3, [pc, #120]	; (8007428 <__sfp+0x84>)
 80073ae:	681e      	ldr	r6, [r3, #0]
 80073b0:	69b3      	ldr	r3, [r6, #24]
 80073b2:	b913      	cbnz	r3, 80073ba <__sfp+0x16>
 80073b4:	4630      	mov	r0, r6
 80073b6:	f7ff ffbd 	bl	8007334 <__sinit>
 80073ba:	3648      	adds	r6, #72	; 0x48
 80073bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80073c0:	3b01      	subs	r3, #1
 80073c2:	d503      	bpl.n	80073cc <__sfp+0x28>
 80073c4:	6833      	ldr	r3, [r6, #0]
 80073c6:	b30b      	cbz	r3, 800740c <__sfp+0x68>
 80073c8:	6836      	ldr	r6, [r6, #0]
 80073ca:	e7f7      	b.n	80073bc <__sfp+0x18>
 80073cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80073d0:	b9d5      	cbnz	r5, 8007408 <__sfp+0x64>
 80073d2:	4b16      	ldr	r3, [pc, #88]	; (800742c <__sfp+0x88>)
 80073d4:	60e3      	str	r3, [r4, #12]
 80073d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80073da:	6665      	str	r5, [r4, #100]	; 0x64
 80073dc:	f000 f847 	bl	800746e <__retarget_lock_init_recursive>
 80073e0:	f7ff ff96 	bl	8007310 <__sfp_lock_release>
 80073e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80073e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80073ec:	6025      	str	r5, [r4, #0]
 80073ee:	61a5      	str	r5, [r4, #24]
 80073f0:	2208      	movs	r2, #8
 80073f2:	4629      	mov	r1, r5
 80073f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80073f8:	f7fd faae 	bl	8004958 <memset>
 80073fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007400:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007404:	4620      	mov	r0, r4
 8007406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007408:	3468      	adds	r4, #104	; 0x68
 800740a:	e7d9      	b.n	80073c0 <__sfp+0x1c>
 800740c:	2104      	movs	r1, #4
 800740e:	4638      	mov	r0, r7
 8007410:	f7ff ff62 	bl	80072d8 <__sfmoreglue>
 8007414:	4604      	mov	r4, r0
 8007416:	6030      	str	r0, [r6, #0]
 8007418:	2800      	cmp	r0, #0
 800741a:	d1d5      	bne.n	80073c8 <__sfp+0x24>
 800741c:	f7ff ff78 	bl	8007310 <__sfp_lock_release>
 8007420:	230c      	movs	r3, #12
 8007422:	603b      	str	r3, [r7, #0]
 8007424:	e7ee      	b.n	8007404 <__sfp+0x60>
 8007426:	bf00      	nop
 8007428:	080077c0 	.word	0x080077c0
 800742c:	ffff0001 	.word	0xffff0001

08007430 <_fwalk_reent>:
 8007430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007434:	4606      	mov	r6, r0
 8007436:	4688      	mov	r8, r1
 8007438:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800743c:	2700      	movs	r7, #0
 800743e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007442:	f1b9 0901 	subs.w	r9, r9, #1
 8007446:	d505      	bpl.n	8007454 <_fwalk_reent+0x24>
 8007448:	6824      	ldr	r4, [r4, #0]
 800744a:	2c00      	cmp	r4, #0
 800744c:	d1f7      	bne.n	800743e <_fwalk_reent+0xe>
 800744e:	4638      	mov	r0, r7
 8007450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007454:	89ab      	ldrh	r3, [r5, #12]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d907      	bls.n	800746a <_fwalk_reent+0x3a>
 800745a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800745e:	3301      	adds	r3, #1
 8007460:	d003      	beq.n	800746a <_fwalk_reent+0x3a>
 8007462:	4629      	mov	r1, r5
 8007464:	4630      	mov	r0, r6
 8007466:	47c0      	blx	r8
 8007468:	4307      	orrs	r7, r0
 800746a:	3568      	adds	r5, #104	; 0x68
 800746c:	e7e9      	b.n	8007442 <_fwalk_reent+0x12>

0800746e <__retarget_lock_init_recursive>:
 800746e:	4770      	bx	lr

08007470 <__retarget_lock_acquire_recursive>:
 8007470:	4770      	bx	lr

08007472 <__retarget_lock_release_recursive>:
 8007472:	4770      	bx	lr

08007474 <__swhatbuf_r>:
 8007474:	b570      	push	{r4, r5, r6, lr}
 8007476:	460e      	mov	r6, r1
 8007478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800747c:	2900      	cmp	r1, #0
 800747e:	b096      	sub	sp, #88	; 0x58
 8007480:	4614      	mov	r4, r2
 8007482:	461d      	mov	r5, r3
 8007484:	da08      	bge.n	8007498 <__swhatbuf_r+0x24>
 8007486:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	602a      	str	r2, [r5, #0]
 800748e:	061a      	lsls	r2, r3, #24
 8007490:	d410      	bmi.n	80074b4 <__swhatbuf_r+0x40>
 8007492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007496:	e00e      	b.n	80074b6 <__swhatbuf_r+0x42>
 8007498:	466a      	mov	r2, sp
 800749a:	f000 f903 	bl	80076a4 <_fstat_r>
 800749e:	2800      	cmp	r0, #0
 80074a0:	dbf1      	blt.n	8007486 <__swhatbuf_r+0x12>
 80074a2:	9a01      	ldr	r2, [sp, #4]
 80074a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80074a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80074ac:	425a      	negs	r2, r3
 80074ae:	415a      	adcs	r2, r3
 80074b0:	602a      	str	r2, [r5, #0]
 80074b2:	e7ee      	b.n	8007492 <__swhatbuf_r+0x1e>
 80074b4:	2340      	movs	r3, #64	; 0x40
 80074b6:	2000      	movs	r0, #0
 80074b8:	6023      	str	r3, [r4, #0]
 80074ba:	b016      	add	sp, #88	; 0x58
 80074bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080074c0 <__smakebuf_r>:
 80074c0:	898b      	ldrh	r3, [r1, #12]
 80074c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074c4:	079d      	lsls	r5, r3, #30
 80074c6:	4606      	mov	r6, r0
 80074c8:	460c      	mov	r4, r1
 80074ca:	d507      	bpl.n	80074dc <__smakebuf_r+0x1c>
 80074cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80074d0:	6023      	str	r3, [r4, #0]
 80074d2:	6123      	str	r3, [r4, #16]
 80074d4:	2301      	movs	r3, #1
 80074d6:	6163      	str	r3, [r4, #20]
 80074d8:	b002      	add	sp, #8
 80074da:	bd70      	pop	{r4, r5, r6, pc}
 80074dc:	ab01      	add	r3, sp, #4
 80074de:	466a      	mov	r2, sp
 80074e0:	f7ff ffc8 	bl	8007474 <__swhatbuf_r>
 80074e4:	9900      	ldr	r1, [sp, #0]
 80074e6:	4605      	mov	r5, r0
 80074e8:	4630      	mov	r0, r6
 80074ea:	f7ff f963 	bl	80067b4 <_malloc_r>
 80074ee:	b948      	cbnz	r0, 8007504 <__smakebuf_r+0x44>
 80074f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074f4:	059a      	lsls	r2, r3, #22
 80074f6:	d4ef      	bmi.n	80074d8 <__smakebuf_r+0x18>
 80074f8:	f023 0303 	bic.w	r3, r3, #3
 80074fc:	f043 0302 	orr.w	r3, r3, #2
 8007500:	81a3      	strh	r3, [r4, #12]
 8007502:	e7e3      	b.n	80074cc <__smakebuf_r+0xc>
 8007504:	4b0d      	ldr	r3, [pc, #52]	; (800753c <__smakebuf_r+0x7c>)
 8007506:	62b3      	str	r3, [r6, #40]	; 0x28
 8007508:	89a3      	ldrh	r3, [r4, #12]
 800750a:	6020      	str	r0, [r4, #0]
 800750c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007510:	81a3      	strh	r3, [r4, #12]
 8007512:	9b00      	ldr	r3, [sp, #0]
 8007514:	6163      	str	r3, [r4, #20]
 8007516:	9b01      	ldr	r3, [sp, #4]
 8007518:	6120      	str	r0, [r4, #16]
 800751a:	b15b      	cbz	r3, 8007534 <__smakebuf_r+0x74>
 800751c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007520:	4630      	mov	r0, r6
 8007522:	f000 f8d1 	bl	80076c8 <_isatty_r>
 8007526:	b128      	cbz	r0, 8007534 <__smakebuf_r+0x74>
 8007528:	89a3      	ldrh	r3, [r4, #12]
 800752a:	f023 0303 	bic.w	r3, r3, #3
 800752e:	f043 0301 	orr.w	r3, r3, #1
 8007532:	81a3      	strh	r3, [r4, #12]
 8007534:	89a0      	ldrh	r0, [r4, #12]
 8007536:	4305      	orrs	r5, r0
 8007538:	81a5      	strh	r5, [r4, #12]
 800753a:	e7cd      	b.n	80074d8 <__smakebuf_r+0x18>
 800753c:	080072cd 	.word	0x080072cd

08007540 <_malloc_usable_size_r>:
 8007540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007544:	1f18      	subs	r0, r3, #4
 8007546:	2b00      	cmp	r3, #0
 8007548:	bfbc      	itt	lt
 800754a:	580b      	ldrlt	r3, [r1, r0]
 800754c:	18c0      	addlt	r0, r0, r3
 800754e:	4770      	bx	lr

08007550 <_raise_r>:
 8007550:	291f      	cmp	r1, #31
 8007552:	b538      	push	{r3, r4, r5, lr}
 8007554:	4604      	mov	r4, r0
 8007556:	460d      	mov	r5, r1
 8007558:	d904      	bls.n	8007564 <_raise_r+0x14>
 800755a:	2316      	movs	r3, #22
 800755c:	6003      	str	r3, [r0, #0]
 800755e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007562:	bd38      	pop	{r3, r4, r5, pc}
 8007564:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007566:	b112      	cbz	r2, 800756e <_raise_r+0x1e>
 8007568:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800756c:	b94b      	cbnz	r3, 8007582 <_raise_r+0x32>
 800756e:	4620      	mov	r0, r4
 8007570:	f000 f830 	bl	80075d4 <_getpid_r>
 8007574:	462a      	mov	r2, r5
 8007576:	4601      	mov	r1, r0
 8007578:	4620      	mov	r0, r4
 800757a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800757e:	f000 b817 	b.w	80075b0 <_kill_r>
 8007582:	2b01      	cmp	r3, #1
 8007584:	d00a      	beq.n	800759c <_raise_r+0x4c>
 8007586:	1c59      	adds	r1, r3, #1
 8007588:	d103      	bne.n	8007592 <_raise_r+0x42>
 800758a:	2316      	movs	r3, #22
 800758c:	6003      	str	r3, [r0, #0]
 800758e:	2001      	movs	r0, #1
 8007590:	e7e7      	b.n	8007562 <_raise_r+0x12>
 8007592:	2400      	movs	r4, #0
 8007594:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007598:	4628      	mov	r0, r5
 800759a:	4798      	blx	r3
 800759c:	2000      	movs	r0, #0
 800759e:	e7e0      	b.n	8007562 <_raise_r+0x12>

080075a0 <raise>:
 80075a0:	4b02      	ldr	r3, [pc, #8]	; (80075ac <raise+0xc>)
 80075a2:	4601      	mov	r1, r0
 80075a4:	6818      	ldr	r0, [r3, #0]
 80075a6:	f7ff bfd3 	b.w	8007550 <_raise_r>
 80075aa:	bf00      	nop
 80075ac:	20000014 	.word	0x20000014

080075b0 <_kill_r>:
 80075b0:	b538      	push	{r3, r4, r5, lr}
 80075b2:	4d07      	ldr	r5, [pc, #28]	; (80075d0 <_kill_r+0x20>)
 80075b4:	2300      	movs	r3, #0
 80075b6:	4604      	mov	r4, r0
 80075b8:	4608      	mov	r0, r1
 80075ba:	4611      	mov	r1, r2
 80075bc:	602b      	str	r3, [r5, #0]
 80075be:	f7f9 fe71 	bl	80012a4 <_kill>
 80075c2:	1c43      	adds	r3, r0, #1
 80075c4:	d102      	bne.n	80075cc <_kill_r+0x1c>
 80075c6:	682b      	ldr	r3, [r5, #0]
 80075c8:	b103      	cbz	r3, 80075cc <_kill_r+0x1c>
 80075ca:	6023      	str	r3, [r4, #0]
 80075cc:	bd38      	pop	{r3, r4, r5, pc}
 80075ce:	bf00      	nop
 80075d0:	200002f4 	.word	0x200002f4

080075d4 <_getpid_r>:
 80075d4:	f7f9 be5e 	b.w	8001294 <_getpid>

080075d8 <__sread>:
 80075d8:	b510      	push	{r4, lr}
 80075da:	460c      	mov	r4, r1
 80075dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075e0:	f000 f894 	bl	800770c <_read_r>
 80075e4:	2800      	cmp	r0, #0
 80075e6:	bfab      	itete	ge
 80075e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075ea:	89a3      	ldrhlt	r3, [r4, #12]
 80075ec:	181b      	addge	r3, r3, r0
 80075ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80075f2:	bfac      	ite	ge
 80075f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80075f6:	81a3      	strhlt	r3, [r4, #12]
 80075f8:	bd10      	pop	{r4, pc}

080075fa <__swrite>:
 80075fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075fe:	461f      	mov	r7, r3
 8007600:	898b      	ldrh	r3, [r1, #12]
 8007602:	05db      	lsls	r3, r3, #23
 8007604:	4605      	mov	r5, r0
 8007606:	460c      	mov	r4, r1
 8007608:	4616      	mov	r6, r2
 800760a:	d505      	bpl.n	8007618 <__swrite+0x1e>
 800760c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007610:	2302      	movs	r3, #2
 8007612:	2200      	movs	r2, #0
 8007614:	f000 f868 	bl	80076e8 <_lseek_r>
 8007618:	89a3      	ldrh	r3, [r4, #12]
 800761a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800761e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007622:	81a3      	strh	r3, [r4, #12]
 8007624:	4632      	mov	r2, r6
 8007626:	463b      	mov	r3, r7
 8007628:	4628      	mov	r0, r5
 800762a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800762e:	f000 b817 	b.w	8007660 <_write_r>

08007632 <__sseek>:
 8007632:	b510      	push	{r4, lr}
 8007634:	460c      	mov	r4, r1
 8007636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800763a:	f000 f855 	bl	80076e8 <_lseek_r>
 800763e:	1c43      	adds	r3, r0, #1
 8007640:	89a3      	ldrh	r3, [r4, #12]
 8007642:	bf15      	itete	ne
 8007644:	6560      	strne	r0, [r4, #84]	; 0x54
 8007646:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800764a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800764e:	81a3      	strheq	r3, [r4, #12]
 8007650:	bf18      	it	ne
 8007652:	81a3      	strhne	r3, [r4, #12]
 8007654:	bd10      	pop	{r4, pc}

08007656 <__sclose>:
 8007656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800765a:	f000 b813 	b.w	8007684 <_close_r>
	...

08007660 <_write_r>:
 8007660:	b538      	push	{r3, r4, r5, lr}
 8007662:	4d07      	ldr	r5, [pc, #28]	; (8007680 <_write_r+0x20>)
 8007664:	4604      	mov	r4, r0
 8007666:	4608      	mov	r0, r1
 8007668:	4611      	mov	r1, r2
 800766a:	2200      	movs	r2, #0
 800766c:	602a      	str	r2, [r5, #0]
 800766e:	461a      	mov	r2, r3
 8007670:	f7f9 fe4f 	bl	8001312 <_write>
 8007674:	1c43      	adds	r3, r0, #1
 8007676:	d102      	bne.n	800767e <_write_r+0x1e>
 8007678:	682b      	ldr	r3, [r5, #0]
 800767a:	b103      	cbz	r3, 800767e <_write_r+0x1e>
 800767c:	6023      	str	r3, [r4, #0]
 800767e:	bd38      	pop	{r3, r4, r5, pc}
 8007680:	200002f4 	.word	0x200002f4

08007684 <_close_r>:
 8007684:	b538      	push	{r3, r4, r5, lr}
 8007686:	4d06      	ldr	r5, [pc, #24]	; (80076a0 <_close_r+0x1c>)
 8007688:	2300      	movs	r3, #0
 800768a:	4604      	mov	r4, r0
 800768c:	4608      	mov	r0, r1
 800768e:	602b      	str	r3, [r5, #0]
 8007690:	f7f9 fe5b 	bl	800134a <_close>
 8007694:	1c43      	adds	r3, r0, #1
 8007696:	d102      	bne.n	800769e <_close_r+0x1a>
 8007698:	682b      	ldr	r3, [r5, #0]
 800769a:	b103      	cbz	r3, 800769e <_close_r+0x1a>
 800769c:	6023      	str	r3, [r4, #0]
 800769e:	bd38      	pop	{r3, r4, r5, pc}
 80076a0:	200002f4 	.word	0x200002f4

080076a4 <_fstat_r>:
 80076a4:	b538      	push	{r3, r4, r5, lr}
 80076a6:	4d07      	ldr	r5, [pc, #28]	; (80076c4 <_fstat_r+0x20>)
 80076a8:	2300      	movs	r3, #0
 80076aa:	4604      	mov	r4, r0
 80076ac:	4608      	mov	r0, r1
 80076ae:	4611      	mov	r1, r2
 80076b0:	602b      	str	r3, [r5, #0]
 80076b2:	f7f9 fe56 	bl	8001362 <_fstat>
 80076b6:	1c43      	adds	r3, r0, #1
 80076b8:	d102      	bne.n	80076c0 <_fstat_r+0x1c>
 80076ba:	682b      	ldr	r3, [r5, #0]
 80076bc:	b103      	cbz	r3, 80076c0 <_fstat_r+0x1c>
 80076be:	6023      	str	r3, [r4, #0]
 80076c0:	bd38      	pop	{r3, r4, r5, pc}
 80076c2:	bf00      	nop
 80076c4:	200002f4 	.word	0x200002f4

080076c8 <_isatty_r>:
 80076c8:	b538      	push	{r3, r4, r5, lr}
 80076ca:	4d06      	ldr	r5, [pc, #24]	; (80076e4 <_isatty_r+0x1c>)
 80076cc:	2300      	movs	r3, #0
 80076ce:	4604      	mov	r4, r0
 80076d0:	4608      	mov	r0, r1
 80076d2:	602b      	str	r3, [r5, #0]
 80076d4:	f7f9 fe55 	bl	8001382 <_isatty>
 80076d8:	1c43      	adds	r3, r0, #1
 80076da:	d102      	bne.n	80076e2 <_isatty_r+0x1a>
 80076dc:	682b      	ldr	r3, [r5, #0]
 80076de:	b103      	cbz	r3, 80076e2 <_isatty_r+0x1a>
 80076e0:	6023      	str	r3, [r4, #0]
 80076e2:	bd38      	pop	{r3, r4, r5, pc}
 80076e4:	200002f4 	.word	0x200002f4

080076e8 <_lseek_r>:
 80076e8:	b538      	push	{r3, r4, r5, lr}
 80076ea:	4d07      	ldr	r5, [pc, #28]	; (8007708 <_lseek_r+0x20>)
 80076ec:	4604      	mov	r4, r0
 80076ee:	4608      	mov	r0, r1
 80076f0:	4611      	mov	r1, r2
 80076f2:	2200      	movs	r2, #0
 80076f4:	602a      	str	r2, [r5, #0]
 80076f6:	461a      	mov	r2, r3
 80076f8:	f7f9 fe4e 	bl	8001398 <_lseek>
 80076fc:	1c43      	adds	r3, r0, #1
 80076fe:	d102      	bne.n	8007706 <_lseek_r+0x1e>
 8007700:	682b      	ldr	r3, [r5, #0]
 8007702:	b103      	cbz	r3, 8007706 <_lseek_r+0x1e>
 8007704:	6023      	str	r3, [r4, #0]
 8007706:	bd38      	pop	{r3, r4, r5, pc}
 8007708:	200002f4 	.word	0x200002f4

0800770c <_read_r>:
 800770c:	b538      	push	{r3, r4, r5, lr}
 800770e:	4d07      	ldr	r5, [pc, #28]	; (800772c <_read_r+0x20>)
 8007710:	4604      	mov	r4, r0
 8007712:	4608      	mov	r0, r1
 8007714:	4611      	mov	r1, r2
 8007716:	2200      	movs	r2, #0
 8007718:	602a      	str	r2, [r5, #0]
 800771a:	461a      	mov	r2, r3
 800771c:	f7f9 fddc 	bl	80012d8 <_read>
 8007720:	1c43      	adds	r3, r0, #1
 8007722:	d102      	bne.n	800772a <_read_r+0x1e>
 8007724:	682b      	ldr	r3, [r5, #0]
 8007726:	b103      	cbz	r3, 800772a <_read_r+0x1e>
 8007728:	6023      	str	r3, [r4, #0]
 800772a:	bd38      	pop	{r3, r4, r5, pc}
 800772c:	200002f4 	.word	0x200002f4

08007730 <_init>:
 8007730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007732:	bf00      	nop
 8007734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007736:	bc08      	pop	{r3}
 8007738:	469e      	mov	lr, r3
 800773a:	4770      	bx	lr

0800773c <_fini>:
 800773c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773e:	bf00      	nop
 8007740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007742:	bc08      	pop	{r3}
 8007744:	469e      	mov	lr, r3
 8007746:	4770      	bx	lr
