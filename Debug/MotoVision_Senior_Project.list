
MotoVision_Senior_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007758  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  080078e8  080078e8  000178e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d44  08007d44  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007d44  08007d44  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d44  08007d44  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d44  08007d44  00017d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d48  08007d48  00017d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00000198  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000037c  2000037c  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d30c  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c30  00000000  00000000  0002d520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a80  00000000  00000000  0002f150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009c8  00000000  00000000  0002fbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b6d5  00000000  00000000  00030598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000def4  00000000  00000000  0004bc6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d542  00000000  00000000  00059b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f70a3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c48  00000000  00000000  000f70f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078d0 	.word	0x080078d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	080078d0 	.word	0x080078d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <L_RED_LED>:
#ifndef INC_RGB_LED_H_
#define INC_RGB_LED_H_

#include "stm32f3xx_hal_conf.h"

void L_RED_LED() {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, L_RED_Pin, GPIO_PIN_SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	2102      	movs	r1, #2
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb4:	f001 f84e 	bl	8001c54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, L_GREEN_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2108      	movs	r1, #8
 8000bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc0:	f001 f848 	bl	8001c54 <HAL_GPIO_WritePin>
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <L_YELLOW_LED>:
void L_GREEN_LED() {
	HAL_GPIO_WritePin(GPIOA, L_RED_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOA, L_GREEN_Pin, GPIO_PIN_SET);
}
void L_YELLOW_LED() {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, L_RED_Pin, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2102      	movs	r1, #2
 8000bd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd4:	f001 f83e 	bl	8001c54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, L_GREEN_Pin, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2108      	movs	r1, #8
 8000bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be0:	f001 f838 	bl	8001c54 <HAL_GPIO_WritePin>
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <L_OFF_LED>:
void L_OFF_LED() {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, L_RED_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2102      	movs	r1, #2
 8000bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf4:	f001 f82e 	bl	8001c54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, L_GREEN_Pin, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2108      	movs	r1, #8
 8000bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c00:	f001 f828 	bl	8001c54 <HAL_GPIO_WritePin>
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <R_RED_LED>:

void R_RED_LED() {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, R_RED_Pin, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2120      	movs	r1, #32
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <R_RED_LED+0x20>)
 8000c12:	f001 f81f 	bl	8001c54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, R_GREEN_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c20:	f001 f818 	bl	8001c54 <HAL_GPIO_WritePin>
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	48000400 	.word	0x48000400

08000c2c <R_YELLOW_LED>:
void R_GREEN_LED() {
	HAL_GPIO_WritePin(GPIOB, R_RED_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOA, R_GREEN_Pin, GPIO_PIN_SET);
}
void R_YELLOW_LED() {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, R_RED_Pin, GPIO_PIN_SET);
 8000c30:	2201      	movs	r2, #1
 8000c32:	2120      	movs	r1, #32
 8000c34:	4805      	ldr	r0, [pc, #20]	; (8000c4c <R_YELLOW_LED+0x20>)
 8000c36:	f001 f80d 	bl	8001c54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, R_GREEN_Pin, GPIO_PIN_SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c44:	f001 f806 	bl	8001c54 <HAL_GPIO_WritePin>
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	48000400 	.word	0x48000400

08000c50 <R_OFF_LED>:
void R_OFF_LED() {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, R_RED_Pin, GPIO_PIN_RESET);	//red pin
 8000c54:	2200      	movs	r2, #0
 8000c56:	2120      	movs	r1, #32
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <R_OFF_LED+0x20>)
 8000c5a:	f000 fffb 	bl	8001c54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, R_GREEN_Pin, GPIO_PIN_RESET); 	//green pin
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c68:	f000 fff4 	bl	8001c54 <HAL_GPIO_WritePin>
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	48000400 	.word	0x48000400

08000c74 <CheckDevice>:
uint8_t distance_high;
uint16_t distanceL = 0;
uint16_t distanceR = 0;
char msg[128];

HAL_StatusTypeDef CheckDevice(uint8_t lidarAddr){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b0a4      	sub	sp, #144	; 0x90
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	char msg[128];

	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, lidarAddr << 1, 10, HAL_MAX_DELAY);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	b299      	uxth	r1, r3
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c8a:	220a      	movs	r2, #10
 8000c8c:	481c      	ldr	r0, [pc, #112]	; (8000d00 <CheckDevice+0x8c>)
 8000c8e:	f001 fab7 	bl	8002200 <HAL_I2C_IsDeviceReady>
 8000c92:	4603      	mov	r3, r0
 8000c94:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if(ret == HAL_OK)
 8000c98:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d114      	bne.n	8000cca <CheckDevice+0x56>
	{
	  sprintf(msg, "Device is ready.\r\n");
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	4917      	ldr	r1, [pc, #92]	; (8000d04 <CheckDevice+0x90>)
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f004 fb98 	bl	80053dc <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fa8d 	bl	80001d0 <strlen>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	f107 010c 	add.w	r1, r7, #12
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cc2:	4811      	ldr	r0, [pc, #68]	; (8000d08 <CheckDevice+0x94>)
 8000cc4:	f003 fb18 	bl	80042f8 <HAL_UART_Transmit>
 8000cc8:	e013      	b.n	8000cf2 <CheckDevice+0x7e>
	}
	else
	{
	  sprintf(msg, "Device is not connected.\r\n");
 8000cca:	f107 030c 	add.w	r3, r7, #12
 8000cce:	490f      	ldr	r1, [pc, #60]	; (8000d0c <CheckDevice+0x98>)
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f004 fb83 	bl	80053dc <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 8000cd6:	f107 030c 	add.w	r3, r7, #12
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fa78 	bl	80001d0 <strlen>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	f107 010c 	add.w	r1, r7, #12
 8000ce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cec:	4806      	ldr	r0, [pc, #24]	; (8000d08 <CheckDevice+0x94>)
 8000cee:	f003 fb03 	bl	80042f8 <HAL_UART_Transmit>
	}
	return ret;
 8000cf2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3790      	adds	r7, #144	; 0x90
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000200 	.word	0x20000200
 8000d04:	080078e8 	.word	0x080078e8
 8000d08:	20000254 	.word	0x20000254
 8000d0c:	080078fc 	.word	0x080078fc

08000d10 <DisableDefaultAddress>:
    HAL_I2C_Mem_Write(&hi2c1, newAddress << 1, 0xEA, 1, dataBytes, 1, HAL_MAX_DELAY);
    HAL_Delay(100);
    CheckDevice(newAddress);
}

void DisableDefaultAddress(uint8_t address) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af04      	add	r7, sp, #16
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
	uint8_t dataBytes[5];
	dataBytes[0] = 0x01; // set bit to disable default address
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write(&hi2c1, address << 1, 0x1b, 1, dataBytes, 1, HAL_MAX_DELAY);
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	b299      	uxth	r1, r3
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d2a:	9302      	str	r3, [sp, #8]
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	9301      	str	r3, [sp, #4]
 8000d30:	f107 0308 	add.w	r3, r7, #8
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	2301      	movs	r3, #1
 8000d38:	221b      	movs	r2, #27
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <DisableDefaultAddress+0x40>)
 8000d3c:	f001 f832 	bl	8001da4 <HAL_I2C_Mem_Write>

	// Wait for the I2C peripheral to be restarted with new device address
	HAL_Delay(100);
 8000d40:	2064      	movs	r0, #100	; 0x64
 8000d42:	f000 fcdf 	bl	8001704 <HAL_Delay>
}
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000200 	.word	0x20000200

08000d54 <GetDistance>:

uint16_t GetDistance(uint8_t lidarAddr){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af04      	add	r7, sp, #16
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
	uint32_t startTick = HAL_GetTick(); // Get current tick for timeout
 8000d5e:	f000 fcc5 	bl	80016ec <HAL_GetTick>
 8000d62:	60f8      	str	r0, [r7, #12]

	// 1. Write 0x04 to register 0x00.
	HAL_I2C_Mem_Write(&hi2c1, lidarAddr << 1, ACQ_COMMAND, 1, &TAKE_DIST, 1, HAL_MAX_DELAY);
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	b299      	uxth	r1, r3
 8000d6c:	4b30      	ldr	r3, [pc, #192]	; (8000e30 <GetDistance+0xdc>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d76:	9302      	str	r3, [sp, #8]
 8000d78:	2301      	movs	r3, #1
 8000d7a:	9301      	str	r3, [sp, #4]
 8000d7c:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <GetDistance+0xe0>)
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	2301      	movs	r3, #1
 8000d82:	482d      	ldr	r0, [pc, #180]	; (8000e38 <GetDistance+0xe4>)
 8000d84:	f001 f80e 	bl	8001da4 <HAL_I2C_Mem_Write>


	do { // 2. Read register 0x01.
	  HAL_I2C_Mem_Read(&hi2c1, lidarAddr << 1, STATUS_REG, 1, &status, 1, HAL_MAX_DELAY);
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	b299      	uxth	r1, r3
 8000d90:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <GetDistance+0xe8>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d9a:	9302      	str	r3, [sp, #8]
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	9301      	str	r3, [sp, #4]
 8000da0:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <GetDistance+0xec>)
 8000da2:	9300      	str	r3, [sp, #0]
 8000da4:	2301      	movs	r3, #1
 8000da6:	4824      	ldr	r0, [pc, #144]	; (8000e38 <GetDistance+0xe4>)
 8000da8:	f001 f910 	bl	8001fcc <HAL_I2C_Mem_Read>

	  if((HAL_GetTick() - startTick) > TIMEOUT_MS) {// Handle timeout
 8000dac:	f000 fc9e 	bl	80016ec <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dba:	d901      	bls.n	8000dc0 <GetDistance+0x6c>
	  	    return 0;  // return invalid distance value
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	e033      	b.n	8000e28 <GetDistance+0xd4>
	  }

	} while (status & 0x01); // 3. Repeat step 2 until bit 0 (LSB) goes low.
 8000dc0:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <GetDistance+0xec>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1dd      	bne.n	8000d88 <GetDistance+0x34>


	// 4. Read two bytes from 0x10 (low byte 0x10 then high byte 0x11) to obtain the 16-bit measured distance in centimeters.
	HAL_I2C_Mem_Read(&hi2c1, lidarAddr << 1, DISTANCE_REG_LOW, 1, &distance_low, 1, HAL_MAX_DELAY);
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	b299      	uxth	r1, r3
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <GetDistance+0xf0>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dde:	9302      	str	r3, [sp, #8]
 8000de0:	2301      	movs	r3, #1
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <GetDistance+0xf4>)
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2301      	movs	r3, #1
 8000dea:	4813      	ldr	r0, [pc, #76]	; (8000e38 <GetDistance+0xe4>)
 8000dec:	f001 f8ee 	bl	8001fcc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, lidarAddr << 1, DISTANCE_REG_HIGH, 1, &distance_high, 1, HAL_MAX_DELAY);
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	b299      	uxth	r1, r3
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <GetDistance+0xf8>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e02:	9302      	str	r3, [sp, #8]
 8000e04:	2301      	movs	r3, #1
 8000e06:	9301      	str	r3, [sp, #4]
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <GetDistance+0xfc>)
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	480a      	ldr	r0, [pc, #40]	; (8000e38 <GetDistance+0xe4>)
 8000e10:	f001 f8dc 	bl	8001fcc <HAL_I2C_Mem_Read>

	return (((uint16_t)distance_high << 8) | distance_low);
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <GetDistance+0xfc>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	b21a      	sxth	r2, r3
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <GetDistance+0xf4>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	b21b      	sxth	r3, r3
 8000e22:	4313      	orrs	r3, r2
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	b29b      	uxth	r3, r3
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	200002dc 	.word	0x200002dc
 8000e34:	20000002 	.word	0x20000002
 8000e38:	20000200 	.word	0x20000200
 8000e3c:	20000005 	.word	0x20000005
 8000e40:	200002dd 	.word	0x200002dd
 8000e44:	20000003 	.word	0x20000003
 8000e48:	200002de 	.word	0x200002de
 8000e4c:	20000004 	.word	0x20000004
 8000e50:	200002df 	.word	0x200002df

08000e54 <CheckRightSensor>:

void CheckRightSensor() {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	while(CheckDevice(LIDAR_ADDR_R) != HAL_OK) {
 8000e58:	e00e      	b.n	8000e78 <CheckRightSensor+0x24>
		  sprintf(msg, "device 1\r\n");
 8000e5a:	4916      	ldr	r1, [pc, #88]	; (8000eb4 <CheckRightSensor+0x60>)
 8000e5c:	4816      	ldr	r0, [pc, #88]	; (8000eb8 <CheckRightSensor+0x64>)
 8000e5e:	f004 fabd 	bl	80053dc <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 8000e62:	4815      	ldr	r0, [pc, #84]	; (8000eb8 <CheckRightSensor+0x64>)
 8000e64:	f7ff f9b4 	bl	80001d0 <strlen>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e70:	4911      	ldr	r1, [pc, #68]	; (8000eb8 <CheckRightSensor+0x64>)
 8000e72:	4812      	ldr	r0, [pc, #72]	; (8000ebc <CheckRightSensor+0x68>)
 8000e74:	f003 fa40 	bl	80042f8 <HAL_UART_Transmit>
	while(CheckDevice(LIDAR_ADDR_R) != HAL_OK) {
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <CheckRightSensor+0x6c>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fef9 	bl	8000c74 <CheckDevice>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1e8      	bne.n	8000e5a <CheckRightSensor+0x6>
	  }
	  R_RED_LED();
 8000e88:	f7ff febe 	bl	8000c08 <R_RED_LED>
	  HAL_Delay(100);
 8000e8c:	2064      	movs	r0, #100	; 0x64
 8000e8e:	f000 fc39 	bl	8001704 <HAL_Delay>
	  R_OFF_LED();
 8000e92:	f7ff fedd 	bl	8000c50 <R_OFF_LED>
	  HAL_Delay(100);
 8000e96:	2064      	movs	r0, #100	; 0x64
 8000e98:	f000 fc34 	bl	8001704 <HAL_Delay>
	  R_RED_LED();
 8000e9c:	f7ff feb4 	bl	8000c08 <R_RED_LED>
	  HAL_Delay(100);
 8000ea0:	2064      	movs	r0, #100	; 0x64
 8000ea2:	f000 fc2f 	bl	8001704 <HAL_Delay>
	  R_OFF_LED();
 8000ea6:	f7ff fed3 	bl	8000c50 <R_OFF_LED>
	  HAL_Delay(100);
 8000eaa:	2064      	movs	r0, #100	; 0x64
 8000eac:	f000 fc2a 	bl	8001704 <HAL_Delay>
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	08007918 	.word	0x08007918
 8000eb8:	200002e4 	.word	0x200002e4
 8000ebc:	20000254 	.word	0x20000254
 8000ec0:	20000000 	.word	0x20000000

08000ec4 <CheckLeftSensor>:

void CheckLeftSensor() {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	while(CheckDevice(LIDAR_ADDR_L) != HAL_OK) {
 8000ec8:	e00e      	b.n	8000ee8 <CheckLeftSensor+0x24>
		  sprintf(msg, "device 2\r\n");
 8000eca:	4916      	ldr	r1, [pc, #88]	; (8000f24 <CheckLeftSensor+0x60>)
 8000ecc:	4816      	ldr	r0, [pc, #88]	; (8000f28 <CheckLeftSensor+0x64>)
 8000ece:	f004 fa85 	bl	80053dc <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 8000ed2:	4815      	ldr	r0, [pc, #84]	; (8000f28 <CheckLeftSensor+0x64>)
 8000ed4:	f7ff f97c 	bl	80001d0 <strlen>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ee0:	4911      	ldr	r1, [pc, #68]	; (8000f28 <CheckLeftSensor+0x64>)
 8000ee2:	4812      	ldr	r0, [pc, #72]	; (8000f2c <CheckLeftSensor+0x68>)
 8000ee4:	f003 fa08 	bl	80042f8 <HAL_UART_Transmit>
	while(CheckDevice(LIDAR_ADDR_L) != HAL_OK) {
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <CheckLeftSensor+0x6c>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fec1 	bl	8000c74 <CheckDevice>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1e8      	bne.n	8000eca <CheckLeftSensor+0x6>
	  }
	  L_RED_LED();
 8000ef8:	f7ff fe56 	bl	8000ba8 <L_RED_LED>
	  HAL_Delay(100);
 8000efc:	2064      	movs	r0, #100	; 0x64
 8000efe:	f000 fc01 	bl	8001704 <HAL_Delay>
	  L_OFF_LED();
 8000f02:	f7ff fe71 	bl	8000be8 <L_OFF_LED>
	  HAL_Delay(100);
 8000f06:	2064      	movs	r0, #100	; 0x64
 8000f08:	f000 fbfc 	bl	8001704 <HAL_Delay>
	  L_RED_LED();
 8000f0c:	f7ff fe4c 	bl	8000ba8 <L_RED_LED>
	  HAL_Delay(100);
 8000f10:	2064      	movs	r0, #100	; 0x64
 8000f12:	f000 fbf7 	bl	8001704 <HAL_Delay>
	  L_OFF_LED();
 8000f16:	f7ff fe67 	bl	8000be8 <L_OFF_LED>
	  HAL_Delay(100);
 8000f1a:	2064      	movs	r0, #100	; 0x64
 8000f1c:	f000 fbf2 	bl	8001704 <HAL_Delay>
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	08007924 	.word	0x08007924
 8000f28:	200002e4 	.word	0x200002e4
 8000f2c:	20000254 	.word	0x20000254
 8000f30:	20000001 	.word	0x20000001

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3a:	f000 fb7d 	bl	8001638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3e:	f000 f861 	bl	8001004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f000 f91f 	bl	8001184 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f46:	f000 f8ed 	bl	8001124 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f4a:	f000 f8ad 	bl	80010a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Disable default address for left sensor
  DisableDefaultAddress(LIDAR_ADDR_L);
 8000f4e:	4b29      	ldr	r3, [pc, #164]	; (8000ff4 <main+0xc0>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fedc 	bl	8000d10 <DisableDefaultAddress>

  CheckRightSensor();
 8000f58:	f7ff ff7c 	bl	8000e54 <CheckRightSensor>
  CheckLeftSensor();
 8000f5c:	f7ff ffb2 	bl	8000ec4 <CheckLeftSensor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Get right and left distances
	  tempR = GetDistance(LIDAR_ADDR_R);
 8000f60:	4b25      	ldr	r3, [pc, #148]	; (8000ff8 <main+0xc4>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fef5 	bl	8000d54 <GetDistance>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	80fb      	strh	r3, [r7, #6]
	  tempL = GetDistance(LIDAR_ADDR_L);
 8000f6e:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <main+0xc0>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff feee 	bl	8000d54 <GetDistance>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	80bb      	strh	r3, [r7, #4]

	  // Check for 'Lane Splitting' condition
	  if(tempR < 100 && tempL < 100)
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	2b63      	cmp	r3, #99	; 0x63
 8000f80:	d807      	bhi.n	8000f92 <main+0x5e>
 8000f82:	88bb      	ldrh	r3, [r7, #4]
 8000f84:	2b63      	cmp	r3, #99	; 0x63
 8000f86:	d804      	bhi.n	8000f92 <main+0x5e>
	  {
		  R_OFF_LED();
 8000f88:	f7ff fe62 	bl	8000c50 <R_OFF_LED>
		  L_OFF_LED();
 8000f8c:	f7ff fe2c 	bl	8000be8 <L_OFF_LED>
 8000f90:	e02b      	b.n	8000fea <main+0xb6>
	  }
	  else {
		  // Check for valid right distance and set
		  if(tempR > 5)
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	2b05      	cmp	r3, #5
 8000f96:	d902      	bls.n	8000f9e <main+0x6a>
			  distanceR = tempR;
 8000f98:	4a18      	ldr	r2, [pc, #96]	; (8000ffc <main+0xc8>)
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	8013      	strh	r3, [r2, #0]
		  // If distance not valid keep previous distance
		  if(distanceR < 100)
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <main+0xc8>)
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	2b63      	cmp	r3, #99	; 0x63
 8000fa4:	d802      	bhi.n	8000fac <main+0x78>
			  R_RED_LED();
 8000fa6:	f7ff fe2f 	bl	8000c08 <R_RED_LED>
 8000faa:	e008      	b.n	8000fbe <main+0x8a>
		  else if(distanceR > 200)
 8000fac:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <main+0xc8>)
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	2bc8      	cmp	r3, #200	; 0xc8
 8000fb2:	d902      	bls.n	8000fba <main+0x86>
			  R_OFF_LED();
 8000fb4:	f7ff fe4c 	bl	8000c50 <R_OFF_LED>
 8000fb8:	e001      	b.n	8000fbe <main+0x8a>
		  else
			  R_YELLOW_LED();
 8000fba:	f7ff fe37 	bl	8000c2c <R_YELLOW_LED>

		  // Check for valid left distance and set
		  if(tempL > 5)
 8000fbe:	88bb      	ldrh	r3, [r7, #4]
 8000fc0:	2b05      	cmp	r3, #5
 8000fc2:	d902      	bls.n	8000fca <main+0x96>
			  distanceL = tempL;
 8000fc4:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <main+0xcc>)
 8000fc6:	88bb      	ldrh	r3, [r7, #4]
 8000fc8:	8013      	strh	r3, [r2, #0]
		  // If distance not valid keep previous distance
		  if(distanceL < 100)
 8000fca:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <main+0xcc>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	2b63      	cmp	r3, #99	; 0x63
 8000fd0:	d802      	bhi.n	8000fd8 <main+0xa4>
			  L_RED_LED();
 8000fd2:	f7ff fde9 	bl	8000ba8 <L_RED_LED>
 8000fd6:	e008      	b.n	8000fea <main+0xb6>
		  else if(distanceL > 200)
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <main+0xcc>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	2bc8      	cmp	r3, #200	; 0xc8
 8000fde:	d902      	bls.n	8000fe6 <main+0xb2>
			  L_OFF_LED();
 8000fe0:	f7ff fe02 	bl	8000be8 <L_OFF_LED>
 8000fe4:	e001      	b.n	8000fea <main+0xb6>
		  else
			  L_YELLOW_LED();
 8000fe6:	f7ff fdef 	bl	8000bc8 <L_YELLOW_LED>
	  sprintf(msg, "distance R: %d\r\n", distanceR);
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
	  */

	  // Wait 100 ms
	  HAL_Delay(100);
 8000fea:	2064      	movs	r0, #100	; 0x64
 8000fec:	f000 fb8a 	bl	8001704 <HAL_Delay>
	  tempR = GetDistance(LIDAR_ADDR_R);
 8000ff0:	e7b6      	b.n	8000f60 <main+0x2c>
 8000ff2:	bf00      	nop
 8000ff4:	20000001 	.word	0x20000001
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	200002e2 	.word	0x200002e2
 8001000:	200002e0 	.word	0x200002e0

08001004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b096      	sub	sp, #88	; 0x58
 8001008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800100e:	2228      	movs	r2, #40	; 0x28
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f003 fd70 	bl	8004af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	611a      	str	r2, [r3, #16]
 8001036:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001038:	2302      	movs	r3, #2
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800103c:	2301      	movs	r3, #1
 800103e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001040:	2310      	movs	r3, #16
 8001042:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001044:	2300      	movs	r3, #0
 8001046:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001048:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800104c:	4618      	mov	r0, r3
 800104e:	f001 fd6b 	bl	8002b28 <HAL_RCC_OscConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001058:	f000 f8f6 	bl	8001248 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105c:	230f      	movs	r3, #15
 800105e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001068:	2300      	movs	r3, #0
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f002 fd94 	bl	8003ba4 <HAL_RCC_ClockConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001082:	f000 f8e1 	bl	8001248 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001086:	2320      	movs	r3, #32
 8001088:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	4618      	mov	r0, r3
 8001092:	f002 ffbd 	bl	8004010 <HAL_RCCEx_PeriphCLKConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800109c:	f000 f8d4 	bl	8001248 <Error_Handler>
  }
}
 80010a0:	bf00      	nop
 80010a2:	3758      	adds	r7, #88	; 0x58
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <MX_I2C1_Init+0x74>)
 80010ae:	4a1c      	ldr	r2, [pc, #112]	; (8001120 <MX_I2C1_Init+0x78>)
 80010b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80010b2:	4b1a      	ldr	r3, [pc, #104]	; (800111c <MX_I2C1_Init+0x74>)
 80010b4:	f240 220b 	movw	r2, #523	; 0x20b
 80010b8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 196;
 80010ba:	4b18      	ldr	r3, [pc, #96]	; (800111c <MX_I2C1_Init+0x74>)
 80010bc:	22c4      	movs	r2, #196	; 0xc4
 80010be:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <MX_I2C1_Init+0x74>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <MX_I2C1_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010cc:	4b13      	ldr	r3, [pc, #76]	; (800111c <MX_I2C1_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <MX_I2C1_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d8:	4b10      	ldr	r3, [pc, #64]	; (800111c <MX_I2C1_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_I2C1_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010e4:	480d      	ldr	r0, [pc, #52]	; (800111c <MX_I2C1_Init+0x74>)
 80010e6:	f000 fdcd 	bl	8001c84 <HAL_I2C_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010f0:	f000 f8aa 	bl	8001248 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010f4:	2100      	movs	r1, #0
 80010f6:	4809      	ldr	r0, [pc, #36]	; (800111c <MX_I2C1_Init+0x74>)
 80010f8:	f001 fc5e 	bl	80029b8 <HAL_I2CEx_ConfigAnalogFilter>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001102:	f000 f8a1 	bl	8001248 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001106:	2100      	movs	r1, #0
 8001108:	4804      	ldr	r0, [pc, #16]	; (800111c <MX_I2C1_Init+0x74>)
 800110a:	f001 fca0 	bl	8002a4e <HAL_I2CEx_ConfigDigitalFilter>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001114:	f000 f898 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000200 	.word	0x20000200
 8001120:	40005400 	.word	0x40005400

08001124 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_USART2_UART_Init+0x58>)
 800112a:	4a15      	ldr	r2, [pc, #84]	; (8001180 <MX_USART2_UART_Init+0x5c>)
 800112c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <MX_USART2_UART_Init+0x58>)
 8001130:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001134:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_USART2_UART_Init+0x58>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_USART2_UART_Init+0x58>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_USART2_UART_Init+0x58>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_USART2_UART_Init+0x58>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <MX_USART2_UART_Init+0x58>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_USART2_UART_Init+0x58>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <MX_USART2_UART_Init+0x58>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_USART2_UART_Init+0x58>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_USART2_UART_Init+0x58>)
 8001168:	f003 f878 	bl	800425c <HAL_UART_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001172:	f000 f869 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000254 	.word	0x20000254
 8001180:	40004400 	.word	0x40004400

08001184 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800119a:	4b29      	ldr	r3, [pc, #164]	; (8001240 <MX_GPIO_Init+0xbc>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a28      	ldr	r2, [pc, #160]	; (8001240 <MX_GPIO_Init+0xbc>)
 80011a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011a4:	6153      	str	r3, [r2, #20]
 80011a6:	4b26      	ldr	r3, [pc, #152]	; (8001240 <MX_GPIO_Init+0xbc>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b2:	4b23      	ldr	r3, [pc, #140]	; (8001240 <MX_GPIO_Init+0xbc>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	4a22      	ldr	r2, [pc, #136]	; (8001240 <MX_GPIO_Init+0xbc>)
 80011b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011bc:	6153      	str	r3, [r2, #20]
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <MX_GPIO_Init+0xbc>)
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <MX_GPIO_Init+0xbc>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	4a1c      	ldr	r2, [pc, #112]	; (8001240 <MX_GPIO_Init+0xbc>)
 80011d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d4:	6153      	str	r3, [r2, #20]
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_GPIO_Init+0xbc>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L_RED_Pin|L_GREEN_Pin|R_GREEN_Pin, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	f640 010a 	movw	r1, #2058	; 0x80a
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ec:	f000 fd32 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R_RED_GPIO_Port, R_RED_Pin, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2120      	movs	r1, #32
 80011f4:	4813      	ldr	r0, [pc, #76]	; (8001244 <MX_GPIO_Init+0xc0>)
 80011f6:	f000 fd2d 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L_RED_Pin L_GREEN_Pin R_GREEN_Pin */
  GPIO_InitStruct.Pin = L_RED_Pin|L_GREEN_Pin|R_GREEN_Pin;
 80011fa:	f640 030a 	movw	r3, #2058	; 0x80a
 80011fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001216:	f000 fbab 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pin : R_RED_Pin */
  GPIO_InitStruct.Pin = R_RED_Pin;
 800121a:	2320      	movs	r3, #32
 800121c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(R_RED_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 030c 	add.w	r3, r7, #12
 800122e:	4619      	mov	r1, r3
 8001230:	4804      	ldr	r0, [pc, #16]	; (8001244 <MX_GPIO_Init+0xc0>)
 8001232:	f000 fb9d 	bl	8001970 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001236:	bf00      	nop
 8001238:	3720      	adds	r7, #32
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000
 8001244:	48000400 	.word	0x48000400

08001248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124c:	b672      	cpsid	i
}
 800124e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001250:	e7fe      	b.n	8001250 <Error_Handler+0x8>
	...

08001254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <HAL_MspInit+0x44>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <HAL_MspInit+0x44>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6193      	str	r3, [r2, #24]
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <HAL_MspInit+0x44>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <HAL_MspInit+0x44>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	4a08      	ldr	r2, [pc, #32]	; (8001298 <HAL_MspInit+0x44>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127c:	61d3      	str	r3, [r2, #28]
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_MspInit+0x44>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000

0800129c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a1f      	ldr	r2, [pc, #124]	; (8001338 <HAL_I2C_MspInit+0x9c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d137      	bne.n	800132e <HAL_I2C_MspInit+0x92>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	4b1f      	ldr	r3, [pc, #124]	; (800133c <HAL_I2C_MspInit+0xa0>)
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	4a1e      	ldr	r2, [pc, #120]	; (800133c <HAL_I2C_MspInit+0xa0>)
 80012c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c8:	6153      	str	r3, [r2, #20]
 80012ca:	4b1c      	ldr	r3, [pc, #112]	; (800133c <HAL_I2C_MspInit+0xa0>)
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012d6:	23c0      	movs	r3, #192	; 0xc0
 80012d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012da:	2312      	movs	r3, #18
 80012dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012de:	2301      	movs	r3, #1
 80012e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e2:	2303      	movs	r3, #3
 80012e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012e6:	2304      	movs	r3, #4
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	4813      	ldr	r0, [pc, #76]	; (8001340 <HAL_I2C_MspInit+0xa4>)
 80012f2:	f000 fb3d 	bl	8001970 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 80012f6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80012fa:	f001 fbf5 	bl	8002ae8 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 80012fe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001302:	f001 fbf1 	bl	8002ae8 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <HAL_I2C_MspInit+0xa0>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	4a0c      	ldr	r2, [pc, #48]	; (800133c <HAL_I2C_MspInit+0xa0>)
 800130c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001310:	61d3      	str	r3, [r2, #28]
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <HAL_I2C_MspInit+0xa0>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800131e:	2200      	movs	r2, #0
 8001320:	2100      	movs	r1, #0
 8001322:	201f      	movs	r0, #31
 8001324:	f000 faed 	bl	8001902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001328:	201f      	movs	r0, #31
 800132a:	f000 fb06 	bl	800193a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800132e:	bf00      	nop
 8001330:	3728      	adds	r7, #40	; 0x28
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40005400 	.word	0x40005400
 800133c:	40021000 	.word	0x40021000
 8001340:	48000400 	.word	0x48000400

08001344 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a18      	ldr	r2, [pc, #96]	; (80013c4 <HAL_UART_MspInit+0x80>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d129      	bne.n	80013ba <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_UART_MspInit+0x84>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <HAL_UART_MspInit+0x84>)
 800136c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001370:	61d3      	str	r3, [r2, #28]
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_UART_MspInit+0x84>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_UART_MspInit+0x84>)
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <HAL_UART_MspInit+0x84>)
 8001384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001388:	6153      	str	r3, [r2, #20]
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_UART_MspInit+0x84>)
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001396:	f248 0304 	movw	r3, #32772	; 0x8004
 800139a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013a8:	2307      	movs	r3, #7
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4619      	mov	r1, r3
 80013b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b6:	f000 fadb 	bl	8001970 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	; 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40004400 	.word	0x40004400
 80013c8:	40021000 	.word	0x40021000

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <NMI_Handler+0x4>

080013d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <HardFault_Handler+0x4>

080013d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <MemManage_Handler+0x4>

080013de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <BusFault_Handler+0x4>

080013e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <UsageFault_Handler+0x4>

080013ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001418:	f000 f954 	bl	80016c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}

08001420 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <I2C1_EV_IRQHandler+0x10>)
 8001426:	f000 fff4 	bl	8002412 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000200 	.word	0x20000200

08001434 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return 1;
 8001438:	2301      	movs	r3, #1
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <_kill>:

int _kill(int pid, int sig)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800144e:	f003 fb29 	bl	8004aa4 <__errno>
 8001452:	4603      	mov	r3, r0
 8001454:	2216      	movs	r2, #22
 8001456:	601a      	str	r2, [r3, #0]
  return -1;
 8001458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <_exit>:

void _exit (int status)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800146c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ffe7 	bl	8001444 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001476:	e7fe      	b.n	8001476 <_exit+0x12>

08001478 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	e00a      	b.n	80014a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800148a:	f3af 8000 	nop.w
 800148e:	4601      	mov	r1, r0
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	60ba      	str	r2, [r7, #8]
 8001496:	b2ca      	uxtb	r2, r1
 8001498:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	3301      	adds	r3, #1
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	dbf0      	blt.n	800148a <_read+0x12>
  }

  return len;
 80014a8:	687b      	ldr	r3, [r7, #4]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	60f8      	str	r0, [r7, #12]
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	e009      	b.n	80014d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	60ba      	str	r2, [r7, #8]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	3301      	adds	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	dbf1      	blt.n	80014c4 <_write+0x12>
  }
  return len;
 80014e0:	687b      	ldr	r3, [r7, #4]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <_close>:

int _close(int file)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001512:	605a      	str	r2, [r3, #4]
  return 0;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <_isatty>:

int _isatty(int file)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800152a:	2301      	movs	r3, #1
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800155c:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <_sbrk+0x5c>)
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <_sbrk+0x60>)
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d102      	bne.n	8001576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <_sbrk+0x64>)
 8001572:	4a12      	ldr	r2, [pc, #72]	; (80015bc <_sbrk+0x68>)
 8001574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <_sbrk+0x64>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	429a      	cmp	r2, r3
 8001582:	d207      	bcs.n	8001594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001584:	f003 fa8e 	bl	8004aa4 <__errno>
 8001588:	4603      	mov	r3, r0
 800158a:	220c      	movs	r2, #12
 800158c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001592:	e009      	b.n	80015a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <_sbrk+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <_sbrk+0x64>)
 80015a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015a6:	68fb      	ldr	r3, [r7, #12]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20003000 	.word	0x20003000
 80015b4:	00000400 	.word	0x00000400
 80015b8:	20000364 	.word	0x20000364
 80015bc:	20000380 	.word	0x20000380

080015c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <SystemInit+0x20>)
 80015c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <SystemInit+0x20>)
 80015cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800161c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80015e8:	f7ff ffea 	bl	80015c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015ec:	480c      	ldr	r0, [pc, #48]	; (8001620 <LoopForever+0x6>)
  ldr r1, =_edata
 80015ee:	490d      	ldr	r1, [pc, #52]	; (8001624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015f0:	4a0d      	ldr	r2, [pc, #52]	; (8001628 <LoopForever+0xe>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f4:	e002      	b.n	80015fc <LoopCopyDataInit>

080015f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fa:	3304      	adds	r3, #4

080015fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001600:	d3f9      	bcc.n	80015f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001604:	4c0a      	ldr	r4, [pc, #40]	; (8001630 <LoopForever+0x16>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001608:	e001      	b.n	800160e <LoopFillZerobss>

0800160a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800160c:	3204      	adds	r2, #4

0800160e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001610:	d3fb      	bcc.n	800160a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001612:	f003 fa4d 	bl	8004ab0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001616:	f7ff fc8d 	bl	8000f34 <main>

0800161a <LoopForever>:

LoopForever:
    b LoopForever
 800161a:	e7fe      	b.n	800161a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800161c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001624:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001628:	08007d4c 	.word	0x08007d4c
  ldr r2, =_sbss
 800162c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001630:	2000037c 	.word	0x2000037c

08001634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC1_2_IRQHandler>
	...

08001638 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <HAL_Init+0x28>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a07      	ldr	r2, [pc, #28]	; (8001660 <HAL_Init+0x28>)
 8001642:	f043 0310 	orr.w	r3, r3, #16
 8001646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001648:	2003      	movs	r0, #3
 800164a:	f000 f94f 	bl	80018ec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164e:	2000      	movs	r0, #0
 8001650:	f000 f808 	bl	8001664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001654:	f7ff fdfe 	bl	8001254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40022000 	.word	0x40022000

08001664 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x54>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_InitTick+0x58>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	fbb3 f3f1 	udiv	r3, r3, r1
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f967 	bl	8001956 <HAL_SYSTICK_Config>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e00e      	b.n	80016b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d80a      	bhi.n	80016ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001698:	2200      	movs	r2, #0
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016a0:	f000 f92f 	bl	8001902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a4:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <HAL_InitTick+0x5c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000008 	.word	0x20000008
 80016bc:	20000010 	.word	0x20000010
 80016c0:	2000000c 	.word	0x2000000c

080016c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_IncTick+0x20>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_IncTick+0x24>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <HAL_IncTick+0x24>)
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000010 	.word	0x20000010
 80016e8:	20000368 	.word	0x20000368

080016ec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return uwTick;  
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <HAL_GetTick+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000368 	.word	0x20000368

08001704 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800170c:	f7ff ffee 	bl	80016ec <HAL_GetTick>
 8001710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800171c:	d005      	beq.n	800172a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <HAL_Delay+0x44>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4413      	add	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800172a:	bf00      	nop
 800172c:	f7ff ffde 	bl	80016ec <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	429a      	cmp	r2, r3
 800173a:	d8f7      	bhi.n	800172c <HAL_Delay+0x28>
  {
  }
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000010 	.word	0x20000010

0800174c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001768:	4013      	ands	r3, r2
 800176a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177e:	4a04      	ldr	r2, [pc, #16]	; (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	60d3      	str	r3, [r2, #12]
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <__NVIC_GetPriorityGrouping+0x18>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	0a1b      	lsrs	r3, r3, #8
 800179e:	f003 0307 	and.w	r3, r3, #7
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	db0b      	blt.n	80017da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	f003 021f 	and.w	r2, r3, #31
 80017c8:	4907      	ldr	r1, [pc, #28]	; (80017e8 <__NVIC_EnableIRQ+0x38>)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	095b      	lsrs	r3, r3, #5
 80017d0:	2001      	movs	r0, #1
 80017d2:	fa00 f202 	lsl.w	r2, r0, r2
 80017d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000e100 	.word	0xe000e100

080017ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	db0a      	blt.n	8001816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	490c      	ldr	r1, [pc, #48]	; (8001838 <__NVIC_SetPriority+0x4c>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	0112      	lsls	r2, r2, #4
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	440b      	add	r3, r1
 8001810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001814:	e00a      	b.n	800182c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4908      	ldr	r1, [pc, #32]	; (800183c <__NVIC_SetPriority+0x50>)
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	3b04      	subs	r3, #4
 8001824:	0112      	lsls	r2, r2, #4
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	440b      	add	r3, r1
 800182a:	761a      	strb	r2, [r3, #24]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000e100 	.word	0xe000e100
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f1c3 0307 	rsb	r3, r3, #7
 800185a:	2b04      	cmp	r3, #4
 800185c:	bf28      	it	cs
 800185e:	2304      	movcs	r3, #4
 8001860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3304      	adds	r3, #4
 8001866:	2b06      	cmp	r3, #6
 8001868:	d902      	bls.n	8001870 <NVIC_EncodePriority+0x30>
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3b03      	subs	r3, #3
 800186e:	e000      	b.n	8001872 <NVIC_EncodePriority+0x32>
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43da      	mvns	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	401a      	ands	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001888:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	43d9      	mvns	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	4313      	orrs	r3, r2
         );
}
 800189a:	4618      	mov	r0, r3
 800189c:	3724      	adds	r7, #36	; 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b8:	d301      	bcc.n	80018be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00f      	b.n	80018de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018be:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <SysTick_Config+0x40>)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c6:	210f      	movs	r1, #15
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018cc:	f7ff ff8e 	bl	80017ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <SysTick_Config+0x40>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d6:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <SysTick_Config+0x40>)
 80018d8:	2207      	movs	r2, #7
 80018da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	e000e010 	.word	0xe000e010

080018ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ff29 	bl	800174c <__NVIC_SetPriorityGrouping>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	4603      	mov	r3, r0
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001914:	f7ff ff3e 	bl	8001794 <__NVIC_GetPriorityGrouping>
 8001918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	6978      	ldr	r0, [r7, #20]
 8001920:	f7ff ff8e 	bl	8001840 <NVIC_EncodePriority>
 8001924:	4602      	mov	r2, r0
 8001926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff5d 	bl	80017ec <__NVIC_SetPriority>
}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff31 	bl	80017b0 <__NVIC_EnableIRQ>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ffa2 	bl	80018a8 <SysTick_Config>
 8001964:	4603      	mov	r3, r0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001970:	b480      	push	{r7}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800197e:	e14e      	b.n	8001c1e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	2101      	movs	r1, #1
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	fa01 f303 	lsl.w	r3, r1, r3
 800198c:	4013      	ands	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 8140 	beq.w	8001c18 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d005      	beq.n	80019b0 <HAL_GPIO_Init+0x40>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d130      	bne.n	8001a12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	2203      	movs	r2, #3
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019e6:	2201      	movs	r2, #1
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	091b      	lsrs	r3, r3, #4
 80019fc:	f003 0201 	and.w	r2, r3, #1
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d017      	beq.n	8001a4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	2203      	movs	r2, #3
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d123      	bne.n	8001aa2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	08da      	lsrs	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3208      	adds	r2, #8
 8001a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	220f      	movs	r2, #15
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	691a      	ldr	r2, [r3, #16]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	08da      	lsrs	r2, r3, #3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3208      	adds	r2, #8
 8001a9c:	6939      	ldr	r1, [r7, #16]
 8001a9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	2203      	movs	r2, #3
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 0203 	and.w	r2, r3, #3
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 809a 	beq.w	8001c18 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae4:	4b55      	ldr	r3, [pc, #340]	; (8001c3c <HAL_GPIO_Init+0x2cc>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a54      	ldr	r2, [pc, #336]	; (8001c3c <HAL_GPIO_Init+0x2cc>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b52      	ldr	r3, [pc, #328]	; (8001c3c <HAL_GPIO_Init+0x2cc>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001afc:	4a50      	ldr	r2, [pc, #320]	; (8001c40 <HAL_GPIO_Init+0x2d0>)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	220f      	movs	r2, #15
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b26:	d013      	beq.n	8001b50 <HAL_GPIO_Init+0x1e0>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a46      	ldr	r2, [pc, #280]	; (8001c44 <HAL_GPIO_Init+0x2d4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d00d      	beq.n	8001b4c <HAL_GPIO_Init+0x1dc>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a45      	ldr	r2, [pc, #276]	; (8001c48 <HAL_GPIO_Init+0x2d8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d007      	beq.n	8001b48 <HAL_GPIO_Init+0x1d8>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a44      	ldr	r2, [pc, #272]	; (8001c4c <HAL_GPIO_Init+0x2dc>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d101      	bne.n	8001b44 <HAL_GPIO_Init+0x1d4>
 8001b40:	2303      	movs	r3, #3
 8001b42:	e006      	b.n	8001b52 <HAL_GPIO_Init+0x1e2>
 8001b44:	2305      	movs	r3, #5
 8001b46:	e004      	b.n	8001b52 <HAL_GPIO_Init+0x1e2>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e002      	b.n	8001b52 <HAL_GPIO_Init+0x1e2>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <HAL_GPIO_Init+0x1e2>
 8001b50:	2300      	movs	r3, #0
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	f002 0203 	and.w	r2, r2, #3
 8001b58:	0092      	lsls	r2, r2, #2
 8001b5a:	4093      	lsls	r3, r2
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b62:	4937      	ldr	r1, [pc, #220]	; (8001c40 <HAL_GPIO_Init+0x2d0>)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	3302      	adds	r3, #2
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b70:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <HAL_GPIO_Init+0x2e0>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b94:	4a2e      	ldr	r2, [pc, #184]	; (8001c50 <HAL_GPIO_Init+0x2e0>)
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b9a:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <HAL_GPIO_Init+0x2e0>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bbe:	4a24      	ldr	r2, [pc, #144]	; (8001c50 <HAL_GPIO_Init+0x2e0>)
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bc4:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <HAL_GPIO_Init+0x2e0>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001be8:	4a19      	ldr	r2, [pc, #100]	; (8001c50 <HAL_GPIO_Init+0x2e0>)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bee:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <HAL_GPIO_Init+0x2e0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c12:	4a0f      	ldr	r2, [pc, #60]	; (8001c50 <HAL_GPIO_Init+0x2e0>)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f47f aea9 	bne.w	8001980 <HAL_GPIO_Init+0x10>
  }
}
 8001c2e:	bf00      	nop
 8001c30:	bf00      	nop
 8001c32:	371c      	adds	r7, #28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40010000 	.word	0x40010000
 8001c44:	48000400 	.word	0x48000400
 8001c48:	48000800 	.word	0x48000800
 8001c4c:	48000c00 	.word	0x48000c00
 8001c50:	40010400 	.word	0x40010400

08001c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	807b      	strh	r3, [r7, #2]
 8001c60:	4613      	mov	r3, r2
 8001c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c64:	787b      	ldrb	r3, [r7, #1]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c6a:	887a      	ldrh	r2, [r7, #2]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c70:	e002      	b.n	8001c78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e081      	b.n	8001d9a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d106      	bne.n	8001cb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff faf6 	bl	800129c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2224      	movs	r2, #36	; 0x24
 8001cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0201 	bic.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ce4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d107      	bne.n	8001cfe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	e006      	b.n	8001d0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d104      	bne.n	8001d1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691a      	ldr	r2, [r3, #16]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69d9      	ldr	r1, [r3, #28]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1a      	ldr	r2, [r3, #32]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2220      	movs	r2, #32
 8001d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af02      	add	r7, sp, #8
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	4608      	mov	r0, r1
 8001dae:	4611      	mov	r1, r2
 8001db0:	461a      	mov	r2, r3
 8001db2:	4603      	mov	r3, r0
 8001db4:	817b      	strh	r3, [r7, #10]
 8001db6:	460b      	mov	r3, r1
 8001db8:	813b      	strh	r3, [r7, #8]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b20      	cmp	r3, #32
 8001dc8:	f040 80f9 	bne.w	8001fbe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <HAL_I2C_Mem_Write+0x34>
 8001dd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d105      	bne.n	8001de4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dde:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0ed      	b.n	8001fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_I2C_Mem_Write+0x4e>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e0e6      	b.n	8001fc0 <HAL_I2C_Mem_Write+0x21c>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001dfa:	f7ff fc77 	bl	80016ec <HAL_GetTick>
 8001dfe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	2319      	movs	r3, #25
 8001e06:	2201      	movs	r2, #1
 8001e08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 fbe7 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0d1      	b.n	8001fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2221      	movs	r2, #33	; 0x21
 8001e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2240      	movs	r2, #64	; 0x40
 8001e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6a3a      	ldr	r2, [r7, #32]
 8001e36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e44:	88f8      	ldrh	r0, [r7, #6]
 8001e46:	893a      	ldrh	r2, [r7, #8]
 8001e48:	8979      	ldrh	r1, [r7, #10]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	4603      	mov	r3, r0
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f000 faf7 	bl	8002448 <I2C_RequestMemoryWrite>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0a9      	b.n	8001fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	2bff      	cmp	r3, #255	; 0xff
 8001e74:	d90e      	bls.n	8001e94 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	22ff      	movs	r2, #255	; 0xff
 8001e7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	8979      	ldrh	r1, [r7, #10]
 8001e84:	2300      	movs	r3, #0
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 fd61 	bl	8002954 <I2C_TransferConfig>
 8001e92:	e00f      	b.n	8001eb4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	8979      	ldrh	r1, [r7, #10]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 fd50 	bl	8002954 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f000 fbe0 	bl	800267e <I2C_WaitOnTXISFlagUntilTimeout>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e07b      	b.n	8001fc0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	781a      	ldrb	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d034      	beq.n	8001f6c <HAL_I2C_Mem_Write+0x1c8>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d130      	bne.n	8001f6c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f10:	2200      	movs	r2, #0
 8001f12:	2180      	movs	r1, #128	; 0x80
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 fb63 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e04d      	b.n	8001fc0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	2bff      	cmp	r3, #255	; 0xff
 8001f2c:	d90e      	bls.n	8001f4c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	22ff      	movs	r2, #255	; 0xff
 8001f32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	8979      	ldrh	r1, [r7, #10]
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f000 fd05 	bl	8002954 <I2C_TransferConfig>
 8001f4a:	e00f      	b.n	8001f6c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	8979      	ldrh	r1, [r7, #10]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 fcf4 	bl	8002954 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d19e      	bne.n	8001eb4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 fbc6 	bl	800270c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e01a      	b.n	8001fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6859      	ldr	r1, [r3, #4]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <HAL_I2C_Mem_Write+0x224>)
 8001f9e:	400b      	ands	r3, r1
 8001fa0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e000      	b.n	8001fc0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001fbe:	2302      	movs	r3, #2
  }
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	fe00e800 	.word	0xfe00e800

08001fcc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	4608      	mov	r0, r1
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4603      	mov	r3, r0
 8001fdc:	817b      	strh	r3, [r7, #10]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	813b      	strh	r3, [r7, #8]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b20      	cmp	r3, #32
 8001ff0:	f040 80fd 	bne.w	80021ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <HAL_I2C_Mem_Read+0x34>
 8001ffa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d105      	bne.n	800200c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002006:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0f1      	b.n	80021f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_I2C_Mem_Read+0x4e>
 8002016:	2302      	movs	r3, #2
 8002018:	e0ea      	b.n	80021f0 <HAL_I2C_Mem_Read+0x224>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002022:	f7ff fb63 	bl	80016ec <HAL_GetTick>
 8002026:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2319      	movs	r3, #25
 800202e:	2201      	movs	r2, #1
 8002030:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 fad3 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0d5      	b.n	80021f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2222      	movs	r2, #34	; 0x22
 8002048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2240      	movs	r2, #64	; 0x40
 8002050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a3a      	ldr	r2, [r7, #32]
 800205e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002064:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800206c:	88f8      	ldrh	r0, [r7, #6]
 800206e:	893a      	ldrh	r2, [r7, #8]
 8002070:	8979      	ldrh	r1, [r7, #10]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	9301      	str	r3, [sp, #4]
 8002076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	4603      	mov	r3, r0
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f000 fa37 	bl	80024f0 <I2C_RequestMemoryRead>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0ad      	b.n	80021f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002098:	b29b      	uxth	r3, r3
 800209a:	2bff      	cmp	r3, #255	; 0xff
 800209c:	d90e      	bls.n	80020bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	22ff      	movs	r2, #255	; 0xff
 80020a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	8979      	ldrh	r1, [r7, #10]
 80020ac:	4b52      	ldr	r3, [pc, #328]	; (80021f8 <HAL_I2C_Mem_Read+0x22c>)
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 fc4d 	bl	8002954 <I2C_TransferConfig>
 80020ba:	e00f      	b.n	80020dc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	8979      	ldrh	r1, [r7, #10]
 80020ce:	4b4a      	ldr	r3, [pc, #296]	; (80021f8 <HAL_I2C_Mem_Read+0x22c>)
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 fc3c 	bl	8002954 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e2:	2200      	movs	r2, #0
 80020e4:	2104      	movs	r1, #4
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 fa7a 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e07c      	b.n	80021f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002112:	3b01      	subs	r3, #1
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211e:	b29b      	uxth	r3, r3
 8002120:	3b01      	subs	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212c:	b29b      	uxth	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d034      	beq.n	800219c <HAL_I2C_Mem_Read+0x1d0>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002136:	2b00      	cmp	r3, #0
 8002138:	d130      	bne.n	800219c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002140:	2200      	movs	r2, #0
 8002142:	2180      	movs	r1, #128	; 0x80
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 fa4b 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e04d      	b.n	80021f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002158:	b29b      	uxth	r3, r3
 800215a:	2bff      	cmp	r3, #255	; 0xff
 800215c:	d90e      	bls.n	800217c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	22ff      	movs	r2, #255	; 0xff
 8002162:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002168:	b2da      	uxtb	r2, r3
 800216a:	8979      	ldrh	r1, [r7, #10]
 800216c:	2300      	movs	r3, #0
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 fbed 	bl	8002954 <I2C_TransferConfig>
 800217a:	e00f      	b.n	800219c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002180:	b29a      	uxth	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218a:	b2da      	uxtb	r2, r3
 800218c:	8979      	ldrh	r1, [r7, #10]
 800218e:	2300      	movs	r3, #0
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 fbdc 	bl	8002954 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d19a      	bne.n	80020dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 faae 	bl	800270c <I2C_WaitOnSTOPFlagUntilTimeout>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e01a      	b.n	80021f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2220      	movs	r2, #32
 80021c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6859      	ldr	r1, [r3, #4]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <HAL_I2C_Mem_Read+0x230>)
 80021ce:	400b      	ands	r3, r1
 80021d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2220      	movs	r2, #32
 80021d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e000      	b.n	80021f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80021ee:	2302      	movs	r3, #2
  }
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	80002400 	.word	0x80002400
 80021fc:	fe00e800 	.word	0xfe00e800

08002200 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	; 0x28
 8002204:	af02      	add	r7, sp, #8
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	603b      	str	r3, [r7, #0]
 800220c:	460b      	mov	r3, r1
 800220e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b20      	cmp	r3, #32
 800221e:	f040 80f3 	bne.w	8002408 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800222c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002230:	d101      	bne.n	8002236 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002232:	2302      	movs	r3, #2
 8002234:	e0e9      	b.n	800240a <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_I2C_IsDeviceReady+0x44>
 8002240:	2302      	movs	r3, #2
 8002242:	e0e2      	b.n	800240a <HAL_I2C_IsDeviceReady+0x20a>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2224      	movs	r2, #36	; 0x24
 8002250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d107      	bne.n	8002272 <HAL_I2C_IsDeviceReady+0x72>
 8002262:	897b      	ldrh	r3, [r7, #10]
 8002264:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002268:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800226c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002270:	e006      	b.n	8002280 <HAL_I2C_IsDeviceReady+0x80>
 8002272:	897b      	ldrh	r3, [r7, #10]
 8002274:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002278:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800227c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002286:	f7ff fa31 	bl	80016ec <HAL_GetTick>
 800228a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	f003 0320 	and.w	r3, r3, #32
 8002296:	2b20      	cmp	r3, #32
 8002298:	bf0c      	ite	eq
 800229a:	2301      	moveq	r3, #1
 800229c:	2300      	movne	r3, #0
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f003 0310 	and.w	r3, r3, #16
 80022ac:	2b10      	cmp	r3, #16
 80022ae:	bf0c      	ite	eq
 80022b0:	2301      	moveq	r3, #1
 80022b2:	2300      	movne	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80022b8:	e034      	b.n	8002324 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022c0:	d01a      	beq.n	80022f8 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022c2:	f7ff fa13 	bl	80016ec <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d302      	bcc.n	80022d8 <HAL_I2C_IsDeviceReady+0xd8>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10f      	bne.n	80022f8 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e4:	f043 0220 	orr.w	r2, r3, #32
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e088      	b.n	800240a <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f003 0320 	and.w	r3, r3, #32
 8002302:	2b20      	cmp	r3, #32
 8002304:	bf0c      	ite	eq
 8002306:	2301      	moveq	r3, #1
 8002308:	2300      	movne	r3, #0
 800230a:	b2db      	uxtb	r3, r3
 800230c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	f003 0310 	and.w	r3, r3, #16
 8002318:	2b10      	cmp	r3, #16
 800231a:	bf0c      	ite	eq
 800231c:	2301      	moveq	r3, #1
 800231e:	2300      	movne	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002324:	7ffb      	ldrb	r3, [r7, #31]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d102      	bne.n	8002330 <HAL_I2C_IsDeviceReady+0x130>
 800232a:	7fbb      	ldrb	r3, [r7, #30]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0c4      	beq.n	80022ba <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b10      	cmp	r3, #16
 800233c:	d01a      	beq.n	8002374 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2200      	movs	r2, #0
 8002346:	2120      	movs	r1, #32
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 f949 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e058      	b.n	800240a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2220      	movs	r2, #32
 800235e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	e04a      	b.n	800240a <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2200      	movs	r2, #0
 800237c:	2120      	movs	r1, #32
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 f92e 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e03d      	b.n	800240a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2210      	movs	r2, #16
 8002394:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2220      	movs	r2, #32
 800239c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d118      	bne.n	80023d8 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023b4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2200      	movs	r2, #0
 80023be:	2120      	movs	r1, #32
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f90d 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e01c      	b.n	800240a <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2220      	movs	r2, #32
 80023d6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	3301      	adds	r3, #1
 80023dc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	f63f af39 	bhi.w	800225a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f4:	f043 0220 	orr.w	r2, r3, #32
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8002408:	2302      	movs	r3, #2
  }
}
 800240a:	4618      	mov	r0, r3
 800240c:	3720      	adds	r7, #32
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b084      	sub	sp, #16
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	68f9      	ldr	r1, [r7, #12]
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	4798      	blx	r3
  }
}
 800243e:	bf00      	nop
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	4608      	mov	r0, r1
 8002452:	4611      	mov	r1, r2
 8002454:	461a      	mov	r2, r3
 8002456:	4603      	mov	r3, r0
 8002458:	817b      	strh	r3, [r7, #10]
 800245a:	460b      	mov	r3, r1
 800245c:	813b      	strh	r3, [r7, #8]
 800245e:	4613      	mov	r3, r2
 8002460:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002462:	88fb      	ldrh	r3, [r7, #6]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	8979      	ldrh	r1, [r7, #10]
 8002468:	4b20      	ldr	r3, [pc, #128]	; (80024ec <I2C_RequestMemoryWrite+0xa4>)
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 fa6f 	bl	8002954 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	69b9      	ldr	r1, [r7, #24]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 f8ff 	bl	800267e <I2C_WaitOnTXISFlagUntilTimeout>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e02c      	b.n	80024e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d105      	bne.n	800249c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002490:	893b      	ldrh	r3, [r7, #8]
 8002492:	b2da      	uxtb	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	629a      	str	r2, [r3, #40]	; 0x28
 800249a:	e015      	b.n	80024c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800249c:	893b      	ldrh	r3, [r7, #8]
 800249e:	0a1b      	lsrs	r3, r3, #8
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024aa:	69fa      	ldr	r2, [r7, #28]
 80024ac:	69b9      	ldr	r1, [r7, #24]
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 f8e5 	bl	800267e <I2C_WaitOnTXISFlagUntilTimeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e012      	b.n	80024e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024be:	893b      	ldrh	r3, [r7, #8]
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	2200      	movs	r2, #0
 80024d0:	2180      	movs	r1, #128	; 0x80
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f884 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	80002000 	.word	0x80002000

080024f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	4608      	mov	r0, r1
 80024fa:	4611      	mov	r1, r2
 80024fc:	461a      	mov	r2, r3
 80024fe:	4603      	mov	r3, r0
 8002500:	817b      	strh	r3, [r7, #10]
 8002502:	460b      	mov	r3, r1
 8002504:	813b      	strh	r3, [r7, #8]
 8002506:	4613      	mov	r3, r2
 8002508:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	8979      	ldrh	r1, [r7, #10]
 8002510:	4b20      	ldr	r3, [pc, #128]	; (8002594 <I2C_RequestMemoryRead+0xa4>)
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	2300      	movs	r3, #0
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 fa1c 	bl	8002954 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800251c:	69fa      	ldr	r2, [r7, #28]
 800251e:	69b9      	ldr	r1, [r7, #24]
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 f8ac 	bl	800267e <I2C_WaitOnTXISFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e02c      	b.n	800258a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002530:	88fb      	ldrh	r3, [r7, #6]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d105      	bne.n	8002542 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002536:	893b      	ldrh	r3, [r7, #8]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	629a      	str	r2, [r3, #40]	; 0x28
 8002540:	e015      	b.n	800256e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002542:	893b      	ldrh	r3, [r7, #8]
 8002544:	0a1b      	lsrs	r3, r3, #8
 8002546:	b29b      	uxth	r3, r3
 8002548:	b2da      	uxtb	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002550:	69fa      	ldr	r2, [r7, #28]
 8002552:	69b9      	ldr	r1, [r7, #24]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f892 	bl	800267e <I2C_WaitOnTXISFlagUntilTimeout>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e012      	b.n	800258a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002564:	893b      	ldrh	r3, [r7, #8]
 8002566:	b2da      	uxtb	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	2200      	movs	r2, #0
 8002576:	2140      	movs	r1, #64	; 0x40
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 f831 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	80002000 	.word	0x80002000

08002598 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d103      	bne.n	80025b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2200      	movs	r2, #0
 80025b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d007      	beq.n	80025d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699a      	ldr	r2, [r3, #24]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	619a      	str	r2, [r3, #24]
  }
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	603b      	str	r3, [r7, #0]
 80025ec:	4613      	mov	r3, r2
 80025ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025f0:	e031      	b.n	8002656 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025f8:	d02d      	beq.n	8002656 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025fa:	f7ff f877 	bl	80016ec <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d302      	bcc.n	8002610 <I2C_WaitOnFlagUntilTimeout+0x30>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d122      	bne.n	8002656 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699a      	ldr	r2, [r3, #24]
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	4013      	ands	r3, r2
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	429a      	cmp	r2, r3
 800261e:	bf0c      	ite	eq
 8002620:	2301      	moveq	r3, #1
 8002622:	2300      	movne	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	429a      	cmp	r2, r3
 800262c:	d113      	bne.n	8002656 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	f043 0220 	orr.w	r2, r3, #32
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e00f      	b.n	8002676 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699a      	ldr	r2, [r3, #24]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	4013      	ands	r3, r2
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	429a      	cmp	r2, r3
 8002664:	bf0c      	ite	eq
 8002666:	2301      	moveq	r3, #1
 8002668:	2300      	movne	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	461a      	mov	r2, r3
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	429a      	cmp	r2, r3
 8002672:	d0be      	beq.n	80025f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b084      	sub	sp, #16
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800268a:	e033      	b.n	80026f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f87f 	bl	8002794 <I2C_IsErrorOccurred>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e031      	b.n	8002704 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026a6:	d025      	beq.n	80026f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a8:	f7ff f820 	bl	80016ec <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d302      	bcc.n	80026be <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d11a      	bne.n	80026f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d013      	beq.n	80026f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d0:	f043 0220 	orr.w	r2, r3, #32
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e007      	b.n	8002704 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d1c4      	bne.n	800268c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002718:	e02f      	b.n	800277a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f838 	bl	8002794 <I2C_IsErrorOccurred>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e02d      	b.n	800278a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800272e:	f7fe ffdd 	bl	80016ec <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	429a      	cmp	r2, r3
 800273c:	d302      	bcc.n	8002744 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d11a      	bne.n	800277a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f003 0320 	and.w	r3, r3, #32
 800274e:	2b20      	cmp	r3, #32
 8002750:	d013      	beq.n	800277a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f043 0220 	orr.w	r2, r3, #32
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2220      	movs	r2, #32
 8002762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e007      	b.n	800278a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f003 0320 	and.w	r3, r3, #32
 8002784:	2b20      	cmp	r3, #32
 8002786:	d1c8      	bne.n	800271a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08a      	sub	sp, #40	; 0x28
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d068      	beq.n	8002892 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2210      	movs	r2, #16
 80027c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027c8:	e049      	b.n	800285e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027d0:	d045      	beq.n	800285e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027d2:	f7fe ff8b 	bl	80016ec <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d302      	bcc.n	80027e8 <I2C_IsErrorOccurred+0x54>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d13a      	bne.n	800285e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800280a:	d121      	bne.n	8002850 <I2C_IsErrorOccurred+0xbc>
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002812:	d01d      	beq.n	8002850 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002814:	7cfb      	ldrb	r3, [r7, #19]
 8002816:	2b20      	cmp	r3, #32
 8002818:	d01a      	beq.n	8002850 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002828:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800282a:	f7fe ff5f 	bl	80016ec <HAL_GetTick>
 800282e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002830:	e00e      	b.n	8002850 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002832:	f7fe ff5b 	bl	80016ec <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b19      	cmp	r3, #25
 800283e:	d907      	bls.n	8002850 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	f043 0320 	orr.w	r3, r3, #32
 8002846:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800284e:	e006      	b.n	800285e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f003 0320 	and.w	r3, r3, #32
 800285a:	2b20      	cmp	r3, #32
 800285c:	d1e9      	bne.n	8002832 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f003 0320 	and.w	r3, r3, #32
 8002868:	2b20      	cmp	r3, #32
 800286a:	d003      	beq.n	8002874 <I2C_IsErrorOccurred+0xe0>
 800286c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0aa      	beq.n	80027ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002878:	2b00      	cmp	r3, #0
 800287a:	d103      	bne.n	8002884 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2220      	movs	r2, #32
 8002882:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	f043 0304 	orr.w	r3, r3, #4
 800288a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00b      	beq.n	80028bc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80028a4:	6a3b      	ldr	r3, [r7, #32]
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00b      	beq.n	80028de <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	f043 0308 	orr.w	r3, r3, #8
 80028cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00b      	beq.n	8002900 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	f043 0302 	orr.w	r3, r3, #2
 80028ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01c      	beq.n	8002942 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f7ff fe45 	bl	8002598 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6859      	ldr	r1, [r3, #4]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <I2C_IsErrorOccurred+0x1bc>)
 800291a:	400b      	ands	r3, r1
 800291c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	431a      	orrs	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2220      	movs	r2, #32
 800292e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002942:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002946:	4618      	mov	r0, r3
 8002948:	3728      	adds	r7, #40	; 0x28
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	fe00e800 	.word	0xfe00e800

08002954 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	607b      	str	r3, [r7, #4]
 800295e:	460b      	mov	r3, r1
 8002960:	817b      	strh	r3, [r7, #10]
 8002962:	4613      	mov	r3, r2
 8002964:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002966:	897b      	ldrh	r3, [r7, #10]
 8002968:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800296c:	7a7b      	ldrb	r3, [r7, #9]
 800296e:	041b      	lsls	r3, r3, #16
 8002970:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002974:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	4313      	orrs	r3, r2
 800297e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002982:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	0d5b      	lsrs	r3, r3, #21
 800298e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002992:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <I2C_TransferConfig+0x60>)
 8002994:	430b      	orrs	r3, r1
 8002996:	43db      	mvns	r3, r3
 8002998:	ea02 0103 	and.w	r1, r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80029a6:	bf00      	nop
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	03ff63ff 	.word	0x03ff63ff

080029b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b20      	cmp	r3, #32
 80029cc:	d138      	bne.n	8002a40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029d8:	2302      	movs	r3, #2
 80029da:	e032      	b.n	8002a42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2224      	movs	r2, #36	; 0x24
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0201 	bic.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6819      	ldr	r1, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	e000      	b.n	8002a42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a40:	2302      	movs	r3, #2
  }
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b085      	sub	sp, #20
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	d139      	bne.n	8002ad8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e033      	b.n	8002ada <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2224      	movs	r2, #36	; 0x24
 8002a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0201 	bic.w	r2, r2, #1
 8002a90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002aa0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e000      	b.n	8002ada <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ad8:	2302      	movs	r3, #2
  }
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	6193      	str	r3, [r2, #24]
 8002afc:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8002b08:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	4905      	ldr	r1, [pc, #20]	; (8002b24 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	600b      	str	r3, [r1, #0]
}
 8002b14:	bf00      	nop
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40010000 	.word	0x40010000

08002b28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b38:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d102      	bne.n	8002b4e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	f001 b823 	b.w	8003b94 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 817d 	beq.w	8002e5e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b64:	4bbc      	ldr	r3, [pc, #752]	; (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 030c 	and.w	r3, r3, #12
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d00c      	beq.n	8002b8a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b70:	4bb9      	ldr	r3, [pc, #740]	; (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 030c 	and.w	r3, r3, #12
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d15c      	bne.n	8002c36 <HAL_RCC_OscConfig+0x10e>
 8002b7c:	4bb6      	ldr	r3, [pc, #728]	; (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b88:	d155      	bne.n	8002c36 <HAL_RCC_OscConfig+0x10e>
 8002b8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b8e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b9e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	095b      	lsrs	r3, r3, #5
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d102      	bne.n	8002bbc <HAL_RCC_OscConfig+0x94>
 8002bb6:	4ba8      	ldr	r3, [pc, #672]	; (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	e015      	b.n	8002be8 <HAL_RCC_OscConfig+0xc0>
 8002bbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bc0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002bd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bd4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002bd8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002be4:	4b9c      	ldr	r3, [pc, #624]	; (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bec:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002bf0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002bf4:	fa92 f2a2 	rbit	r2, r2
 8002bf8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002bfc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002c00:	fab2 f282 	clz	r2, r2
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	f042 0220 	orr.w	r2, r2, #32
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	f002 021f 	and.w	r2, r2, #31
 8002c10:	2101      	movs	r1, #1
 8002c12:	fa01 f202 	lsl.w	r2, r1, r2
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 811f 	beq.w	8002e5c <HAL_RCC_OscConfig+0x334>
 8002c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f040 8116 	bne.w	8002e5c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	f000 bfaf 	b.w	8003b94 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c46:	d106      	bne.n	8002c56 <HAL_RCC_OscConfig+0x12e>
 8002c48:	4b83      	ldr	r3, [pc, #524]	; (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a82      	ldr	r2, [pc, #520]	; (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	e036      	b.n	8002cc4 <HAL_RCC_OscConfig+0x19c>
 8002c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x158>
 8002c66:	4b7c      	ldr	r3, [pc, #496]	; (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a7b      	ldr	r2, [pc, #492]	; (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	4b79      	ldr	r3, [pc, #484]	; (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a78      	ldr	r2, [pc, #480]	; (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002c78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e021      	b.n	8002cc4 <HAL_RCC_OscConfig+0x19c>
 8002c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c90:	d10c      	bne.n	8002cac <HAL_RCC_OscConfig+0x184>
 8002c92:	4b71      	ldr	r3, [pc, #452]	; (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a70      	ldr	r2, [pc, #448]	; (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	4b6e      	ldr	r3, [pc, #440]	; (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a6d      	ldr	r2, [pc, #436]	; (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	e00b      	b.n	8002cc4 <HAL_RCC_OscConfig+0x19c>
 8002cac:	4b6a      	ldr	r3, [pc, #424]	; (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a69      	ldr	r2, [pc, #420]	; (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	4b67      	ldr	r3, [pc, #412]	; (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a66      	ldr	r2, [pc, #408]	; (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cc4:	4b64      	ldr	r3, [pc, #400]	; (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	f023 020f 	bic.w	r2, r3, #15
 8002ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	495f      	ldr	r1, [pc, #380]	; (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d059      	beq.n	8002da2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cee:	f7fe fcfd 	bl	80016ec <HAL_GetTick>
 8002cf2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf6:	e00a      	b.n	8002d0e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cf8:	f7fe fcf8 	bl	80016ec <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b64      	cmp	r3, #100	; 0x64
 8002d06:	d902      	bls.n	8002d0e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	f000 bf43 	b.w	8003b94 <HAL_RCC_OscConfig+0x106c>
 8002d0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d12:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002d22:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d102      	bne.n	8002d40 <HAL_RCC_OscConfig+0x218>
 8002d3a:	4b47      	ldr	r3, [pc, #284]	; (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	e015      	b.n	8002d6c <HAL_RCC_OscConfig+0x244>
 8002d40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d44:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002d54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d58:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002d5c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002d68:	4b3b      	ldr	r3, [pc, #236]	; (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d70:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002d74:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002d78:	fa92 f2a2 	rbit	r2, r2
 8002d7c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002d80:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002d84:	fab2 f282 	clz	r2, r2
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	f042 0220 	orr.w	r2, r2, #32
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	f002 021f 	and.w	r2, r2, #31
 8002d94:	2101      	movs	r1, #1
 8002d96:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0ab      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x1d0>
 8002da0:	e05d      	b.n	8002e5e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da2:	f7fe fca3 	bl	80016ec <HAL_GetTick>
 8002da6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002daa:	e00a      	b.n	8002dc2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dac:	f7fe fc9e 	bl	80016ec <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b64      	cmp	r3, #100	; 0x64
 8002dba:	d902      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	f000 bee9 	b.w	8003b94 <HAL_RCC_OscConfig+0x106c>
 8002dc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dc6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002dd6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d102      	bne.n	8002df4 <HAL_RCC_OscConfig+0x2cc>
 8002dee:	4b1a      	ldr	r3, [pc, #104]	; (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	e015      	b.n	8002e20 <HAL_RCC_OscConfig+0x2f8>
 8002df4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002df8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002e00:	fa93 f3a3 	rbit	r3, r3
 8002e04:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002e08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e0c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002e10:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002e1c:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <HAL_RCC_OscConfig+0x330>)
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e24:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002e28:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002e2c:	fa92 f2a2 	rbit	r2, r2
 8002e30:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002e34:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002e38:	fab2 f282 	clz	r2, r2
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	f042 0220 	orr.w	r2, r2, #32
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	f002 021f 	and.w	r2, r2, #31
 8002e48:	2101      	movs	r1, #1
 8002e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1ab      	bne.n	8002dac <HAL_RCC_OscConfig+0x284>
 8002e54:	e003      	b.n	8002e5e <HAL_RCC_OscConfig+0x336>
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 817d 	beq.w	800316e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e74:	4ba6      	ldr	r3, [pc, #664]	; (8003110 <HAL_RCC_OscConfig+0x5e8>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 030c 	and.w	r3, r3, #12
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00b      	beq.n	8002e98 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e80:	4ba3      	ldr	r3, [pc, #652]	; (8003110 <HAL_RCC_OscConfig+0x5e8>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 030c 	and.w	r3, r3, #12
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d172      	bne.n	8002f72 <HAL_RCC_OscConfig+0x44a>
 8002e8c:	4ba0      	ldr	r3, [pc, #640]	; (8003110 <HAL_RCC_OscConfig+0x5e8>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d16c      	bne.n	8002f72 <HAL_RCC_OscConfig+0x44a>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002eaa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	095b      	lsrs	r3, r3, #5
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d102      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x3a0>
 8002ec2:	4b93      	ldr	r3, [pc, #588]	; (8003110 <HAL_RCC_OscConfig+0x5e8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	e013      	b.n	8002ef0 <HAL_RCC_OscConfig+0x3c8>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002eda:	2302      	movs	r3, #2
 8002edc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002ee0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002eec:	4b88      	ldr	r3, [pc, #544]	; (8003110 <HAL_RCC_OscConfig+0x5e8>)
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002ef6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002efa:	fa92 f2a2 	rbit	r2, r2
 8002efe:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002f02:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002f06:	fab2 f282 	clz	r2, r2
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	f042 0220 	orr.w	r2, r2, #32
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	f002 021f 	and.w	r2, r2, #31
 8002f16:	2101      	movs	r1, #1
 8002f18:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_RCC_OscConfig+0x410>
 8002f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d002      	beq.n	8002f38 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	f000 be2e 	b.w	8003b94 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f38:	4b75      	ldr	r3, [pc, #468]	; (8003110 <HAL_RCC_OscConfig+0x5e8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	21f8      	movs	r1, #248	; 0xf8
 8002f4e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002f56:	fa91 f1a1 	rbit	r1, r1
 8002f5a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002f5e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002f62:	fab1 f181 	clz	r1, r1
 8002f66:	b2c9      	uxtb	r1, r1
 8002f68:	408b      	lsls	r3, r1
 8002f6a:	4969      	ldr	r1, [pc, #420]	; (8003110 <HAL_RCC_OscConfig+0x5e8>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f70:	e0fd      	b.n	800316e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 8088 	beq.w	8003094 <HAL_RCC_OscConfig+0x56c>
 8002f84:	2301      	movs	r3, #1
 8002f86:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002f96:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f9a:	fab3 f383 	clz	r3, r3
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fa4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	461a      	mov	r2, r3
 8002fac:	2301      	movs	r3, #1
 8002fae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fb9c 	bl	80016ec <HAL_GetTick>
 8002fb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb8:	e00a      	b.n	8002fd0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fba:	f7fe fb97 	bl	80016ec <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d902      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	f000 bde2 	b.w	8003b94 <HAL_RCC_OscConfig+0x106c>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002fe2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe6:	fab3 f383 	clz	r3, r3
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	095b      	lsrs	r3, r3, #5
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d102      	bne.n	8003000 <HAL_RCC_OscConfig+0x4d8>
 8002ffa:	4b45      	ldr	r3, [pc, #276]	; (8003110 <HAL_RCC_OscConfig+0x5e8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	e013      	b.n	8003028 <HAL_RCC_OscConfig+0x500>
 8003000:	2302      	movs	r3, #2
 8003002:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800300a:	fa93 f3a3 	rbit	r3, r3
 800300e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003012:	2302      	movs	r3, #2
 8003014:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003018:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800301c:	fa93 f3a3 	rbit	r3, r3
 8003020:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003024:	4b3a      	ldr	r3, [pc, #232]	; (8003110 <HAL_RCC_OscConfig+0x5e8>)
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	2202      	movs	r2, #2
 800302a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800302e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003032:	fa92 f2a2 	rbit	r2, r2
 8003036:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800303a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800303e:	fab2 f282 	clz	r2, r2
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	f042 0220 	orr.w	r2, r2, #32
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	f002 021f 	and.w	r2, r2, #31
 800304e:	2101      	movs	r1, #1
 8003050:	fa01 f202 	lsl.w	r2, r1, r2
 8003054:	4013      	ands	r3, r2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0af      	beq.n	8002fba <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305a:	4b2d      	ldr	r3, [pc, #180]	; (8003110 <HAL_RCC_OscConfig+0x5e8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003066:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	21f8      	movs	r1, #248	; 0xf8
 8003070:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003078:	fa91 f1a1 	rbit	r1, r1
 800307c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003080:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003084:	fab1 f181 	clz	r1, r1
 8003088:	b2c9      	uxtb	r1, r1
 800308a:	408b      	lsls	r3, r1
 800308c:	4920      	ldr	r1, [pc, #128]	; (8003110 <HAL_RCC_OscConfig+0x5e8>)
 800308e:	4313      	orrs	r3, r2
 8003090:	600b      	str	r3, [r1, #0]
 8003092:	e06c      	b.n	800316e <HAL_RCC_OscConfig+0x646>
 8003094:	2301      	movs	r3, #1
 8003096:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80030a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030aa:	fab3 f383 	clz	r3, r3
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	461a      	mov	r2, r3
 80030bc:	2300      	movs	r3, #0
 80030be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fe fb14 	bl	80016ec <HAL_GetTick>
 80030c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c8:	e00a      	b.n	80030e0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ca:	f7fe fb0f 	bl	80016ec <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d902      	bls.n	80030e0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	f000 bd5a 	b.w	8003b94 <HAL_RCC_OscConfig+0x106c>
 80030e0:	2302      	movs	r3, #2
 80030e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80030ea:	fa93 f3a3 	rbit	r3, r3
 80030ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80030f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f6:	fab3 f383 	clz	r3, r3
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	095b      	lsrs	r3, r3, #5
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d104      	bne.n	8003114 <HAL_RCC_OscConfig+0x5ec>
 800310a:	4b01      	ldr	r3, [pc, #4]	; (8003110 <HAL_RCC_OscConfig+0x5e8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	e015      	b.n	800313c <HAL_RCC_OscConfig+0x614>
 8003110:	40021000 	.word	0x40021000
 8003114:	2302      	movs	r3, #2
 8003116:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800311e:	fa93 f3a3 	rbit	r3, r3
 8003122:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003126:	2302      	movs	r3, #2
 8003128:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800312c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003130:	fa93 f3a3 	rbit	r3, r3
 8003134:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003138:	4bc8      	ldr	r3, [pc, #800]	; (800345c <HAL_RCC_OscConfig+0x934>)
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	2202      	movs	r2, #2
 800313e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003142:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003146:	fa92 f2a2 	rbit	r2, r2
 800314a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800314e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003152:	fab2 f282 	clz	r2, r2
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	f042 0220 	orr.w	r2, r2, #32
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	f002 021f 	and.w	r2, r2, #31
 8003162:	2101      	movs	r1, #1
 8003164:	fa01 f202 	lsl.w	r2, r1, r2
 8003168:	4013      	ands	r3, r2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1ad      	bne.n	80030ca <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800316e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003172:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 8110 	beq.w	80033a4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003188:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d079      	beq.n	8003288 <HAL_RCC_OscConfig+0x760>
 8003194:	2301      	movs	r3, #1
 8003196:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800319e:	fa93 f3a3 	rbit	r3, r3
 80031a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80031a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	461a      	mov	r2, r3
 80031b2:	4bab      	ldr	r3, [pc, #684]	; (8003460 <HAL_RCC_OscConfig+0x938>)
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	461a      	mov	r2, r3
 80031ba:	2301      	movs	r3, #1
 80031bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031be:	f7fe fa95 	bl	80016ec <HAL_GetTick>
 80031c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c6:	e00a      	b.n	80031de <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031c8:	f7fe fa90 	bl	80016ec <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d902      	bls.n	80031de <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	f000 bcdb 	b.w	8003b94 <HAL_RCC_OscConfig+0x106c>
 80031de:	2302      	movs	r3, #2
 80031e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80031e8:	fa93 f3a3 	rbit	r3, r3
 80031ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80031f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80031f8:	2202      	movs	r2, #2
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003200:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	fa93 f2a3 	rbit	r2, r3
 800320a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800321c:	2202      	movs	r2, #2
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	fa93 f2a3 	rbit	r2, r3
 800322e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003232:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003236:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003238:	4b88      	ldr	r3, [pc, #544]	; (800345c <HAL_RCC_OscConfig+0x934>)
 800323a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800323c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003240:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003244:	2102      	movs	r1, #2
 8003246:	6019      	str	r1, [r3, #0]
 8003248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	fa93 f1a3 	rbit	r1, r3
 8003256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800325e:	6019      	str	r1, [r3, #0]
  return result;
 8003260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003264:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	fab3 f383 	clz	r3, r3
 800326e:	b2db      	uxtb	r3, r3
 8003270:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003274:	b2db      	uxtb	r3, r3
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	2101      	movs	r1, #1
 800327c:	fa01 f303 	lsl.w	r3, r1, r3
 8003280:	4013      	ands	r3, r2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0a0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x6a0>
 8003286:	e08d      	b.n	80033a4 <HAL_RCC_OscConfig+0x87c>
 8003288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003290:	2201      	movs	r2, #1
 8003292:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003298:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	fa93 f2a3 	rbit	r2, r3
 80032a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80032aa:	601a      	str	r2, [r3, #0]
  return result;
 80032ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80032b4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b6:	fab3 f383 	clz	r3, r3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	461a      	mov	r2, r3
 80032be:	4b68      	ldr	r3, [pc, #416]	; (8003460 <HAL_RCC_OscConfig+0x938>)
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	461a      	mov	r2, r3
 80032c6:	2300      	movs	r3, #0
 80032c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ca:	f7fe fa0f 	bl	80016ec <HAL_GetTick>
 80032ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d2:	e00a      	b.n	80032ea <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d4:	f7fe fa0a 	bl	80016ec <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d902      	bls.n	80032ea <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	f000 bc55 	b.w	8003b94 <HAL_RCC_OscConfig+0x106c>
 80032ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80032f2:	2202      	movs	r2, #2
 80032f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	fa93 f2a3 	rbit	r2, r3
 8003304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003308:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003312:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003316:	2202      	movs	r2, #2
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	fa93 f2a3 	rbit	r2, r3
 8003328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003336:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800333a:	2202      	movs	r2, #2
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003342:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	fa93 f2a3 	rbit	r2, r3
 800334c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003350:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003354:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003356:	4b41      	ldr	r3, [pc, #260]	; (800345c <HAL_RCC_OscConfig+0x934>)
 8003358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800335a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003362:	2102      	movs	r1, #2
 8003364:	6019      	str	r1, [r3, #0]
 8003366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	fa93 f1a3 	rbit	r1, r3
 8003374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003378:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800337c:	6019      	str	r1, [r3, #0]
  return result;
 800337e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003382:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	fab3 f383 	clz	r3, r3
 800338c:	b2db      	uxtb	r3, r3
 800338e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003392:	b2db      	uxtb	r3, r3
 8003394:	f003 031f 	and.w	r3, r3, #31
 8003398:	2101      	movs	r1, #1
 800339a:	fa01 f303 	lsl.w	r3, r1, r3
 800339e:	4013      	ands	r3, r2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d197      	bne.n	80032d4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 81a1 	beq.w	80036fc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ba:	2300      	movs	r3, #0
 80033bc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033c0:	4b26      	ldr	r3, [pc, #152]	; (800345c <HAL_RCC_OscConfig+0x934>)
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d116      	bne.n	80033fa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033cc:	4b23      	ldr	r3, [pc, #140]	; (800345c <HAL_RCC_OscConfig+0x934>)
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	4a22      	ldr	r2, [pc, #136]	; (800345c <HAL_RCC_OscConfig+0x934>)
 80033d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d6:	61d3      	str	r3, [r2, #28]
 80033d8:	4b20      	ldr	r3, [pc, #128]	; (800345c <HAL_RCC_OscConfig+0x934>)
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80033e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ee:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80033f2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80033f4:	2301      	movs	r3, #1
 80033f6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fa:	4b1a      	ldr	r3, [pc, #104]	; (8003464 <HAL_RCC_OscConfig+0x93c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003402:	2b00      	cmp	r3, #0
 8003404:	d11a      	bne.n	800343c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003406:	4b17      	ldr	r3, [pc, #92]	; (8003464 <HAL_RCC_OscConfig+0x93c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a16      	ldr	r2, [pc, #88]	; (8003464 <HAL_RCC_OscConfig+0x93c>)
 800340c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003410:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003412:	f7fe f96b 	bl	80016ec <HAL_GetTick>
 8003416:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341a:	e009      	b.n	8003430 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800341c:	f7fe f966 	bl	80016ec <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b64      	cmp	r3, #100	; 0x64
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e3b1      	b.n	8003b94 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003430:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <HAL_RCC_OscConfig+0x93c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0ef      	beq.n	800341c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800343c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003440:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d10d      	bne.n	8003468 <HAL_RCC_OscConfig+0x940>
 800344c:	4b03      	ldr	r3, [pc, #12]	; (800345c <HAL_RCC_OscConfig+0x934>)
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	4a02      	ldr	r2, [pc, #8]	; (800345c <HAL_RCC_OscConfig+0x934>)
 8003452:	f043 0301 	orr.w	r3, r3, #1
 8003456:	6213      	str	r3, [r2, #32]
 8003458:	e03c      	b.n	80034d4 <HAL_RCC_OscConfig+0x9ac>
 800345a:	bf00      	nop
 800345c:	40021000 	.word	0x40021000
 8003460:	10908120 	.word	0x10908120
 8003464:	40007000 	.word	0x40007000
 8003468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10c      	bne.n	8003492 <HAL_RCC_OscConfig+0x96a>
 8003478:	4bc1      	ldr	r3, [pc, #772]	; (8003780 <HAL_RCC_OscConfig+0xc58>)
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	4ac0      	ldr	r2, [pc, #768]	; (8003780 <HAL_RCC_OscConfig+0xc58>)
 800347e:	f023 0301 	bic.w	r3, r3, #1
 8003482:	6213      	str	r3, [r2, #32]
 8003484:	4bbe      	ldr	r3, [pc, #760]	; (8003780 <HAL_RCC_OscConfig+0xc58>)
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	4abd      	ldr	r2, [pc, #756]	; (8003780 <HAL_RCC_OscConfig+0xc58>)
 800348a:	f023 0304 	bic.w	r3, r3, #4
 800348e:	6213      	str	r3, [r2, #32]
 8003490:	e020      	b.n	80034d4 <HAL_RCC_OscConfig+0x9ac>
 8003492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003496:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	2b05      	cmp	r3, #5
 80034a0:	d10c      	bne.n	80034bc <HAL_RCC_OscConfig+0x994>
 80034a2:	4bb7      	ldr	r3, [pc, #732]	; (8003780 <HAL_RCC_OscConfig+0xc58>)
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	4ab6      	ldr	r2, [pc, #728]	; (8003780 <HAL_RCC_OscConfig+0xc58>)
 80034a8:	f043 0304 	orr.w	r3, r3, #4
 80034ac:	6213      	str	r3, [r2, #32]
 80034ae:	4bb4      	ldr	r3, [pc, #720]	; (8003780 <HAL_RCC_OscConfig+0xc58>)
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	4ab3      	ldr	r2, [pc, #716]	; (8003780 <HAL_RCC_OscConfig+0xc58>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	6213      	str	r3, [r2, #32]
 80034ba:	e00b      	b.n	80034d4 <HAL_RCC_OscConfig+0x9ac>
 80034bc:	4bb0      	ldr	r3, [pc, #704]	; (8003780 <HAL_RCC_OscConfig+0xc58>)
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	4aaf      	ldr	r2, [pc, #700]	; (8003780 <HAL_RCC_OscConfig+0xc58>)
 80034c2:	f023 0301 	bic.w	r3, r3, #1
 80034c6:	6213      	str	r3, [r2, #32]
 80034c8:	4bad      	ldr	r3, [pc, #692]	; (8003780 <HAL_RCC_OscConfig+0xc58>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	4aac      	ldr	r2, [pc, #688]	; (8003780 <HAL_RCC_OscConfig+0xc58>)
 80034ce:	f023 0304 	bic.w	r3, r3, #4
 80034d2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 8081 	beq.w	80035e8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e6:	f7fe f901 	bl	80016ec <HAL_GetTick>
 80034ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ee:	e00b      	b.n	8003508 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f0:	f7fe f8fc 	bl	80016ec <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003500:	4293      	cmp	r3, r2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e345      	b.n	8003b94 <HAL_RCC_OscConfig+0x106c>
 8003508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003510:	2202      	movs	r2, #2
 8003512:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003518:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	fa93 f2a3 	rbit	r2, r3
 8003522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003526:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003530:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003534:	2202      	movs	r2, #2
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	fa93 f2a3 	rbit	r2, r3
 8003546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800354e:	601a      	str	r2, [r3, #0]
  return result;
 8003550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003554:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003558:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355a:	fab3 f383 	clz	r3, r3
 800355e:	b2db      	uxtb	r3, r3
 8003560:	095b      	lsrs	r3, r3, #5
 8003562:	b2db      	uxtb	r3, r3
 8003564:	f043 0302 	orr.w	r3, r3, #2
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d102      	bne.n	8003574 <HAL_RCC_OscConfig+0xa4c>
 800356e:	4b84      	ldr	r3, [pc, #528]	; (8003780 <HAL_RCC_OscConfig+0xc58>)
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	e013      	b.n	800359c <HAL_RCC_OscConfig+0xa74>
 8003574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003578:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800357c:	2202      	movs	r2, #2
 800357e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003584:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	fa93 f2a3 	rbit	r2, r3
 800358e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003592:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	4b79      	ldr	r3, [pc, #484]	; (8003780 <HAL_RCC_OscConfig+0xc58>)
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035a0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80035a4:	2102      	movs	r1, #2
 80035a6:	6011      	str	r1, [r2, #0]
 80035a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035ac:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80035b0:	6812      	ldr	r2, [r2, #0]
 80035b2:	fa92 f1a2 	rbit	r1, r2
 80035b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035ba:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80035be:	6011      	str	r1, [r2, #0]
  return result;
 80035c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035c4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80035c8:	6812      	ldr	r2, [r2, #0]
 80035ca:	fab2 f282 	clz	r2, r2
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	f002 021f 	and.w	r2, r2, #31
 80035da:	2101      	movs	r1, #1
 80035dc:	fa01 f202 	lsl.w	r2, r1, r2
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d084      	beq.n	80034f0 <HAL_RCC_OscConfig+0x9c8>
 80035e6:	e07f      	b.n	80036e8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e8:	f7fe f880 	bl	80016ec <HAL_GetTick>
 80035ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f0:	e00b      	b.n	800360a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f2:	f7fe f87b 	bl	80016ec <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e2c4      	b.n	8003b94 <HAL_RCC_OscConfig+0x106c>
 800360a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800360e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003612:	2202      	movs	r2, #2
 8003614:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	fa93 f2a3 	rbit	r2, r3
 8003624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003628:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003632:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003636:	2202      	movs	r2, #2
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	fa93 f2a3 	rbit	r2, r3
 8003648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003650:	601a      	str	r2, [r3, #0]
  return result;
 8003652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003656:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800365a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365c:	fab3 f383 	clz	r3, r3
 8003660:	b2db      	uxtb	r3, r3
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	b2db      	uxtb	r3, r3
 8003666:	f043 0302 	orr.w	r3, r3, #2
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d102      	bne.n	8003676 <HAL_RCC_OscConfig+0xb4e>
 8003670:	4b43      	ldr	r3, [pc, #268]	; (8003780 <HAL_RCC_OscConfig+0xc58>)
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	e013      	b.n	800369e <HAL_RCC_OscConfig+0xb76>
 8003676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800367e:	2202      	movs	r2, #2
 8003680:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003686:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	fa93 f2a3 	rbit	r2, r3
 8003690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003694:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	4b39      	ldr	r3, [pc, #228]	; (8003780 <HAL_RCC_OscConfig+0xc58>)
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036a2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80036a6:	2102      	movs	r1, #2
 80036a8:	6011      	str	r1, [r2, #0]
 80036aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036ae:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	fa92 f1a2 	rbit	r1, r2
 80036b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036bc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80036c0:	6011      	str	r1, [r2, #0]
  return result;
 80036c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036c6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	fab2 f282 	clz	r2, r2
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	f002 021f 	and.w	r2, r2, #31
 80036dc:	2101      	movs	r1, #1
 80036de:	fa01 f202 	lsl.w	r2, r1, r2
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d184      	bne.n	80035f2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036e8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d105      	bne.n	80036fc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f0:	4b23      	ldr	r3, [pc, #140]	; (8003780 <HAL_RCC_OscConfig+0xc58>)
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	4a22      	ldr	r2, [pc, #136]	; (8003780 <HAL_RCC_OscConfig+0xc58>)
 80036f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036fa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003700:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 8242 	beq.w	8003b92 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800370e:	4b1c      	ldr	r3, [pc, #112]	; (8003780 <HAL_RCC_OscConfig+0xc58>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b08      	cmp	r3, #8
 8003718:	f000 8213 	beq.w	8003b42 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800371c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003720:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	2b02      	cmp	r3, #2
 800372a:	f040 8162 	bne.w	80039f2 <HAL_RCC_OscConfig+0xeca>
 800372e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003732:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003736:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800373a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003740:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	fa93 f2a3 	rbit	r2, r3
 800374a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003752:	601a      	str	r2, [r3, #0]
  return result;
 8003754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003758:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800375c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375e:	fab3 f383 	clz	r3, r3
 8003762:	b2db      	uxtb	r3, r3
 8003764:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003768:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	461a      	mov	r2, r3
 8003770:	2300      	movs	r3, #0
 8003772:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003774:	f7fd ffba 	bl	80016ec <HAL_GetTick>
 8003778:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800377c:	e00c      	b.n	8003798 <HAL_RCC_OscConfig+0xc70>
 800377e:	bf00      	nop
 8003780:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003784:	f7fd ffb2 	bl	80016ec <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e1fd      	b.n	8003b94 <HAL_RCC_OscConfig+0x106c>
 8003798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80037a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037aa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	fa93 f2a3 	rbit	r2, r3
 80037b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80037bc:	601a      	str	r2, [r3, #0]
  return result;
 80037be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80037c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c8:	fab3 f383 	clz	r3, r3
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d102      	bne.n	80037e2 <HAL_RCC_OscConfig+0xcba>
 80037dc:	4bb0      	ldr	r3, [pc, #704]	; (8003aa0 <HAL_RCC_OscConfig+0xf78>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	e027      	b.n	8003832 <HAL_RCC_OscConfig+0xd0a>
 80037e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	fa93 f2a3 	rbit	r2, r3
 80037fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003802:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003810:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800381a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	fa93 f2a3 	rbit	r2, r3
 8003824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003828:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	4b9c      	ldr	r3, [pc, #624]	; (8003aa0 <HAL_RCC_OscConfig+0xf78>)
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003836:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800383a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800383e:	6011      	str	r1, [r2, #0]
 8003840:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003844:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003848:	6812      	ldr	r2, [r2, #0]
 800384a:	fa92 f1a2 	rbit	r1, r2
 800384e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003852:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003856:	6011      	str	r1, [r2, #0]
  return result;
 8003858:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800385c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003860:	6812      	ldr	r2, [r2, #0]
 8003862:	fab2 f282 	clz	r2, r2
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	f042 0220 	orr.w	r2, r2, #32
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	f002 021f 	and.w	r2, r2, #31
 8003872:	2101      	movs	r1, #1
 8003874:	fa01 f202 	lsl.w	r2, r1, r2
 8003878:	4013      	ands	r3, r2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d182      	bne.n	8003784 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800387e:	4b88      	ldr	r3, [pc, #544]	; (8003aa0 <HAL_RCC_OscConfig+0xf78>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003896:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	430b      	orrs	r3, r1
 80038a0:	497f      	ldr	r1, [pc, #508]	; (8003aa0 <HAL_RCC_OscConfig+0xf78>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	604b      	str	r3, [r1, #4]
 80038a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038aa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80038ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	fa93 f2a3 	rbit	r2, r3
 80038c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80038ca:	601a      	str	r2, [r3, #0]
  return result;
 80038cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80038d4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d6:	fab3 f383 	clz	r3, r3
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	461a      	mov	r2, r3
 80038e8:	2301      	movs	r3, #1
 80038ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7fd fefe 	bl	80016ec <HAL_GetTick>
 80038f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038f4:	e009      	b.n	800390a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f6:	f7fd fef9 	bl	80016ec <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e144      	b.n	8003b94 <HAL_RCC_OscConfig+0x106c>
 800390a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800390e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003912:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003916:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800391c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	fa93 f2a3 	rbit	r2, r3
 8003926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800392e:	601a      	str	r2, [r3, #0]
  return result;
 8003930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003934:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003938:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800393a:	fab3 f383 	clz	r3, r3
 800393e:	b2db      	uxtb	r3, r3
 8003940:	095b      	lsrs	r3, r3, #5
 8003942:	b2db      	uxtb	r3, r3
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b01      	cmp	r3, #1
 800394c:	d102      	bne.n	8003954 <HAL_RCC_OscConfig+0xe2c>
 800394e:	4b54      	ldr	r3, [pc, #336]	; (8003aa0 <HAL_RCC_OscConfig+0xf78>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	e027      	b.n	80039a4 <HAL_RCC_OscConfig+0xe7c>
 8003954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003958:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800395c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003960:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003966:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	fa93 f2a3 	rbit	r2, r3
 8003970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003974:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003982:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	fa93 f2a3 	rbit	r2, r3
 8003996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	4b3f      	ldr	r3, [pc, #252]	; (8003aa0 <HAL_RCC_OscConfig+0xf78>)
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039a8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80039ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80039b0:	6011      	str	r1, [r2, #0]
 80039b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039b6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80039ba:	6812      	ldr	r2, [r2, #0]
 80039bc:	fa92 f1a2 	rbit	r1, r2
 80039c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039c4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80039c8:	6011      	str	r1, [r2, #0]
  return result;
 80039ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039ce:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	fab2 f282 	clz	r2, r2
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	f042 0220 	orr.w	r2, r2, #32
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	f002 021f 	and.w	r2, r2, #31
 80039e4:	2101      	movs	r1, #1
 80039e6:	fa01 f202 	lsl.w	r2, r1, r2
 80039ea:	4013      	ands	r3, r2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d082      	beq.n	80038f6 <HAL_RCC_OscConfig+0xdce>
 80039f0:	e0cf      	b.n	8003b92 <HAL_RCC_OscConfig+0x106a>
 80039f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80039fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a04:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	fa93 f2a3 	rbit	r2, r3
 8003a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a12:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003a16:	601a      	str	r2, [r3, #0]
  return result;
 8003a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a1c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003a20:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a22:	fab3 f383 	clz	r3, r3
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	461a      	mov	r2, r3
 8003a34:	2300      	movs	r3, #0
 8003a36:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a38:	f7fd fe58 	bl	80016ec <HAL_GetTick>
 8003a3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a40:	e009      	b.n	8003a56 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a42:	f7fd fe53 	bl	80016ec <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e09e      	b.n	8003b94 <HAL_RCC_OscConfig+0x106c>
 8003a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003a5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a68:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	fa93 f2a3 	rbit	r2, r3
 8003a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a76:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a7a:	601a      	str	r2, [r3, #0]
  return result;
 8003a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a80:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a86:	fab3 f383 	clz	r3, r3
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	095b      	lsrs	r3, r3, #5
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d104      	bne.n	8003aa4 <HAL_RCC_OscConfig+0xf7c>
 8003a9a:	4b01      	ldr	r3, [pc, #4]	; (8003aa0 <HAL_RCC_OscConfig+0xf78>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	e029      	b.n	8003af4 <HAL_RCC_OscConfig+0xfcc>
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003aac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ab0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	fa93 f2a3 	rbit	r2, r3
 8003ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ace:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003ad2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003adc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	fa93 f2a3 	rbit	r2, r3
 8003ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aea:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	4b2b      	ldr	r3, [pc, #172]	; (8003ba0 <HAL_RCC_OscConfig+0x1078>)
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003af8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003afc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b00:	6011      	str	r1, [r2, #0]
 8003b02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b06:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003b0a:	6812      	ldr	r2, [r2, #0]
 8003b0c:	fa92 f1a2 	rbit	r1, r2
 8003b10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b14:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003b18:	6011      	str	r1, [r2, #0]
  return result;
 8003b1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b1e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003b22:	6812      	ldr	r2, [r2, #0]
 8003b24:	fab2 f282 	clz	r2, r2
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	f042 0220 	orr.w	r2, r2, #32
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	f002 021f 	and.w	r2, r2, #31
 8003b34:	2101      	movs	r1, #1
 8003b36:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d180      	bne.n	8003a42 <HAL_RCC_OscConfig+0xf1a>
 8003b40:	e027      	b.n	8003b92 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d101      	bne.n	8003b56 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e01e      	b.n	8003b94 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b56:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <HAL_RCC_OscConfig+0x1078>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b5e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003b62:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d10b      	bne.n	8003b8e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003b76:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003b7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d001      	beq.n	8003b92 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40021000 	.word	0x40021000

08003ba4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b09e      	sub	sp, #120	; 0x78
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e162      	b.n	8003e82 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bbc:	4b90      	ldr	r3, [pc, #576]	; (8003e00 <HAL_RCC_ClockConfig+0x25c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d910      	bls.n	8003bec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bca:	4b8d      	ldr	r3, [pc, #564]	; (8003e00 <HAL_RCC_ClockConfig+0x25c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 0207 	bic.w	r2, r3, #7
 8003bd2:	498b      	ldr	r1, [pc, #556]	; (8003e00 <HAL_RCC_ClockConfig+0x25c>)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bda:	4b89      	ldr	r3, [pc, #548]	; (8003e00 <HAL_RCC_ClockConfig+0x25c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d001      	beq.n	8003bec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e14a      	b.n	8003e82 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d008      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf8:	4b82      	ldr	r3, [pc, #520]	; (8003e04 <HAL_RCC_ClockConfig+0x260>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	497f      	ldr	r1, [pc, #508]	; (8003e04 <HAL_RCC_ClockConfig+0x260>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 80dc 	beq.w	8003dd0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d13c      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xf6>
 8003c20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c24:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c28:	fa93 f3a3 	rbit	r3, r3
 8003c2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c30:	fab3 f383 	clz	r3, r3
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	095b      	lsrs	r3, r3, #5
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d102      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xa6>
 8003c44:	4b6f      	ldr	r3, [pc, #444]	; (8003e04 <HAL_RCC_ClockConfig+0x260>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	e00f      	b.n	8003c6a <HAL_RCC_ClockConfig+0xc6>
 8003c4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c52:	fa93 f3a3 	rbit	r3, r3
 8003c56:	667b      	str	r3, [r7, #100]	; 0x64
 8003c58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c5c:	663b      	str	r3, [r7, #96]	; 0x60
 8003c5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c60:	fa93 f3a3 	rbit	r3, r3
 8003c64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c66:	4b67      	ldr	r3, [pc, #412]	; (8003e04 <HAL_RCC_ClockConfig+0x260>)
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c6e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c72:	fa92 f2a2 	rbit	r2, r2
 8003c76:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003c78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c7a:	fab2 f282 	clz	r2, r2
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	f042 0220 	orr.w	r2, r2, #32
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	f002 021f 	and.w	r2, r2, #31
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c90:	4013      	ands	r3, r2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d17b      	bne.n	8003d8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e0f3      	b.n	8003e82 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d13c      	bne.n	8003d1c <HAL_RCC_ClockConfig+0x178>
 8003ca2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ca6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003caa:	fa93 f3a3 	rbit	r3, r3
 8003cae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb2:	fab3 f383 	clz	r3, r3
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d102      	bne.n	8003ccc <HAL_RCC_ClockConfig+0x128>
 8003cc6:	4b4f      	ldr	r3, [pc, #316]	; (8003e04 <HAL_RCC_ClockConfig+0x260>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	e00f      	b.n	8003cec <HAL_RCC_ClockConfig+0x148>
 8003ccc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cd0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cd4:	fa93 f3a3 	rbit	r3, r3
 8003cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8003cda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cde:	643b      	str	r3, [r7, #64]	; 0x40
 8003ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ce2:	fa93 f3a3 	rbit	r3, r3
 8003ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ce8:	4b46      	ldr	r3, [pc, #280]	; (8003e04 <HAL_RCC_ClockConfig+0x260>)
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cf0:	63ba      	str	r2, [r7, #56]	; 0x38
 8003cf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cf4:	fa92 f2a2 	rbit	r2, r2
 8003cf8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003cfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cfc:	fab2 f282 	clz	r2, r2
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	f042 0220 	orr.w	r2, r2, #32
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	f002 021f 	and.w	r2, r2, #31
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d12:	4013      	ands	r3, r2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d13a      	bne.n	8003d8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0b2      	b.n	8003e82 <HAL_RCC_ClockConfig+0x2de>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	fa93 f3a3 	rbit	r3, r3
 8003d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2a:	fab3 f383 	clz	r3, r3
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	095b      	lsrs	r3, r3, #5
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d102      	bne.n	8003d44 <HAL_RCC_ClockConfig+0x1a0>
 8003d3e:	4b31      	ldr	r3, [pc, #196]	; (8003e04 <HAL_RCC_ClockConfig+0x260>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	e00d      	b.n	8003d60 <HAL_RCC_ClockConfig+0x1bc>
 8003d44:	2302      	movs	r3, #2
 8003d46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4a:	fa93 f3a3 	rbit	r3, r3
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d50:	2302      	movs	r3, #2
 8003d52:	623b      	str	r3, [r7, #32]
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	fa93 f3a3 	rbit	r3, r3
 8003d5a:	61fb      	str	r3, [r7, #28]
 8003d5c:	4b29      	ldr	r3, [pc, #164]	; (8003e04 <HAL_RCC_ClockConfig+0x260>)
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	2202      	movs	r2, #2
 8003d62:	61ba      	str	r2, [r7, #24]
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	fa92 f2a2 	rbit	r2, r2
 8003d6a:	617a      	str	r2, [r7, #20]
  return result;
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	fab2 f282 	clz	r2, r2
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	f042 0220 	orr.w	r2, r2, #32
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	f002 021f 	and.w	r2, r2, #31
 8003d7e:	2101      	movs	r1, #1
 8003d80:	fa01 f202 	lsl.w	r2, r1, r2
 8003d84:	4013      	ands	r3, r2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e079      	b.n	8003e82 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d8e:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <HAL_RCC_ClockConfig+0x260>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f023 0203 	bic.w	r2, r3, #3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	491a      	ldr	r1, [pc, #104]	; (8003e04 <HAL_RCC_ClockConfig+0x260>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003da0:	f7fd fca4 	bl	80016ec <HAL_GetTick>
 8003da4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da6:	e00a      	b.n	8003dbe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da8:	f7fd fca0 	bl	80016ec <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e061      	b.n	8003e82 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbe:	4b11      	ldr	r3, [pc, #68]	; (8003e04 <HAL_RCC_ClockConfig+0x260>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f003 020c 	and.w	r2, r3, #12
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d1eb      	bne.n	8003da8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <HAL_RCC_ClockConfig+0x25c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d214      	bcs.n	8003e08 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dde:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <HAL_RCC_ClockConfig+0x25c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f023 0207 	bic.w	r2, r3, #7
 8003de6:	4906      	ldr	r1, [pc, #24]	; (8003e00 <HAL_RCC_ClockConfig+0x25c>)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dee:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <HAL_RCC_ClockConfig+0x25c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d005      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e040      	b.n	8003e82 <HAL_RCC_ClockConfig+0x2de>
 8003e00:	40022000 	.word	0x40022000
 8003e04:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d008      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e14:	4b1d      	ldr	r3, [pc, #116]	; (8003e8c <HAL_RCC_ClockConfig+0x2e8>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	491a      	ldr	r1, [pc, #104]	; (8003e8c <HAL_RCC_ClockConfig+0x2e8>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d009      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e32:	4b16      	ldr	r3, [pc, #88]	; (8003e8c <HAL_RCC_ClockConfig+0x2e8>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	4912      	ldr	r1, [pc, #72]	; (8003e8c <HAL_RCC_ClockConfig+0x2e8>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e46:	f000 f829 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 8003e4a:	4601      	mov	r1, r0
 8003e4c:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <HAL_RCC_ClockConfig+0x2e8>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e54:	22f0      	movs	r2, #240	; 0xf0
 8003e56:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	fa92 f2a2 	rbit	r2, r2
 8003e5e:	60fa      	str	r2, [r7, #12]
  return result;
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	fab2 f282 	clz	r2, r2
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	40d3      	lsrs	r3, r2
 8003e6a:	4a09      	ldr	r2, [pc, #36]	; (8003e90 <HAL_RCC_ClockConfig+0x2ec>)
 8003e6c:	5cd3      	ldrb	r3, [r2, r3]
 8003e6e:	fa21 f303 	lsr.w	r3, r1, r3
 8003e72:	4a08      	ldr	r2, [pc, #32]	; (8003e94 <HAL_RCC_ClockConfig+0x2f0>)
 8003e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003e76:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <HAL_RCC_ClockConfig+0x2f4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fd fbf2 	bl	8001664 <HAL_InitTick>
  
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3778      	adds	r7, #120	; 0x78
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	08007930 	.word	0x08007930
 8003e94:	20000008 	.word	0x20000008
 8003e98:	2000000c 	.word	0x2000000c

08003e9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b08b      	sub	sp, #44	; 0x2c
 8003ea0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61fb      	str	r3, [r7, #28]
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61bb      	str	r3, [r7, #24]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
 8003eae:	2300      	movs	r3, #0
 8003eb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003eb6:	4b29      	ldr	r3, [pc, #164]	; (8003f5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f003 030c 	and.w	r3, r3, #12
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d002      	beq.n	8003ecc <HAL_RCC_GetSysClockFreq+0x30>
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d003      	beq.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x36>
 8003eca:	e03c      	b.n	8003f46 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ecc:	4b24      	ldr	r3, [pc, #144]	; (8003f60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ece:	623b      	str	r3, [r7, #32]
      break;
 8003ed0:	e03c      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003ed8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003edc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	fa92 f2a2 	rbit	r2, r2
 8003ee4:	607a      	str	r2, [r7, #4]
  return result;
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	fab2 f282 	clz	r2, r2
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	40d3      	lsrs	r3, r2
 8003ef0:	4a1c      	ldr	r2, [pc, #112]	; (8003f64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ef2:	5cd3      	ldrb	r3, [r2, r3]
 8003ef4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003ef6:	4b19      	ldr	r3, [pc, #100]	; (8003f5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	220f      	movs	r2, #15
 8003f00:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	fa92 f2a2 	rbit	r2, r2
 8003f08:	60fa      	str	r2, [r7, #12]
  return result;
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	fab2 f282 	clz	r2, r2
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	40d3      	lsrs	r3, r2
 8003f14:	4a14      	ldr	r2, [pc, #80]	; (8003f68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003f16:	5cd3      	ldrb	r3, [r2, r3]
 8003f18:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d008      	beq.n	8003f36 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f24:	4a0e      	ldr	r2, [pc, #56]	; (8003f60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	fb02 f303 	mul.w	r3, r2, r3
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
 8003f34:	e004      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	4a0c      	ldr	r2, [pc, #48]	; (8003f6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f3a:	fb02 f303 	mul.w	r3, r2, r3
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	623b      	str	r3, [r7, #32]
      break;
 8003f44:	e002      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f46:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f48:	623b      	str	r3, [r7, #32]
      break;
 8003f4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	372c      	adds	r7, #44	; 0x2c
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	007a1200 	.word	0x007a1200
 8003f64:	08007948 	.word	0x08007948
 8003f68:	08007958 	.word	0x08007958
 8003f6c:	003d0900 	.word	0x003d0900

08003f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f74:	4b03      	ldr	r3, [pc, #12]	; (8003f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f76:	681b      	ldr	r3, [r3, #0]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	20000008 	.word	0x20000008

08003f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003f8e:	f7ff ffef 	bl	8003f70 <HAL_RCC_GetHCLKFreq>
 8003f92:	4601      	mov	r1, r0
 8003f94:	4b0b      	ldr	r3, [pc, #44]	; (8003fc4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f9c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003fa0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	fa92 f2a2 	rbit	r2, r2
 8003fa8:	603a      	str	r2, [r7, #0]
  return result;
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	fab2 f282 	clz	r2, r2
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	40d3      	lsrs	r3, r2
 8003fb4:	4a04      	ldr	r2, [pc, #16]	; (8003fc8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003fb6:	5cd3      	ldrb	r3, [r2, r3]
 8003fb8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	08007940 	.word	0x08007940

08003fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003fd2:	f7ff ffcd 	bl	8003f70 <HAL_RCC_GetHCLKFreq>
 8003fd6:	4601      	mov	r1, r0
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003fe0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003fe4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	fa92 f2a2 	rbit	r2, r2
 8003fec:	603a      	str	r2, [r7, #0]
  return result;
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	fab2 f282 	clz	r2, r2
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	40d3      	lsrs	r3, r2
 8003ff8:	4a04      	ldr	r2, [pc, #16]	; (800400c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003ffa:	5cd3      	ldrb	r3, [r2, r3]
 8003ffc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004000:	4618      	mov	r0, r3
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40021000 	.word	0x40021000
 800400c:	08007940 	.word	0x08007940

08004010 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b092      	sub	sp, #72	; 0x48
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800401c:	2300      	movs	r3, #0
 800401e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004020:	2300      	movs	r3, #0
 8004022:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 80cd 	beq.w	80041ce <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004034:	4b86      	ldr	r3, [pc, #536]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10e      	bne.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004040:	4b83      	ldr	r3, [pc, #524]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	4a82      	ldr	r2, [pc, #520]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800404a:	61d3      	str	r3, [r2, #28]
 800404c:	4b80      	ldr	r3, [pc, #512]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004054:	60bb      	str	r3, [r7, #8]
 8004056:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004058:	2301      	movs	r3, #1
 800405a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405e:	4b7d      	ldr	r3, [pc, #500]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004066:	2b00      	cmp	r3, #0
 8004068:	d118      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800406a:	4b7a      	ldr	r3, [pc, #488]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a79      	ldr	r2, [pc, #484]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004074:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004076:	f7fd fb39 	bl	80016ec <HAL_GetTick>
 800407a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407c:	e008      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800407e:	f7fd fb35 	bl	80016ec <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b64      	cmp	r3, #100	; 0x64
 800408a:	d901      	bls.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e0db      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004090:	4b70      	ldr	r3, [pc, #448]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0f0      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800409c:	4b6c      	ldr	r3, [pc, #432]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d07d      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d076      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040ba:	4b65      	ldr	r3, [pc, #404]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040c8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040cc:	fa93 f3a3 	rbit	r3, r3
 80040d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80040d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040d4:	fab3 f383 	clz	r3, r3
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	461a      	mov	r2, r3
 80040dc:	4b5e      	ldr	r3, [pc, #376]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80040de:	4413      	add	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	461a      	mov	r2, r3
 80040e4:	2301      	movs	r3, #1
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f0:	fa93 f3a3 	rbit	r3, r3
 80040f4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80040f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040f8:	fab3 f383 	clz	r3, r3
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	461a      	mov	r2, r3
 8004100:	4b55      	ldr	r3, [pc, #340]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	461a      	mov	r2, r3
 8004108:	2300      	movs	r3, #0
 800410a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800410c:	4a50      	ldr	r2, [pc, #320]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800410e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004110:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d045      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411c:	f7fd fae6 	bl	80016ec <HAL_GetTick>
 8004120:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004122:	e00a      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004124:	f7fd fae2 	bl	80016ec <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004132:	4293      	cmp	r3, r2
 8004134:	d901      	bls.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e086      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800413a:	2302      	movs	r3, #2
 800413c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004140:	fa93 f3a3 	rbit	r3, r3
 8004144:	627b      	str	r3, [r7, #36]	; 0x24
 8004146:	2302      	movs	r3, #2
 8004148:	623b      	str	r3, [r7, #32]
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	fa93 f3a3 	rbit	r3, r3
 8004150:	61fb      	str	r3, [r7, #28]
  return result;
 8004152:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004154:	fab3 f383 	clz	r3, r3
 8004158:	b2db      	uxtb	r3, r3
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	b2db      	uxtb	r3, r3
 800415e:	f043 0302 	orr.w	r3, r3, #2
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d102      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004168:	4b39      	ldr	r3, [pc, #228]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	e007      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800416e:	2302      	movs	r3, #2
 8004170:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	fa93 f3a3 	rbit	r3, r3
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	4b35      	ldr	r3, [pc, #212]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	2202      	movs	r2, #2
 8004180:	613a      	str	r2, [r7, #16]
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	fa92 f2a2 	rbit	r2, r2
 8004188:	60fa      	str	r2, [r7, #12]
  return result;
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	fab2 f282 	clz	r2, r2
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	f002 021f 	and.w	r2, r2, #31
 800419c:	2101      	movs	r1, #1
 800419e:	fa01 f202 	lsl.w	r2, r1, r2
 80041a2:	4013      	ands	r3, r2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0bd      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80041a8:	4b29      	ldr	r3, [pc, #164]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	4926      	ldr	r1, [pc, #152]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d105      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c2:	4b23      	ldr	r3, [pc, #140]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	4a22      	ldr	r2, [pc, #136]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041cc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d008      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041da:	4b1d      	ldr	r3, [pc, #116]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041de:	f023 0203 	bic.w	r2, r3, #3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	491a      	ldr	r1, [pc, #104]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d008      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041f8:	4b15      	ldr	r3, [pc, #84]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	f023 0210 	bic.w	r2, r3, #16
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	4912      	ldr	r1, [pc, #72]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004206:	4313      	orrs	r3, r2
 8004208:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004212:	2b00      	cmp	r3, #0
 8004214:	d008      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004216:	4b0e      	ldr	r3, [pc, #56]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	490b      	ldr	r1, [pc, #44]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004224:	4313      	orrs	r3, r2
 8004226:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d008      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004234:	4b06      	ldr	r3, [pc, #24]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	4903      	ldr	r1, [pc, #12]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004242:	4313      	orrs	r3, r2
 8004244:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3748      	adds	r7, #72	; 0x48
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40021000 	.word	0x40021000
 8004254:	40007000 	.word	0x40007000
 8004258:	10908100 	.word	0x10908100

0800425c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e040      	b.n	80042f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fd f860 	bl	8001344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2224      	movs	r2, #36	; 0x24
 8004288:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0201 	bic.w	r2, r2, #1
 8004298:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f8b6 	bl	800440c <UART_SetConfig>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d101      	bne.n	80042aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e022      	b.n	80042f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f9e0 	bl	8004678 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 fa67 	bl	80047bc <UART_CheckIdleState>
 80042ee:	4603      	mov	r3, r0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08a      	sub	sp, #40	; 0x28
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	4613      	mov	r3, r2
 8004306:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800430c:	2b20      	cmp	r3, #32
 800430e:	d178      	bne.n	8004402 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_UART_Transmit+0x24>
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e071      	b.n	8004404 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2221      	movs	r2, #33	; 0x21
 800432c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800432e:	f7fd f9dd 	bl	80016ec <HAL_GetTick>
 8004332:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	88fa      	ldrh	r2, [r7, #6]
 8004338:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	88fa      	ldrh	r2, [r7, #6]
 8004340:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434c:	d108      	bne.n	8004360 <HAL_UART_Transmit+0x68>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d104      	bne.n	8004360 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004356:	2300      	movs	r3, #0
 8004358:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	61bb      	str	r3, [r7, #24]
 800435e:	e003      	b.n	8004368 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004364:	2300      	movs	r3, #0
 8004366:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004368:	e030      	b.n	80043cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2200      	movs	r2, #0
 8004372:	2180      	movs	r1, #128	; 0x80
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 fac9 	bl	800490c <UART_WaitOnFlagUntilTimeout>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d004      	beq.n	800438a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e03c      	b.n	8004404 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10b      	bne.n	80043a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	881a      	ldrh	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800439c:	b292      	uxth	r2, r2
 800439e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	3302      	adds	r3, #2
 80043a4:	61bb      	str	r3, [r7, #24]
 80043a6:	e008      	b.n	80043ba <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	781a      	ldrb	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	b292      	uxth	r2, r2
 80043b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	3301      	adds	r3, #1
 80043b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1c8      	bne.n	800436a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	2200      	movs	r2, #0
 80043e0:	2140      	movs	r1, #64	; 0x40
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 fa92 	bl	800490c <UART_WaitOnFlagUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d004      	beq.n	80043f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2220      	movs	r2, #32
 80043f2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e005      	b.n	8004404 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2220      	movs	r2, #32
 80043fc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	e000      	b.n	8004404 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004402:	2302      	movs	r3, #2
  }
}
 8004404:	4618      	mov	r0, r3
 8004406:	3720      	adds	r7, #32
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	4b8a      	ldr	r3, [pc, #552]	; (8004660 <UART_SetConfig+0x254>)
 8004438:	4013      	ands	r3, r2
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6812      	ldr	r2, [r2, #0]
 800443e:	6979      	ldr	r1, [r7, #20]
 8004440:	430b      	orrs	r3, r1
 8004442:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	430a      	orrs	r2, r1
 800447c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a78      	ldr	r2, [pc, #480]	; (8004664 <UART_SetConfig+0x258>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d120      	bne.n	80044ca <UART_SetConfig+0xbe>
 8004488:	4b77      	ldr	r3, [pc, #476]	; (8004668 <UART_SetConfig+0x25c>)
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	f003 0303 	and.w	r3, r3, #3
 8004490:	2b03      	cmp	r3, #3
 8004492:	d817      	bhi.n	80044c4 <UART_SetConfig+0xb8>
 8004494:	a201      	add	r2, pc, #4	; (adr r2, 800449c <UART_SetConfig+0x90>)
 8004496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449a:	bf00      	nop
 800449c:	080044ad 	.word	0x080044ad
 80044a0:	080044b9 	.word	0x080044b9
 80044a4:	080044bf 	.word	0x080044bf
 80044a8:	080044b3 	.word	0x080044b3
 80044ac:	2300      	movs	r3, #0
 80044ae:	77fb      	strb	r3, [r7, #31]
 80044b0:	e01d      	b.n	80044ee <UART_SetConfig+0xe2>
 80044b2:	2302      	movs	r3, #2
 80044b4:	77fb      	strb	r3, [r7, #31]
 80044b6:	e01a      	b.n	80044ee <UART_SetConfig+0xe2>
 80044b8:	2304      	movs	r3, #4
 80044ba:	77fb      	strb	r3, [r7, #31]
 80044bc:	e017      	b.n	80044ee <UART_SetConfig+0xe2>
 80044be:	2308      	movs	r3, #8
 80044c0:	77fb      	strb	r3, [r7, #31]
 80044c2:	e014      	b.n	80044ee <UART_SetConfig+0xe2>
 80044c4:	2310      	movs	r3, #16
 80044c6:	77fb      	strb	r3, [r7, #31]
 80044c8:	e011      	b.n	80044ee <UART_SetConfig+0xe2>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a67      	ldr	r2, [pc, #412]	; (800466c <UART_SetConfig+0x260>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d102      	bne.n	80044da <UART_SetConfig+0xce>
 80044d4:	2300      	movs	r3, #0
 80044d6:	77fb      	strb	r3, [r7, #31]
 80044d8:	e009      	b.n	80044ee <UART_SetConfig+0xe2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a64      	ldr	r2, [pc, #400]	; (8004670 <UART_SetConfig+0x264>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d102      	bne.n	80044ea <UART_SetConfig+0xde>
 80044e4:	2300      	movs	r3, #0
 80044e6:	77fb      	strb	r3, [r7, #31]
 80044e8:	e001      	b.n	80044ee <UART_SetConfig+0xe2>
 80044ea:	2310      	movs	r3, #16
 80044ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f6:	d15a      	bne.n	80045ae <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80044f8:	7ffb      	ldrb	r3, [r7, #31]
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d827      	bhi.n	800454e <UART_SetConfig+0x142>
 80044fe:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <UART_SetConfig+0xf8>)
 8004500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004504:	08004529 	.word	0x08004529
 8004508:	08004531 	.word	0x08004531
 800450c:	08004539 	.word	0x08004539
 8004510:	0800454f 	.word	0x0800454f
 8004514:	0800453f 	.word	0x0800453f
 8004518:	0800454f 	.word	0x0800454f
 800451c:	0800454f 	.word	0x0800454f
 8004520:	0800454f 	.word	0x0800454f
 8004524:	08004547 	.word	0x08004547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004528:	f7ff fd2e 	bl	8003f88 <HAL_RCC_GetPCLK1Freq>
 800452c:	61b8      	str	r0, [r7, #24]
        break;
 800452e:	e013      	b.n	8004558 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004530:	f7ff fd4c 	bl	8003fcc <HAL_RCC_GetPCLK2Freq>
 8004534:	61b8      	str	r0, [r7, #24]
        break;
 8004536:	e00f      	b.n	8004558 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004538:	4b4e      	ldr	r3, [pc, #312]	; (8004674 <UART_SetConfig+0x268>)
 800453a:	61bb      	str	r3, [r7, #24]
        break;
 800453c:	e00c      	b.n	8004558 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800453e:	f7ff fcad 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 8004542:	61b8      	str	r0, [r7, #24]
        break;
 8004544:	e008      	b.n	8004558 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800454a:	61bb      	str	r3, [r7, #24]
        break;
 800454c:	e004      	b.n	8004558 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	77bb      	strb	r3, [r7, #30]
        break;
 8004556:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d074      	beq.n	8004648 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	005a      	lsls	r2, r3, #1
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	085b      	lsrs	r3, r3, #1
 8004568:	441a      	add	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004572:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	2b0f      	cmp	r3, #15
 8004578:	d916      	bls.n	80045a8 <UART_SetConfig+0x19c>
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004580:	d212      	bcs.n	80045a8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	b29b      	uxth	r3, r3
 8004586:	f023 030f 	bic.w	r3, r3, #15
 800458a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	085b      	lsrs	r3, r3, #1
 8004590:	b29b      	uxth	r3, r3
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	b29a      	uxth	r2, r3
 8004598:	89fb      	ldrh	r3, [r7, #14]
 800459a:	4313      	orrs	r3, r2
 800459c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	89fa      	ldrh	r2, [r7, #14]
 80045a4:	60da      	str	r2, [r3, #12]
 80045a6:	e04f      	b.n	8004648 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	77bb      	strb	r3, [r7, #30]
 80045ac:	e04c      	b.n	8004648 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045ae:	7ffb      	ldrb	r3, [r7, #31]
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d828      	bhi.n	8004606 <UART_SetConfig+0x1fa>
 80045b4:	a201      	add	r2, pc, #4	; (adr r2, 80045bc <UART_SetConfig+0x1b0>)
 80045b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ba:	bf00      	nop
 80045bc:	080045e1 	.word	0x080045e1
 80045c0:	080045e9 	.word	0x080045e9
 80045c4:	080045f1 	.word	0x080045f1
 80045c8:	08004607 	.word	0x08004607
 80045cc:	080045f7 	.word	0x080045f7
 80045d0:	08004607 	.word	0x08004607
 80045d4:	08004607 	.word	0x08004607
 80045d8:	08004607 	.word	0x08004607
 80045dc:	080045ff 	.word	0x080045ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045e0:	f7ff fcd2 	bl	8003f88 <HAL_RCC_GetPCLK1Freq>
 80045e4:	61b8      	str	r0, [r7, #24]
        break;
 80045e6:	e013      	b.n	8004610 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045e8:	f7ff fcf0 	bl	8003fcc <HAL_RCC_GetPCLK2Freq>
 80045ec:	61b8      	str	r0, [r7, #24]
        break;
 80045ee:	e00f      	b.n	8004610 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045f0:	4b20      	ldr	r3, [pc, #128]	; (8004674 <UART_SetConfig+0x268>)
 80045f2:	61bb      	str	r3, [r7, #24]
        break;
 80045f4:	e00c      	b.n	8004610 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045f6:	f7ff fc51 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 80045fa:	61b8      	str	r0, [r7, #24]
        break;
 80045fc:	e008      	b.n	8004610 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004602:	61bb      	str	r3, [r7, #24]
        break;
 8004604:	e004      	b.n	8004610 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004606:	2300      	movs	r3, #0
 8004608:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	77bb      	strb	r3, [r7, #30]
        break;
 800460e:	bf00      	nop
    }

    if (pclk != 0U)
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d018      	beq.n	8004648 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	085a      	lsrs	r2, r3, #1
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	441a      	add	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	fbb2 f3f3 	udiv	r3, r2, r3
 8004628:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2b0f      	cmp	r3, #15
 800462e:	d909      	bls.n	8004644 <UART_SetConfig+0x238>
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004636:	d205      	bcs.n	8004644 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	b29a      	uxth	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	60da      	str	r2, [r3, #12]
 8004642:	e001      	b.n	8004648 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004654:	7fbb      	ldrb	r3, [r7, #30]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3720      	adds	r7, #32
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	efff69f3 	.word	0xefff69f3
 8004664:	40013800 	.word	0x40013800
 8004668:	40021000 	.word	0x40021000
 800466c:	40004400 	.word	0x40004400
 8004670:	40004800 	.word	0x40004800
 8004674:	007a1200 	.word	0x007a1200

08004678 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	f003 0310 	and.w	r3, r3, #16
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004754:	2b00      	cmp	r3, #0
 8004756:	d01a      	beq.n	800478e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004776:	d10a      	bne.n	800478e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	605a      	str	r2, [r3, #4]
  }
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b098      	sub	sp, #96	; 0x60
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047cc:	f7fc ff8e 	bl	80016ec <HAL_GetTick>
 80047d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d12e      	bne.n	800483e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047e8:	2200      	movs	r2, #0
 80047ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f88c 	bl	800490c <UART_WaitOnFlagUntilTimeout>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d021      	beq.n	800483e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004802:	e853 3f00 	ldrex	r3, [r3]
 8004806:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800480e:	653b      	str	r3, [r7, #80]	; 0x50
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004818:	647b      	str	r3, [r7, #68]	; 0x44
 800481a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800481e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004820:	e841 2300 	strex	r3, r2, [r1]
 8004824:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1e6      	bne.n	80047fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2220      	movs	r2, #32
 8004830:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e062      	b.n	8004904 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b04      	cmp	r3, #4
 800484a:	d149      	bne.n	80048e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800484c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004854:	2200      	movs	r2, #0
 8004856:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f856 	bl	800490c <UART_WaitOnFlagUntilTimeout>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d03c      	beq.n	80048e0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	623b      	str	r3, [r7, #32]
   return(result);
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800487a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	461a      	mov	r2, r3
 8004882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004884:	633b      	str	r3, [r7, #48]	; 0x30
 8004886:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800488a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e6      	bne.n	8004866 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3308      	adds	r3, #8
 800489e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f023 0301 	bic.w	r3, r3, #1
 80048ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3308      	adds	r3, #8
 80048b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048b8:	61fa      	str	r2, [r7, #28]
 80048ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048bc:	69b9      	ldr	r1, [r7, #24]
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	e841 2300 	strex	r3, r2, [r1]
 80048c4:	617b      	str	r3, [r7, #20]
   return(result);
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e5      	bne.n	8004898 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e011      	b.n	8004904 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2220      	movs	r2, #32
 80048ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3758      	adds	r7, #88	; 0x58
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	603b      	str	r3, [r7, #0]
 8004918:	4613      	mov	r3, r2
 800491a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800491c:	e049      	b.n	80049b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004924:	d045      	beq.n	80049b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004926:	f7fc fee1 	bl	80016ec <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	429a      	cmp	r2, r3
 8004934:	d302      	bcc.n	800493c <UART_WaitOnFlagUntilTimeout+0x30>
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e048      	b.n	80049d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	d031      	beq.n	80049b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69db      	ldr	r3, [r3, #28]
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b08      	cmp	r3, #8
 800495a:	d110      	bne.n	800497e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2208      	movs	r2, #8
 8004962:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 f838 	bl	80049da <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2208      	movs	r2, #8
 800496e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e029      	b.n	80049d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800498c:	d111      	bne.n	80049b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004996:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 f81e 	bl	80049da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e00f      	b.n	80049d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69da      	ldr	r2, [r3, #28]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4013      	ands	r3, r2
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	429a      	cmp	r2, r3
 80049c0:	bf0c      	ite	eq
 80049c2:	2301      	moveq	r3, #1
 80049c4:	2300      	movne	r3, #0
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	461a      	mov	r2, r3
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d0a6      	beq.n	800491e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049da:	b480      	push	{r7}
 80049dc:	b095      	sub	sp, #84	; 0x54
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ea:	e853 3f00 	ldrex	r3, [r3]
 80049ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	461a      	mov	r2, r3
 80049fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a00:	643b      	str	r3, [r7, #64]	; 0x40
 8004a02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a08:	e841 2300 	strex	r3, r2, [r1]
 8004a0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1e6      	bne.n	80049e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3308      	adds	r3, #8
 8004a1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	f023 0301 	bic.w	r3, r3, #1
 8004a2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3308      	adds	r3, #8
 8004a32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a3c:	e841 2300 	strex	r3, r2, [r1]
 8004a40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e5      	bne.n	8004a14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d118      	bne.n	8004a82 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	e853 3f00 	ldrex	r3, [r3]
 8004a5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	f023 0310 	bic.w	r3, r3, #16
 8004a64:	647b      	str	r3, [r7, #68]	; 0x44
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a6e:	61bb      	str	r3, [r7, #24]
 8004a70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a72:	6979      	ldr	r1, [r7, #20]
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	e841 2300 	strex	r3, r2, [r1]
 8004a7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1e6      	bne.n	8004a50 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a96:	bf00      	nop
 8004a98:	3754      	adds	r7, #84	; 0x54
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
	...

08004aa4 <__errno>:
 8004aa4:	4b01      	ldr	r3, [pc, #4]	; (8004aac <__errno+0x8>)
 8004aa6:	6818      	ldr	r0, [r3, #0]
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	20000014 	.word	0x20000014

08004ab0 <__libc_init_array>:
 8004ab0:	b570      	push	{r4, r5, r6, lr}
 8004ab2:	4d0d      	ldr	r5, [pc, #52]	; (8004ae8 <__libc_init_array+0x38>)
 8004ab4:	4c0d      	ldr	r4, [pc, #52]	; (8004aec <__libc_init_array+0x3c>)
 8004ab6:	1b64      	subs	r4, r4, r5
 8004ab8:	10a4      	asrs	r4, r4, #2
 8004aba:	2600      	movs	r6, #0
 8004abc:	42a6      	cmp	r6, r4
 8004abe:	d109      	bne.n	8004ad4 <__libc_init_array+0x24>
 8004ac0:	4d0b      	ldr	r5, [pc, #44]	; (8004af0 <__libc_init_array+0x40>)
 8004ac2:	4c0c      	ldr	r4, [pc, #48]	; (8004af4 <__libc_init_array+0x44>)
 8004ac4:	f002 ff04 	bl	80078d0 <_init>
 8004ac8:	1b64      	subs	r4, r4, r5
 8004aca:	10a4      	asrs	r4, r4, #2
 8004acc:	2600      	movs	r6, #0
 8004ace:	42a6      	cmp	r6, r4
 8004ad0:	d105      	bne.n	8004ade <__libc_init_array+0x2e>
 8004ad2:	bd70      	pop	{r4, r5, r6, pc}
 8004ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ad8:	4798      	blx	r3
 8004ada:	3601      	adds	r6, #1
 8004adc:	e7ee      	b.n	8004abc <__libc_init_array+0xc>
 8004ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae2:	4798      	blx	r3
 8004ae4:	3601      	adds	r6, #1
 8004ae6:	e7f2      	b.n	8004ace <__libc_init_array+0x1e>
 8004ae8:	08007d44 	.word	0x08007d44
 8004aec:	08007d44 	.word	0x08007d44
 8004af0:	08007d44 	.word	0x08007d44
 8004af4:	08007d48 	.word	0x08007d48

08004af8 <memset>:
 8004af8:	4402      	add	r2, r0
 8004afa:	4603      	mov	r3, r0
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d100      	bne.n	8004b02 <memset+0xa>
 8004b00:	4770      	bx	lr
 8004b02:	f803 1b01 	strb.w	r1, [r3], #1
 8004b06:	e7f9      	b.n	8004afc <memset+0x4>

08004b08 <__cvt>:
 8004b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b0c:	ec55 4b10 	vmov	r4, r5, d0
 8004b10:	2d00      	cmp	r5, #0
 8004b12:	460e      	mov	r6, r1
 8004b14:	4619      	mov	r1, r3
 8004b16:	462b      	mov	r3, r5
 8004b18:	bfbb      	ittet	lt
 8004b1a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004b1e:	461d      	movlt	r5, r3
 8004b20:	2300      	movge	r3, #0
 8004b22:	232d      	movlt	r3, #45	; 0x2d
 8004b24:	700b      	strb	r3, [r1, #0]
 8004b26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b28:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004b2c:	4691      	mov	r9, r2
 8004b2e:	f023 0820 	bic.w	r8, r3, #32
 8004b32:	bfbc      	itt	lt
 8004b34:	4622      	movlt	r2, r4
 8004b36:	4614      	movlt	r4, r2
 8004b38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b3c:	d005      	beq.n	8004b4a <__cvt+0x42>
 8004b3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004b42:	d100      	bne.n	8004b46 <__cvt+0x3e>
 8004b44:	3601      	adds	r6, #1
 8004b46:	2102      	movs	r1, #2
 8004b48:	e000      	b.n	8004b4c <__cvt+0x44>
 8004b4a:	2103      	movs	r1, #3
 8004b4c:	ab03      	add	r3, sp, #12
 8004b4e:	9301      	str	r3, [sp, #4]
 8004b50:	ab02      	add	r3, sp, #8
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	ec45 4b10 	vmov	d0, r4, r5
 8004b58:	4653      	mov	r3, sl
 8004b5a:	4632      	mov	r2, r6
 8004b5c:	f000 fcec 	bl	8005538 <_dtoa_r>
 8004b60:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004b64:	4607      	mov	r7, r0
 8004b66:	d102      	bne.n	8004b6e <__cvt+0x66>
 8004b68:	f019 0f01 	tst.w	r9, #1
 8004b6c:	d022      	beq.n	8004bb4 <__cvt+0xac>
 8004b6e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b72:	eb07 0906 	add.w	r9, r7, r6
 8004b76:	d110      	bne.n	8004b9a <__cvt+0x92>
 8004b78:	783b      	ldrb	r3, [r7, #0]
 8004b7a:	2b30      	cmp	r3, #48	; 0x30
 8004b7c:	d10a      	bne.n	8004b94 <__cvt+0x8c>
 8004b7e:	2200      	movs	r2, #0
 8004b80:	2300      	movs	r3, #0
 8004b82:	4620      	mov	r0, r4
 8004b84:	4629      	mov	r1, r5
 8004b86:	f7fb ff9f 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b8a:	b918      	cbnz	r0, 8004b94 <__cvt+0x8c>
 8004b8c:	f1c6 0601 	rsb	r6, r6, #1
 8004b90:	f8ca 6000 	str.w	r6, [sl]
 8004b94:	f8da 3000 	ldr.w	r3, [sl]
 8004b98:	4499      	add	r9, r3
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	4629      	mov	r1, r5
 8004ba2:	f7fb ff91 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ba6:	b108      	cbz	r0, 8004bac <__cvt+0xa4>
 8004ba8:	f8cd 900c 	str.w	r9, [sp, #12]
 8004bac:	2230      	movs	r2, #48	; 0x30
 8004bae:	9b03      	ldr	r3, [sp, #12]
 8004bb0:	454b      	cmp	r3, r9
 8004bb2:	d307      	bcc.n	8004bc4 <__cvt+0xbc>
 8004bb4:	9b03      	ldr	r3, [sp, #12]
 8004bb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bb8:	1bdb      	subs	r3, r3, r7
 8004bba:	4638      	mov	r0, r7
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	b004      	add	sp, #16
 8004bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc4:	1c59      	adds	r1, r3, #1
 8004bc6:	9103      	str	r1, [sp, #12]
 8004bc8:	701a      	strb	r2, [r3, #0]
 8004bca:	e7f0      	b.n	8004bae <__cvt+0xa6>

08004bcc <__exponent>:
 8004bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2900      	cmp	r1, #0
 8004bd2:	bfb8      	it	lt
 8004bd4:	4249      	neglt	r1, r1
 8004bd6:	f803 2b02 	strb.w	r2, [r3], #2
 8004bda:	bfb4      	ite	lt
 8004bdc:	222d      	movlt	r2, #45	; 0x2d
 8004bde:	222b      	movge	r2, #43	; 0x2b
 8004be0:	2909      	cmp	r1, #9
 8004be2:	7042      	strb	r2, [r0, #1]
 8004be4:	dd2a      	ble.n	8004c3c <__exponent+0x70>
 8004be6:	f10d 0407 	add.w	r4, sp, #7
 8004bea:	46a4      	mov	ip, r4
 8004bec:	270a      	movs	r7, #10
 8004bee:	46a6      	mov	lr, r4
 8004bf0:	460a      	mov	r2, r1
 8004bf2:	fb91 f6f7 	sdiv	r6, r1, r7
 8004bf6:	fb07 1516 	mls	r5, r7, r6, r1
 8004bfa:	3530      	adds	r5, #48	; 0x30
 8004bfc:	2a63      	cmp	r2, #99	; 0x63
 8004bfe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004c02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004c06:	4631      	mov	r1, r6
 8004c08:	dcf1      	bgt.n	8004bee <__exponent+0x22>
 8004c0a:	3130      	adds	r1, #48	; 0x30
 8004c0c:	f1ae 0502 	sub.w	r5, lr, #2
 8004c10:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004c14:	1c44      	adds	r4, r0, #1
 8004c16:	4629      	mov	r1, r5
 8004c18:	4561      	cmp	r1, ip
 8004c1a:	d30a      	bcc.n	8004c32 <__exponent+0x66>
 8004c1c:	f10d 0209 	add.w	r2, sp, #9
 8004c20:	eba2 020e 	sub.w	r2, r2, lr
 8004c24:	4565      	cmp	r5, ip
 8004c26:	bf88      	it	hi
 8004c28:	2200      	movhi	r2, #0
 8004c2a:	4413      	add	r3, r2
 8004c2c:	1a18      	subs	r0, r3, r0
 8004c2e:	b003      	add	sp, #12
 8004c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c36:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004c3a:	e7ed      	b.n	8004c18 <__exponent+0x4c>
 8004c3c:	2330      	movs	r3, #48	; 0x30
 8004c3e:	3130      	adds	r1, #48	; 0x30
 8004c40:	7083      	strb	r3, [r0, #2]
 8004c42:	70c1      	strb	r1, [r0, #3]
 8004c44:	1d03      	adds	r3, r0, #4
 8004c46:	e7f1      	b.n	8004c2c <__exponent+0x60>

08004c48 <_printf_float>:
 8004c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c4c:	ed2d 8b02 	vpush	{d8}
 8004c50:	b08d      	sub	sp, #52	; 0x34
 8004c52:	460c      	mov	r4, r1
 8004c54:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004c58:	4616      	mov	r6, r2
 8004c5a:	461f      	mov	r7, r3
 8004c5c:	4605      	mov	r5, r0
 8004c5e:	f001 fa59 	bl	8006114 <_localeconv_r>
 8004c62:	f8d0 a000 	ldr.w	sl, [r0]
 8004c66:	4650      	mov	r0, sl
 8004c68:	f7fb fab2 	bl	80001d0 <strlen>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	9305      	str	r3, [sp, #20]
 8004c74:	f8d8 3000 	ldr.w	r3, [r8]
 8004c78:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004c7c:	3307      	adds	r3, #7
 8004c7e:	f023 0307 	bic.w	r3, r3, #7
 8004c82:	f103 0208 	add.w	r2, r3, #8
 8004c86:	f8c8 2000 	str.w	r2, [r8]
 8004c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004c92:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004c96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004c9a:	9307      	str	r3, [sp, #28]
 8004c9c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ca0:	ee08 0a10 	vmov	s16, r0
 8004ca4:	4b9f      	ldr	r3, [pc, #636]	; (8004f24 <_printf_float+0x2dc>)
 8004ca6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004caa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cae:	f7fb ff3d 	bl	8000b2c <__aeabi_dcmpun>
 8004cb2:	bb88      	cbnz	r0, 8004d18 <_printf_float+0xd0>
 8004cb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cb8:	4b9a      	ldr	r3, [pc, #616]	; (8004f24 <_printf_float+0x2dc>)
 8004cba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cbe:	f7fb ff17 	bl	8000af0 <__aeabi_dcmple>
 8004cc2:	bb48      	cbnz	r0, 8004d18 <_printf_float+0xd0>
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	4640      	mov	r0, r8
 8004cca:	4649      	mov	r1, r9
 8004ccc:	f7fb ff06 	bl	8000adc <__aeabi_dcmplt>
 8004cd0:	b110      	cbz	r0, 8004cd8 <_printf_float+0x90>
 8004cd2:	232d      	movs	r3, #45	; 0x2d
 8004cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cd8:	4b93      	ldr	r3, [pc, #588]	; (8004f28 <_printf_float+0x2e0>)
 8004cda:	4894      	ldr	r0, [pc, #592]	; (8004f2c <_printf_float+0x2e4>)
 8004cdc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004ce0:	bf94      	ite	ls
 8004ce2:	4698      	movls	r8, r3
 8004ce4:	4680      	movhi	r8, r0
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	6123      	str	r3, [r4, #16]
 8004cea:	9b05      	ldr	r3, [sp, #20]
 8004cec:	f023 0204 	bic.w	r2, r3, #4
 8004cf0:	6022      	str	r2, [r4, #0]
 8004cf2:	f04f 0900 	mov.w	r9, #0
 8004cf6:	9700      	str	r7, [sp, #0]
 8004cf8:	4633      	mov	r3, r6
 8004cfa:	aa0b      	add	r2, sp, #44	; 0x2c
 8004cfc:	4621      	mov	r1, r4
 8004cfe:	4628      	mov	r0, r5
 8004d00:	f000 f9d8 	bl	80050b4 <_printf_common>
 8004d04:	3001      	adds	r0, #1
 8004d06:	f040 8090 	bne.w	8004e2a <_printf_float+0x1e2>
 8004d0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d0e:	b00d      	add	sp, #52	; 0x34
 8004d10:	ecbd 8b02 	vpop	{d8}
 8004d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d18:	4642      	mov	r2, r8
 8004d1a:	464b      	mov	r3, r9
 8004d1c:	4640      	mov	r0, r8
 8004d1e:	4649      	mov	r1, r9
 8004d20:	f7fb ff04 	bl	8000b2c <__aeabi_dcmpun>
 8004d24:	b140      	cbz	r0, 8004d38 <_printf_float+0xf0>
 8004d26:	464b      	mov	r3, r9
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	bfbc      	itt	lt
 8004d2c:	232d      	movlt	r3, #45	; 0x2d
 8004d2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004d32:	487f      	ldr	r0, [pc, #508]	; (8004f30 <_printf_float+0x2e8>)
 8004d34:	4b7f      	ldr	r3, [pc, #508]	; (8004f34 <_printf_float+0x2ec>)
 8004d36:	e7d1      	b.n	8004cdc <_printf_float+0x94>
 8004d38:	6863      	ldr	r3, [r4, #4]
 8004d3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004d3e:	9206      	str	r2, [sp, #24]
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	d13f      	bne.n	8004dc4 <_printf_float+0x17c>
 8004d44:	2306      	movs	r3, #6
 8004d46:	6063      	str	r3, [r4, #4]
 8004d48:	9b05      	ldr	r3, [sp, #20]
 8004d4a:	6861      	ldr	r1, [r4, #4]
 8004d4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004d50:	2300      	movs	r3, #0
 8004d52:	9303      	str	r3, [sp, #12]
 8004d54:	ab0a      	add	r3, sp, #40	; 0x28
 8004d56:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004d5a:	ab09      	add	r3, sp, #36	; 0x24
 8004d5c:	ec49 8b10 	vmov	d0, r8, r9
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	6022      	str	r2, [r4, #0]
 8004d64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004d68:	4628      	mov	r0, r5
 8004d6a:	f7ff fecd 	bl	8004b08 <__cvt>
 8004d6e:	9b06      	ldr	r3, [sp, #24]
 8004d70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d72:	2b47      	cmp	r3, #71	; 0x47
 8004d74:	4680      	mov	r8, r0
 8004d76:	d108      	bne.n	8004d8a <_printf_float+0x142>
 8004d78:	1cc8      	adds	r0, r1, #3
 8004d7a:	db02      	blt.n	8004d82 <_printf_float+0x13a>
 8004d7c:	6863      	ldr	r3, [r4, #4]
 8004d7e:	4299      	cmp	r1, r3
 8004d80:	dd41      	ble.n	8004e06 <_printf_float+0x1be>
 8004d82:	f1ab 0b02 	sub.w	fp, fp, #2
 8004d86:	fa5f fb8b 	uxtb.w	fp, fp
 8004d8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004d8e:	d820      	bhi.n	8004dd2 <_printf_float+0x18a>
 8004d90:	3901      	subs	r1, #1
 8004d92:	465a      	mov	r2, fp
 8004d94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004d98:	9109      	str	r1, [sp, #36]	; 0x24
 8004d9a:	f7ff ff17 	bl	8004bcc <__exponent>
 8004d9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004da0:	1813      	adds	r3, r2, r0
 8004da2:	2a01      	cmp	r2, #1
 8004da4:	4681      	mov	r9, r0
 8004da6:	6123      	str	r3, [r4, #16]
 8004da8:	dc02      	bgt.n	8004db0 <_printf_float+0x168>
 8004daa:	6822      	ldr	r2, [r4, #0]
 8004dac:	07d2      	lsls	r2, r2, #31
 8004dae:	d501      	bpl.n	8004db4 <_printf_float+0x16c>
 8004db0:	3301      	adds	r3, #1
 8004db2:	6123      	str	r3, [r4, #16]
 8004db4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d09c      	beq.n	8004cf6 <_printf_float+0xae>
 8004dbc:	232d      	movs	r3, #45	; 0x2d
 8004dbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dc2:	e798      	b.n	8004cf6 <_printf_float+0xae>
 8004dc4:	9a06      	ldr	r2, [sp, #24]
 8004dc6:	2a47      	cmp	r2, #71	; 0x47
 8004dc8:	d1be      	bne.n	8004d48 <_printf_float+0x100>
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1bc      	bne.n	8004d48 <_printf_float+0x100>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e7b9      	b.n	8004d46 <_printf_float+0xfe>
 8004dd2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004dd6:	d118      	bne.n	8004e0a <_printf_float+0x1c2>
 8004dd8:	2900      	cmp	r1, #0
 8004dda:	6863      	ldr	r3, [r4, #4]
 8004ddc:	dd0b      	ble.n	8004df6 <_printf_float+0x1ae>
 8004dde:	6121      	str	r1, [r4, #16]
 8004de0:	b913      	cbnz	r3, 8004de8 <_printf_float+0x1a0>
 8004de2:	6822      	ldr	r2, [r4, #0]
 8004de4:	07d0      	lsls	r0, r2, #31
 8004de6:	d502      	bpl.n	8004dee <_printf_float+0x1a6>
 8004de8:	3301      	adds	r3, #1
 8004dea:	440b      	add	r3, r1
 8004dec:	6123      	str	r3, [r4, #16]
 8004dee:	65a1      	str	r1, [r4, #88]	; 0x58
 8004df0:	f04f 0900 	mov.w	r9, #0
 8004df4:	e7de      	b.n	8004db4 <_printf_float+0x16c>
 8004df6:	b913      	cbnz	r3, 8004dfe <_printf_float+0x1b6>
 8004df8:	6822      	ldr	r2, [r4, #0]
 8004dfa:	07d2      	lsls	r2, r2, #31
 8004dfc:	d501      	bpl.n	8004e02 <_printf_float+0x1ba>
 8004dfe:	3302      	adds	r3, #2
 8004e00:	e7f4      	b.n	8004dec <_printf_float+0x1a4>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e7f2      	b.n	8004dec <_printf_float+0x1a4>
 8004e06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e0c:	4299      	cmp	r1, r3
 8004e0e:	db05      	blt.n	8004e1c <_printf_float+0x1d4>
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	6121      	str	r1, [r4, #16]
 8004e14:	07d8      	lsls	r0, r3, #31
 8004e16:	d5ea      	bpl.n	8004dee <_printf_float+0x1a6>
 8004e18:	1c4b      	adds	r3, r1, #1
 8004e1a:	e7e7      	b.n	8004dec <_printf_float+0x1a4>
 8004e1c:	2900      	cmp	r1, #0
 8004e1e:	bfd4      	ite	le
 8004e20:	f1c1 0202 	rsble	r2, r1, #2
 8004e24:	2201      	movgt	r2, #1
 8004e26:	4413      	add	r3, r2
 8004e28:	e7e0      	b.n	8004dec <_printf_float+0x1a4>
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	055a      	lsls	r2, r3, #21
 8004e2e:	d407      	bmi.n	8004e40 <_printf_float+0x1f8>
 8004e30:	6923      	ldr	r3, [r4, #16]
 8004e32:	4642      	mov	r2, r8
 8004e34:	4631      	mov	r1, r6
 8004e36:	4628      	mov	r0, r5
 8004e38:	47b8      	blx	r7
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	d12c      	bne.n	8004e98 <_printf_float+0x250>
 8004e3e:	e764      	b.n	8004d0a <_printf_float+0xc2>
 8004e40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004e44:	f240 80e0 	bls.w	8005008 <_printf_float+0x3c0>
 8004e48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2300      	movs	r3, #0
 8004e50:	f7fb fe3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e54:	2800      	cmp	r0, #0
 8004e56:	d034      	beq.n	8004ec2 <_printf_float+0x27a>
 8004e58:	4a37      	ldr	r2, [pc, #220]	; (8004f38 <_printf_float+0x2f0>)
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	4631      	mov	r1, r6
 8004e5e:	4628      	mov	r0, r5
 8004e60:	47b8      	blx	r7
 8004e62:	3001      	adds	r0, #1
 8004e64:	f43f af51 	beq.w	8004d0a <_printf_float+0xc2>
 8004e68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	db02      	blt.n	8004e76 <_printf_float+0x22e>
 8004e70:	6823      	ldr	r3, [r4, #0]
 8004e72:	07d8      	lsls	r0, r3, #31
 8004e74:	d510      	bpl.n	8004e98 <_printf_float+0x250>
 8004e76:	ee18 3a10 	vmov	r3, s16
 8004e7a:	4652      	mov	r2, sl
 8004e7c:	4631      	mov	r1, r6
 8004e7e:	4628      	mov	r0, r5
 8004e80:	47b8      	blx	r7
 8004e82:	3001      	adds	r0, #1
 8004e84:	f43f af41 	beq.w	8004d0a <_printf_float+0xc2>
 8004e88:	f04f 0800 	mov.w	r8, #0
 8004e8c:	f104 091a 	add.w	r9, r4, #26
 8004e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e92:	3b01      	subs	r3, #1
 8004e94:	4543      	cmp	r3, r8
 8004e96:	dc09      	bgt.n	8004eac <_printf_float+0x264>
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	079b      	lsls	r3, r3, #30
 8004e9c:	f100 8105 	bmi.w	80050aa <_printf_float+0x462>
 8004ea0:	68e0      	ldr	r0, [r4, #12]
 8004ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ea4:	4298      	cmp	r0, r3
 8004ea6:	bfb8      	it	lt
 8004ea8:	4618      	movlt	r0, r3
 8004eaa:	e730      	b.n	8004d0e <_printf_float+0xc6>
 8004eac:	2301      	movs	r3, #1
 8004eae:	464a      	mov	r2, r9
 8004eb0:	4631      	mov	r1, r6
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	47b8      	blx	r7
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	f43f af27 	beq.w	8004d0a <_printf_float+0xc2>
 8004ebc:	f108 0801 	add.w	r8, r8, #1
 8004ec0:	e7e6      	b.n	8004e90 <_printf_float+0x248>
 8004ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	dc39      	bgt.n	8004f3c <_printf_float+0x2f4>
 8004ec8:	4a1b      	ldr	r2, [pc, #108]	; (8004f38 <_printf_float+0x2f0>)
 8004eca:	2301      	movs	r3, #1
 8004ecc:	4631      	mov	r1, r6
 8004ece:	4628      	mov	r0, r5
 8004ed0:	47b8      	blx	r7
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	f43f af19 	beq.w	8004d0a <_printf_float+0xc2>
 8004ed8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004edc:	4313      	orrs	r3, r2
 8004ede:	d102      	bne.n	8004ee6 <_printf_float+0x29e>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	07d9      	lsls	r1, r3, #31
 8004ee4:	d5d8      	bpl.n	8004e98 <_printf_float+0x250>
 8004ee6:	ee18 3a10 	vmov	r3, s16
 8004eea:	4652      	mov	r2, sl
 8004eec:	4631      	mov	r1, r6
 8004eee:	4628      	mov	r0, r5
 8004ef0:	47b8      	blx	r7
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	f43f af09 	beq.w	8004d0a <_printf_float+0xc2>
 8004ef8:	f04f 0900 	mov.w	r9, #0
 8004efc:	f104 0a1a 	add.w	sl, r4, #26
 8004f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f02:	425b      	negs	r3, r3
 8004f04:	454b      	cmp	r3, r9
 8004f06:	dc01      	bgt.n	8004f0c <_printf_float+0x2c4>
 8004f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f0a:	e792      	b.n	8004e32 <_printf_float+0x1ea>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	4652      	mov	r2, sl
 8004f10:	4631      	mov	r1, r6
 8004f12:	4628      	mov	r0, r5
 8004f14:	47b8      	blx	r7
 8004f16:	3001      	adds	r0, #1
 8004f18:	f43f aef7 	beq.w	8004d0a <_printf_float+0xc2>
 8004f1c:	f109 0901 	add.w	r9, r9, #1
 8004f20:	e7ee      	b.n	8004f00 <_printf_float+0x2b8>
 8004f22:	bf00      	nop
 8004f24:	7fefffff 	.word	0x7fefffff
 8004f28:	0800796c 	.word	0x0800796c
 8004f2c:	08007970 	.word	0x08007970
 8004f30:	08007978 	.word	0x08007978
 8004f34:	08007974 	.word	0x08007974
 8004f38:	0800797c 	.word	0x0800797c
 8004f3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f40:	429a      	cmp	r2, r3
 8004f42:	bfa8      	it	ge
 8004f44:	461a      	movge	r2, r3
 8004f46:	2a00      	cmp	r2, #0
 8004f48:	4691      	mov	r9, r2
 8004f4a:	dc37      	bgt.n	8004fbc <_printf_float+0x374>
 8004f4c:	f04f 0b00 	mov.w	fp, #0
 8004f50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f54:	f104 021a 	add.w	r2, r4, #26
 8004f58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f5a:	9305      	str	r3, [sp, #20]
 8004f5c:	eba3 0309 	sub.w	r3, r3, r9
 8004f60:	455b      	cmp	r3, fp
 8004f62:	dc33      	bgt.n	8004fcc <_printf_float+0x384>
 8004f64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	db3b      	blt.n	8004fe4 <_printf_float+0x39c>
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	07da      	lsls	r2, r3, #31
 8004f70:	d438      	bmi.n	8004fe4 <_printf_float+0x39c>
 8004f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f74:	9a05      	ldr	r2, [sp, #20]
 8004f76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f78:	1a9a      	subs	r2, r3, r2
 8004f7a:	eba3 0901 	sub.w	r9, r3, r1
 8004f7e:	4591      	cmp	r9, r2
 8004f80:	bfa8      	it	ge
 8004f82:	4691      	movge	r9, r2
 8004f84:	f1b9 0f00 	cmp.w	r9, #0
 8004f88:	dc35      	bgt.n	8004ff6 <_printf_float+0x3ae>
 8004f8a:	f04f 0800 	mov.w	r8, #0
 8004f8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f92:	f104 0a1a 	add.w	sl, r4, #26
 8004f96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f9a:	1a9b      	subs	r3, r3, r2
 8004f9c:	eba3 0309 	sub.w	r3, r3, r9
 8004fa0:	4543      	cmp	r3, r8
 8004fa2:	f77f af79 	ble.w	8004e98 <_printf_float+0x250>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	4652      	mov	r2, sl
 8004faa:	4631      	mov	r1, r6
 8004fac:	4628      	mov	r0, r5
 8004fae:	47b8      	blx	r7
 8004fb0:	3001      	adds	r0, #1
 8004fb2:	f43f aeaa 	beq.w	8004d0a <_printf_float+0xc2>
 8004fb6:	f108 0801 	add.w	r8, r8, #1
 8004fba:	e7ec      	b.n	8004f96 <_printf_float+0x34e>
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	4631      	mov	r1, r6
 8004fc0:	4642      	mov	r2, r8
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	47b8      	blx	r7
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	d1c0      	bne.n	8004f4c <_printf_float+0x304>
 8004fca:	e69e      	b.n	8004d0a <_printf_float+0xc2>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	4631      	mov	r1, r6
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	9205      	str	r2, [sp, #20]
 8004fd4:	47b8      	blx	r7
 8004fd6:	3001      	adds	r0, #1
 8004fd8:	f43f ae97 	beq.w	8004d0a <_printf_float+0xc2>
 8004fdc:	9a05      	ldr	r2, [sp, #20]
 8004fde:	f10b 0b01 	add.w	fp, fp, #1
 8004fe2:	e7b9      	b.n	8004f58 <_printf_float+0x310>
 8004fe4:	ee18 3a10 	vmov	r3, s16
 8004fe8:	4652      	mov	r2, sl
 8004fea:	4631      	mov	r1, r6
 8004fec:	4628      	mov	r0, r5
 8004fee:	47b8      	blx	r7
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	d1be      	bne.n	8004f72 <_printf_float+0x32a>
 8004ff4:	e689      	b.n	8004d0a <_printf_float+0xc2>
 8004ff6:	9a05      	ldr	r2, [sp, #20]
 8004ff8:	464b      	mov	r3, r9
 8004ffa:	4442      	add	r2, r8
 8004ffc:	4631      	mov	r1, r6
 8004ffe:	4628      	mov	r0, r5
 8005000:	47b8      	blx	r7
 8005002:	3001      	adds	r0, #1
 8005004:	d1c1      	bne.n	8004f8a <_printf_float+0x342>
 8005006:	e680      	b.n	8004d0a <_printf_float+0xc2>
 8005008:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800500a:	2a01      	cmp	r2, #1
 800500c:	dc01      	bgt.n	8005012 <_printf_float+0x3ca>
 800500e:	07db      	lsls	r3, r3, #31
 8005010:	d538      	bpl.n	8005084 <_printf_float+0x43c>
 8005012:	2301      	movs	r3, #1
 8005014:	4642      	mov	r2, r8
 8005016:	4631      	mov	r1, r6
 8005018:	4628      	mov	r0, r5
 800501a:	47b8      	blx	r7
 800501c:	3001      	adds	r0, #1
 800501e:	f43f ae74 	beq.w	8004d0a <_printf_float+0xc2>
 8005022:	ee18 3a10 	vmov	r3, s16
 8005026:	4652      	mov	r2, sl
 8005028:	4631      	mov	r1, r6
 800502a:	4628      	mov	r0, r5
 800502c:	47b8      	blx	r7
 800502e:	3001      	adds	r0, #1
 8005030:	f43f ae6b 	beq.w	8004d0a <_printf_float+0xc2>
 8005034:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005038:	2200      	movs	r2, #0
 800503a:	2300      	movs	r3, #0
 800503c:	f7fb fd44 	bl	8000ac8 <__aeabi_dcmpeq>
 8005040:	b9d8      	cbnz	r0, 800507a <_printf_float+0x432>
 8005042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005044:	f108 0201 	add.w	r2, r8, #1
 8005048:	3b01      	subs	r3, #1
 800504a:	4631      	mov	r1, r6
 800504c:	4628      	mov	r0, r5
 800504e:	47b8      	blx	r7
 8005050:	3001      	adds	r0, #1
 8005052:	d10e      	bne.n	8005072 <_printf_float+0x42a>
 8005054:	e659      	b.n	8004d0a <_printf_float+0xc2>
 8005056:	2301      	movs	r3, #1
 8005058:	4652      	mov	r2, sl
 800505a:	4631      	mov	r1, r6
 800505c:	4628      	mov	r0, r5
 800505e:	47b8      	blx	r7
 8005060:	3001      	adds	r0, #1
 8005062:	f43f ae52 	beq.w	8004d0a <_printf_float+0xc2>
 8005066:	f108 0801 	add.w	r8, r8, #1
 800506a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800506c:	3b01      	subs	r3, #1
 800506e:	4543      	cmp	r3, r8
 8005070:	dcf1      	bgt.n	8005056 <_printf_float+0x40e>
 8005072:	464b      	mov	r3, r9
 8005074:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005078:	e6dc      	b.n	8004e34 <_printf_float+0x1ec>
 800507a:	f04f 0800 	mov.w	r8, #0
 800507e:	f104 0a1a 	add.w	sl, r4, #26
 8005082:	e7f2      	b.n	800506a <_printf_float+0x422>
 8005084:	2301      	movs	r3, #1
 8005086:	4642      	mov	r2, r8
 8005088:	e7df      	b.n	800504a <_printf_float+0x402>
 800508a:	2301      	movs	r3, #1
 800508c:	464a      	mov	r2, r9
 800508e:	4631      	mov	r1, r6
 8005090:	4628      	mov	r0, r5
 8005092:	47b8      	blx	r7
 8005094:	3001      	adds	r0, #1
 8005096:	f43f ae38 	beq.w	8004d0a <_printf_float+0xc2>
 800509a:	f108 0801 	add.w	r8, r8, #1
 800509e:	68e3      	ldr	r3, [r4, #12]
 80050a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80050a2:	1a5b      	subs	r3, r3, r1
 80050a4:	4543      	cmp	r3, r8
 80050a6:	dcf0      	bgt.n	800508a <_printf_float+0x442>
 80050a8:	e6fa      	b.n	8004ea0 <_printf_float+0x258>
 80050aa:	f04f 0800 	mov.w	r8, #0
 80050ae:	f104 0919 	add.w	r9, r4, #25
 80050b2:	e7f4      	b.n	800509e <_printf_float+0x456>

080050b4 <_printf_common>:
 80050b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050b8:	4616      	mov	r6, r2
 80050ba:	4699      	mov	r9, r3
 80050bc:	688a      	ldr	r2, [r1, #8]
 80050be:	690b      	ldr	r3, [r1, #16]
 80050c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050c4:	4293      	cmp	r3, r2
 80050c6:	bfb8      	it	lt
 80050c8:	4613      	movlt	r3, r2
 80050ca:	6033      	str	r3, [r6, #0]
 80050cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050d0:	4607      	mov	r7, r0
 80050d2:	460c      	mov	r4, r1
 80050d4:	b10a      	cbz	r2, 80050da <_printf_common+0x26>
 80050d6:	3301      	adds	r3, #1
 80050d8:	6033      	str	r3, [r6, #0]
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	0699      	lsls	r1, r3, #26
 80050de:	bf42      	ittt	mi
 80050e0:	6833      	ldrmi	r3, [r6, #0]
 80050e2:	3302      	addmi	r3, #2
 80050e4:	6033      	strmi	r3, [r6, #0]
 80050e6:	6825      	ldr	r5, [r4, #0]
 80050e8:	f015 0506 	ands.w	r5, r5, #6
 80050ec:	d106      	bne.n	80050fc <_printf_common+0x48>
 80050ee:	f104 0a19 	add.w	sl, r4, #25
 80050f2:	68e3      	ldr	r3, [r4, #12]
 80050f4:	6832      	ldr	r2, [r6, #0]
 80050f6:	1a9b      	subs	r3, r3, r2
 80050f8:	42ab      	cmp	r3, r5
 80050fa:	dc26      	bgt.n	800514a <_printf_common+0x96>
 80050fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005100:	1e13      	subs	r3, r2, #0
 8005102:	6822      	ldr	r2, [r4, #0]
 8005104:	bf18      	it	ne
 8005106:	2301      	movne	r3, #1
 8005108:	0692      	lsls	r2, r2, #26
 800510a:	d42b      	bmi.n	8005164 <_printf_common+0xb0>
 800510c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005110:	4649      	mov	r1, r9
 8005112:	4638      	mov	r0, r7
 8005114:	47c0      	blx	r8
 8005116:	3001      	adds	r0, #1
 8005118:	d01e      	beq.n	8005158 <_printf_common+0xa4>
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	68e5      	ldr	r5, [r4, #12]
 800511e:	6832      	ldr	r2, [r6, #0]
 8005120:	f003 0306 	and.w	r3, r3, #6
 8005124:	2b04      	cmp	r3, #4
 8005126:	bf08      	it	eq
 8005128:	1aad      	subeq	r5, r5, r2
 800512a:	68a3      	ldr	r3, [r4, #8]
 800512c:	6922      	ldr	r2, [r4, #16]
 800512e:	bf0c      	ite	eq
 8005130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005134:	2500      	movne	r5, #0
 8005136:	4293      	cmp	r3, r2
 8005138:	bfc4      	itt	gt
 800513a:	1a9b      	subgt	r3, r3, r2
 800513c:	18ed      	addgt	r5, r5, r3
 800513e:	2600      	movs	r6, #0
 8005140:	341a      	adds	r4, #26
 8005142:	42b5      	cmp	r5, r6
 8005144:	d11a      	bne.n	800517c <_printf_common+0xc8>
 8005146:	2000      	movs	r0, #0
 8005148:	e008      	b.n	800515c <_printf_common+0xa8>
 800514a:	2301      	movs	r3, #1
 800514c:	4652      	mov	r2, sl
 800514e:	4649      	mov	r1, r9
 8005150:	4638      	mov	r0, r7
 8005152:	47c0      	blx	r8
 8005154:	3001      	adds	r0, #1
 8005156:	d103      	bne.n	8005160 <_printf_common+0xac>
 8005158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800515c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005160:	3501      	adds	r5, #1
 8005162:	e7c6      	b.n	80050f2 <_printf_common+0x3e>
 8005164:	18e1      	adds	r1, r4, r3
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	2030      	movs	r0, #48	; 0x30
 800516a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800516e:	4422      	add	r2, r4
 8005170:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005174:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005178:	3302      	adds	r3, #2
 800517a:	e7c7      	b.n	800510c <_printf_common+0x58>
 800517c:	2301      	movs	r3, #1
 800517e:	4622      	mov	r2, r4
 8005180:	4649      	mov	r1, r9
 8005182:	4638      	mov	r0, r7
 8005184:	47c0      	blx	r8
 8005186:	3001      	adds	r0, #1
 8005188:	d0e6      	beq.n	8005158 <_printf_common+0xa4>
 800518a:	3601      	adds	r6, #1
 800518c:	e7d9      	b.n	8005142 <_printf_common+0x8e>
	...

08005190 <_printf_i>:
 8005190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005194:	7e0f      	ldrb	r7, [r1, #24]
 8005196:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005198:	2f78      	cmp	r7, #120	; 0x78
 800519a:	4691      	mov	r9, r2
 800519c:	4680      	mov	r8, r0
 800519e:	460c      	mov	r4, r1
 80051a0:	469a      	mov	sl, r3
 80051a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80051a6:	d807      	bhi.n	80051b8 <_printf_i+0x28>
 80051a8:	2f62      	cmp	r7, #98	; 0x62
 80051aa:	d80a      	bhi.n	80051c2 <_printf_i+0x32>
 80051ac:	2f00      	cmp	r7, #0
 80051ae:	f000 80d8 	beq.w	8005362 <_printf_i+0x1d2>
 80051b2:	2f58      	cmp	r7, #88	; 0x58
 80051b4:	f000 80a3 	beq.w	80052fe <_printf_i+0x16e>
 80051b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051c0:	e03a      	b.n	8005238 <_printf_i+0xa8>
 80051c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051c6:	2b15      	cmp	r3, #21
 80051c8:	d8f6      	bhi.n	80051b8 <_printf_i+0x28>
 80051ca:	a101      	add	r1, pc, #4	; (adr r1, 80051d0 <_printf_i+0x40>)
 80051cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051d0:	08005229 	.word	0x08005229
 80051d4:	0800523d 	.word	0x0800523d
 80051d8:	080051b9 	.word	0x080051b9
 80051dc:	080051b9 	.word	0x080051b9
 80051e0:	080051b9 	.word	0x080051b9
 80051e4:	080051b9 	.word	0x080051b9
 80051e8:	0800523d 	.word	0x0800523d
 80051ec:	080051b9 	.word	0x080051b9
 80051f0:	080051b9 	.word	0x080051b9
 80051f4:	080051b9 	.word	0x080051b9
 80051f8:	080051b9 	.word	0x080051b9
 80051fc:	08005349 	.word	0x08005349
 8005200:	0800526d 	.word	0x0800526d
 8005204:	0800532b 	.word	0x0800532b
 8005208:	080051b9 	.word	0x080051b9
 800520c:	080051b9 	.word	0x080051b9
 8005210:	0800536b 	.word	0x0800536b
 8005214:	080051b9 	.word	0x080051b9
 8005218:	0800526d 	.word	0x0800526d
 800521c:	080051b9 	.word	0x080051b9
 8005220:	080051b9 	.word	0x080051b9
 8005224:	08005333 	.word	0x08005333
 8005228:	682b      	ldr	r3, [r5, #0]
 800522a:	1d1a      	adds	r2, r3, #4
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	602a      	str	r2, [r5, #0]
 8005230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005238:	2301      	movs	r3, #1
 800523a:	e0a3      	b.n	8005384 <_printf_i+0x1f4>
 800523c:	6820      	ldr	r0, [r4, #0]
 800523e:	6829      	ldr	r1, [r5, #0]
 8005240:	0606      	lsls	r6, r0, #24
 8005242:	f101 0304 	add.w	r3, r1, #4
 8005246:	d50a      	bpl.n	800525e <_printf_i+0xce>
 8005248:	680e      	ldr	r6, [r1, #0]
 800524a:	602b      	str	r3, [r5, #0]
 800524c:	2e00      	cmp	r6, #0
 800524e:	da03      	bge.n	8005258 <_printf_i+0xc8>
 8005250:	232d      	movs	r3, #45	; 0x2d
 8005252:	4276      	negs	r6, r6
 8005254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005258:	485e      	ldr	r0, [pc, #376]	; (80053d4 <_printf_i+0x244>)
 800525a:	230a      	movs	r3, #10
 800525c:	e019      	b.n	8005292 <_printf_i+0x102>
 800525e:	680e      	ldr	r6, [r1, #0]
 8005260:	602b      	str	r3, [r5, #0]
 8005262:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005266:	bf18      	it	ne
 8005268:	b236      	sxthne	r6, r6
 800526a:	e7ef      	b.n	800524c <_printf_i+0xbc>
 800526c:	682b      	ldr	r3, [r5, #0]
 800526e:	6820      	ldr	r0, [r4, #0]
 8005270:	1d19      	adds	r1, r3, #4
 8005272:	6029      	str	r1, [r5, #0]
 8005274:	0601      	lsls	r1, r0, #24
 8005276:	d501      	bpl.n	800527c <_printf_i+0xec>
 8005278:	681e      	ldr	r6, [r3, #0]
 800527a:	e002      	b.n	8005282 <_printf_i+0xf2>
 800527c:	0646      	lsls	r6, r0, #25
 800527e:	d5fb      	bpl.n	8005278 <_printf_i+0xe8>
 8005280:	881e      	ldrh	r6, [r3, #0]
 8005282:	4854      	ldr	r0, [pc, #336]	; (80053d4 <_printf_i+0x244>)
 8005284:	2f6f      	cmp	r7, #111	; 0x6f
 8005286:	bf0c      	ite	eq
 8005288:	2308      	moveq	r3, #8
 800528a:	230a      	movne	r3, #10
 800528c:	2100      	movs	r1, #0
 800528e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005292:	6865      	ldr	r5, [r4, #4]
 8005294:	60a5      	str	r5, [r4, #8]
 8005296:	2d00      	cmp	r5, #0
 8005298:	bfa2      	ittt	ge
 800529a:	6821      	ldrge	r1, [r4, #0]
 800529c:	f021 0104 	bicge.w	r1, r1, #4
 80052a0:	6021      	strge	r1, [r4, #0]
 80052a2:	b90e      	cbnz	r6, 80052a8 <_printf_i+0x118>
 80052a4:	2d00      	cmp	r5, #0
 80052a6:	d04d      	beq.n	8005344 <_printf_i+0x1b4>
 80052a8:	4615      	mov	r5, r2
 80052aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80052ae:	fb03 6711 	mls	r7, r3, r1, r6
 80052b2:	5dc7      	ldrb	r7, [r0, r7]
 80052b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052b8:	4637      	mov	r7, r6
 80052ba:	42bb      	cmp	r3, r7
 80052bc:	460e      	mov	r6, r1
 80052be:	d9f4      	bls.n	80052aa <_printf_i+0x11a>
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d10b      	bne.n	80052dc <_printf_i+0x14c>
 80052c4:	6823      	ldr	r3, [r4, #0]
 80052c6:	07de      	lsls	r6, r3, #31
 80052c8:	d508      	bpl.n	80052dc <_printf_i+0x14c>
 80052ca:	6923      	ldr	r3, [r4, #16]
 80052cc:	6861      	ldr	r1, [r4, #4]
 80052ce:	4299      	cmp	r1, r3
 80052d0:	bfde      	ittt	le
 80052d2:	2330      	movle	r3, #48	; 0x30
 80052d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80052dc:	1b52      	subs	r2, r2, r5
 80052de:	6122      	str	r2, [r4, #16]
 80052e0:	f8cd a000 	str.w	sl, [sp]
 80052e4:	464b      	mov	r3, r9
 80052e6:	aa03      	add	r2, sp, #12
 80052e8:	4621      	mov	r1, r4
 80052ea:	4640      	mov	r0, r8
 80052ec:	f7ff fee2 	bl	80050b4 <_printf_common>
 80052f0:	3001      	adds	r0, #1
 80052f2:	d14c      	bne.n	800538e <_printf_i+0x1fe>
 80052f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052f8:	b004      	add	sp, #16
 80052fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052fe:	4835      	ldr	r0, [pc, #212]	; (80053d4 <_printf_i+0x244>)
 8005300:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005304:	6829      	ldr	r1, [r5, #0]
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	f851 6b04 	ldr.w	r6, [r1], #4
 800530c:	6029      	str	r1, [r5, #0]
 800530e:	061d      	lsls	r5, r3, #24
 8005310:	d514      	bpl.n	800533c <_printf_i+0x1ac>
 8005312:	07df      	lsls	r7, r3, #31
 8005314:	bf44      	itt	mi
 8005316:	f043 0320 	orrmi.w	r3, r3, #32
 800531a:	6023      	strmi	r3, [r4, #0]
 800531c:	b91e      	cbnz	r6, 8005326 <_printf_i+0x196>
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	f023 0320 	bic.w	r3, r3, #32
 8005324:	6023      	str	r3, [r4, #0]
 8005326:	2310      	movs	r3, #16
 8005328:	e7b0      	b.n	800528c <_printf_i+0xfc>
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	f043 0320 	orr.w	r3, r3, #32
 8005330:	6023      	str	r3, [r4, #0]
 8005332:	2378      	movs	r3, #120	; 0x78
 8005334:	4828      	ldr	r0, [pc, #160]	; (80053d8 <_printf_i+0x248>)
 8005336:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800533a:	e7e3      	b.n	8005304 <_printf_i+0x174>
 800533c:	0659      	lsls	r1, r3, #25
 800533e:	bf48      	it	mi
 8005340:	b2b6      	uxthmi	r6, r6
 8005342:	e7e6      	b.n	8005312 <_printf_i+0x182>
 8005344:	4615      	mov	r5, r2
 8005346:	e7bb      	b.n	80052c0 <_printf_i+0x130>
 8005348:	682b      	ldr	r3, [r5, #0]
 800534a:	6826      	ldr	r6, [r4, #0]
 800534c:	6961      	ldr	r1, [r4, #20]
 800534e:	1d18      	adds	r0, r3, #4
 8005350:	6028      	str	r0, [r5, #0]
 8005352:	0635      	lsls	r5, r6, #24
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	d501      	bpl.n	800535c <_printf_i+0x1cc>
 8005358:	6019      	str	r1, [r3, #0]
 800535a:	e002      	b.n	8005362 <_printf_i+0x1d2>
 800535c:	0670      	lsls	r0, r6, #25
 800535e:	d5fb      	bpl.n	8005358 <_printf_i+0x1c8>
 8005360:	8019      	strh	r1, [r3, #0]
 8005362:	2300      	movs	r3, #0
 8005364:	6123      	str	r3, [r4, #16]
 8005366:	4615      	mov	r5, r2
 8005368:	e7ba      	b.n	80052e0 <_printf_i+0x150>
 800536a:	682b      	ldr	r3, [r5, #0]
 800536c:	1d1a      	adds	r2, r3, #4
 800536e:	602a      	str	r2, [r5, #0]
 8005370:	681d      	ldr	r5, [r3, #0]
 8005372:	6862      	ldr	r2, [r4, #4]
 8005374:	2100      	movs	r1, #0
 8005376:	4628      	mov	r0, r5
 8005378:	f7fa ff32 	bl	80001e0 <memchr>
 800537c:	b108      	cbz	r0, 8005382 <_printf_i+0x1f2>
 800537e:	1b40      	subs	r0, r0, r5
 8005380:	6060      	str	r0, [r4, #4]
 8005382:	6863      	ldr	r3, [r4, #4]
 8005384:	6123      	str	r3, [r4, #16]
 8005386:	2300      	movs	r3, #0
 8005388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800538c:	e7a8      	b.n	80052e0 <_printf_i+0x150>
 800538e:	6923      	ldr	r3, [r4, #16]
 8005390:	462a      	mov	r2, r5
 8005392:	4649      	mov	r1, r9
 8005394:	4640      	mov	r0, r8
 8005396:	47d0      	blx	sl
 8005398:	3001      	adds	r0, #1
 800539a:	d0ab      	beq.n	80052f4 <_printf_i+0x164>
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	079b      	lsls	r3, r3, #30
 80053a0:	d413      	bmi.n	80053ca <_printf_i+0x23a>
 80053a2:	68e0      	ldr	r0, [r4, #12]
 80053a4:	9b03      	ldr	r3, [sp, #12]
 80053a6:	4298      	cmp	r0, r3
 80053a8:	bfb8      	it	lt
 80053aa:	4618      	movlt	r0, r3
 80053ac:	e7a4      	b.n	80052f8 <_printf_i+0x168>
 80053ae:	2301      	movs	r3, #1
 80053b0:	4632      	mov	r2, r6
 80053b2:	4649      	mov	r1, r9
 80053b4:	4640      	mov	r0, r8
 80053b6:	47d0      	blx	sl
 80053b8:	3001      	adds	r0, #1
 80053ba:	d09b      	beq.n	80052f4 <_printf_i+0x164>
 80053bc:	3501      	adds	r5, #1
 80053be:	68e3      	ldr	r3, [r4, #12]
 80053c0:	9903      	ldr	r1, [sp, #12]
 80053c2:	1a5b      	subs	r3, r3, r1
 80053c4:	42ab      	cmp	r3, r5
 80053c6:	dcf2      	bgt.n	80053ae <_printf_i+0x21e>
 80053c8:	e7eb      	b.n	80053a2 <_printf_i+0x212>
 80053ca:	2500      	movs	r5, #0
 80053cc:	f104 0619 	add.w	r6, r4, #25
 80053d0:	e7f5      	b.n	80053be <_printf_i+0x22e>
 80053d2:	bf00      	nop
 80053d4:	0800797e 	.word	0x0800797e
 80053d8:	0800798f 	.word	0x0800798f

080053dc <siprintf>:
 80053dc:	b40e      	push	{r1, r2, r3}
 80053de:	b500      	push	{lr}
 80053e0:	b09c      	sub	sp, #112	; 0x70
 80053e2:	ab1d      	add	r3, sp, #116	; 0x74
 80053e4:	9002      	str	r0, [sp, #8]
 80053e6:	9006      	str	r0, [sp, #24]
 80053e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053ec:	4809      	ldr	r0, [pc, #36]	; (8005414 <siprintf+0x38>)
 80053ee:	9107      	str	r1, [sp, #28]
 80053f0:	9104      	str	r1, [sp, #16]
 80053f2:	4909      	ldr	r1, [pc, #36]	; (8005418 <siprintf+0x3c>)
 80053f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80053f8:	9105      	str	r1, [sp, #20]
 80053fa:	6800      	ldr	r0, [r0, #0]
 80053fc:	9301      	str	r3, [sp, #4]
 80053fe:	a902      	add	r1, sp, #8
 8005400:	f001 fb78 	bl	8006af4 <_svfiprintf_r>
 8005404:	9b02      	ldr	r3, [sp, #8]
 8005406:	2200      	movs	r2, #0
 8005408:	701a      	strb	r2, [r3, #0]
 800540a:	b01c      	add	sp, #112	; 0x70
 800540c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005410:	b003      	add	sp, #12
 8005412:	4770      	bx	lr
 8005414:	20000014 	.word	0x20000014
 8005418:	ffff0208 	.word	0xffff0208

0800541c <quorem>:
 800541c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005420:	6903      	ldr	r3, [r0, #16]
 8005422:	690c      	ldr	r4, [r1, #16]
 8005424:	42a3      	cmp	r3, r4
 8005426:	4607      	mov	r7, r0
 8005428:	f2c0 8081 	blt.w	800552e <quorem+0x112>
 800542c:	3c01      	subs	r4, #1
 800542e:	f101 0814 	add.w	r8, r1, #20
 8005432:	f100 0514 	add.w	r5, r0, #20
 8005436:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800543a:	9301      	str	r3, [sp, #4]
 800543c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005440:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005444:	3301      	adds	r3, #1
 8005446:	429a      	cmp	r2, r3
 8005448:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800544c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005450:	fbb2 f6f3 	udiv	r6, r2, r3
 8005454:	d331      	bcc.n	80054ba <quorem+0x9e>
 8005456:	f04f 0e00 	mov.w	lr, #0
 800545a:	4640      	mov	r0, r8
 800545c:	46ac      	mov	ip, r5
 800545e:	46f2      	mov	sl, lr
 8005460:	f850 2b04 	ldr.w	r2, [r0], #4
 8005464:	b293      	uxth	r3, r2
 8005466:	fb06 e303 	mla	r3, r6, r3, lr
 800546a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800546e:	b29b      	uxth	r3, r3
 8005470:	ebaa 0303 	sub.w	r3, sl, r3
 8005474:	f8dc a000 	ldr.w	sl, [ip]
 8005478:	0c12      	lsrs	r2, r2, #16
 800547a:	fa13 f38a 	uxtah	r3, r3, sl
 800547e:	fb06 e202 	mla	r2, r6, r2, lr
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	9b00      	ldr	r3, [sp, #0]
 8005486:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800548a:	b292      	uxth	r2, r2
 800548c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005490:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005494:	f8bd 3000 	ldrh.w	r3, [sp]
 8005498:	4581      	cmp	r9, r0
 800549a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800549e:	f84c 3b04 	str.w	r3, [ip], #4
 80054a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80054a6:	d2db      	bcs.n	8005460 <quorem+0x44>
 80054a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80054ac:	b92b      	cbnz	r3, 80054ba <quorem+0x9e>
 80054ae:	9b01      	ldr	r3, [sp, #4]
 80054b0:	3b04      	subs	r3, #4
 80054b2:	429d      	cmp	r5, r3
 80054b4:	461a      	mov	r2, r3
 80054b6:	d32e      	bcc.n	8005516 <quorem+0xfa>
 80054b8:	613c      	str	r4, [r7, #16]
 80054ba:	4638      	mov	r0, r7
 80054bc:	f001 f8c6 	bl	800664c <__mcmp>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	db24      	blt.n	800550e <quorem+0xf2>
 80054c4:	3601      	adds	r6, #1
 80054c6:	4628      	mov	r0, r5
 80054c8:	f04f 0c00 	mov.w	ip, #0
 80054cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80054d0:	f8d0 e000 	ldr.w	lr, [r0]
 80054d4:	b293      	uxth	r3, r2
 80054d6:	ebac 0303 	sub.w	r3, ip, r3
 80054da:	0c12      	lsrs	r2, r2, #16
 80054dc:	fa13 f38e 	uxtah	r3, r3, lr
 80054e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80054e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054ee:	45c1      	cmp	r9, r8
 80054f0:	f840 3b04 	str.w	r3, [r0], #4
 80054f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80054f8:	d2e8      	bcs.n	80054cc <quorem+0xb0>
 80054fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005502:	b922      	cbnz	r2, 800550e <quorem+0xf2>
 8005504:	3b04      	subs	r3, #4
 8005506:	429d      	cmp	r5, r3
 8005508:	461a      	mov	r2, r3
 800550a:	d30a      	bcc.n	8005522 <quorem+0x106>
 800550c:	613c      	str	r4, [r7, #16]
 800550e:	4630      	mov	r0, r6
 8005510:	b003      	add	sp, #12
 8005512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005516:	6812      	ldr	r2, [r2, #0]
 8005518:	3b04      	subs	r3, #4
 800551a:	2a00      	cmp	r2, #0
 800551c:	d1cc      	bne.n	80054b8 <quorem+0x9c>
 800551e:	3c01      	subs	r4, #1
 8005520:	e7c7      	b.n	80054b2 <quorem+0x96>
 8005522:	6812      	ldr	r2, [r2, #0]
 8005524:	3b04      	subs	r3, #4
 8005526:	2a00      	cmp	r2, #0
 8005528:	d1f0      	bne.n	800550c <quorem+0xf0>
 800552a:	3c01      	subs	r4, #1
 800552c:	e7eb      	b.n	8005506 <quorem+0xea>
 800552e:	2000      	movs	r0, #0
 8005530:	e7ee      	b.n	8005510 <quorem+0xf4>
 8005532:	0000      	movs	r0, r0
 8005534:	0000      	movs	r0, r0
	...

08005538 <_dtoa_r>:
 8005538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800553c:	ed2d 8b04 	vpush	{d8-d9}
 8005540:	ec57 6b10 	vmov	r6, r7, d0
 8005544:	b093      	sub	sp, #76	; 0x4c
 8005546:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005548:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800554c:	9106      	str	r1, [sp, #24]
 800554e:	ee10 aa10 	vmov	sl, s0
 8005552:	4604      	mov	r4, r0
 8005554:	9209      	str	r2, [sp, #36]	; 0x24
 8005556:	930c      	str	r3, [sp, #48]	; 0x30
 8005558:	46bb      	mov	fp, r7
 800555a:	b975      	cbnz	r5, 800557a <_dtoa_r+0x42>
 800555c:	2010      	movs	r0, #16
 800555e:	f000 fddd 	bl	800611c <malloc>
 8005562:	4602      	mov	r2, r0
 8005564:	6260      	str	r0, [r4, #36]	; 0x24
 8005566:	b920      	cbnz	r0, 8005572 <_dtoa_r+0x3a>
 8005568:	4ba7      	ldr	r3, [pc, #668]	; (8005808 <_dtoa_r+0x2d0>)
 800556a:	21ea      	movs	r1, #234	; 0xea
 800556c:	48a7      	ldr	r0, [pc, #668]	; (800580c <_dtoa_r+0x2d4>)
 800556e:	f001 fbd1 	bl	8006d14 <__assert_func>
 8005572:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005576:	6005      	str	r5, [r0, #0]
 8005578:	60c5      	str	r5, [r0, #12]
 800557a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800557c:	6819      	ldr	r1, [r3, #0]
 800557e:	b151      	cbz	r1, 8005596 <_dtoa_r+0x5e>
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	604a      	str	r2, [r1, #4]
 8005584:	2301      	movs	r3, #1
 8005586:	4093      	lsls	r3, r2
 8005588:	608b      	str	r3, [r1, #8]
 800558a:	4620      	mov	r0, r4
 800558c:	f000 fe1c 	bl	80061c8 <_Bfree>
 8005590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	1e3b      	subs	r3, r7, #0
 8005598:	bfaa      	itet	ge
 800559a:	2300      	movge	r3, #0
 800559c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80055a0:	f8c8 3000 	strge.w	r3, [r8]
 80055a4:	4b9a      	ldr	r3, [pc, #616]	; (8005810 <_dtoa_r+0x2d8>)
 80055a6:	bfbc      	itt	lt
 80055a8:	2201      	movlt	r2, #1
 80055aa:	f8c8 2000 	strlt.w	r2, [r8]
 80055ae:	ea33 030b 	bics.w	r3, r3, fp
 80055b2:	d11b      	bne.n	80055ec <_dtoa_r+0xb4>
 80055b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80055ba:	6013      	str	r3, [r2, #0]
 80055bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80055c0:	4333      	orrs	r3, r6
 80055c2:	f000 8592 	beq.w	80060ea <_dtoa_r+0xbb2>
 80055c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055c8:	b963      	cbnz	r3, 80055e4 <_dtoa_r+0xac>
 80055ca:	4b92      	ldr	r3, [pc, #584]	; (8005814 <_dtoa_r+0x2dc>)
 80055cc:	e022      	b.n	8005614 <_dtoa_r+0xdc>
 80055ce:	4b92      	ldr	r3, [pc, #584]	; (8005818 <_dtoa_r+0x2e0>)
 80055d0:	9301      	str	r3, [sp, #4]
 80055d2:	3308      	adds	r3, #8
 80055d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80055d6:	6013      	str	r3, [r2, #0]
 80055d8:	9801      	ldr	r0, [sp, #4]
 80055da:	b013      	add	sp, #76	; 0x4c
 80055dc:	ecbd 8b04 	vpop	{d8-d9}
 80055e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055e4:	4b8b      	ldr	r3, [pc, #556]	; (8005814 <_dtoa_r+0x2dc>)
 80055e6:	9301      	str	r3, [sp, #4]
 80055e8:	3303      	adds	r3, #3
 80055ea:	e7f3      	b.n	80055d4 <_dtoa_r+0x9c>
 80055ec:	2200      	movs	r2, #0
 80055ee:	2300      	movs	r3, #0
 80055f0:	4650      	mov	r0, sl
 80055f2:	4659      	mov	r1, fp
 80055f4:	f7fb fa68 	bl	8000ac8 <__aeabi_dcmpeq>
 80055f8:	ec4b ab19 	vmov	d9, sl, fp
 80055fc:	4680      	mov	r8, r0
 80055fe:	b158      	cbz	r0, 8005618 <_dtoa_r+0xe0>
 8005600:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005602:	2301      	movs	r3, #1
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 856b 	beq.w	80060e4 <_dtoa_r+0xbac>
 800560e:	4883      	ldr	r0, [pc, #524]	; (800581c <_dtoa_r+0x2e4>)
 8005610:	6018      	str	r0, [r3, #0]
 8005612:	1e43      	subs	r3, r0, #1
 8005614:	9301      	str	r3, [sp, #4]
 8005616:	e7df      	b.n	80055d8 <_dtoa_r+0xa0>
 8005618:	ec4b ab10 	vmov	d0, sl, fp
 800561c:	aa10      	add	r2, sp, #64	; 0x40
 800561e:	a911      	add	r1, sp, #68	; 0x44
 8005620:	4620      	mov	r0, r4
 8005622:	f001 f8b9 	bl	8006798 <__d2b>
 8005626:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800562a:	ee08 0a10 	vmov	s16, r0
 800562e:	2d00      	cmp	r5, #0
 8005630:	f000 8084 	beq.w	800573c <_dtoa_r+0x204>
 8005634:	ee19 3a90 	vmov	r3, s19
 8005638:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800563c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005640:	4656      	mov	r6, sl
 8005642:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005646:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800564a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800564e:	4b74      	ldr	r3, [pc, #464]	; (8005820 <_dtoa_r+0x2e8>)
 8005650:	2200      	movs	r2, #0
 8005652:	4630      	mov	r0, r6
 8005654:	4639      	mov	r1, r7
 8005656:	f7fa fe17 	bl	8000288 <__aeabi_dsub>
 800565a:	a365      	add	r3, pc, #404	; (adr r3, 80057f0 <_dtoa_r+0x2b8>)
 800565c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005660:	f7fa ffca 	bl	80005f8 <__aeabi_dmul>
 8005664:	a364      	add	r3, pc, #400	; (adr r3, 80057f8 <_dtoa_r+0x2c0>)
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	f7fa fe0f 	bl	800028c <__adddf3>
 800566e:	4606      	mov	r6, r0
 8005670:	4628      	mov	r0, r5
 8005672:	460f      	mov	r7, r1
 8005674:	f7fa ff56 	bl	8000524 <__aeabi_i2d>
 8005678:	a361      	add	r3, pc, #388	; (adr r3, 8005800 <_dtoa_r+0x2c8>)
 800567a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567e:	f7fa ffbb 	bl	80005f8 <__aeabi_dmul>
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	4630      	mov	r0, r6
 8005688:	4639      	mov	r1, r7
 800568a:	f7fa fdff 	bl	800028c <__adddf3>
 800568e:	4606      	mov	r6, r0
 8005690:	460f      	mov	r7, r1
 8005692:	f7fb fa61 	bl	8000b58 <__aeabi_d2iz>
 8005696:	2200      	movs	r2, #0
 8005698:	9000      	str	r0, [sp, #0]
 800569a:	2300      	movs	r3, #0
 800569c:	4630      	mov	r0, r6
 800569e:	4639      	mov	r1, r7
 80056a0:	f7fb fa1c 	bl	8000adc <__aeabi_dcmplt>
 80056a4:	b150      	cbz	r0, 80056bc <_dtoa_r+0x184>
 80056a6:	9800      	ldr	r0, [sp, #0]
 80056a8:	f7fa ff3c 	bl	8000524 <__aeabi_i2d>
 80056ac:	4632      	mov	r2, r6
 80056ae:	463b      	mov	r3, r7
 80056b0:	f7fb fa0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80056b4:	b910      	cbnz	r0, 80056bc <_dtoa_r+0x184>
 80056b6:	9b00      	ldr	r3, [sp, #0]
 80056b8:	3b01      	subs	r3, #1
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	9b00      	ldr	r3, [sp, #0]
 80056be:	2b16      	cmp	r3, #22
 80056c0:	d85a      	bhi.n	8005778 <_dtoa_r+0x240>
 80056c2:	9a00      	ldr	r2, [sp, #0]
 80056c4:	4b57      	ldr	r3, [pc, #348]	; (8005824 <_dtoa_r+0x2ec>)
 80056c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ce:	ec51 0b19 	vmov	r0, r1, d9
 80056d2:	f7fb fa03 	bl	8000adc <__aeabi_dcmplt>
 80056d6:	2800      	cmp	r0, #0
 80056d8:	d050      	beq.n	800577c <_dtoa_r+0x244>
 80056da:	9b00      	ldr	r3, [sp, #0]
 80056dc:	3b01      	subs	r3, #1
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	2300      	movs	r3, #0
 80056e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80056e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80056e6:	1b5d      	subs	r5, r3, r5
 80056e8:	1e6b      	subs	r3, r5, #1
 80056ea:	9305      	str	r3, [sp, #20]
 80056ec:	bf45      	ittet	mi
 80056ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80056f2:	9304      	strmi	r3, [sp, #16]
 80056f4:	2300      	movpl	r3, #0
 80056f6:	2300      	movmi	r3, #0
 80056f8:	bf4c      	ite	mi
 80056fa:	9305      	strmi	r3, [sp, #20]
 80056fc:	9304      	strpl	r3, [sp, #16]
 80056fe:	9b00      	ldr	r3, [sp, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	db3d      	blt.n	8005780 <_dtoa_r+0x248>
 8005704:	9b05      	ldr	r3, [sp, #20]
 8005706:	9a00      	ldr	r2, [sp, #0]
 8005708:	920a      	str	r2, [sp, #40]	; 0x28
 800570a:	4413      	add	r3, r2
 800570c:	9305      	str	r3, [sp, #20]
 800570e:	2300      	movs	r3, #0
 8005710:	9307      	str	r3, [sp, #28]
 8005712:	9b06      	ldr	r3, [sp, #24]
 8005714:	2b09      	cmp	r3, #9
 8005716:	f200 8089 	bhi.w	800582c <_dtoa_r+0x2f4>
 800571a:	2b05      	cmp	r3, #5
 800571c:	bfc4      	itt	gt
 800571e:	3b04      	subgt	r3, #4
 8005720:	9306      	strgt	r3, [sp, #24]
 8005722:	9b06      	ldr	r3, [sp, #24]
 8005724:	f1a3 0302 	sub.w	r3, r3, #2
 8005728:	bfcc      	ite	gt
 800572a:	2500      	movgt	r5, #0
 800572c:	2501      	movle	r5, #1
 800572e:	2b03      	cmp	r3, #3
 8005730:	f200 8087 	bhi.w	8005842 <_dtoa_r+0x30a>
 8005734:	e8df f003 	tbb	[pc, r3]
 8005738:	59383a2d 	.word	0x59383a2d
 800573c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005740:	441d      	add	r5, r3
 8005742:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005746:	2b20      	cmp	r3, #32
 8005748:	bfc1      	itttt	gt
 800574a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800574e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005752:	fa0b f303 	lslgt.w	r3, fp, r3
 8005756:	fa26 f000 	lsrgt.w	r0, r6, r0
 800575a:	bfda      	itte	le
 800575c:	f1c3 0320 	rsble	r3, r3, #32
 8005760:	fa06 f003 	lslle.w	r0, r6, r3
 8005764:	4318      	orrgt	r0, r3
 8005766:	f7fa fecd 	bl	8000504 <__aeabi_ui2d>
 800576a:	2301      	movs	r3, #1
 800576c:	4606      	mov	r6, r0
 800576e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005772:	3d01      	subs	r5, #1
 8005774:	930e      	str	r3, [sp, #56]	; 0x38
 8005776:	e76a      	b.n	800564e <_dtoa_r+0x116>
 8005778:	2301      	movs	r3, #1
 800577a:	e7b2      	b.n	80056e2 <_dtoa_r+0x1aa>
 800577c:	900b      	str	r0, [sp, #44]	; 0x2c
 800577e:	e7b1      	b.n	80056e4 <_dtoa_r+0x1ac>
 8005780:	9b04      	ldr	r3, [sp, #16]
 8005782:	9a00      	ldr	r2, [sp, #0]
 8005784:	1a9b      	subs	r3, r3, r2
 8005786:	9304      	str	r3, [sp, #16]
 8005788:	4253      	negs	r3, r2
 800578a:	9307      	str	r3, [sp, #28]
 800578c:	2300      	movs	r3, #0
 800578e:	930a      	str	r3, [sp, #40]	; 0x28
 8005790:	e7bf      	b.n	8005712 <_dtoa_r+0x1da>
 8005792:	2300      	movs	r3, #0
 8005794:	9308      	str	r3, [sp, #32]
 8005796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005798:	2b00      	cmp	r3, #0
 800579a:	dc55      	bgt.n	8005848 <_dtoa_r+0x310>
 800579c:	2301      	movs	r3, #1
 800579e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80057a2:	461a      	mov	r2, r3
 80057a4:	9209      	str	r2, [sp, #36]	; 0x24
 80057a6:	e00c      	b.n	80057c2 <_dtoa_r+0x28a>
 80057a8:	2301      	movs	r3, #1
 80057aa:	e7f3      	b.n	8005794 <_dtoa_r+0x25c>
 80057ac:	2300      	movs	r3, #0
 80057ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057b0:	9308      	str	r3, [sp, #32]
 80057b2:	9b00      	ldr	r3, [sp, #0]
 80057b4:	4413      	add	r3, r2
 80057b6:	9302      	str	r3, [sp, #8]
 80057b8:	3301      	adds	r3, #1
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	9303      	str	r3, [sp, #12]
 80057be:	bfb8      	it	lt
 80057c0:	2301      	movlt	r3, #1
 80057c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80057c4:	2200      	movs	r2, #0
 80057c6:	6042      	str	r2, [r0, #4]
 80057c8:	2204      	movs	r2, #4
 80057ca:	f102 0614 	add.w	r6, r2, #20
 80057ce:	429e      	cmp	r6, r3
 80057d0:	6841      	ldr	r1, [r0, #4]
 80057d2:	d93d      	bls.n	8005850 <_dtoa_r+0x318>
 80057d4:	4620      	mov	r0, r4
 80057d6:	f000 fcb7 	bl	8006148 <_Balloc>
 80057da:	9001      	str	r0, [sp, #4]
 80057dc:	2800      	cmp	r0, #0
 80057de:	d13b      	bne.n	8005858 <_dtoa_r+0x320>
 80057e0:	4b11      	ldr	r3, [pc, #68]	; (8005828 <_dtoa_r+0x2f0>)
 80057e2:	4602      	mov	r2, r0
 80057e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80057e8:	e6c0      	b.n	800556c <_dtoa_r+0x34>
 80057ea:	2301      	movs	r3, #1
 80057ec:	e7df      	b.n	80057ae <_dtoa_r+0x276>
 80057ee:	bf00      	nop
 80057f0:	636f4361 	.word	0x636f4361
 80057f4:	3fd287a7 	.word	0x3fd287a7
 80057f8:	8b60c8b3 	.word	0x8b60c8b3
 80057fc:	3fc68a28 	.word	0x3fc68a28
 8005800:	509f79fb 	.word	0x509f79fb
 8005804:	3fd34413 	.word	0x3fd34413
 8005808:	080079ad 	.word	0x080079ad
 800580c:	080079c4 	.word	0x080079c4
 8005810:	7ff00000 	.word	0x7ff00000
 8005814:	080079a9 	.word	0x080079a9
 8005818:	080079a0 	.word	0x080079a0
 800581c:	0800797d 	.word	0x0800797d
 8005820:	3ff80000 	.word	0x3ff80000
 8005824:	08007ab8 	.word	0x08007ab8
 8005828:	08007a1f 	.word	0x08007a1f
 800582c:	2501      	movs	r5, #1
 800582e:	2300      	movs	r3, #0
 8005830:	9306      	str	r3, [sp, #24]
 8005832:	9508      	str	r5, [sp, #32]
 8005834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005838:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800583c:	2200      	movs	r2, #0
 800583e:	2312      	movs	r3, #18
 8005840:	e7b0      	b.n	80057a4 <_dtoa_r+0x26c>
 8005842:	2301      	movs	r3, #1
 8005844:	9308      	str	r3, [sp, #32]
 8005846:	e7f5      	b.n	8005834 <_dtoa_r+0x2fc>
 8005848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800584a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800584e:	e7b8      	b.n	80057c2 <_dtoa_r+0x28a>
 8005850:	3101      	adds	r1, #1
 8005852:	6041      	str	r1, [r0, #4]
 8005854:	0052      	lsls	r2, r2, #1
 8005856:	e7b8      	b.n	80057ca <_dtoa_r+0x292>
 8005858:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800585a:	9a01      	ldr	r2, [sp, #4]
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	9b03      	ldr	r3, [sp, #12]
 8005860:	2b0e      	cmp	r3, #14
 8005862:	f200 809d 	bhi.w	80059a0 <_dtoa_r+0x468>
 8005866:	2d00      	cmp	r5, #0
 8005868:	f000 809a 	beq.w	80059a0 <_dtoa_r+0x468>
 800586c:	9b00      	ldr	r3, [sp, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	dd32      	ble.n	80058d8 <_dtoa_r+0x3a0>
 8005872:	4ab7      	ldr	r2, [pc, #732]	; (8005b50 <_dtoa_r+0x618>)
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800587c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005880:	9b00      	ldr	r3, [sp, #0]
 8005882:	05d8      	lsls	r0, r3, #23
 8005884:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005888:	d516      	bpl.n	80058b8 <_dtoa_r+0x380>
 800588a:	4bb2      	ldr	r3, [pc, #712]	; (8005b54 <_dtoa_r+0x61c>)
 800588c:	ec51 0b19 	vmov	r0, r1, d9
 8005890:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005894:	f7fa ffda 	bl	800084c <__aeabi_ddiv>
 8005898:	f007 070f 	and.w	r7, r7, #15
 800589c:	4682      	mov	sl, r0
 800589e:	468b      	mov	fp, r1
 80058a0:	2503      	movs	r5, #3
 80058a2:	4eac      	ldr	r6, [pc, #688]	; (8005b54 <_dtoa_r+0x61c>)
 80058a4:	b957      	cbnz	r7, 80058bc <_dtoa_r+0x384>
 80058a6:	4642      	mov	r2, r8
 80058a8:	464b      	mov	r3, r9
 80058aa:	4650      	mov	r0, sl
 80058ac:	4659      	mov	r1, fp
 80058ae:	f7fa ffcd 	bl	800084c <__aeabi_ddiv>
 80058b2:	4682      	mov	sl, r0
 80058b4:	468b      	mov	fp, r1
 80058b6:	e028      	b.n	800590a <_dtoa_r+0x3d2>
 80058b8:	2502      	movs	r5, #2
 80058ba:	e7f2      	b.n	80058a2 <_dtoa_r+0x36a>
 80058bc:	07f9      	lsls	r1, r7, #31
 80058be:	d508      	bpl.n	80058d2 <_dtoa_r+0x39a>
 80058c0:	4640      	mov	r0, r8
 80058c2:	4649      	mov	r1, r9
 80058c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80058c8:	f7fa fe96 	bl	80005f8 <__aeabi_dmul>
 80058cc:	3501      	adds	r5, #1
 80058ce:	4680      	mov	r8, r0
 80058d0:	4689      	mov	r9, r1
 80058d2:	107f      	asrs	r7, r7, #1
 80058d4:	3608      	adds	r6, #8
 80058d6:	e7e5      	b.n	80058a4 <_dtoa_r+0x36c>
 80058d8:	f000 809b 	beq.w	8005a12 <_dtoa_r+0x4da>
 80058dc:	9b00      	ldr	r3, [sp, #0]
 80058de:	4f9d      	ldr	r7, [pc, #628]	; (8005b54 <_dtoa_r+0x61c>)
 80058e0:	425e      	negs	r6, r3
 80058e2:	4b9b      	ldr	r3, [pc, #620]	; (8005b50 <_dtoa_r+0x618>)
 80058e4:	f006 020f 	and.w	r2, r6, #15
 80058e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f0:	ec51 0b19 	vmov	r0, r1, d9
 80058f4:	f7fa fe80 	bl	80005f8 <__aeabi_dmul>
 80058f8:	1136      	asrs	r6, r6, #4
 80058fa:	4682      	mov	sl, r0
 80058fc:	468b      	mov	fp, r1
 80058fe:	2300      	movs	r3, #0
 8005900:	2502      	movs	r5, #2
 8005902:	2e00      	cmp	r6, #0
 8005904:	d17a      	bne.n	80059fc <_dtoa_r+0x4c4>
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1d3      	bne.n	80058b2 <_dtoa_r+0x37a>
 800590a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 8082 	beq.w	8005a16 <_dtoa_r+0x4de>
 8005912:	4b91      	ldr	r3, [pc, #580]	; (8005b58 <_dtoa_r+0x620>)
 8005914:	2200      	movs	r2, #0
 8005916:	4650      	mov	r0, sl
 8005918:	4659      	mov	r1, fp
 800591a:	f7fb f8df 	bl	8000adc <__aeabi_dcmplt>
 800591e:	2800      	cmp	r0, #0
 8005920:	d079      	beq.n	8005a16 <_dtoa_r+0x4de>
 8005922:	9b03      	ldr	r3, [sp, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d076      	beq.n	8005a16 <_dtoa_r+0x4de>
 8005928:	9b02      	ldr	r3, [sp, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	dd36      	ble.n	800599c <_dtoa_r+0x464>
 800592e:	9b00      	ldr	r3, [sp, #0]
 8005930:	4650      	mov	r0, sl
 8005932:	4659      	mov	r1, fp
 8005934:	1e5f      	subs	r7, r3, #1
 8005936:	2200      	movs	r2, #0
 8005938:	4b88      	ldr	r3, [pc, #544]	; (8005b5c <_dtoa_r+0x624>)
 800593a:	f7fa fe5d 	bl	80005f8 <__aeabi_dmul>
 800593e:	9e02      	ldr	r6, [sp, #8]
 8005940:	4682      	mov	sl, r0
 8005942:	468b      	mov	fp, r1
 8005944:	3501      	adds	r5, #1
 8005946:	4628      	mov	r0, r5
 8005948:	f7fa fdec 	bl	8000524 <__aeabi_i2d>
 800594c:	4652      	mov	r2, sl
 800594e:	465b      	mov	r3, fp
 8005950:	f7fa fe52 	bl	80005f8 <__aeabi_dmul>
 8005954:	4b82      	ldr	r3, [pc, #520]	; (8005b60 <_dtoa_r+0x628>)
 8005956:	2200      	movs	r2, #0
 8005958:	f7fa fc98 	bl	800028c <__adddf3>
 800595c:	46d0      	mov	r8, sl
 800595e:	46d9      	mov	r9, fp
 8005960:	4682      	mov	sl, r0
 8005962:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005966:	2e00      	cmp	r6, #0
 8005968:	d158      	bne.n	8005a1c <_dtoa_r+0x4e4>
 800596a:	4b7e      	ldr	r3, [pc, #504]	; (8005b64 <_dtoa_r+0x62c>)
 800596c:	2200      	movs	r2, #0
 800596e:	4640      	mov	r0, r8
 8005970:	4649      	mov	r1, r9
 8005972:	f7fa fc89 	bl	8000288 <__aeabi_dsub>
 8005976:	4652      	mov	r2, sl
 8005978:	465b      	mov	r3, fp
 800597a:	4680      	mov	r8, r0
 800597c:	4689      	mov	r9, r1
 800597e:	f7fb f8cb 	bl	8000b18 <__aeabi_dcmpgt>
 8005982:	2800      	cmp	r0, #0
 8005984:	f040 8295 	bne.w	8005eb2 <_dtoa_r+0x97a>
 8005988:	4652      	mov	r2, sl
 800598a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800598e:	4640      	mov	r0, r8
 8005990:	4649      	mov	r1, r9
 8005992:	f7fb f8a3 	bl	8000adc <__aeabi_dcmplt>
 8005996:	2800      	cmp	r0, #0
 8005998:	f040 8289 	bne.w	8005eae <_dtoa_r+0x976>
 800599c:	ec5b ab19 	vmov	sl, fp, d9
 80059a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f2c0 8148 	blt.w	8005c38 <_dtoa_r+0x700>
 80059a8:	9a00      	ldr	r2, [sp, #0]
 80059aa:	2a0e      	cmp	r2, #14
 80059ac:	f300 8144 	bgt.w	8005c38 <_dtoa_r+0x700>
 80059b0:	4b67      	ldr	r3, [pc, #412]	; (8005b50 <_dtoa_r+0x618>)
 80059b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f280 80d5 	bge.w	8005b6c <_dtoa_r+0x634>
 80059c2:	9b03      	ldr	r3, [sp, #12]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f300 80d1 	bgt.w	8005b6c <_dtoa_r+0x634>
 80059ca:	f040 826f 	bne.w	8005eac <_dtoa_r+0x974>
 80059ce:	4b65      	ldr	r3, [pc, #404]	; (8005b64 <_dtoa_r+0x62c>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	4640      	mov	r0, r8
 80059d4:	4649      	mov	r1, r9
 80059d6:	f7fa fe0f 	bl	80005f8 <__aeabi_dmul>
 80059da:	4652      	mov	r2, sl
 80059dc:	465b      	mov	r3, fp
 80059de:	f7fb f891 	bl	8000b04 <__aeabi_dcmpge>
 80059e2:	9e03      	ldr	r6, [sp, #12]
 80059e4:	4637      	mov	r7, r6
 80059e6:	2800      	cmp	r0, #0
 80059e8:	f040 8245 	bne.w	8005e76 <_dtoa_r+0x93e>
 80059ec:	9d01      	ldr	r5, [sp, #4]
 80059ee:	2331      	movs	r3, #49	; 0x31
 80059f0:	f805 3b01 	strb.w	r3, [r5], #1
 80059f4:	9b00      	ldr	r3, [sp, #0]
 80059f6:	3301      	adds	r3, #1
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	e240      	b.n	8005e7e <_dtoa_r+0x946>
 80059fc:	07f2      	lsls	r2, r6, #31
 80059fe:	d505      	bpl.n	8005a0c <_dtoa_r+0x4d4>
 8005a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a04:	f7fa fdf8 	bl	80005f8 <__aeabi_dmul>
 8005a08:	3501      	adds	r5, #1
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	1076      	asrs	r6, r6, #1
 8005a0e:	3708      	adds	r7, #8
 8005a10:	e777      	b.n	8005902 <_dtoa_r+0x3ca>
 8005a12:	2502      	movs	r5, #2
 8005a14:	e779      	b.n	800590a <_dtoa_r+0x3d2>
 8005a16:	9f00      	ldr	r7, [sp, #0]
 8005a18:	9e03      	ldr	r6, [sp, #12]
 8005a1a:	e794      	b.n	8005946 <_dtoa_r+0x40e>
 8005a1c:	9901      	ldr	r1, [sp, #4]
 8005a1e:	4b4c      	ldr	r3, [pc, #304]	; (8005b50 <_dtoa_r+0x618>)
 8005a20:	4431      	add	r1, r6
 8005a22:	910d      	str	r1, [sp, #52]	; 0x34
 8005a24:	9908      	ldr	r1, [sp, #32]
 8005a26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005a2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005a2e:	2900      	cmp	r1, #0
 8005a30:	d043      	beq.n	8005aba <_dtoa_r+0x582>
 8005a32:	494d      	ldr	r1, [pc, #308]	; (8005b68 <_dtoa_r+0x630>)
 8005a34:	2000      	movs	r0, #0
 8005a36:	f7fa ff09 	bl	800084c <__aeabi_ddiv>
 8005a3a:	4652      	mov	r2, sl
 8005a3c:	465b      	mov	r3, fp
 8005a3e:	f7fa fc23 	bl	8000288 <__aeabi_dsub>
 8005a42:	9d01      	ldr	r5, [sp, #4]
 8005a44:	4682      	mov	sl, r0
 8005a46:	468b      	mov	fp, r1
 8005a48:	4649      	mov	r1, r9
 8005a4a:	4640      	mov	r0, r8
 8005a4c:	f7fb f884 	bl	8000b58 <__aeabi_d2iz>
 8005a50:	4606      	mov	r6, r0
 8005a52:	f7fa fd67 	bl	8000524 <__aeabi_i2d>
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4640      	mov	r0, r8
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	f7fa fc13 	bl	8000288 <__aeabi_dsub>
 8005a62:	3630      	adds	r6, #48	; 0x30
 8005a64:	f805 6b01 	strb.w	r6, [r5], #1
 8005a68:	4652      	mov	r2, sl
 8005a6a:	465b      	mov	r3, fp
 8005a6c:	4680      	mov	r8, r0
 8005a6e:	4689      	mov	r9, r1
 8005a70:	f7fb f834 	bl	8000adc <__aeabi_dcmplt>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	d163      	bne.n	8005b40 <_dtoa_r+0x608>
 8005a78:	4642      	mov	r2, r8
 8005a7a:	464b      	mov	r3, r9
 8005a7c:	4936      	ldr	r1, [pc, #216]	; (8005b58 <_dtoa_r+0x620>)
 8005a7e:	2000      	movs	r0, #0
 8005a80:	f7fa fc02 	bl	8000288 <__aeabi_dsub>
 8005a84:	4652      	mov	r2, sl
 8005a86:	465b      	mov	r3, fp
 8005a88:	f7fb f828 	bl	8000adc <__aeabi_dcmplt>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	f040 80b5 	bne.w	8005bfc <_dtoa_r+0x6c4>
 8005a92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a94:	429d      	cmp	r5, r3
 8005a96:	d081      	beq.n	800599c <_dtoa_r+0x464>
 8005a98:	4b30      	ldr	r3, [pc, #192]	; (8005b5c <_dtoa_r+0x624>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	4650      	mov	r0, sl
 8005a9e:	4659      	mov	r1, fp
 8005aa0:	f7fa fdaa 	bl	80005f8 <__aeabi_dmul>
 8005aa4:	4b2d      	ldr	r3, [pc, #180]	; (8005b5c <_dtoa_r+0x624>)
 8005aa6:	4682      	mov	sl, r0
 8005aa8:	468b      	mov	fp, r1
 8005aaa:	4640      	mov	r0, r8
 8005aac:	4649      	mov	r1, r9
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f7fa fda2 	bl	80005f8 <__aeabi_dmul>
 8005ab4:	4680      	mov	r8, r0
 8005ab6:	4689      	mov	r9, r1
 8005ab8:	e7c6      	b.n	8005a48 <_dtoa_r+0x510>
 8005aba:	4650      	mov	r0, sl
 8005abc:	4659      	mov	r1, fp
 8005abe:	f7fa fd9b 	bl	80005f8 <__aeabi_dmul>
 8005ac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ac4:	9d01      	ldr	r5, [sp, #4]
 8005ac6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ac8:	4682      	mov	sl, r0
 8005aca:	468b      	mov	fp, r1
 8005acc:	4649      	mov	r1, r9
 8005ace:	4640      	mov	r0, r8
 8005ad0:	f7fb f842 	bl	8000b58 <__aeabi_d2iz>
 8005ad4:	4606      	mov	r6, r0
 8005ad6:	f7fa fd25 	bl	8000524 <__aeabi_i2d>
 8005ada:	3630      	adds	r6, #48	; 0x30
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4640      	mov	r0, r8
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	f7fa fbd0 	bl	8000288 <__aeabi_dsub>
 8005ae8:	f805 6b01 	strb.w	r6, [r5], #1
 8005aec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005aee:	429d      	cmp	r5, r3
 8005af0:	4680      	mov	r8, r0
 8005af2:	4689      	mov	r9, r1
 8005af4:	f04f 0200 	mov.w	r2, #0
 8005af8:	d124      	bne.n	8005b44 <_dtoa_r+0x60c>
 8005afa:	4b1b      	ldr	r3, [pc, #108]	; (8005b68 <_dtoa_r+0x630>)
 8005afc:	4650      	mov	r0, sl
 8005afe:	4659      	mov	r1, fp
 8005b00:	f7fa fbc4 	bl	800028c <__adddf3>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	4640      	mov	r0, r8
 8005b0a:	4649      	mov	r1, r9
 8005b0c:	f7fb f804 	bl	8000b18 <__aeabi_dcmpgt>
 8005b10:	2800      	cmp	r0, #0
 8005b12:	d173      	bne.n	8005bfc <_dtoa_r+0x6c4>
 8005b14:	4652      	mov	r2, sl
 8005b16:	465b      	mov	r3, fp
 8005b18:	4913      	ldr	r1, [pc, #76]	; (8005b68 <_dtoa_r+0x630>)
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	f7fa fbb4 	bl	8000288 <__aeabi_dsub>
 8005b20:	4602      	mov	r2, r0
 8005b22:	460b      	mov	r3, r1
 8005b24:	4640      	mov	r0, r8
 8005b26:	4649      	mov	r1, r9
 8005b28:	f7fa ffd8 	bl	8000adc <__aeabi_dcmplt>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	f43f af35 	beq.w	800599c <_dtoa_r+0x464>
 8005b32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005b34:	1e6b      	subs	r3, r5, #1
 8005b36:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005b3c:	2b30      	cmp	r3, #48	; 0x30
 8005b3e:	d0f8      	beq.n	8005b32 <_dtoa_r+0x5fa>
 8005b40:	9700      	str	r7, [sp, #0]
 8005b42:	e049      	b.n	8005bd8 <_dtoa_r+0x6a0>
 8005b44:	4b05      	ldr	r3, [pc, #20]	; (8005b5c <_dtoa_r+0x624>)
 8005b46:	f7fa fd57 	bl	80005f8 <__aeabi_dmul>
 8005b4a:	4680      	mov	r8, r0
 8005b4c:	4689      	mov	r9, r1
 8005b4e:	e7bd      	b.n	8005acc <_dtoa_r+0x594>
 8005b50:	08007ab8 	.word	0x08007ab8
 8005b54:	08007a90 	.word	0x08007a90
 8005b58:	3ff00000 	.word	0x3ff00000
 8005b5c:	40240000 	.word	0x40240000
 8005b60:	401c0000 	.word	0x401c0000
 8005b64:	40140000 	.word	0x40140000
 8005b68:	3fe00000 	.word	0x3fe00000
 8005b6c:	9d01      	ldr	r5, [sp, #4]
 8005b6e:	4656      	mov	r6, sl
 8005b70:	465f      	mov	r7, fp
 8005b72:	4642      	mov	r2, r8
 8005b74:	464b      	mov	r3, r9
 8005b76:	4630      	mov	r0, r6
 8005b78:	4639      	mov	r1, r7
 8005b7a:	f7fa fe67 	bl	800084c <__aeabi_ddiv>
 8005b7e:	f7fa ffeb 	bl	8000b58 <__aeabi_d2iz>
 8005b82:	4682      	mov	sl, r0
 8005b84:	f7fa fcce 	bl	8000524 <__aeabi_i2d>
 8005b88:	4642      	mov	r2, r8
 8005b8a:	464b      	mov	r3, r9
 8005b8c:	f7fa fd34 	bl	80005f8 <__aeabi_dmul>
 8005b90:	4602      	mov	r2, r0
 8005b92:	460b      	mov	r3, r1
 8005b94:	4630      	mov	r0, r6
 8005b96:	4639      	mov	r1, r7
 8005b98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005b9c:	f7fa fb74 	bl	8000288 <__aeabi_dsub>
 8005ba0:	f805 6b01 	strb.w	r6, [r5], #1
 8005ba4:	9e01      	ldr	r6, [sp, #4]
 8005ba6:	9f03      	ldr	r7, [sp, #12]
 8005ba8:	1bae      	subs	r6, r5, r6
 8005baa:	42b7      	cmp	r7, r6
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	d135      	bne.n	8005c1e <_dtoa_r+0x6e6>
 8005bb2:	f7fa fb6b 	bl	800028c <__adddf3>
 8005bb6:	4642      	mov	r2, r8
 8005bb8:	464b      	mov	r3, r9
 8005bba:	4606      	mov	r6, r0
 8005bbc:	460f      	mov	r7, r1
 8005bbe:	f7fa ffab 	bl	8000b18 <__aeabi_dcmpgt>
 8005bc2:	b9d0      	cbnz	r0, 8005bfa <_dtoa_r+0x6c2>
 8005bc4:	4642      	mov	r2, r8
 8005bc6:	464b      	mov	r3, r9
 8005bc8:	4630      	mov	r0, r6
 8005bca:	4639      	mov	r1, r7
 8005bcc:	f7fa ff7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bd0:	b110      	cbz	r0, 8005bd8 <_dtoa_r+0x6a0>
 8005bd2:	f01a 0f01 	tst.w	sl, #1
 8005bd6:	d110      	bne.n	8005bfa <_dtoa_r+0x6c2>
 8005bd8:	4620      	mov	r0, r4
 8005bda:	ee18 1a10 	vmov	r1, s16
 8005bde:	f000 faf3 	bl	80061c8 <_Bfree>
 8005be2:	2300      	movs	r3, #0
 8005be4:	9800      	ldr	r0, [sp, #0]
 8005be6:	702b      	strb	r3, [r5, #0]
 8005be8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bea:	3001      	adds	r0, #1
 8005bec:	6018      	str	r0, [r3, #0]
 8005bee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f43f acf1 	beq.w	80055d8 <_dtoa_r+0xa0>
 8005bf6:	601d      	str	r5, [r3, #0]
 8005bf8:	e4ee      	b.n	80055d8 <_dtoa_r+0xa0>
 8005bfa:	9f00      	ldr	r7, [sp, #0]
 8005bfc:	462b      	mov	r3, r5
 8005bfe:	461d      	mov	r5, r3
 8005c00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c04:	2a39      	cmp	r2, #57	; 0x39
 8005c06:	d106      	bne.n	8005c16 <_dtoa_r+0x6de>
 8005c08:	9a01      	ldr	r2, [sp, #4]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d1f7      	bne.n	8005bfe <_dtoa_r+0x6c6>
 8005c0e:	9901      	ldr	r1, [sp, #4]
 8005c10:	2230      	movs	r2, #48	; 0x30
 8005c12:	3701      	adds	r7, #1
 8005c14:	700a      	strb	r2, [r1, #0]
 8005c16:	781a      	ldrb	r2, [r3, #0]
 8005c18:	3201      	adds	r2, #1
 8005c1a:	701a      	strb	r2, [r3, #0]
 8005c1c:	e790      	b.n	8005b40 <_dtoa_r+0x608>
 8005c1e:	4ba6      	ldr	r3, [pc, #664]	; (8005eb8 <_dtoa_r+0x980>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	f7fa fce9 	bl	80005f8 <__aeabi_dmul>
 8005c26:	2200      	movs	r2, #0
 8005c28:	2300      	movs	r3, #0
 8005c2a:	4606      	mov	r6, r0
 8005c2c:	460f      	mov	r7, r1
 8005c2e:	f7fa ff4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c32:	2800      	cmp	r0, #0
 8005c34:	d09d      	beq.n	8005b72 <_dtoa_r+0x63a>
 8005c36:	e7cf      	b.n	8005bd8 <_dtoa_r+0x6a0>
 8005c38:	9a08      	ldr	r2, [sp, #32]
 8005c3a:	2a00      	cmp	r2, #0
 8005c3c:	f000 80d7 	beq.w	8005dee <_dtoa_r+0x8b6>
 8005c40:	9a06      	ldr	r2, [sp, #24]
 8005c42:	2a01      	cmp	r2, #1
 8005c44:	f300 80ba 	bgt.w	8005dbc <_dtoa_r+0x884>
 8005c48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c4a:	2a00      	cmp	r2, #0
 8005c4c:	f000 80b2 	beq.w	8005db4 <_dtoa_r+0x87c>
 8005c50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005c54:	9e07      	ldr	r6, [sp, #28]
 8005c56:	9d04      	ldr	r5, [sp, #16]
 8005c58:	9a04      	ldr	r2, [sp, #16]
 8005c5a:	441a      	add	r2, r3
 8005c5c:	9204      	str	r2, [sp, #16]
 8005c5e:	9a05      	ldr	r2, [sp, #20]
 8005c60:	2101      	movs	r1, #1
 8005c62:	441a      	add	r2, r3
 8005c64:	4620      	mov	r0, r4
 8005c66:	9205      	str	r2, [sp, #20]
 8005c68:	f000 fb66 	bl	8006338 <__i2b>
 8005c6c:	4607      	mov	r7, r0
 8005c6e:	2d00      	cmp	r5, #0
 8005c70:	dd0c      	ble.n	8005c8c <_dtoa_r+0x754>
 8005c72:	9b05      	ldr	r3, [sp, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	dd09      	ble.n	8005c8c <_dtoa_r+0x754>
 8005c78:	42ab      	cmp	r3, r5
 8005c7a:	9a04      	ldr	r2, [sp, #16]
 8005c7c:	bfa8      	it	ge
 8005c7e:	462b      	movge	r3, r5
 8005c80:	1ad2      	subs	r2, r2, r3
 8005c82:	9204      	str	r2, [sp, #16]
 8005c84:	9a05      	ldr	r2, [sp, #20]
 8005c86:	1aed      	subs	r5, r5, r3
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	9305      	str	r3, [sp, #20]
 8005c8c:	9b07      	ldr	r3, [sp, #28]
 8005c8e:	b31b      	cbz	r3, 8005cd8 <_dtoa_r+0x7a0>
 8005c90:	9b08      	ldr	r3, [sp, #32]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 80af 	beq.w	8005df6 <_dtoa_r+0x8be>
 8005c98:	2e00      	cmp	r6, #0
 8005c9a:	dd13      	ble.n	8005cc4 <_dtoa_r+0x78c>
 8005c9c:	4639      	mov	r1, r7
 8005c9e:	4632      	mov	r2, r6
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f000 fc09 	bl	80064b8 <__pow5mult>
 8005ca6:	ee18 2a10 	vmov	r2, s16
 8005caa:	4601      	mov	r1, r0
 8005cac:	4607      	mov	r7, r0
 8005cae:	4620      	mov	r0, r4
 8005cb0:	f000 fb58 	bl	8006364 <__multiply>
 8005cb4:	ee18 1a10 	vmov	r1, s16
 8005cb8:	4680      	mov	r8, r0
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f000 fa84 	bl	80061c8 <_Bfree>
 8005cc0:	ee08 8a10 	vmov	s16, r8
 8005cc4:	9b07      	ldr	r3, [sp, #28]
 8005cc6:	1b9a      	subs	r2, r3, r6
 8005cc8:	d006      	beq.n	8005cd8 <_dtoa_r+0x7a0>
 8005cca:	ee18 1a10 	vmov	r1, s16
 8005cce:	4620      	mov	r0, r4
 8005cd0:	f000 fbf2 	bl	80064b8 <__pow5mult>
 8005cd4:	ee08 0a10 	vmov	s16, r0
 8005cd8:	2101      	movs	r1, #1
 8005cda:	4620      	mov	r0, r4
 8005cdc:	f000 fb2c 	bl	8006338 <__i2b>
 8005ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	4606      	mov	r6, r0
 8005ce6:	f340 8088 	ble.w	8005dfa <_dtoa_r+0x8c2>
 8005cea:	461a      	mov	r2, r3
 8005cec:	4601      	mov	r1, r0
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f000 fbe2 	bl	80064b8 <__pow5mult>
 8005cf4:	9b06      	ldr	r3, [sp, #24]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	4606      	mov	r6, r0
 8005cfa:	f340 8081 	ble.w	8005e00 <_dtoa_r+0x8c8>
 8005cfe:	f04f 0800 	mov.w	r8, #0
 8005d02:	6933      	ldr	r3, [r6, #16]
 8005d04:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005d08:	6918      	ldr	r0, [r3, #16]
 8005d0a:	f000 fac5 	bl	8006298 <__hi0bits>
 8005d0e:	f1c0 0020 	rsb	r0, r0, #32
 8005d12:	9b05      	ldr	r3, [sp, #20]
 8005d14:	4418      	add	r0, r3
 8005d16:	f010 001f 	ands.w	r0, r0, #31
 8005d1a:	f000 8092 	beq.w	8005e42 <_dtoa_r+0x90a>
 8005d1e:	f1c0 0320 	rsb	r3, r0, #32
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	f340 808a 	ble.w	8005e3c <_dtoa_r+0x904>
 8005d28:	f1c0 001c 	rsb	r0, r0, #28
 8005d2c:	9b04      	ldr	r3, [sp, #16]
 8005d2e:	4403      	add	r3, r0
 8005d30:	9304      	str	r3, [sp, #16]
 8005d32:	9b05      	ldr	r3, [sp, #20]
 8005d34:	4403      	add	r3, r0
 8005d36:	4405      	add	r5, r0
 8005d38:	9305      	str	r3, [sp, #20]
 8005d3a:	9b04      	ldr	r3, [sp, #16]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	dd07      	ble.n	8005d50 <_dtoa_r+0x818>
 8005d40:	ee18 1a10 	vmov	r1, s16
 8005d44:	461a      	mov	r2, r3
 8005d46:	4620      	mov	r0, r4
 8005d48:	f000 fc10 	bl	800656c <__lshift>
 8005d4c:	ee08 0a10 	vmov	s16, r0
 8005d50:	9b05      	ldr	r3, [sp, #20]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	dd05      	ble.n	8005d62 <_dtoa_r+0x82a>
 8005d56:	4631      	mov	r1, r6
 8005d58:	461a      	mov	r2, r3
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	f000 fc06 	bl	800656c <__lshift>
 8005d60:	4606      	mov	r6, r0
 8005d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d06e      	beq.n	8005e46 <_dtoa_r+0x90e>
 8005d68:	ee18 0a10 	vmov	r0, s16
 8005d6c:	4631      	mov	r1, r6
 8005d6e:	f000 fc6d 	bl	800664c <__mcmp>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	da67      	bge.n	8005e46 <_dtoa_r+0x90e>
 8005d76:	9b00      	ldr	r3, [sp, #0]
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	ee18 1a10 	vmov	r1, s16
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	220a      	movs	r2, #10
 8005d82:	2300      	movs	r3, #0
 8005d84:	4620      	mov	r0, r4
 8005d86:	f000 fa41 	bl	800620c <__multadd>
 8005d8a:	9b08      	ldr	r3, [sp, #32]
 8005d8c:	ee08 0a10 	vmov	s16, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 81b1 	beq.w	80060f8 <_dtoa_r+0xbc0>
 8005d96:	2300      	movs	r3, #0
 8005d98:	4639      	mov	r1, r7
 8005d9a:	220a      	movs	r2, #10
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	f000 fa35 	bl	800620c <__multadd>
 8005da2:	9b02      	ldr	r3, [sp, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	4607      	mov	r7, r0
 8005da8:	f300 808e 	bgt.w	8005ec8 <_dtoa_r+0x990>
 8005dac:	9b06      	ldr	r3, [sp, #24]
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	dc51      	bgt.n	8005e56 <_dtoa_r+0x91e>
 8005db2:	e089      	b.n	8005ec8 <_dtoa_r+0x990>
 8005db4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005db6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005dba:	e74b      	b.n	8005c54 <_dtoa_r+0x71c>
 8005dbc:	9b03      	ldr	r3, [sp, #12]
 8005dbe:	1e5e      	subs	r6, r3, #1
 8005dc0:	9b07      	ldr	r3, [sp, #28]
 8005dc2:	42b3      	cmp	r3, r6
 8005dc4:	bfbf      	itttt	lt
 8005dc6:	9b07      	ldrlt	r3, [sp, #28]
 8005dc8:	9607      	strlt	r6, [sp, #28]
 8005dca:	1af2      	sublt	r2, r6, r3
 8005dcc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005dce:	bfb6      	itet	lt
 8005dd0:	189b      	addlt	r3, r3, r2
 8005dd2:	1b9e      	subge	r6, r3, r6
 8005dd4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005dd6:	9b03      	ldr	r3, [sp, #12]
 8005dd8:	bfb8      	it	lt
 8005dda:	2600      	movlt	r6, #0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	bfb7      	itett	lt
 8005de0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005de4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005de8:	1a9d      	sublt	r5, r3, r2
 8005dea:	2300      	movlt	r3, #0
 8005dec:	e734      	b.n	8005c58 <_dtoa_r+0x720>
 8005dee:	9e07      	ldr	r6, [sp, #28]
 8005df0:	9d04      	ldr	r5, [sp, #16]
 8005df2:	9f08      	ldr	r7, [sp, #32]
 8005df4:	e73b      	b.n	8005c6e <_dtoa_r+0x736>
 8005df6:	9a07      	ldr	r2, [sp, #28]
 8005df8:	e767      	b.n	8005cca <_dtoa_r+0x792>
 8005dfa:	9b06      	ldr	r3, [sp, #24]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	dc18      	bgt.n	8005e32 <_dtoa_r+0x8fa>
 8005e00:	f1ba 0f00 	cmp.w	sl, #0
 8005e04:	d115      	bne.n	8005e32 <_dtoa_r+0x8fa>
 8005e06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e0a:	b993      	cbnz	r3, 8005e32 <_dtoa_r+0x8fa>
 8005e0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005e10:	0d1b      	lsrs	r3, r3, #20
 8005e12:	051b      	lsls	r3, r3, #20
 8005e14:	b183      	cbz	r3, 8005e38 <_dtoa_r+0x900>
 8005e16:	9b04      	ldr	r3, [sp, #16]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	9304      	str	r3, [sp, #16]
 8005e1c:	9b05      	ldr	r3, [sp, #20]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	9305      	str	r3, [sp, #20]
 8005e22:	f04f 0801 	mov.w	r8, #1
 8005e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f47f af6a 	bne.w	8005d02 <_dtoa_r+0x7ca>
 8005e2e:	2001      	movs	r0, #1
 8005e30:	e76f      	b.n	8005d12 <_dtoa_r+0x7da>
 8005e32:	f04f 0800 	mov.w	r8, #0
 8005e36:	e7f6      	b.n	8005e26 <_dtoa_r+0x8ee>
 8005e38:	4698      	mov	r8, r3
 8005e3a:	e7f4      	b.n	8005e26 <_dtoa_r+0x8ee>
 8005e3c:	f43f af7d 	beq.w	8005d3a <_dtoa_r+0x802>
 8005e40:	4618      	mov	r0, r3
 8005e42:	301c      	adds	r0, #28
 8005e44:	e772      	b.n	8005d2c <_dtoa_r+0x7f4>
 8005e46:	9b03      	ldr	r3, [sp, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	dc37      	bgt.n	8005ebc <_dtoa_r+0x984>
 8005e4c:	9b06      	ldr	r3, [sp, #24]
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	dd34      	ble.n	8005ebc <_dtoa_r+0x984>
 8005e52:	9b03      	ldr	r3, [sp, #12]
 8005e54:	9302      	str	r3, [sp, #8]
 8005e56:	9b02      	ldr	r3, [sp, #8]
 8005e58:	b96b      	cbnz	r3, 8005e76 <_dtoa_r+0x93e>
 8005e5a:	4631      	mov	r1, r6
 8005e5c:	2205      	movs	r2, #5
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f000 f9d4 	bl	800620c <__multadd>
 8005e64:	4601      	mov	r1, r0
 8005e66:	4606      	mov	r6, r0
 8005e68:	ee18 0a10 	vmov	r0, s16
 8005e6c:	f000 fbee 	bl	800664c <__mcmp>
 8005e70:	2800      	cmp	r0, #0
 8005e72:	f73f adbb 	bgt.w	80059ec <_dtoa_r+0x4b4>
 8005e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e78:	9d01      	ldr	r5, [sp, #4]
 8005e7a:	43db      	mvns	r3, r3
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	f04f 0800 	mov.w	r8, #0
 8005e82:	4631      	mov	r1, r6
 8005e84:	4620      	mov	r0, r4
 8005e86:	f000 f99f 	bl	80061c8 <_Bfree>
 8005e8a:	2f00      	cmp	r7, #0
 8005e8c:	f43f aea4 	beq.w	8005bd8 <_dtoa_r+0x6a0>
 8005e90:	f1b8 0f00 	cmp.w	r8, #0
 8005e94:	d005      	beq.n	8005ea2 <_dtoa_r+0x96a>
 8005e96:	45b8      	cmp	r8, r7
 8005e98:	d003      	beq.n	8005ea2 <_dtoa_r+0x96a>
 8005e9a:	4641      	mov	r1, r8
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f000 f993 	bl	80061c8 <_Bfree>
 8005ea2:	4639      	mov	r1, r7
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f000 f98f 	bl	80061c8 <_Bfree>
 8005eaa:	e695      	b.n	8005bd8 <_dtoa_r+0x6a0>
 8005eac:	2600      	movs	r6, #0
 8005eae:	4637      	mov	r7, r6
 8005eb0:	e7e1      	b.n	8005e76 <_dtoa_r+0x93e>
 8005eb2:	9700      	str	r7, [sp, #0]
 8005eb4:	4637      	mov	r7, r6
 8005eb6:	e599      	b.n	80059ec <_dtoa_r+0x4b4>
 8005eb8:	40240000 	.word	0x40240000
 8005ebc:	9b08      	ldr	r3, [sp, #32]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 80ca 	beq.w	8006058 <_dtoa_r+0xb20>
 8005ec4:	9b03      	ldr	r3, [sp, #12]
 8005ec6:	9302      	str	r3, [sp, #8]
 8005ec8:	2d00      	cmp	r5, #0
 8005eca:	dd05      	ble.n	8005ed8 <_dtoa_r+0x9a0>
 8005ecc:	4639      	mov	r1, r7
 8005ece:	462a      	mov	r2, r5
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	f000 fb4b 	bl	800656c <__lshift>
 8005ed6:	4607      	mov	r7, r0
 8005ed8:	f1b8 0f00 	cmp.w	r8, #0
 8005edc:	d05b      	beq.n	8005f96 <_dtoa_r+0xa5e>
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f000 f931 	bl	8006148 <_Balloc>
 8005ee6:	4605      	mov	r5, r0
 8005ee8:	b928      	cbnz	r0, 8005ef6 <_dtoa_r+0x9be>
 8005eea:	4b87      	ldr	r3, [pc, #540]	; (8006108 <_dtoa_r+0xbd0>)
 8005eec:	4602      	mov	r2, r0
 8005eee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005ef2:	f7ff bb3b 	b.w	800556c <_dtoa_r+0x34>
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	3202      	adds	r2, #2
 8005efa:	0092      	lsls	r2, r2, #2
 8005efc:	f107 010c 	add.w	r1, r7, #12
 8005f00:	300c      	adds	r0, #12
 8005f02:	f000 f913 	bl	800612c <memcpy>
 8005f06:	2201      	movs	r2, #1
 8005f08:	4629      	mov	r1, r5
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	f000 fb2e 	bl	800656c <__lshift>
 8005f10:	9b01      	ldr	r3, [sp, #4]
 8005f12:	f103 0901 	add.w	r9, r3, #1
 8005f16:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	9305      	str	r3, [sp, #20]
 8005f1e:	f00a 0301 	and.w	r3, sl, #1
 8005f22:	46b8      	mov	r8, r7
 8005f24:	9304      	str	r3, [sp, #16]
 8005f26:	4607      	mov	r7, r0
 8005f28:	4631      	mov	r1, r6
 8005f2a:	ee18 0a10 	vmov	r0, s16
 8005f2e:	f7ff fa75 	bl	800541c <quorem>
 8005f32:	4641      	mov	r1, r8
 8005f34:	9002      	str	r0, [sp, #8]
 8005f36:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005f3a:	ee18 0a10 	vmov	r0, s16
 8005f3e:	f000 fb85 	bl	800664c <__mcmp>
 8005f42:	463a      	mov	r2, r7
 8005f44:	9003      	str	r0, [sp, #12]
 8005f46:	4631      	mov	r1, r6
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f000 fb9b 	bl	8006684 <__mdiff>
 8005f4e:	68c2      	ldr	r2, [r0, #12]
 8005f50:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8005f54:	4605      	mov	r5, r0
 8005f56:	bb02      	cbnz	r2, 8005f9a <_dtoa_r+0xa62>
 8005f58:	4601      	mov	r1, r0
 8005f5a:	ee18 0a10 	vmov	r0, s16
 8005f5e:	f000 fb75 	bl	800664c <__mcmp>
 8005f62:	4602      	mov	r2, r0
 8005f64:	4629      	mov	r1, r5
 8005f66:	4620      	mov	r0, r4
 8005f68:	9207      	str	r2, [sp, #28]
 8005f6a:	f000 f92d 	bl	80061c8 <_Bfree>
 8005f6e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005f72:	ea43 0102 	orr.w	r1, r3, r2
 8005f76:	9b04      	ldr	r3, [sp, #16]
 8005f78:	430b      	orrs	r3, r1
 8005f7a:	464d      	mov	r5, r9
 8005f7c:	d10f      	bne.n	8005f9e <_dtoa_r+0xa66>
 8005f7e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005f82:	d02a      	beq.n	8005fda <_dtoa_r+0xaa2>
 8005f84:	9b03      	ldr	r3, [sp, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	dd02      	ble.n	8005f90 <_dtoa_r+0xa58>
 8005f8a:	9b02      	ldr	r3, [sp, #8]
 8005f8c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005f90:	f88b a000 	strb.w	sl, [fp]
 8005f94:	e775      	b.n	8005e82 <_dtoa_r+0x94a>
 8005f96:	4638      	mov	r0, r7
 8005f98:	e7ba      	b.n	8005f10 <_dtoa_r+0x9d8>
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	e7e2      	b.n	8005f64 <_dtoa_r+0xa2c>
 8005f9e:	9b03      	ldr	r3, [sp, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	db04      	blt.n	8005fae <_dtoa_r+0xa76>
 8005fa4:	9906      	ldr	r1, [sp, #24]
 8005fa6:	430b      	orrs	r3, r1
 8005fa8:	9904      	ldr	r1, [sp, #16]
 8005faa:	430b      	orrs	r3, r1
 8005fac:	d122      	bne.n	8005ff4 <_dtoa_r+0xabc>
 8005fae:	2a00      	cmp	r2, #0
 8005fb0:	ddee      	ble.n	8005f90 <_dtoa_r+0xa58>
 8005fb2:	ee18 1a10 	vmov	r1, s16
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f000 fad7 	bl	800656c <__lshift>
 8005fbe:	4631      	mov	r1, r6
 8005fc0:	ee08 0a10 	vmov	s16, r0
 8005fc4:	f000 fb42 	bl	800664c <__mcmp>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	dc03      	bgt.n	8005fd4 <_dtoa_r+0xa9c>
 8005fcc:	d1e0      	bne.n	8005f90 <_dtoa_r+0xa58>
 8005fce:	f01a 0f01 	tst.w	sl, #1
 8005fd2:	d0dd      	beq.n	8005f90 <_dtoa_r+0xa58>
 8005fd4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005fd8:	d1d7      	bne.n	8005f8a <_dtoa_r+0xa52>
 8005fda:	2339      	movs	r3, #57	; 0x39
 8005fdc:	f88b 3000 	strb.w	r3, [fp]
 8005fe0:	462b      	mov	r3, r5
 8005fe2:	461d      	mov	r5, r3
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005fea:	2a39      	cmp	r2, #57	; 0x39
 8005fec:	d071      	beq.n	80060d2 <_dtoa_r+0xb9a>
 8005fee:	3201      	adds	r2, #1
 8005ff0:	701a      	strb	r2, [r3, #0]
 8005ff2:	e746      	b.n	8005e82 <_dtoa_r+0x94a>
 8005ff4:	2a00      	cmp	r2, #0
 8005ff6:	dd07      	ble.n	8006008 <_dtoa_r+0xad0>
 8005ff8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005ffc:	d0ed      	beq.n	8005fda <_dtoa_r+0xaa2>
 8005ffe:	f10a 0301 	add.w	r3, sl, #1
 8006002:	f88b 3000 	strb.w	r3, [fp]
 8006006:	e73c      	b.n	8005e82 <_dtoa_r+0x94a>
 8006008:	9b05      	ldr	r3, [sp, #20]
 800600a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800600e:	4599      	cmp	r9, r3
 8006010:	d047      	beq.n	80060a2 <_dtoa_r+0xb6a>
 8006012:	ee18 1a10 	vmov	r1, s16
 8006016:	2300      	movs	r3, #0
 8006018:	220a      	movs	r2, #10
 800601a:	4620      	mov	r0, r4
 800601c:	f000 f8f6 	bl	800620c <__multadd>
 8006020:	45b8      	cmp	r8, r7
 8006022:	ee08 0a10 	vmov	s16, r0
 8006026:	f04f 0300 	mov.w	r3, #0
 800602a:	f04f 020a 	mov.w	r2, #10
 800602e:	4641      	mov	r1, r8
 8006030:	4620      	mov	r0, r4
 8006032:	d106      	bne.n	8006042 <_dtoa_r+0xb0a>
 8006034:	f000 f8ea 	bl	800620c <__multadd>
 8006038:	4680      	mov	r8, r0
 800603a:	4607      	mov	r7, r0
 800603c:	f109 0901 	add.w	r9, r9, #1
 8006040:	e772      	b.n	8005f28 <_dtoa_r+0x9f0>
 8006042:	f000 f8e3 	bl	800620c <__multadd>
 8006046:	4639      	mov	r1, r7
 8006048:	4680      	mov	r8, r0
 800604a:	2300      	movs	r3, #0
 800604c:	220a      	movs	r2, #10
 800604e:	4620      	mov	r0, r4
 8006050:	f000 f8dc 	bl	800620c <__multadd>
 8006054:	4607      	mov	r7, r0
 8006056:	e7f1      	b.n	800603c <_dtoa_r+0xb04>
 8006058:	9b03      	ldr	r3, [sp, #12]
 800605a:	9302      	str	r3, [sp, #8]
 800605c:	9d01      	ldr	r5, [sp, #4]
 800605e:	ee18 0a10 	vmov	r0, s16
 8006062:	4631      	mov	r1, r6
 8006064:	f7ff f9da 	bl	800541c <quorem>
 8006068:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800606c:	9b01      	ldr	r3, [sp, #4]
 800606e:	f805 ab01 	strb.w	sl, [r5], #1
 8006072:	1aea      	subs	r2, r5, r3
 8006074:	9b02      	ldr	r3, [sp, #8]
 8006076:	4293      	cmp	r3, r2
 8006078:	dd09      	ble.n	800608e <_dtoa_r+0xb56>
 800607a:	ee18 1a10 	vmov	r1, s16
 800607e:	2300      	movs	r3, #0
 8006080:	220a      	movs	r2, #10
 8006082:	4620      	mov	r0, r4
 8006084:	f000 f8c2 	bl	800620c <__multadd>
 8006088:	ee08 0a10 	vmov	s16, r0
 800608c:	e7e7      	b.n	800605e <_dtoa_r+0xb26>
 800608e:	9b02      	ldr	r3, [sp, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	bfc8      	it	gt
 8006094:	461d      	movgt	r5, r3
 8006096:	9b01      	ldr	r3, [sp, #4]
 8006098:	bfd8      	it	le
 800609a:	2501      	movle	r5, #1
 800609c:	441d      	add	r5, r3
 800609e:	f04f 0800 	mov.w	r8, #0
 80060a2:	ee18 1a10 	vmov	r1, s16
 80060a6:	2201      	movs	r2, #1
 80060a8:	4620      	mov	r0, r4
 80060aa:	f000 fa5f 	bl	800656c <__lshift>
 80060ae:	4631      	mov	r1, r6
 80060b0:	ee08 0a10 	vmov	s16, r0
 80060b4:	f000 faca 	bl	800664c <__mcmp>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	dc91      	bgt.n	8005fe0 <_dtoa_r+0xaa8>
 80060bc:	d102      	bne.n	80060c4 <_dtoa_r+0xb8c>
 80060be:	f01a 0f01 	tst.w	sl, #1
 80060c2:	d18d      	bne.n	8005fe0 <_dtoa_r+0xaa8>
 80060c4:	462b      	mov	r3, r5
 80060c6:	461d      	mov	r5, r3
 80060c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060cc:	2a30      	cmp	r2, #48	; 0x30
 80060ce:	d0fa      	beq.n	80060c6 <_dtoa_r+0xb8e>
 80060d0:	e6d7      	b.n	8005e82 <_dtoa_r+0x94a>
 80060d2:	9a01      	ldr	r2, [sp, #4]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d184      	bne.n	8005fe2 <_dtoa_r+0xaaa>
 80060d8:	9b00      	ldr	r3, [sp, #0]
 80060da:	3301      	adds	r3, #1
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	2331      	movs	r3, #49	; 0x31
 80060e0:	7013      	strb	r3, [r2, #0]
 80060e2:	e6ce      	b.n	8005e82 <_dtoa_r+0x94a>
 80060e4:	4b09      	ldr	r3, [pc, #36]	; (800610c <_dtoa_r+0xbd4>)
 80060e6:	f7ff ba95 	b.w	8005614 <_dtoa_r+0xdc>
 80060ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f47f aa6e 	bne.w	80055ce <_dtoa_r+0x96>
 80060f2:	4b07      	ldr	r3, [pc, #28]	; (8006110 <_dtoa_r+0xbd8>)
 80060f4:	f7ff ba8e 	b.w	8005614 <_dtoa_r+0xdc>
 80060f8:	9b02      	ldr	r3, [sp, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	dcae      	bgt.n	800605c <_dtoa_r+0xb24>
 80060fe:	9b06      	ldr	r3, [sp, #24]
 8006100:	2b02      	cmp	r3, #2
 8006102:	f73f aea8 	bgt.w	8005e56 <_dtoa_r+0x91e>
 8006106:	e7a9      	b.n	800605c <_dtoa_r+0xb24>
 8006108:	08007a1f 	.word	0x08007a1f
 800610c:	0800797c 	.word	0x0800797c
 8006110:	080079a0 	.word	0x080079a0

08006114 <_localeconv_r>:
 8006114:	4800      	ldr	r0, [pc, #0]	; (8006118 <_localeconv_r+0x4>)
 8006116:	4770      	bx	lr
 8006118:	20000168 	.word	0x20000168

0800611c <malloc>:
 800611c:	4b02      	ldr	r3, [pc, #8]	; (8006128 <malloc+0xc>)
 800611e:	4601      	mov	r1, r0
 8006120:	6818      	ldr	r0, [r3, #0]
 8006122:	f000 bc17 	b.w	8006954 <_malloc_r>
 8006126:	bf00      	nop
 8006128:	20000014 	.word	0x20000014

0800612c <memcpy>:
 800612c:	440a      	add	r2, r1
 800612e:	4291      	cmp	r1, r2
 8006130:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006134:	d100      	bne.n	8006138 <memcpy+0xc>
 8006136:	4770      	bx	lr
 8006138:	b510      	push	{r4, lr}
 800613a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800613e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006142:	4291      	cmp	r1, r2
 8006144:	d1f9      	bne.n	800613a <memcpy+0xe>
 8006146:	bd10      	pop	{r4, pc}

08006148 <_Balloc>:
 8006148:	b570      	push	{r4, r5, r6, lr}
 800614a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800614c:	4604      	mov	r4, r0
 800614e:	460d      	mov	r5, r1
 8006150:	b976      	cbnz	r6, 8006170 <_Balloc+0x28>
 8006152:	2010      	movs	r0, #16
 8006154:	f7ff ffe2 	bl	800611c <malloc>
 8006158:	4602      	mov	r2, r0
 800615a:	6260      	str	r0, [r4, #36]	; 0x24
 800615c:	b920      	cbnz	r0, 8006168 <_Balloc+0x20>
 800615e:	4b18      	ldr	r3, [pc, #96]	; (80061c0 <_Balloc+0x78>)
 8006160:	4818      	ldr	r0, [pc, #96]	; (80061c4 <_Balloc+0x7c>)
 8006162:	2166      	movs	r1, #102	; 0x66
 8006164:	f000 fdd6 	bl	8006d14 <__assert_func>
 8006168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800616c:	6006      	str	r6, [r0, #0]
 800616e:	60c6      	str	r6, [r0, #12]
 8006170:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006172:	68f3      	ldr	r3, [r6, #12]
 8006174:	b183      	cbz	r3, 8006198 <_Balloc+0x50>
 8006176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800617e:	b9b8      	cbnz	r0, 80061b0 <_Balloc+0x68>
 8006180:	2101      	movs	r1, #1
 8006182:	fa01 f605 	lsl.w	r6, r1, r5
 8006186:	1d72      	adds	r2, r6, #5
 8006188:	0092      	lsls	r2, r2, #2
 800618a:	4620      	mov	r0, r4
 800618c:	f000 fb60 	bl	8006850 <_calloc_r>
 8006190:	b160      	cbz	r0, 80061ac <_Balloc+0x64>
 8006192:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006196:	e00e      	b.n	80061b6 <_Balloc+0x6e>
 8006198:	2221      	movs	r2, #33	; 0x21
 800619a:	2104      	movs	r1, #4
 800619c:	4620      	mov	r0, r4
 800619e:	f000 fb57 	bl	8006850 <_calloc_r>
 80061a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061a4:	60f0      	str	r0, [r6, #12]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1e4      	bne.n	8006176 <_Balloc+0x2e>
 80061ac:	2000      	movs	r0, #0
 80061ae:	bd70      	pop	{r4, r5, r6, pc}
 80061b0:	6802      	ldr	r2, [r0, #0]
 80061b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80061b6:	2300      	movs	r3, #0
 80061b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80061bc:	e7f7      	b.n	80061ae <_Balloc+0x66>
 80061be:	bf00      	nop
 80061c0:	080079ad 	.word	0x080079ad
 80061c4:	08007a30 	.word	0x08007a30

080061c8 <_Bfree>:
 80061c8:	b570      	push	{r4, r5, r6, lr}
 80061ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80061cc:	4605      	mov	r5, r0
 80061ce:	460c      	mov	r4, r1
 80061d0:	b976      	cbnz	r6, 80061f0 <_Bfree+0x28>
 80061d2:	2010      	movs	r0, #16
 80061d4:	f7ff ffa2 	bl	800611c <malloc>
 80061d8:	4602      	mov	r2, r0
 80061da:	6268      	str	r0, [r5, #36]	; 0x24
 80061dc:	b920      	cbnz	r0, 80061e8 <_Bfree+0x20>
 80061de:	4b09      	ldr	r3, [pc, #36]	; (8006204 <_Bfree+0x3c>)
 80061e0:	4809      	ldr	r0, [pc, #36]	; (8006208 <_Bfree+0x40>)
 80061e2:	218a      	movs	r1, #138	; 0x8a
 80061e4:	f000 fd96 	bl	8006d14 <__assert_func>
 80061e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061ec:	6006      	str	r6, [r0, #0]
 80061ee:	60c6      	str	r6, [r0, #12]
 80061f0:	b13c      	cbz	r4, 8006202 <_Bfree+0x3a>
 80061f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80061f4:	6862      	ldr	r2, [r4, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061fc:	6021      	str	r1, [r4, #0]
 80061fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006202:	bd70      	pop	{r4, r5, r6, pc}
 8006204:	080079ad 	.word	0x080079ad
 8006208:	08007a30 	.word	0x08007a30

0800620c <__multadd>:
 800620c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006210:	690d      	ldr	r5, [r1, #16]
 8006212:	4607      	mov	r7, r0
 8006214:	460c      	mov	r4, r1
 8006216:	461e      	mov	r6, r3
 8006218:	f101 0c14 	add.w	ip, r1, #20
 800621c:	2000      	movs	r0, #0
 800621e:	f8dc 3000 	ldr.w	r3, [ip]
 8006222:	b299      	uxth	r1, r3
 8006224:	fb02 6101 	mla	r1, r2, r1, r6
 8006228:	0c1e      	lsrs	r6, r3, #16
 800622a:	0c0b      	lsrs	r3, r1, #16
 800622c:	fb02 3306 	mla	r3, r2, r6, r3
 8006230:	b289      	uxth	r1, r1
 8006232:	3001      	adds	r0, #1
 8006234:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006238:	4285      	cmp	r5, r0
 800623a:	f84c 1b04 	str.w	r1, [ip], #4
 800623e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006242:	dcec      	bgt.n	800621e <__multadd+0x12>
 8006244:	b30e      	cbz	r6, 800628a <__multadd+0x7e>
 8006246:	68a3      	ldr	r3, [r4, #8]
 8006248:	42ab      	cmp	r3, r5
 800624a:	dc19      	bgt.n	8006280 <__multadd+0x74>
 800624c:	6861      	ldr	r1, [r4, #4]
 800624e:	4638      	mov	r0, r7
 8006250:	3101      	adds	r1, #1
 8006252:	f7ff ff79 	bl	8006148 <_Balloc>
 8006256:	4680      	mov	r8, r0
 8006258:	b928      	cbnz	r0, 8006266 <__multadd+0x5a>
 800625a:	4602      	mov	r2, r0
 800625c:	4b0c      	ldr	r3, [pc, #48]	; (8006290 <__multadd+0x84>)
 800625e:	480d      	ldr	r0, [pc, #52]	; (8006294 <__multadd+0x88>)
 8006260:	21b5      	movs	r1, #181	; 0xb5
 8006262:	f000 fd57 	bl	8006d14 <__assert_func>
 8006266:	6922      	ldr	r2, [r4, #16]
 8006268:	3202      	adds	r2, #2
 800626a:	f104 010c 	add.w	r1, r4, #12
 800626e:	0092      	lsls	r2, r2, #2
 8006270:	300c      	adds	r0, #12
 8006272:	f7ff ff5b 	bl	800612c <memcpy>
 8006276:	4621      	mov	r1, r4
 8006278:	4638      	mov	r0, r7
 800627a:	f7ff ffa5 	bl	80061c8 <_Bfree>
 800627e:	4644      	mov	r4, r8
 8006280:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006284:	3501      	adds	r5, #1
 8006286:	615e      	str	r6, [r3, #20]
 8006288:	6125      	str	r5, [r4, #16]
 800628a:	4620      	mov	r0, r4
 800628c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006290:	08007a1f 	.word	0x08007a1f
 8006294:	08007a30 	.word	0x08007a30

08006298 <__hi0bits>:
 8006298:	0c03      	lsrs	r3, r0, #16
 800629a:	041b      	lsls	r3, r3, #16
 800629c:	b9d3      	cbnz	r3, 80062d4 <__hi0bits+0x3c>
 800629e:	0400      	lsls	r0, r0, #16
 80062a0:	2310      	movs	r3, #16
 80062a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80062a6:	bf04      	itt	eq
 80062a8:	0200      	lsleq	r0, r0, #8
 80062aa:	3308      	addeq	r3, #8
 80062ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80062b0:	bf04      	itt	eq
 80062b2:	0100      	lsleq	r0, r0, #4
 80062b4:	3304      	addeq	r3, #4
 80062b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80062ba:	bf04      	itt	eq
 80062bc:	0080      	lsleq	r0, r0, #2
 80062be:	3302      	addeq	r3, #2
 80062c0:	2800      	cmp	r0, #0
 80062c2:	db05      	blt.n	80062d0 <__hi0bits+0x38>
 80062c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80062c8:	f103 0301 	add.w	r3, r3, #1
 80062cc:	bf08      	it	eq
 80062ce:	2320      	moveq	r3, #32
 80062d0:	4618      	mov	r0, r3
 80062d2:	4770      	bx	lr
 80062d4:	2300      	movs	r3, #0
 80062d6:	e7e4      	b.n	80062a2 <__hi0bits+0xa>

080062d8 <__lo0bits>:
 80062d8:	6803      	ldr	r3, [r0, #0]
 80062da:	f013 0207 	ands.w	r2, r3, #7
 80062de:	4601      	mov	r1, r0
 80062e0:	d00b      	beq.n	80062fa <__lo0bits+0x22>
 80062e2:	07da      	lsls	r2, r3, #31
 80062e4:	d423      	bmi.n	800632e <__lo0bits+0x56>
 80062e6:	0798      	lsls	r0, r3, #30
 80062e8:	bf49      	itett	mi
 80062ea:	085b      	lsrmi	r3, r3, #1
 80062ec:	089b      	lsrpl	r3, r3, #2
 80062ee:	2001      	movmi	r0, #1
 80062f0:	600b      	strmi	r3, [r1, #0]
 80062f2:	bf5c      	itt	pl
 80062f4:	600b      	strpl	r3, [r1, #0]
 80062f6:	2002      	movpl	r0, #2
 80062f8:	4770      	bx	lr
 80062fa:	b298      	uxth	r0, r3
 80062fc:	b9a8      	cbnz	r0, 800632a <__lo0bits+0x52>
 80062fe:	0c1b      	lsrs	r3, r3, #16
 8006300:	2010      	movs	r0, #16
 8006302:	b2da      	uxtb	r2, r3
 8006304:	b90a      	cbnz	r2, 800630a <__lo0bits+0x32>
 8006306:	3008      	adds	r0, #8
 8006308:	0a1b      	lsrs	r3, r3, #8
 800630a:	071a      	lsls	r2, r3, #28
 800630c:	bf04      	itt	eq
 800630e:	091b      	lsreq	r3, r3, #4
 8006310:	3004      	addeq	r0, #4
 8006312:	079a      	lsls	r2, r3, #30
 8006314:	bf04      	itt	eq
 8006316:	089b      	lsreq	r3, r3, #2
 8006318:	3002      	addeq	r0, #2
 800631a:	07da      	lsls	r2, r3, #31
 800631c:	d403      	bmi.n	8006326 <__lo0bits+0x4e>
 800631e:	085b      	lsrs	r3, r3, #1
 8006320:	f100 0001 	add.w	r0, r0, #1
 8006324:	d005      	beq.n	8006332 <__lo0bits+0x5a>
 8006326:	600b      	str	r3, [r1, #0]
 8006328:	4770      	bx	lr
 800632a:	4610      	mov	r0, r2
 800632c:	e7e9      	b.n	8006302 <__lo0bits+0x2a>
 800632e:	2000      	movs	r0, #0
 8006330:	4770      	bx	lr
 8006332:	2020      	movs	r0, #32
 8006334:	4770      	bx	lr
	...

08006338 <__i2b>:
 8006338:	b510      	push	{r4, lr}
 800633a:	460c      	mov	r4, r1
 800633c:	2101      	movs	r1, #1
 800633e:	f7ff ff03 	bl	8006148 <_Balloc>
 8006342:	4602      	mov	r2, r0
 8006344:	b928      	cbnz	r0, 8006352 <__i2b+0x1a>
 8006346:	4b05      	ldr	r3, [pc, #20]	; (800635c <__i2b+0x24>)
 8006348:	4805      	ldr	r0, [pc, #20]	; (8006360 <__i2b+0x28>)
 800634a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800634e:	f000 fce1 	bl	8006d14 <__assert_func>
 8006352:	2301      	movs	r3, #1
 8006354:	6144      	str	r4, [r0, #20]
 8006356:	6103      	str	r3, [r0, #16]
 8006358:	bd10      	pop	{r4, pc}
 800635a:	bf00      	nop
 800635c:	08007a1f 	.word	0x08007a1f
 8006360:	08007a30 	.word	0x08007a30

08006364 <__multiply>:
 8006364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006368:	4691      	mov	r9, r2
 800636a:	690a      	ldr	r2, [r1, #16]
 800636c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006370:	429a      	cmp	r2, r3
 8006372:	bfb8      	it	lt
 8006374:	460b      	movlt	r3, r1
 8006376:	460c      	mov	r4, r1
 8006378:	bfbc      	itt	lt
 800637a:	464c      	movlt	r4, r9
 800637c:	4699      	movlt	r9, r3
 800637e:	6927      	ldr	r7, [r4, #16]
 8006380:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006384:	68a3      	ldr	r3, [r4, #8]
 8006386:	6861      	ldr	r1, [r4, #4]
 8006388:	eb07 060a 	add.w	r6, r7, sl
 800638c:	42b3      	cmp	r3, r6
 800638e:	b085      	sub	sp, #20
 8006390:	bfb8      	it	lt
 8006392:	3101      	addlt	r1, #1
 8006394:	f7ff fed8 	bl	8006148 <_Balloc>
 8006398:	b930      	cbnz	r0, 80063a8 <__multiply+0x44>
 800639a:	4602      	mov	r2, r0
 800639c:	4b44      	ldr	r3, [pc, #272]	; (80064b0 <__multiply+0x14c>)
 800639e:	4845      	ldr	r0, [pc, #276]	; (80064b4 <__multiply+0x150>)
 80063a0:	f240 115d 	movw	r1, #349	; 0x15d
 80063a4:	f000 fcb6 	bl	8006d14 <__assert_func>
 80063a8:	f100 0514 	add.w	r5, r0, #20
 80063ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80063b0:	462b      	mov	r3, r5
 80063b2:	2200      	movs	r2, #0
 80063b4:	4543      	cmp	r3, r8
 80063b6:	d321      	bcc.n	80063fc <__multiply+0x98>
 80063b8:	f104 0314 	add.w	r3, r4, #20
 80063bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80063c0:	f109 0314 	add.w	r3, r9, #20
 80063c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80063c8:	9202      	str	r2, [sp, #8]
 80063ca:	1b3a      	subs	r2, r7, r4
 80063cc:	3a15      	subs	r2, #21
 80063ce:	f022 0203 	bic.w	r2, r2, #3
 80063d2:	3204      	adds	r2, #4
 80063d4:	f104 0115 	add.w	r1, r4, #21
 80063d8:	428f      	cmp	r7, r1
 80063da:	bf38      	it	cc
 80063dc:	2204      	movcc	r2, #4
 80063de:	9201      	str	r2, [sp, #4]
 80063e0:	9a02      	ldr	r2, [sp, #8]
 80063e2:	9303      	str	r3, [sp, #12]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d80c      	bhi.n	8006402 <__multiply+0x9e>
 80063e8:	2e00      	cmp	r6, #0
 80063ea:	dd03      	ble.n	80063f4 <__multiply+0x90>
 80063ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d05a      	beq.n	80064aa <__multiply+0x146>
 80063f4:	6106      	str	r6, [r0, #16]
 80063f6:	b005      	add	sp, #20
 80063f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063fc:	f843 2b04 	str.w	r2, [r3], #4
 8006400:	e7d8      	b.n	80063b4 <__multiply+0x50>
 8006402:	f8b3 a000 	ldrh.w	sl, [r3]
 8006406:	f1ba 0f00 	cmp.w	sl, #0
 800640a:	d024      	beq.n	8006456 <__multiply+0xf2>
 800640c:	f104 0e14 	add.w	lr, r4, #20
 8006410:	46a9      	mov	r9, r5
 8006412:	f04f 0c00 	mov.w	ip, #0
 8006416:	f85e 2b04 	ldr.w	r2, [lr], #4
 800641a:	f8d9 1000 	ldr.w	r1, [r9]
 800641e:	fa1f fb82 	uxth.w	fp, r2
 8006422:	b289      	uxth	r1, r1
 8006424:	fb0a 110b 	mla	r1, sl, fp, r1
 8006428:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800642c:	f8d9 2000 	ldr.w	r2, [r9]
 8006430:	4461      	add	r1, ip
 8006432:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006436:	fb0a c20b 	mla	r2, sl, fp, ip
 800643a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800643e:	b289      	uxth	r1, r1
 8006440:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006444:	4577      	cmp	r7, lr
 8006446:	f849 1b04 	str.w	r1, [r9], #4
 800644a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800644e:	d8e2      	bhi.n	8006416 <__multiply+0xb2>
 8006450:	9a01      	ldr	r2, [sp, #4]
 8006452:	f845 c002 	str.w	ip, [r5, r2]
 8006456:	9a03      	ldr	r2, [sp, #12]
 8006458:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800645c:	3304      	adds	r3, #4
 800645e:	f1b9 0f00 	cmp.w	r9, #0
 8006462:	d020      	beq.n	80064a6 <__multiply+0x142>
 8006464:	6829      	ldr	r1, [r5, #0]
 8006466:	f104 0c14 	add.w	ip, r4, #20
 800646a:	46ae      	mov	lr, r5
 800646c:	f04f 0a00 	mov.w	sl, #0
 8006470:	f8bc b000 	ldrh.w	fp, [ip]
 8006474:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006478:	fb09 220b 	mla	r2, r9, fp, r2
 800647c:	4492      	add	sl, r2
 800647e:	b289      	uxth	r1, r1
 8006480:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006484:	f84e 1b04 	str.w	r1, [lr], #4
 8006488:	f85c 2b04 	ldr.w	r2, [ip], #4
 800648c:	f8be 1000 	ldrh.w	r1, [lr]
 8006490:	0c12      	lsrs	r2, r2, #16
 8006492:	fb09 1102 	mla	r1, r9, r2, r1
 8006496:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800649a:	4567      	cmp	r7, ip
 800649c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80064a0:	d8e6      	bhi.n	8006470 <__multiply+0x10c>
 80064a2:	9a01      	ldr	r2, [sp, #4]
 80064a4:	50a9      	str	r1, [r5, r2]
 80064a6:	3504      	adds	r5, #4
 80064a8:	e79a      	b.n	80063e0 <__multiply+0x7c>
 80064aa:	3e01      	subs	r6, #1
 80064ac:	e79c      	b.n	80063e8 <__multiply+0x84>
 80064ae:	bf00      	nop
 80064b0:	08007a1f 	.word	0x08007a1f
 80064b4:	08007a30 	.word	0x08007a30

080064b8 <__pow5mult>:
 80064b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064bc:	4615      	mov	r5, r2
 80064be:	f012 0203 	ands.w	r2, r2, #3
 80064c2:	4606      	mov	r6, r0
 80064c4:	460f      	mov	r7, r1
 80064c6:	d007      	beq.n	80064d8 <__pow5mult+0x20>
 80064c8:	4c25      	ldr	r4, [pc, #148]	; (8006560 <__pow5mult+0xa8>)
 80064ca:	3a01      	subs	r2, #1
 80064cc:	2300      	movs	r3, #0
 80064ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80064d2:	f7ff fe9b 	bl	800620c <__multadd>
 80064d6:	4607      	mov	r7, r0
 80064d8:	10ad      	asrs	r5, r5, #2
 80064da:	d03d      	beq.n	8006558 <__pow5mult+0xa0>
 80064dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80064de:	b97c      	cbnz	r4, 8006500 <__pow5mult+0x48>
 80064e0:	2010      	movs	r0, #16
 80064e2:	f7ff fe1b 	bl	800611c <malloc>
 80064e6:	4602      	mov	r2, r0
 80064e8:	6270      	str	r0, [r6, #36]	; 0x24
 80064ea:	b928      	cbnz	r0, 80064f8 <__pow5mult+0x40>
 80064ec:	4b1d      	ldr	r3, [pc, #116]	; (8006564 <__pow5mult+0xac>)
 80064ee:	481e      	ldr	r0, [pc, #120]	; (8006568 <__pow5mult+0xb0>)
 80064f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80064f4:	f000 fc0e 	bl	8006d14 <__assert_func>
 80064f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064fc:	6004      	str	r4, [r0, #0]
 80064fe:	60c4      	str	r4, [r0, #12]
 8006500:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006504:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006508:	b94c      	cbnz	r4, 800651e <__pow5mult+0x66>
 800650a:	f240 2171 	movw	r1, #625	; 0x271
 800650e:	4630      	mov	r0, r6
 8006510:	f7ff ff12 	bl	8006338 <__i2b>
 8006514:	2300      	movs	r3, #0
 8006516:	f8c8 0008 	str.w	r0, [r8, #8]
 800651a:	4604      	mov	r4, r0
 800651c:	6003      	str	r3, [r0, #0]
 800651e:	f04f 0900 	mov.w	r9, #0
 8006522:	07eb      	lsls	r3, r5, #31
 8006524:	d50a      	bpl.n	800653c <__pow5mult+0x84>
 8006526:	4639      	mov	r1, r7
 8006528:	4622      	mov	r2, r4
 800652a:	4630      	mov	r0, r6
 800652c:	f7ff ff1a 	bl	8006364 <__multiply>
 8006530:	4639      	mov	r1, r7
 8006532:	4680      	mov	r8, r0
 8006534:	4630      	mov	r0, r6
 8006536:	f7ff fe47 	bl	80061c8 <_Bfree>
 800653a:	4647      	mov	r7, r8
 800653c:	106d      	asrs	r5, r5, #1
 800653e:	d00b      	beq.n	8006558 <__pow5mult+0xa0>
 8006540:	6820      	ldr	r0, [r4, #0]
 8006542:	b938      	cbnz	r0, 8006554 <__pow5mult+0x9c>
 8006544:	4622      	mov	r2, r4
 8006546:	4621      	mov	r1, r4
 8006548:	4630      	mov	r0, r6
 800654a:	f7ff ff0b 	bl	8006364 <__multiply>
 800654e:	6020      	str	r0, [r4, #0]
 8006550:	f8c0 9000 	str.w	r9, [r0]
 8006554:	4604      	mov	r4, r0
 8006556:	e7e4      	b.n	8006522 <__pow5mult+0x6a>
 8006558:	4638      	mov	r0, r7
 800655a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800655e:	bf00      	nop
 8006560:	08007b80 	.word	0x08007b80
 8006564:	080079ad 	.word	0x080079ad
 8006568:	08007a30 	.word	0x08007a30

0800656c <__lshift>:
 800656c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006570:	460c      	mov	r4, r1
 8006572:	6849      	ldr	r1, [r1, #4]
 8006574:	6923      	ldr	r3, [r4, #16]
 8006576:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800657a:	68a3      	ldr	r3, [r4, #8]
 800657c:	4607      	mov	r7, r0
 800657e:	4691      	mov	r9, r2
 8006580:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006584:	f108 0601 	add.w	r6, r8, #1
 8006588:	42b3      	cmp	r3, r6
 800658a:	db0b      	blt.n	80065a4 <__lshift+0x38>
 800658c:	4638      	mov	r0, r7
 800658e:	f7ff fddb 	bl	8006148 <_Balloc>
 8006592:	4605      	mov	r5, r0
 8006594:	b948      	cbnz	r0, 80065aa <__lshift+0x3e>
 8006596:	4602      	mov	r2, r0
 8006598:	4b2a      	ldr	r3, [pc, #168]	; (8006644 <__lshift+0xd8>)
 800659a:	482b      	ldr	r0, [pc, #172]	; (8006648 <__lshift+0xdc>)
 800659c:	f240 11d9 	movw	r1, #473	; 0x1d9
 80065a0:	f000 fbb8 	bl	8006d14 <__assert_func>
 80065a4:	3101      	adds	r1, #1
 80065a6:	005b      	lsls	r3, r3, #1
 80065a8:	e7ee      	b.n	8006588 <__lshift+0x1c>
 80065aa:	2300      	movs	r3, #0
 80065ac:	f100 0114 	add.w	r1, r0, #20
 80065b0:	f100 0210 	add.w	r2, r0, #16
 80065b4:	4618      	mov	r0, r3
 80065b6:	4553      	cmp	r3, sl
 80065b8:	db37      	blt.n	800662a <__lshift+0xbe>
 80065ba:	6920      	ldr	r0, [r4, #16]
 80065bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80065c0:	f104 0314 	add.w	r3, r4, #20
 80065c4:	f019 091f 	ands.w	r9, r9, #31
 80065c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80065cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80065d0:	d02f      	beq.n	8006632 <__lshift+0xc6>
 80065d2:	f1c9 0e20 	rsb	lr, r9, #32
 80065d6:	468a      	mov	sl, r1
 80065d8:	f04f 0c00 	mov.w	ip, #0
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	fa02 f209 	lsl.w	r2, r2, r9
 80065e2:	ea42 020c 	orr.w	r2, r2, ip
 80065e6:	f84a 2b04 	str.w	r2, [sl], #4
 80065ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80065ee:	4298      	cmp	r0, r3
 80065f0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80065f4:	d8f2      	bhi.n	80065dc <__lshift+0x70>
 80065f6:	1b03      	subs	r3, r0, r4
 80065f8:	3b15      	subs	r3, #21
 80065fa:	f023 0303 	bic.w	r3, r3, #3
 80065fe:	3304      	adds	r3, #4
 8006600:	f104 0215 	add.w	r2, r4, #21
 8006604:	4290      	cmp	r0, r2
 8006606:	bf38      	it	cc
 8006608:	2304      	movcc	r3, #4
 800660a:	f841 c003 	str.w	ip, [r1, r3]
 800660e:	f1bc 0f00 	cmp.w	ip, #0
 8006612:	d001      	beq.n	8006618 <__lshift+0xac>
 8006614:	f108 0602 	add.w	r6, r8, #2
 8006618:	3e01      	subs	r6, #1
 800661a:	4638      	mov	r0, r7
 800661c:	612e      	str	r6, [r5, #16]
 800661e:	4621      	mov	r1, r4
 8006620:	f7ff fdd2 	bl	80061c8 <_Bfree>
 8006624:	4628      	mov	r0, r5
 8006626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800662a:	f842 0f04 	str.w	r0, [r2, #4]!
 800662e:	3301      	adds	r3, #1
 8006630:	e7c1      	b.n	80065b6 <__lshift+0x4a>
 8006632:	3904      	subs	r1, #4
 8006634:	f853 2b04 	ldr.w	r2, [r3], #4
 8006638:	f841 2f04 	str.w	r2, [r1, #4]!
 800663c:	4298      	cmp	r0, r3
 800663e:	d8f9      	bhi.n	8006634 <__lshift+0xc8>
 8006640:	e7ea      	b.n	8006618 <__lshift+0xac>
 8006642:	bf00      	nop
 8006644:	08007a1f 	.word	0x08007a1f
 8006648:	08007a30 	.word	0x08007a30

0800664c <__mcmp>:
 800664c:	b530      	push	{r4, r5, lr}
 800664e:	6902      	ldr	r2, [r0, #16]
 8006650:	690c      	ldr	r4, [r1, #16]
 8006652:	1b12      	subs	r2, r2, r4
 8006654:	d10e      	bne.n	8006674 <__mcmp+0x28>
 8006656:	f100 0314 	add.w	r3, r0, #20
 800665a:	3114      	adds	r1, #20
 800665c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006660:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006664:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006668:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800666c:	42a5      	cmp	r5, r4
 800666e:	d003      	beq.n	8006678 <__mcmp+0x2c>
 8006670:	d305      	bcc.n	800667e <__mcmp+0x32>
 8006672:	2201      	movs	r2, #1
 8006674:	4610      	mov	r0, r2
 8006676:	bd30      	pop	{r4, r5, pc}
 8006678:	4283      	cmp	r3, r0
 800667a:	d3f3      	bcc.n	8006664 <__mcmp+0x18>
 800667c:	e7fa      	b.n	8006674 <__mcmp+0x28>
 800667e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006682:	e7f7      	b.n	8006674 <__mcmp+0x28>

08006684 <__mdiff>:
 8006684:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006688:	460c      	mov	r4, r1
 800668a:	4606      	mov	r6, r0
 800668c:	4611      	mov	r1, r2
 800668e:	4620      	mov	r0, r4
 8006690:	4690      	mov	r8, r2
 8006692:	f7ff ffdb 	bl	800664c <__mcmp>
 8006696:	1e05      	subs	r5, r0, #0
 8006698:	d110      	bne.n	80066bc <__mdiff+0x38>
 800669a:	4629      	mov	r1, r5
 800669c:	4630      	mov	r0, r6
 800669e:	f7ff fd53 	bl	8006148 <_Balloc>
 80066a2:	b930      	cbnz	r0, 80066b2 <__mdiff+0x2e>
 80066a4:	4b3a      	ldr	r3, [pc, #232]	; (8006790 <__mdiff+0x10c>)
 80066a6:	4602      	mov	r2, r0
 80066a8:	f240 2132 	movw	r1, #562	; 0x232
 80066ac:	4839      	ldr	r0, [pc, #228]	; (8006794 <__mdiff+0x110>)
 80066ae:	f000 fb31 	bl	8006d14 <__assert_func>
 80066b2:	2301      	movs	r3, #1
 80066b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80066b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066bc:	bfa4      	itt	ge
 80066be:	4643      	movge	r3, r8
 80066c0:	46a0      	movge	r8, r4
 80066c2:	4630      	mov	r0, r6
 80066c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80066c8:	bfa6      	itte	ge
 80066ca:	461c      	movge	r4, r3
 80066cc:	2500      	movge	r5, #0
 80066ce:	2501      	movlt	r5, #1
 80066d0:	f7ff fd3a 	bl	8006148 <_Balloc>
 80066d4:	b920      	cbnz	r0, 80066e0 <__mdiff+0x5c>
 80066d6:	4b2e      	ldr	r3, [pc, #184]	; (8006790 <__mdiff+0x10c>)
 80066d8:	4602      	mov	r2, r0
 80066da:	f44f 7110 	mov.w	r1, #576	; 0x240
 80066de:	e7e5      	b.n	80066ac <__mdiff+0x28>
 80066e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80066e4:	6926      	ldr	r6, [r4, #16]
 80066e6:	60c5      	str	r5, [r0, #12]
 80066e8:	f104 0914 	add.w	r9, r4, #20
 80066ec:	f108 0514 	add.w	r5, r8, #20
 80066f0:	f100 0e14 	add.w	lr, r0, #20
 80066f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80066f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80066fc:	f108 0210 	add.w	r2, r8, #16
 8006700:	46f2      	mov	sl, lr
 8006702:	2100      	movs	r1, #0
 8006704:	f859 3b04 	ldr.w	r3, [r9], #4
 8006708:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800670c:	fa1f f883 	uxth.w	r8, r3
 8006710:	fa11 f18b 	uxtah	r1, r1, fp
 8006714:	0c1b      	lsrs	r3, r3, #16
 8006716:	eba1 0808 	sub.w	r8, r1, r8
 800671a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800671e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006722:	fa1f f888 	uxth.w	r8, r8
 8006726:	1419      	asrs	r1, r3, #16
 8006728:	454e      	cmp	r6, r9
 800672a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800672e:	f84a 3b04 	str.w	r3, [sl], #4
 8006732:	d8e7      	bhi.n	8006704 <__mdiff+0x80>
 8006734:	1b33      	subs	r3, r6, r4
 8006736:	3b15      	subs	r3, #21
 8006738:	f023 0303 	bic.w	r3, r3, #3
 800673c:	3304      	adds	r3, #4
 800673e:	3415      	adds	r4, #21
 8006740:	42a6      	cmp	r6, r4
 8006742:	bf38      	it	cc
 8006744:	2304      	movcc	r3, #4
 8006746:	441d      	add	r5, r3
 8006748:	4473      	add	r3, lr
 800674a:	469e      	mov	lr, r3
 800674c:	462e      	mov	r6, r5
 800674e:	4566      	cmp	r6, ip
 8006750:	d30e      	bcc.n	8006770 <__mdiff+0xec>
 8006752:	f10c 0203 	add.w	r2, ip, #3
 8006756:	1b52      	subs	r2, r2, r5
 8006758:	f022 0203 	bic.w	r2, r2, #3
 800675c:	3d03      	subs	r5, #3
 800675e:	45ac      	cmp	ip, r5
 8006760:	bf38      	it	cc
 8006762:	2200      	movcc	r2, #0
 8006764:	441a      	add	r2, r3
 8006766:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800676a:	b17b      	cbz	r3, 800678c <__mdiff+0x108>
 800676c:	6107      	str	r7, [r0, #16]
 800676e:	e7a3      	b.n	80066b8 <__mdiff+0x34>
 8006770:	f856 8b04 	ldr.w	r8, [r6], #4
 8006774:	fa11 f288 	uxtah	r2, r1, r8
 8006778:	1414      	asrs	r4, r2, #16
 800677a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800677e:	b292      	uxth	r2, r2
 8006780:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006784:	f84e 2b04 	str.w	r2, [lr], #4
 8006788:	1421      	asrs	r1, r4, #16
 800678a:	e7e0      	b.n	800674e <__mdiff+0xca>
 800678c:	3f01      	subs	r7, #1
 800678e:	e7ea      	b.n	8006766 <__mdiff+0xe2>
 8006790:	08007a1f 	.word	0x08007a1f
 8006794:	08007a30 	.word	0x08007a30

08006798 <__d2b>:
 8006798:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800679c:	4689      	mov	r9, r1
 800679e:	2101      	movs	r1, #1
 80067a0:	ec57 6b10 	vmov	r6, r7, d0
 80067a4:	4690      	mov	r8, r2
 80067a6:	f7ff fccf 	bl	8006148 <_Balloc>
 80067aa:	4604      	mov	r4, r0
 80067ac:	b930      	cbnz	r0, 80067bc <__d2b+0x24>
 80067ae:	4602      	mov	r2, r0
 80067b0:	4b25      	ldr	r3, [pc, #148]	; (8006848 <__d2b+0xb0>)
 80067b2:	4826      	ldr	r0, [pc, #152]	; (800684c <__d2b+0xb4>)
 80067b4:	f240 310a 	movw	r1, #778	; 0x30a
 80067b8:	f000 faac 	bl	8006d14 <__assert_func>
 80067bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80067c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80067c4:	bb35      	cbnz	r5, 8006814 <__d2b+0x7c>
 80067c6:	2e00      	cmp	r6, #0
 80067c8:	9301      	str	r3, [sp, #4]
 80067ca:	d028      	beq.n	800681e <__d2b+0x86>
 80067cc:	4668      	mov	r0, sp
 80067ce:	9600      	str	r6, [sp, #0]
 80067d0:	f7ff fd82 	bl	80062d8 <__lo0bits>
 80067d4:	9900      	ldr	r1, [sp, #0]
 80067d6:	b300      	cbz	r0, 800681a <__d2b+0x82>
 80067d8:	9a01      	ldr	r2, [sp, #4]
 80067da:	f1c0 0320 	rsb	r3, r0, #32
 80067de:	fa02 f303 	lsl.w	r3, r2, r3
 80067e2:	430b      	orrs	r3, r1
 80067e4:	40c2      	lsrs	r2, r0
 80067e6:	6163      	str	r3, [r4, #20]
 80067e8:	9201      	str	r2, [sp, #4]
 80067ea:	9b01      	ldr	r3, [sp, #4]
 80067ec:	61a3      	str	r3, [r4, #24]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	bf14      	ite	ne
 80067f2:	2202      	movne	r2, #2
 80067f4:	2201      	moveq	r2, #1
 80067f6:	6122      	str	r2, [r4, #16]
 80067f8:	b1d5      	cbz	r5, 8006830 <__d2b+0x98>
 80067fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80067fe:	4405      	add	r5, r0
 8006800:	f8c9 5000 	str.w	r5, [r9]
 8006804:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006808:	f8c8 0000 	str.w	r0, [r8]
 800680c:	4620      	mov	r0, r4
 800680e:	b003      	add	sp, #12
 8006810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006814:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006818:	e7d5      	b.n	80067c6 <__d2b+0x2e>
 800681a:	6161      	str	r1, [r4, #20]
 800681c:	e7e5      	b.n	80067ea <__d2b+0x52>
 800681e:	a801      	add	r0, sp, #4
 8006820:	f7ff fd5a 	bl	80062d8 <__lo0bits>
 8006824:	9b01      	ldr	r3, [sp, #4]
 8006826:	6163      	str	r3, [r4, #20]
 8006828:	2201      	movs	r2, #1
 800682a:	6122      	str	r2, [r4, #16]
 800682c:	3020      	adds	r0, #32
 800682e:	e7e3      	b.n	80067f8 <__d2b+0x60>
 8006830:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006834:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006838:	f8c9 0000 	str.w	r0, [r9]
 800683c:	6918      	ldr	r0, [r3, #16]
 800683e:	f7ff fd2b 	bl	8006298 <__hi0bits>
 8006842:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006846:	e7df      	b.n	8006808 <__d2b+0x70>
 8006848:	08007a1f 	.word	0x08007a1f
 800684c:	08007a30 	.word	0x08007a30

08006850 <_calloc_r>:
 8006850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006852:	fba1 2402 	umull	r2, r4, r1, r2
 8006856:	b94c      	cbnz	r4, 800686c <_calloc_r+0x1c>
 8006858:	4611      	mov	r1, r2
 800685a:	9201      	str	r2, [sp, #4]
 800685c:	f000 f87a 	bl	8006954 <_malloc_r>
 8006860:	9a01      	ldr	r2, [sp, #4]
 8006862:	4605      	mov	r5, r0
 8006864:	b930      	cbnz	r0, 8006874 <_calloc_r+0x24>
 8006866:	4628      	mov	r0, r5
 8006868:	b003      	add	sp, #12
 800686a:	bd30      	pop	{r4, r5, pc}
 800686c:	220c      	movs	r2, #12
 800686e:	6002      	str	r2, [r0, #0]
 8006870:	2500      	movs	r5, #0
 8006872:	e7f8      	b.n	8006866 <_calloc_r+0x16>
 8006874:	4621      	mov	r1, r4
 8006876:	f7fe f93f 	bl	8004af8 <memset>
 800687a:	e7f4      	b.n	8006866 <_calloc_r+0x16>

0800687c <_free_r>:
 800687c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800687e:	2900      	cmp	r1, #0
 8006880:	d044      	beq.n	800690c <_free_r+0x90>
 8006882:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006886:	9001      	str	r0, [sp, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	f1a1 0404 	sub.w	r4, r1, #4
 800688e:	bfb8      	it	lt
 8006890:	18e4      	addlt	r4, r4, r3
 8006892:	f000 fa9b 	bl	8006dcc <__malloc_lock>
 8006896:	4a1e      	ldr	r2, [pc, #120]	; (8006910 <_free_r+0x94>)
 8006898:	9801      	ldr	r0, [sp, #4]
 800689a:	6813      	ldr	r3, [r2, #0]
 800689c:	b933      	cbnz	r3, 80068ac <_free_r+0x30>
 800689e:	6063      	str	r3, [r4, #4]
 80068a0:	6014      	str	r4, [r2, #0]
 80068a2:	b003      	add	sp, #12
 80068a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068a8:	f000 ba96 	b.w	8006dd8 <__malloc_unlock>
 80068ac:	42a3      	cmp	r3, r4
 80068ae:	d908      	bls.n	80068c2 <_free_r+0x46>
 80068b0:	6825      	ldr	r5, [r4, #0]
 80068b2:	1961      	adds	r1, r4, r5
 80068b4:	428b      	cmp	r3, r1
 80068b6:	bf01      	itttt	eq
 80068b8:	6819      	ldreq	r1, [r3, #0]
 80068ba:	685b      	ldreq	r3, [r3, #4]
 80068bc:	1949      	addeq	r1, r1, r5
 80068be:	6021      	streq	r1, [r4, #0]
 80068c0:	e7ed      	b.n	800689e <_free_r+0x22>
 80068c2:	461a      	mov	r2, r3
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	b10b      	cbz	r3, 80068cc <_free_r+0x50>
 80068c8:	42a3      	cmp	r3, r4
 80068ca:	d9fa      	bls.n	80068c2 <_free_r+0x46>
 80068cc:	6811      	ldr	r1, [r2, #0]
 80068ce:	1855      	adds	r5, r2, r1
 80068d0:	42a5      	cmp	r5, r4
 80068d2:	d10b      	bne.n	80068ec <_free_r+0x70>
 80068d4:	6824      	ldr	r4, [r4, #0]
 80068d6:	4421      	add	r1, r4
 80068d8:	1854      	adds	r4, r2, r1
 80068da:	42a3      	cmp	r3, r4
 80068dc:	6011      	str	r1, [r2, #0]
 80068de:	d1e0      	bne.n	80068a2 <_free_r+0x26>
 80068e0:	681c      	ldr	r4, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	6053      	str	r3, [r2, #4]
 80068e6:	4421      	add	r1, r4
 80068e8:	6011      	str	r1, [r2, #0]
 80068ea:	e7da      	b.n	80068a2 <_free_r+0x26>
 80068ec:	d902      	bls.n	80068f4 <_free_r+0x78>
 80068ee:	230c      	movs	r3, #12
 80068f0:	6003      	str	r3, [r0, #0]
 80068f2:	e7d6      	b.n	80068a2 <_free_r+0x26>
 80068f4:	6825      	ldr	r5, [r4, #0]
 80068f6:	1961      	adds	r1, r4, r5
 80068f8:	428b      	cmp	r3, r1
 80068fa:	bf04      	itt	eq
 80068fc:	6819      	ldreq	r1, [r3, #0]
 80068fe:	685b      	ldreq	r3, [r3, #4]
 8006900:	6063      	str	r3, [r4, #4]
 8006902:	bf04      	itt	eq
 8006904:	1949      	addeq	r1, r1, r5
 8006906:	6021      	streq	r1, [r4, #0]
 8006908:	6054      	str	r4, [r2, #4]
 800690a:	e7ca      	b.n	80068a2 <_free_r+0x26>
 800690c:	b003      	add	sp, #12
 800690e:	bd30      	pop	{r4, r5, pc}
 8006910:	2000036c 	.word	0x2000036c

08006914 <sbrk_aligned>:
 8006914:	b570      	push	{r4, r5, r6, lr}
 8006916:	4e0e      	ldr	r6, [pc, #56]	; (8006950 <sbrk_aligned+0x3c>)
 8006918:	460c      	mov	r4, r1
 800691a:	6831      	ldr	r1, [r6, #0]
 800691c:	4605      	mov	r5, r0
 800691e:	b911      	cbnz	r1, 8006926 <sbrk_aligned+0x12>
 8006920:	f000 f9e8 	bl	8006cf4 <_sbrk_r>
 8006924:	6030      	str	r0, [r6, #0]
 8006926:	4621      	mov	r1, r4
 8006928:	4628      	mov	r0, r5
 800692a:	f000 f9e3 	bl	8006cf4 <_sbrk_r>
 800692e:	1c43      	adds	r3, r0, #1
 8006930:	d00a      	beq.n	8006948 <sbrk_aligned+0x34>
 8006932:	1cc4      	adds	r4, r0, #3
 8006934:	f024 0403 	bic.w	r4, r4, #3
 8006938:	42a0      	cmp	r0, r4
 800693a:	d007      	beq.n	800694c <sbrk_aligned+0x38>
 800693c:	1a21      	subs	r1, r4, r0
 800693e:	4628      	mov	r0, r5
 8006940:	f000 f9d8 	bl	8006cf4 <_sbrk_r>
 8006944:	3001      	adds	r0, #1
 8006946:	d101      	bne.n	800694c <sbrk_aligned+0x38>
 8006948:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800694c:	4620      	mov	r0, r4
 800694e:	bd70      	pop	{r4, r5, r6, pc}
 8006950:	20000370 	.word	0x20000370

08006954 <_malloc_r>:
 8006954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006958:	1ccd      	adds	r5, r1, #3
 800695a:	f025 0503 	bic.w	r5, r5, #3
 800695e:	3508      	adds	r5, #8
 8006960:	2d0c      	cmp	r5, #12
 8006962:	bf38      	it	cc
 8006964:	250c      	movcc	r5, #12
 8006966:	2d00      	cmp	r5, #0
 8006968:	4607      	mov	r7, r0
 800696a:	db01      	blt.n	8006970 <_malloc_r+0x1c>
 800696c:	42a9      	cmp	r1, r5
 800696e:	d905      	bls.n	800697c <_malloc_r+0x28>
 8006970:	230c      	movs	r3, #12
 8006972:	603b      	str	r3, [r7, #0]
 8006974:	2600      	movs	r6, #0
 8006976:	4630      	mov	r0, r6
 8006978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800697c:	4e2e      	ldr	r6, [pc, #184]	; (8006a38 <_malloc_r+0xe4>)
 800697e:	f000 fa25 	bl	8006dcc <__malloc_lock>
 8006982:	6833      	ldr	r3, [r6, #0]
 8006984:	461c      	mov	r4, r3
 8006986:	bb34      	cbnz	r4, 80069d6 <_malloc_r+0x82>
 8006988:	4629      	mov	r1, r5
 800698a:	4638      	mov	r0, r7
 800698c:	f7ff ffc2 	bl	8006914 <sbrk_aligned>
 8006990:	1c43      	adds	r3, r0, #1
 8006992:	4604      	mov	r4, r0
 8006994:	d14d      	bne.n	8006a32 <_malloc_r+0xde>
 8006996:	6834      	ldr	r4, [r6, #0]
 8006998:	4626      	mov	r6, r4
 800699a:	2e00      	cmp	r6, #0
 800699c:	d140      	bne.n	8006a20 <_malloc_r+0xcc>
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	4631      	mov	r1, r6
 80069a2:	4638      	mov	r0, r7
 80069a4:	eb04 0803 	add.w	r8, r4, r3
 80069a8:	f000 f9a4 	bl	8006cf4 <_sbrk_r>
 80069ac:	4580      	cmp	r8, r0
 80069ae:	d13a      	bne.n	8006a26 <_malloc_r+0xd2>
 80069b0:	6821      	ldr	r1, [r4, #0]
 80069b2:	3503      	adds	r5, #3
 80069b4:	1a6d      	subs	r5, r5, r1
 80069b6:	f025 0503 	bic.w	r5, r5, #3
 80069ba:	3508      	adds	r5, #8
 80069bc:	2d0c      	cmp	r5, #12
 80069be:	bf38      	it	cc
 80069c0:	250c      	movcc	r5, #12
 80069c2:	4629      	mov	r1, r5
 80069c4:	4638      	mov	r0, r7
 80069c6:	f7ff ffa5 	bl	8006914 <sbrk_aligned>
 80069ca:	3001      	adds	r0, #1
 80069cc:	d02b      	beq.n	8006a26 <_malloc_r+0xd2>
 80069ce:	6823      	ldr	r3, [r4, #0]
 80069d0:	442b      	add	r3, r5
 80069d2:	6023      	str	r3, [r4, #0]
 80069d4:	e00e      	b.n	80069f4 <_malloc_r+0xa0>
 80069d6:	6822      	ldr	r2, [r4, #0]
 80069d8:	1b52      	subs	r2, r2, r5
 80069da:	d41e      	bmi.n	8006a1a <_malloc_r+0xc6>
 80069dc:	2a0b      	cmp	r2, #11
 80069de:	d916      	bls.n	8006a0e <_malloc_r+0xba>
 80069e0:	1961      	adds	r1, r4, r5
 80069e2:	42a3      	cmp	r3, r4
 80069e4:	6025      	str	r5, [r4, #0]
 80069e6:	bf18      	it	ne
 80069e8:	6059      	strne	r1, [r3, #4]
 80069ea:	6863      	ldr	r3, [r4, #4]
 80069ec:	bf08      	it	eq
 80069ee:	6031      	streq	r1, [r6, #0]
 80069f0:	5162      	str	r2, [r4, r5]
 80069f2:	604b      	str	r3, [r1, #4]
 80069f4:	4638      	mov	r0, r7
 80069f6:	f104 060b 	add.w	r6, r4, #11
 80069fa:	f000 f9ed 	bl	8006dd8 <__malloc_unlock>
 80069fe:	f026 0607 	bic.w	r6, r6, #7
 8006a02:	1d23      	adds	r3, r4, #4
 8006a04:	1af2      	subs	r2, r6, r3
 8006a06:	d0b6      	beq.n	8006976 <_malloc_r+0x22>
 8006a08:	1b9b      	subs	r3, r3, r6
 8006a0a:	50a3      	str	r3, [r4, r2]
 8006a0c:	e7b3      	b.n	8006976 <_malloc_r+0x22>
 8006a0e:	6862      	ldr	r2, [r4, #4]
 8006a10:	42a3      	cmp	r3, r4
 8006a12:	bf0c      	ite	eq
 8006a14:	6032      	streq	r2, [r6, #0]
 8006a16:	605a      	strne	r2, [r3, #4]
 8006a18:	e7ec      	b.n	80069f4 <_malloc_r+0xa0>
 8006a1a:	4623      	mov	r3, r4
 8006a1c:	6864      	ldr	r4, [r4, #4]
 8006a1e:	e7b2      	b.n	8006986 <_malloc_r+0x32>
 8006a20:	4634      	mov	r4, r6
 8006a22:	6876      	ldr	r6, [r6, #4]
 8006a24:	e7b9      	b.n	800699a <_malloc_r+0x46>
 8006a26:	230c      	movs	r3, #12
 8006a28:	603b      	str	r3, [r7, #0]
 8006a2a:	4638      	mov	r0, r7
 8006a2c:	f000 f9d4 	bl	8006dd8 <__malloc_unlock>
 8006a30:	e7a1      	b.n	8006976 <_malloc_r+0x22>
 8006a32:	6025      	str	r5, [r4, #0]
 8006a34:	e7de      	b.n	80069f4 <_malloc_r+0xa0>
 8006a36:	bf00      	nop
 8006a38:	2000036c 	.word	0x2000036c

08006a3c <__ssputs_r>:
 8006a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a40:	688e      	ldr	r6, [r1, #8]
 8006a42:	429e      	cmp	r6, r3
 8006a44:	4682      	mov	sl, r0
 8006a46:	460c      	mov	r4, r1
 8006a48:	4690      	mov	r8, r2
 8006a4a:	461f      	mov	r7, r3
 8006a4c:	d838      	bhi.n	8006ac0 <__ssputs_r+0x84>
 8006a4e:	898a      	ldrh	r2, [r1, #12]
 8006a50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a54:	d032      	beq.n	8006abc <__ssputs_r+0x80>
 8006a56:	6825      	ldr	r5, [r4, #0]
 8006a58:	6909      	ldr	r1, [r1, #16]
 8006a5a:	eba5 0901 	sub.w	r9, r5, r1
 8006a5e:	6965      	ldr	r5, [r4, #20]
 8006a60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a68:	3301      	adds	r3, #1
 8006a6a:	444b      	add	r3, r9
 8006a6c:	106d      	asrs	r5, r5, #1
 8006a6e:	429d      	cmp	r5, r3
 8006a70:	bf38      	it	cc
 8006a72:	461d      	movcc	r5, r3
 8006a74:	0553      	lsls	r3, r2, #21
 8006a76:	d531      	bpl.n	8006adc <__ssputs_r+0xa0>
 8006a78:	4629      	mov	r1, r5
 8006a7a:	f7ff ff6b 	bl	8006954 <_malloc_r>
 8006a7e:	4606      	mov	r6, r0
 8006a80:	b950      	cbnz	r0, 8006a98 <__ssputs_r+0x5c>
 8006a82:	230c      	movs	r3, #12
 8006a84:	f8ca 3000 	str.w	r3, [sl]
 8006a88:	89a3      	ldrh	r3, [r4, #12]
 8006a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a8e:	81a3      	strh	r3, [r4, #12]
 8006a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a98:	6921      	ldr	r1, [r4, #16]
 8006a9a:	464a      	mov	r2, r9
 8006a9c:	f7ff fb46 	bl	800612c <memcpy>
 8006aa0:	89a3      	ldrh	r3, [r4, #12]
 8006aa2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aaa:	81a3      	strh	r3, [r4, #12]
 8006aac:	6126      	str	r6, [r4, #16]
 8006aae:	6165      	str	r5, [r4, #20]
 8006ab0:	444e      	add	r6, r9
 8006ab2:	eba5 0509 	sub.w	r5, r5, r9
 8006ab6:	6026      	str	r6, [r4, #0]
 8006ab8:	60a5      	str	r5, [r4, #8]
 8006aba:	463e      	mov	r6, r7
 8006abc:	42be      	cmp	r6, r7
 8006abe:	d900      	bls.n	8006ac2 <__ssputs_r+0x86>
 8006ac0:	463e      	mov	r6, r7
 8006ac2:	6820      	ldr	r0, [r4, #0]
 8006ac4:	4632      	mov	r2, r6
 8006ac6:	4641      	mov	r1, r8
 8006ac8:	f000 f966 	bl	8006d98 <memmove>
 8006acc:	68a3      	ldr	r3, [r4, #8]
 8006ace:	1b9b      	subs	r3, r3, r6
 8006ad0:	60a3      	str	r3, [r4, #8]
 8006ad2:	6823      	ldr	r3, [r4, #0]
 8006ad4:	4433      	add	r3, r6
 8006ad6:	6023      	str	r3, [r4, #0]
 8006ad8:	2000      	movs	r0, #0
 8006ada:	e7db      	b.n	8006a94 <__ssputs_r+0x58>
 8006adc:	462a      	mov	r2, r5
 8006ade:	f000 f981 	bl	8006de4 <_realloc_r>
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d1e1      	bne.n	8006aac <__ssputs_r+0x70>
 8006ae8:	6921      	ldr	r1, [r4, #16]
 8006aea:	4650      	mov	r0, sl
 8006aec:	f7ff fec6 	bl	800687c <_free_r>
 8006af0:	e7c7      	b.n	8006a82 <__ssputs_r+0x46>
	...

08006af4 <_svfiprintf_r>:
 8006af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af8:	4698      	mov	r8, r3
 8006afa:	898b      	ldrh	r3, [r1, #12]
 8006afc:	061b      	lsls	r3, r3, #24
 8006afe:	b09d      	sub	sp, #116	; 0x74
 8006b00:	4607      	mov	r7, r0
 8006b02:	460d      	mov	r5, r1
 8006b04:	4614      	mov	r4, r2
 8006b06:	d50e      	bpl.n	8006b26 <_svfiprintf_r+0x32>
 8006b08:	690b      	ldr	r3, [r1, #16]
 8006b0a:	b963      	cbnz	r3, 8006b26 <_svfiprintf_r+0x32>
 8006b0c:	2140      	movs	r1, #64	; 0x40
 8006b0e:	f7ff ff21 	bl	8006954 <_malloc_r>
 8006b12:	6028      	str	r0, [r5, #0]
 8006b14:	6128      	str	r0, [r5, #16]
 8006b16:	b920      	cbnz	r0, 8006b22 <_svfiprintf_r+0x2e>
 8006b18:	230c      	movs	r3, #12
 8006b1a:	603b      	str	r3, [r7, #0]
 8006b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b20:	e0d1      	b.n	8006cc6 <_svfiprintf_r+0x1d2>
 8006b22:	2340      	movs	r3, #64	; 0x40
 8006b24:	616b      	str	r3, [r5, #20]
 8006b26:	2300      	movs	r3, #0
 8006b28:	9309      	str	r3, [sp, #36]	; 0x24
 8006b2a:	2320      	movs	r3, #32
 8006b2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b30:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b34:	2330      	movs	r3, #48	; 0x30
 8006b36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006ce0 <_svfiprintf_r+0x1ec>
 8006b3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b3e:	f04f 0901 	mov.w	r9, #1
 8006b42:	4623      	mov	r3, r4
 8006b44:	469a      	mov	sl, r3
 8006b46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b4a:	b10a      	cbz	r2, 8006b50 <_svfiprintf_r+0x5c>
 8006b4c:	2a25      	cmp	r2, #37	; 0x25
 8006b4e:	d1f9      	bne.n	8006b44 <_svfiprintf_r+0x50>
 8006b50:	ebba 0b04 	subs.w	fp, sl, r4
 8006b54:	d00b      	beq.n	8006b6e <_svfiprintf_r+0x7a>
 8006b56:	465b      	mov	r3, fp
 8006b58:	4622      	mov	r2, r4
 8006b5a:	4629      	mov	r1, r5
 8006b5c:	4638      	mov	r0, r7
 8006b5e:	f7ff ff6d 	bl	8006a3c <__ssputs_r>
 8006b62:	3001      	adds	r0, #1
 8006b64:	f000 80aa 	beq.w	8006cbc <_svfiprintf_r+0x1c8>
 8006b68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b6a:	445a      	add	r2, fp
 8006b6c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 80a2 	beq.w	8006cbc <_svfiprintf_r+0x1c8>
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b82:	f10a 0a01 	add.w	sl, sl, #1
 8006b86:	9304      	str	r3, [sp, #16]
 8006b88:	9307      	str	r3, [sp, #28]
 8006b8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b8e:	931a      	str	r3, [sp, #104]	; 0x68
 8006b90:	4654      	mov	r4, sl
 8006b92:	2205      	movs	r2, #5
 8006b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b98:	4851      	ldr	r0, [pc, #324]	; (8006ce0 <_svfiprintf_r+0x1ec>)
 8006b9a:	f7f9 fb21 	bl	80001e0 <memchr>
 8006b9e:	9a04      	ldr	r2, [sp, #16]
 8006ba0:	b9d8      	cbnz	r0, 8006bda <_svfiprintf_r+0xe6>
 8006ba2:	06d0      	lsls	r0, r2, #27
 8006ba4:	bf44      	itt	mi
 8006ba6:	2320      	movmi	r3, #32
 8006ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bac:	0711      	lsls	r1, r2, #28
 8006bae:	bf44      	itt	mi
 8006bb0:	232b      	movmi	r3, #43	; 0x2b
 8006bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8006bba:	2b2a      	cmp	r3, #42	; 0x2a
 8006bbc:	d015      	beq.n	8006bea <_svfiprintf_r+0xf6>
 8006bbe:	9a07      	ldr	r2, [sp, #28]
 8006bc0:	4654      	mov	r4, sl
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	f04f 0c0a 	mov.w	ip, #10
 8006bc8:	4621      	mov	r1, r4
 8006bca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bce:	3b30      	subs	r3, #48	; 0x30
 8006bd0:	2b09      	cmp	r3, #9
 8006bd2:	d94e      	bls.n	8006c72 <_svfiprintf_r+0x17e>
 8006bd4:	b1b0      	cbz	r0, 8006c04 <_svfiprintf_r+0x110>
 8006bd6:	9207      	str	r2, [sp, #28]
 8006bd8:	e014      	b.n	8006c04 <_svfiprintf_r+0x110>
 8006bda:	eba0 0308 	sub.w	r3, r0, r8
 8006bde:	fa09 f303 	lsl.w	r3, r9, r3
 8006be2:	4313      	orrs	r3, r2
 8006be4:	9304      	str	r3, [sp, #16]
 8006be6:	46a2      	mov	sl, r4
 8006be8:	e7d2      	b.n	8006b90 <_svfiprintf_r+0x9c>
 8006bea:	9b03      	ldr	r3, [sp, #12]
 8006bec:	1d19      	adds	r1, r3, #4
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	9103      	str	r1, [sp, #12]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	bfbb      	ittet	lt
 8006bf6:	425b      	neglt	r3, r3
 8006bf8:	f042 0202 	orrlt.w	r2, r2, #2
 8006bfc:	9307      	strge	r3, [sp, #28]
 8006bfe:	9307      	strlt	r3, [sp, #28]
 8006c00:	bfb8      	it	lt
 8006c02:	9204      	strlt	r2, [sp, #16]
 8006c04:	7823      	ldrb	r3, [r4, #0]
 8006c06:	2b2e      	cmp	r3, #46	; 0x2e
 8006c08:	d10c      	bne.n	8006c24 <_svfiprintf_r+0x130>
 8006c0a:	7863      	ldrb	r3, [r4, #1]
 8006c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8006c0e:	d135      	bne.n	8006c7c <_svfiprintf_r+0x188>
 8006c10:	9b03      	ldr	r3, [sp, #12]
 8006c12:	1d1a      	adds	r2, r3, #4
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	9203      	str	r2, [sp, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	bfb8      	it	lt
 8006c1c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006c20:	3402      	adds	r4, #2
 8006c22:	9305      	str	r3, [sp, #20]
 8006c24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006cf0 <_svfiprintf_r+0x1fc>
 8006c28:	7821      	ldrb	r1, [r4, #0]
 8006c2a:	2203      	movs	r2, #3
 8006c2c:	4650      	mov	r0, sl
 8006c2e:	f7f9 fad7 	bl	80001e0 <memchr>
 8006c32:	b140      	cbz	r0, 8006c46 <_svfiprintf_r+0x152>
 8006c34:	2340      	movs	r3, #64	; 0x40
 8006c36:	eba0 000a 	sub.w	r0, r0, sl
 8006c3a:	fa03 f000 	lsl.w	r0, r3, r0
 8006c3e:	9b04      	ldr	r3, [sp, #16]
 8006c40:	4303      	orrs	r3, r0
 8006c42:	3401      	adds	r4, #1
 8006c44:	9304      	str	r3, [sp, #16]
 8006c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c4a:	4826      	ldr	r0, [pc, #152]	; (8006ce4 <_svfiprintf_r+0x1f0>)
 8006c4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c50:	2206      	movs	r2, #6
 8006c52:	f7f9 fac5 	bl	80001e0 <memchr>
 8006c56:	2800      	cmp	r0, #0
 8006c58:	d038      	beq.n	8006ccc <_svfiprintf_r+0x1d8>
 8006c5a:	4b23      	ldr	r3, [pc, #140]	; (8006ce8 <_svfiprintf_r+0x1f4>)
 8006c5c:	bb1b      	cbnz	r3, 8006ca6 <_svfiprintf_r+0x1b2>
 8006c5e:	9b03      	ldr	r3, [sp, #12]
 8006c60:	3307      	adds	r3, #7
 8006c62:	f023 0307 	bic.w	r3, r3, #7
 8006c66:	3308      	adds	r3, #8
 8006c68:	9303      	str	r3, [sp, #12]
 8006c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c6c:	4433      	add	r3, r6
 8006c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c70:	e767      	b.n	8006b42 <_svfiprintf_r+0x4e>
 8006c72:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c76:	460c      	mov	r4, r1
 8006c78:	2001      	movs	r0, #1
 8006c7a:	e7a5      	b.n	8006bc8 <_svfiprintf_r+0xd4>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	3401      	adds	r4, #1
 8006c80:	9305      	str	r3, [sp, #20]
 8006c82:	4619      	mov	r1, r3
 8006c84:	f04f 0c0a 	mov.w	ip, #10
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c8e:	3a30      	subs	r2, #48	; 0x30
 8006c90:	2a09      	cmp	r2, #9
 8006c92:	d903      	bls.n	8006c9c <_svfiprintf_r+0x1a8>
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d0c5      	beq.n	8006c24 <_svfiprintf_r+0x130>
 8006c98:	9105      	str	r1, [sp, #20]
 8006c9a:	e7c3      	b.n	8006c24 <_svfiprintf_r+0x130>
 8006c9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ca0:	4604      	mov	r4, r0
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e7f0      	b.n	8006c88 <_svfiprintf_r+0x194>
 8006ca6:	ab03      	add	r3, sp, #12
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	462a      	mov	r2, r5
 8006cac:	4b0f      	ldr	r3, [pc, #60]	; (8006cec <_svfiprintf_r+0x1f8>)
 8006cae:	a904      	add	r1, sp, #16
 8006cb0:	4638      	mov	r0, r7
 8006cb2:	f7fd ffc9 	bl	8004c48 <_printf_float>
 8006cb6:	1c42      	adds	r2, r0, #1
 8006cb8:	4606      	mov	r6, r0
 8006cba:	d1d6      	bne.n	8006c6a <_svfiprintf_r+0x176>
 8006cbc:	89ab      	ldrh	r3, [r5, #12]
 8006cbe:	065b      	lsls	r3, r3, #25
 8006cc0:	f53f af2c 	bmi.w	8006b1c <_svfiprintf_r+0x28>
 8006cc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cc6:	b01d      	add	sp, #116	; 0x74
 8006cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ccc:	ab03      	add	r3, sp, #12
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	462a      	mov	r2, r5
 8006cd2:	4b06      	ldr	r3, [pc, #24]	; (8006cec <_svfiprintf_r+0x1f8>)
 8006cd4:	a904      	add	r1, sp, #16
 8006cd6:	4638      	mov	r0, r7
 8006cd8:	f7fe fa5a 	bl	8005190 <_printf_i>
 8006cdc:	e7eb      	b.n	8006cb6 <_svfiprintf_r+0x1c2>
 8006cde:	bf00      	nop
 8006ce0:	08007b8c 	.word	0x08007b8c
 8006ce4:	08007b96 	.word	0x08007b96
 8006ce8:	08004c49 	.word	0x08004c49
 8006cec:	08006a3d 	.word	0x08006a3d
 8006cf0:	08007b92 	.word	0x08007b92

08006cf4 <_sbrk_r>:
 8006cf4:	b538      	push	{r3, r4, r5, lr}
 8006cf6:	4d06      	ldr	r5, [pc, #24]	; (8006d10 <_sbrk_r+0x1c>)
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	4608      	mov	r0, r1
 8006cfe:	602b      	str	r3, [r5, #0]
 8006d00:	f7fa fc28 	bl	8001554 <_sbrk>
 8006d04:	1c43      	adds	r3, r0, #1
 8006d06:	d102      	bne.n	8006d0e <_sbrk_r+0x1a>
 8006d08:	682b      	ldr	r3, [r5, #0]
 8006d0a:	b103      	cbz	r3, 8006d0e <_sbrk_r+0x1a>
 8006d0c:	6023      	str	r3, [r4, #0]
 8006d0e:	bd38      	pop	{r3, r4, r5, pc}
 8006d10:	20000374 	.word	0x20000374

08006d14 <__assert_func>:
 8006d14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d16:	4614      	mov	r4, r2
 8006d18:	461a      	mov	r2, r3
 8006d1a:	4b09      	ldr	r3, [pc, #36]	; (8006d40 <__assert_func+0x2c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4605      	mov	r5, r0
 8006d20:	68d8      	ldr	r0, [r3, #12]
 8006d22:	b14c      	cbz	r4, 8006d38 <__assert_func+0x24>
 8006d24:	4b07      	ldr	r3, [pc, #28]	; (8006d44 <__assert_func+0x30>)
 8006d26:	9100      	str	r1, [sp, #0]
 8006d28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d2c:	4906      	ldr	r1, [pc, #24]	; (8006d48 <__assert_func+0x34>)
 8006d2e:	462b      	mov	r3, r5
 8006d30:	f000 f80e 	bl	8006d50 <fiprintf>
 8006d34:	f000 faac 	bl	8007290 <abort>
 8006d38:	4b04      	ldr	r3, [pc, #16]	; (8006d4c <__assert_func+0x38>)
 8006d3a:	461c      	mov	r4, r3
 8006d3c:	e7f3      	b.n	8006d26 <__assert_func+0x12>
 8006d3e:	bf00      	nop
 8006d40:	20000014 	.word	0x20000014
 8006d44:	08007b9d 	.word	0x08007b9d
 8006d48:	08007baa 	.word	0x08007baa
 8006d4c:	08007bd8 	.word	0x08007bd8

08006d50 <fiprintf>:
 8006d50:	b40e      	push	{r1, r2, r3}
 8006d52:	b503      	push	{r0, r1, lr}
 8006d54:	4601      	mov	r1, r0
 8006d56:	ab03      	add	r3, sp, #12
 8006d58:	4805      	ldr	r0, [pc, #20]	; (8006d70 <fiprintf+0x20>)
 8006d5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d5e:	6800      	ldr	r0, [r0, #0]
 8006d60:	9301      	str	r3, [sp, #4]
 8006d62:	f000 f897 	bl	8006e94 <_vfiprintf_r>
 8006d66:	b002      	add	sp, #8
 8006d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d6c:	b003      	add	sp, #12
 8006d6e:	4770      	bx	lr
 8006d70:	20000014 	.word	0x20000014

08006d74 <__ascii_mbtowc>:
 8006d74:	b082      	sub	sp, #8
 8006d76:	b901      	cbnz	r1, 8006d7a <__ascii_mbtowc+0x6>
 8006d78:	a901      	add	r1, sp, #4
 8006d7a:	b142      	cbz	r2, 8006d8e <__ascii_mbtowc+0x1a>
 8006d7c:	b14b      	cbz	r3, 8006d92 <__ascii_mbtowc+0x1e>
 8006d7e:	7813      	ldrb	r3, [r2, #0]
 8006d80:	600b      	str	r3, [r1, #0]
 8006d82:	7812      	ldrb	r2, [r2, #0]
 8006d84:	1e10      	subs	r0, r2, #0
 8006d86:	bf18      	it	ne
 8006d88:	2001      	movne	r0, #1
 8006d8a:	b002      	add	sp, #8
 8006d8c:	4770      	bx	lr
 8006d8e:	4610      	mov	r0, r2
 8006d90:	e7fb      	b.n	8006d8a <__ascii_mbtowc+0x16>
 8006d92:	f06f 0001 	mvn.w	r0, #1
 8006d96:	e7f8      	b.n	8006d8a <__ascii_mbtowc+0x16>

08006d98 <memmove>:
 8006d98:	4288      	cmp	r0, r1
 8006d9a:	b510      	push	{r4, lr}
 8006d9c:	eb01 0402 	add.w	r4, r1, r2
 8006da0:	d902      	bls.n	8006da8 <memmove+0x10>
 8006da2:	4284      	cmp	r4, r0
 8006da4:	4623      	mov	r3, r4
 8006da6:	d807      	bhi.n	8006db8 <memmove+0x20>
 8006da8:	1e43      	subs	r3, r0, #1
 8006daa:	42a1      	cmp	r1, r4
 8006dac:	d008      	beq.n	8006dc0 <memmove+0x28>
 8006dae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006db2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006db6:	e7f8      	b.n	8006daa <memmove+0x12>
 8006db8:	4402      	add	r2, r0
 8006dba:	4601      	mov	r1, r0
 8006dbc:	428a      	cmp	r2, r1
 8006dbe:	d100      	bne.n	8006dc2 <memmove+0x2a>
 8006dc0:	bd10      	pop	{r4, pc}
 8006dc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006dca:	e7f7      	b.n	8006dbc <memmove+0x24>

08006dcc <__malloc_lock>:
 8006dcc:	4801      	ldr	r0, [pc, #4]	; (8006dd4 <__malloc_lock+0x8>)
 8006dce:	f000 bc1f 	b.w	8007610 <__retarget_lock_acquire_recursive>
 8006dd2:	bf00      	nop
 8006dd4:	20000378 	.word	0x20000378

08006dd8 <__malloc_unlock>:
 8006dd8:	4801      	ldr	r0, [pc, #4]	; (8006de0 <__malloc_unlock+0x8>)
 8006dda:	f000 bc1a 	b.w	8007612 <__retarget_lock_release_recursive>
 8006dde:	bf00      	nop
 8006de0:	20000378 	.word	0x20000378

08006de4 <_realloc_r>:
 8006de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006de8:	4680      	mov	r8, r0
 8006dea:	4614      	mov	r4, r2
 8006dec:	460e      	mov	r6, r1
 8006dee:	b921      	cbnz	r1, 8006dfa <_realloc_r+0x16>
 8006df0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006df4:	4611      	mov	r1, r2
 8006df6:	f7ff bdad 	b.w	8006954 <_malloc_r>
 8006dfa:	b92a      	cbnz	r2, 8006e08 <_realloc_r+0x24>
 8006dfc:	f7ff fd3e 	bl	800687c <_free_r>
 8006e00:	4625      	mov	r5, r4
 8006e02:	4628      	mov	r0, r5
 8006e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e08:	f000 fc6a 	bl	80076e0 <_malloc_usable_size_r>
 8006e0c:	4284      	cmp	r4, r0
 8006e0e:	4607      	mov	r7, r0
 8006e10:	d802      	bhi.n	8006e18 <_realloc_r+0x34>
 8006e12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e16:	d812      	bhi.n	8006e3e <_realloc_r+0x5a>
 8006e18:	4621      	mov	r1, r4
 8006e1a:	4640      	mov	r0, r8
 8006e1c:	f7ff fd9a 	bl	8006954 <_malloc_r>
 8006e20:	4605      	mov	r5, r0
 8006e22:	2800      	cmp	r0, #0
 8006e24:	d0ed      	beq.n	8006e02 <_realloc_r+0x1e>
 8006e26:	42bc      	cmp	r4, r7
 8006e28:	4622      	mov	r2, r4
 8006e2a:	4631      	mov	r1, r6
 8006e2c:	bf28      	it	cs
 8006e2e:	463a      	movcs	r2, r7
 8006e30:	f7ff f97c 	bl	800612c <memcpy>
 8006e34:	4631      	mov	r1, r6
 8006e36:	4640      	mov	r0, r8
 8006e38:	f7ff fd20 	bl	800687c <_free_r>
 8006e3c:	e7e1      	b.n	8006e02 <_realloc_r+0x1e>
 8006e3e:	4635      	mov	r5, r6
 8006e40:	e7df      	b.n	8006e02 <_realloc_r+0x1e>

08006e42 <__sfputc_r>:
 8006e42:	6893      	ldr	r3, [r2, #8]
 8006e44:	3b01      	subs	r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	b410      	push	{r4}
 8006e4a:	6093      	str	r3, [r2, #8]
 8006e4c:	da08      	bge.n	8006e60 <__sfputc_r+0x1e>
 8006e4e:	6994      	ldr	r4, [r2, #24]
 8006e50:	42a3      	cmp	r3, r4
 8006e52:	db01      	blt.n	8006e58 <__sfputc_r+0x16>
 8006e54:	290a      	cmp	r1, #10
 8006e56:	d103      	bne.n	8006e60 <__sfputc_r+0x1e>
 8006e58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e5c:	f000 b94a 	b.w	80070f4 <__swbuf_r>
 8006e60:	6813      	ldr	r3, [r2, #0]
 8006e62:	1c58      	adds	r0, r3, #1
 8006e64:	6010      	str	r0, [r2, #0]
 8006e66:	7019      	strb	r1, [r3, #0]
 8006e68:	4608      	mov	r0, r1
 8006e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <__sfputs_r>:
 8006e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e72:	4606      	mov	r6, r0
 8006e74:	460f      	mov	r7, r1
 8006e76:	4614      	mov	r4, r2
 8006e78:	18d5      	adds	r5, r2, r3
 8006e7a:	42ac      	cmp	r4, r5
 8006e7c:	d101      	bne.n	8006e82 <__sfputs_r+0x12>
 8006e7e:	2000      	movs	r0, #0
 8006e80:	e007      	b.n	8006e92 <__sfputs_r+0x22>
 8006e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e86:	463a      	mov	r2, r7
 8006e88:	4630      	mov	r0, r6
 8006e8a:	f7ff ffda 	bl	8006e42 <__sfputc_r>
 8006e8e:	1c43      	adds	r3, r0, #1
 8006e90:	d1f3      	bne.n	8006e7a <__sfputs_r+0xa>
 8006e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e94 <_vfiprintf_r>:
 8006e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e98:	460d      	mov	r5, r1
 8006e9a:	b09d      	sub	sp, #116	; 0x74
 8006e9c:	4614      	mov	r4, r2
 8006e9e:	4698      	mov	r8, r3
 8006ea0:	4606      	mov	r6, r0
 8006ea2:	b118      	cbz	r0, 8006eac <_vfiprintf_r+0x18>
 8006ea4:	6983      	ldr	r3, [r0, #24]
 8006ea6:	b90b      	cbnz	r3, 8006eac <_vfiprintf_r+0x18>
 8006ea8:	f000 fb14 	bl	80074d4 <__sinit>
 8006eac:	4b89      	ldr	r3, [pc, #548]	; (80070d4 <_vfiprintf_r+0x240>)
 8006eae:	429d      	cmp	r5, r3
 8006eb0:	d11b      	bne.n	8006eea <_vfiprintf_r+0x56>
 8006eb2:	6875      	ldr	r5, [r6, #4]
 8006eb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006eb6:	07d9      	lsls	r1, r3, #31
 8006eb8:	d405      	bmi.n	8006ec6 <_vfiprintf_r+0x32>
 8006eba:	89ab      	ldrh	r3, [r5, #12]
 8006ebc:	059a      	lsls	r2, r3, #22
 8006ebe:	d402      	bmi.n	8006ec6 <_vfiprintf_r+0x32>
 8006ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ec2:	f000 fba5 	bl	8007610 <__retarget_lock_acquire_recursive>
 8006ec6:	89ab      	ldrh	r3, [r5, #12]
 8006ec8:	071b      	lsls	r3, r3, #28
 8006eca:	d501      	bpl.n	8006ed0 <_vfiprintf_r+0x3c>
 8006ecc:	692b      	ldr	r3, [r5, #16]
 8006ece:	b9eb      	cbnz	r3, 8006f0c <_vfiprintf_r+0x78>
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	f000 f96e 	bl	80071b4 <__swsetup_r>
 8006ed8:	b1c0      	cbz	r0, 8006f0c <_vfiprintf_r+0x78>
 8006eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006edc:	07dc      	lsls	r4, r3, #31
 8006ede:	d50e      	bpl.n	8006efe <_vfiprintf_r+0x6a>
 8006ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ee4:	b01d      	add	sp, #116	; 0x74
 8006ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eea:	4b7b      	ldr	r3, [pc, #492]	; (80070d8 <_vfiprintf_r+0x244>)
 8006eec:	429d      	cmp	r5, r3
 8006eee:	d101      	bne.n	8006ef4 <_vfiprintf_r+0x60>
 8006ef0:	68b5      	ldr	r5, [r6, #8]
 8006ef2:	e7df      	b.n	8006eb4 <_vfiprintf_r+0x20>
 8006ef4:	4b79      	ldr	r3, [pc, #484]	; (80070dc <_vfiprintf_r+0x248>)
 8006ef6:	429d      	cmp	r5, r3
 8006ef8:	bf08      	it	eq
 8006efa:	68f5      	ldreq	r5, [r6, #12]
 8006efc:	e7da      	b.n	8006eb4 <_vfiprintf_r+0x20>
 8006efe:	89ab      	ldrh	r3, [r5, #12]
 8006f00:	0598      	lsls	r0, r3, #22
 8006f02:	d4ed      	bmi.n	8006ee0 <_vfiprintf_r+0x4c>
 8006f04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f06:	f000 fb84 	bl	8007612 <__retarget_lock_release_recursive>
 8006f0a:	e7e9      	b.n	8006ee0 <_vfiprintf_r+0x4c>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f10:	2320      	movs	r3, #32
 8006f12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f16:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f1a:	2330      	movs	r3, #48	; 0x30
 8006f1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80070e0 <_vfiprintf_r+0x24c>
 8006f20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f24:	f04f 0901 	mov.w	r9, #1
 8006f28:	4623      	mov	r3, r4
 8006f2a:	469a      	mov	sl, r3
 8006f2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f30:	b10a      	cbz	r2, 8006f36 <_vfiprintf_r+0xa2>
 8006f32:	2a25      	cmp	r2, #37	; 0x25
 8006f34:	d1f9      	bne.n	8006f2a <_vfiprintf_r+0x96>
 8006f36:	ebba 0b04 	subs.w	fp, sl, r4
 8006f3a:	d00b      	beq.n	8006f54 <_vfiprintf_r+0xc0>
 8006f3c:	465b      	mov	r3, fp
 8006f3e:	4622      	mov	r2, r4
 8006f40:	4629      	mov	r1, r5
 8006f42:	4630      	mov	r0, r6
 8006f44:	f7ff ff94 	bl	8006e70 <__sfputs_r>
 8006f48:	3001      	adds	r0, #1
 8006f4a:	f000 80aa 	beq.w	80070a2 <_vfiprintf_r+0x20e>
 8006f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f50:	445a      	add	r2, fp
 8006f52:	9209      	str	r2, [sp, #36]	; 0x24
 8006f54:	f89a 3000 	ldrb.w	r3, [sl]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 80a2 	beq.w	80070a2 <_vfiprintf_r+0x20e>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f68:	f10a 0a01 	add.w	sl, sl, #1
 8006f6c:	9304      	str	r3, [sp, #16]
 8006f6e:	9307      	str	r3, [sp, #28]
 8006f70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f74:	931a      	str	r3, [sp, #104]	; 0x68
 8006f76:	4654      	mov	r4, sl
 8006f78:	2205      	movs	r2, #5
 8006f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f7e:	4858      	ldr	r0, [pc, #352]	; (80070e0 <_vfiprintf_r+0x24c>)
 8006f80:	f7f9 f92e 	bl	80001e0 <memchr>
 8006f84:	9a04      	ldr	r2, [sp, #16]
 8006f86:	b9d8      	cbnz	r0, 8006fc0 <_vfiprintf_r+0x12c>
 8006f88:	06d1      	lsls	r1, r2, #27
 8006f8a:	bf44      	itt	mi
 8006f8c:	2320      	movmi	r3, #32
 8006f8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f92:	0713      	lsls	r3, r2, #28
 8006f94:	bf44      	itt	mi
 8006f96:	232b      	movmi	r3, #43	; 0x2b
 8006f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8006fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8006fa2:	d015      	beq.n	8006fd0 <_vfiprintf_r+0x13c>
 8006fa4:	9a07      	ldr	r2, [sp, #28]
 8006fa6:	4654      	mov	r4, sl
 8006fa8:	2000      	movs	r0, #0
 8006faa:	f04f 0c0a 	mov.w	ip, #10
 8006fae:	4621      	mov	r1, r4
 8006fb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fb4:	3b30      	subs	r3, #48	; 0x30
 8006fb6:	2b09      	cmp	r3, #9
 8006fb8:	d94e      	bls.n	8007058 <_vfiprintf_r+0x1c4>
 8006fba:	b1b0      	cbz	r0, 8006fea <_vfiprintf_r+0x156>
 8006fbc:	9207      	str	r2, [sp, #28]
 8006fbe:	e014      	b.n	8006fea <_vfiprintf_r+0x156>
 8006fc0:	eba0 0308 	sub.w	r3, r0, r8
 8006fc4:	fa09 f303 	lsl.w	r3, r9, r3
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	9304      	str	r3, [sp, #16]
 8006fcc:	46a2      	mov	sl, r4
 8006fce:	e7d2      	b.n	8006f76 <_vfiprintf_r+0xe2>
 8006fd0:	9b03      	ldr	r3, [sp, #12]
 8006fd2:	1d19      	adds	r1, r3, #4
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	9103      	str	r1, [sp, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	bfbb      	ittet	lt
 8006fdc:	425b      	neglt	r3, r3
 8006fde:	f042 0202 	orrlt.w	r2, r2, #2
 8006fe2:	9307      	strge	r3, [sp, #28]
 8006fe4:	9307      	strlt	r3, [sp, #28]
 8006fe6:	bfb8      	it	lt
 8006fe8:	9204      	strlt	r2, [sp, #16]
 8006fea:	7823      	ldrb	r3, [r4, #0]
 8006fec:	2b2e      	cmp	r3, #46	; 0x2e
 8006fee:	d10c      	bne.n	800700a <_vfiprintf_r+0x176>
 8006ff0:	7863      	ldrb	r3, [r4, #1]
 8006ff2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ff4:	d135      	bne.n	8007062 <_vfiprintf_r+0x1ce>
 8006ff6:	9b03      	ldr	r3, [sp, #12]
 8006ff8:	1d1a      	adds	r2, r3, #4
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	9203      	str	r2, [sp, #12]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	bfb8      	it	lt
 8007002:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007006:	3402      	adds	r4, #2
 8007008:	9305      	str	r3, [sp, #20]
 800700a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80070f0 <_vfiprintf_r+0x25c>
 800700e:	7821      	ldrb	r1, [r4, #0]
 8007010:	2203      	movs	r2, #3
 8007012:	4650      	mov	r0, sl
 8007014:	f7f9 f8e4 	bl	80001e0 <memchr>
 8007018:	b140      	cbz	r0, 800702c <_vfiprintf_r+0x198>
 800701a:	2340      	movs	r3, #64	; 0x40
 800701c:	eba0 000a 	sub.w	r0, r0, sl
 8007020:	fa03 f000 	lsl.w	r0, r3, r0
 8007024:	9b04      	ldr	r3, [sp, #16]
 8007026:	4303      	orrs	r3, r0
 8007028:	3401      	adds	r4, #1
 800702a:	9304      	str	r3, [sp, #16]
 800702c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007030:	482c      	ldr	r0, [pc, #176]	; (80070e4 <_vfiprintf_r+0x250>)
 8007032:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007036:	2206      	movs	r2, #6
 8007038:	f7f9 f8d2 	bl	80001e0 <memchr>
 800703c:	2800      	cmp	r0, #0
 800703e:	d03f      	beq.n	80070c0 <_vfiprintf_r+0x22c>
 8007040:	4b29      	ldr	r3, [pc, #164]	; (80070e8 <_vfiprintf_r+0x254>)
 8007042:	bb1b      	cbnz	r3, 800708c <_vfiprintf_r+0x1f8>
 8007044:	9b03      	ldr	r3, [sp, #12]
 8007046:	3307      	adds	r3, #7
 8007048:	f023 0307 	bic.w	r3, r3, #7
 800704c:	3308      	adds	r3, #8
 800704e:	9303      	str	r3, [sp, #12]
 8007050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007052:	443b      	add	r3, r7
 8007054:	9309      	str	r3, [sp, #36]	; 0x24
 8007056:	e767      	b.n	8006f28 <_vfiprintf_r+0x94>
 8007058:	fb0c 3202 	mla	r2, ip, r2, r3
 800705c:	460c      	mov	r4, r1
 800705e:	2001      	movs	r0, #1
 8007060:	e7a5      	b.n	8006fae <_vfiprintf_r+0x11a>
 8007062:	2300      	movs	r3, #0
 8007064:	3401      	adds	r4, #1
 8007066:	9305      	str	r3, [sp, #20]
 8007068:	4619      	mov	r1, r3
 800706a:	f04f 0c0a 	mov.w	ip, #10
 800706e:	4620      	mov	r0, r4
 8007070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007074:	3a30      	subs	r2, #48	; 0x30
 8007076:	2a09      	cmp	r2, #9
 8007078:	d903      	bls.n	8007082 <_vfiprintf_r+0x1ee>
 800707a:	2b00      	cmp	r3, #0
 800707c:	d0c5      	beq.n	800700a <_vfiprintf_r+0x176>
 800707e:	9105      	str	r1, [sp, #20]
 8007080:	e7c3      	b.n	800700a <_vfiprintf_r+0x176>
 8007082:	fb0c 2101 	mla	r1, ip, r1, r2
 8007086:	4604      	mov	r4, r0
 8007088:	2301      	movs	r3, #1
 800708a:	e7f0      	b.n	800706e <_vfiprintf_r+0x1da>
 800708c:	ab03      	add	r3, sp, #12
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	462a      	mov	r2, r5
 8007092:	4b16      	ldr	r3, [pc, #88]	; (80070ec <_vfiprintf_r+0x258>)
 8007094:	a904      	add	r1, sp, #16
 8007096:	4630      	mov	r0, r6
 8007098:	f7fd fdd6 	bl	8004c48 <_printf_float>
 800709c:	4607      	mov	r7, r0
 800709e:	1c78      	adds	r0, r7, #1
 80070a0:	d1d6      	bne.n	8007050 <_vfiprintf_r+0x1bc>
 80070a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070a4:	07d9      	lsls	r1, r3, #31
 80070a6:	d405      	bmi.n	80070b4 <_vfiprintf_r+0x220>
 80070a8:	89ab      	ldrh	r3, [r5, #12]
 80070aa:	059a      	lsls	r2, r3, #22
 80070ac:	d402      	bmi.n	80070b4 <_vfiprintf_r+0x220>
 80070ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070b0:	f000 faaf 	bl	8007612 <__retarget_lock_release_recursive>
 80070b4:	89ab      	ldrh	r3, [r5, #12]
 80070b6:	065b      	lsls	r3, r3, #25
 80070b8:	f53f af12 	bmi.w	8006ee0 <_vfiprintf_r+0x4c>
 80070bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070be:	e711      	b.n	8006ee4 <_vfiprintf_r+0x50>
 80070c0:	ab03      	add	r3, sp, #12
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	462a      	mov	r2, r5
 80070c6:	4b09      	ldr	r3, [pc, #36]	; (80070ec <_vfiprintf_r+0x258>)
 80070c8:	a904      	add	r1, sp, #16
 80070ca:	4630      	mov	r0, r6
 80070cc:	f7fe f860 	bl	8005190 <_printf_i>
 80070d0:	e7e4      	b.n	800709c <_vfiprintf_r+0x208>
 80070d2:	bf00      	nop
 80070d4:	08007d04 	.word	0x08007d04
 80070d8:	08007d24 	.word	0x08007d24
 80070dc:	08007ce4 	.word	0x08007ce4
 80070e0:	08007b8c 	.word	0x08007b8c
 80070e4:	08007b96 	.word	0x08007b96
 80070e8:	08004c49 	.word	0x08004c49
 80070ec:	08006e71 	.word	0x08006e71
 80070f0:	08007b92 	.word	0x08007b92

080070f4 <__swbuf_r>:
 80070f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f6:	460e      	mov	r6, r1
 80070f8:	4614      	mov	r4, r2
 80070fa:	4605      	mov	r5, r0
 80070fc:	b118      	cbz	r0, 8007106 <__swbuf_r+0x12>
 80070fe:	6983      	ldr	r3, [r0, #24]
 8007100:	b90b      	cbnz	r3, 8007106 <__swbuf_r+0x12>
 8007102:	f000 f9e7 	bl	80074d4 <__sinit>
 8007106:	4b21      	ldr	r3, [pc, #132]	; (800718c <__swbuf_r+0x98>)
 8007108:	429c      	cmp	r4, r3
 800710a:	d12b      	bne.n	8007164 <__swbuf_r+0x70>
 800710c:	686c      	ldr	r4, [r5, #4]
 800710e:	69a3      	ldr	r3, [r4, #24]
 8007110:	60a3      	str	r3, [r4, #8]
 8007112:	89a3      	ldrh	r3, [r4, #12]
 8007114:	071a      	lsls	r2, r3, #28
 8007116:	d52f      	bpl.n	8007178 <__swbuf_r+0x84>
 8007118:	6923      	ldr	r3, [r4, #16]
 800711a:	b36b      	cbz	r3, 8007178 <__swbuf_r+0x84>
 800711c:	6923      	ldr	r3, [r4, #16]
 800711e:	6820      	ldr	r0, [r4, #0]
 8007120:	1ac0      	subs	r0, r0, r3
 8007122:	6963      	ldr	r3, [r4, #20]
 8007124:	b2f6      	uxtb	r6, r6
 8007126:	4283      	cmp	r3, r0
 8007128:	4637      	mov	r7, r6
 800712a:	dc04      	bgt.n	8007136 <__swbuf_r+0x42>
 800712c:	4621      	mov	r1, r4
 800712e:	4628      	mov	r0, r5
 8007130:	f000 f93c 	bl	80073ac <_fflush_r>
 8007134:	bb30      	cbnz	r0, 8007184 <__swbuf_r+0x90>
 8007136:	68a3      	ldr	r3, [r4, #8]
 8007138:	3b01      	subs	r3, #1
 800713a:	60a3      	str	r3, [r4, #8]
 800713c:	6823      	ldr	r3, [r4, #0]
 800713e:	1c5a      	adds	r2, r3, #1
 8007140:	6022      	str	r2, [r4, #0]
 8007142:	701e      	strb	r6, [r3, #0]
 8007144:	6963      	ldr	r3, [r4, #20]
 8007146:	3001      	adds	r0, #1
 8007148:	4283      	cmp	r3, r0
 800714a:	d004      	beq.n	8007156 <__swbuf_r+0x62>
 800714c:	89a3      	ldrh	r3, [r4, #12]
 800714e:	07db      	lsls	r3, r3, #31
 8007150:	d506      	bpl.n	8007160 <__swbuf_r+0x6c>
 8007152:	2e0a      	cmp	r6, #10
 8007154:	d104      	bne.n	8007160 <__swbuf_r+0x6c>
 8007156:	4621      	mov	r1, r4
 8007158:	4628      	mov	r0, r5
 800715a:	f000 f927 	bl	80073ac <_fflush_r>
 800715e:	b988      	cbnz	r0, 8007184 <__swbuf_r+0x90>
 8007160:	4638      	mov	r0, r7
 8007162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007164:	4b0a      	ldr	r3, [pc, #40]	; (8007190 <__swbuf_r+0x9c>)
 8007166:	429c      	cmp	r4, r3
 8007168:	d101      	bne.n	800716e <__swbuf_r+0x7a>
 800716a:	68ac      	ldr	r4, [r5, #8]
 800716c:	e7cf      	b.n	800710e <__swbuf_r+0x1a>
 800716e:	4b09      	ldr	r3, [pc, #36]	; (8007194 <__swbuf_r+0xa0>)
 8007170:	429c      	cmp	r4, r3
 8007172:	bf08      	it	eq
 8007174:	68ec      	ldreq	r4, [r5, #12]
 8007176:	e7ca      	b.n	800710e <__swbuf_r+0x1a>
 8007178:	4621      	mov	r1, r4
 800717a:	4628      	mov	r0, r5
 800717c:	f000 f81a 	bl	80071b4 <__swsetup_r>
 8007180:	2800      	cmp	r0, #0
 8007182:	d0cb      	beq.n	800711c <__swbuf_r+0x28>
 8007184:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007188:	e7ea      	b.n	8007160 <__swbuf_r+0x6c>
 800718a:	bf00      	nop
 800718c:	08007d04 	.word	0x08007d04
 8007190:	08007d24 	.word	0x08007d24
 8007194:	08007ce4 	.word	0x08007ce4

08007198 <__ascii_wctomb>:
 8007198:	b149      	cbz	r1, 80071ae <__ascii_wctomb+0x16>
 800719a:	2aff      	cmp	r2, #255	; 0xff
 800719c:	bf85      	ittet	hi
 800719e:	238a      	movhi	r3, #138	; 0x8a
 80071a0:	6003      	strhi	r3, [r0, #0]
 80071a2:	700a      	strbls	r2, [r1, #0]
 80071a4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80071a8:	bf98      	it	ls
 80071aa:	2001      	movls	r0, #1
 80071ac:	4770      	bx	lr
 80071ae:	4608      	mov	r0, r1
 80071b0:	4770      	bx	lr
	...

080071b4 <__swsetup_r>:
 80071b4:	4b32      	ldr	r3, [pc, #200]	; (8007280 <__swsetup_r+0xcc>)
 80071b6:	b570      	push	{r4, r5, r6, lr}
 80071b8:	681d      	ldr	r5, [r3, #0]
 80071ba:	4606      	mov	r6, r0
 80071bc:	460c      	mov	r4, r1
 80071be:	b125      	cbz	r5, 80071ca <__swsetup_r+0x16>
 80071c0:	69ab      	ldr	r3, [r5, #24]
 80071c2:	b913      	cbnz	r3, 80071ca <__swsetup_r+0x16>
 80071c4:	4628      	mov	r0, r5
 80071c6:	f000 f985 	bl	80074d4 <__sinit>
 80071ca:	4b2e      	ldr	r3, [pc, #184]	; (8007284 <__swsetup_r+0xd0>)
 80071cc:	429c      	cmp	r4, r3
 80071ce:	d10f      	bne.n	80071f0 <__swsetup_r+0x3c>
 80071d0:	686c      	ldr	r4, [r5, #4]
 80071d2:	89a3      	ldrh	r3, [r4, #12]
 80071d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071d8:	0719      	lsls	r1, r3, #28
 80071da:	d42c      	bmi.n	8007236 <__swsetup_r+0x82>
 80071dc:	06dd      	lsls	r5, r3, #27
 80071de:	d411      	bmi.n	8007204 <__swsetup_r+0x50>
 80071e0:	2309      	movs	r3, #9
 80071e2:	6033      	str	r3, [r6, #0]
 80071e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80071e8:	81a3      	strh	r3, [r4, #12]
 80071ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071ee:	e03e      	b.n	800726e <__swsetup_r+0xba>
 80071f0:	4b25      	ldr	r3, [pc, #148]	; (8007288 <__swsetup_r+0xd4>)
 80071f2:	429c      	cmp	r4, r3
 80071f4:	d101      	bne.n	80071fa <__swsetup_r+0x46>
 80071f6:	68ac      	ldr	r4, [r5, #8]
 80071f8:	e7eb      	b.n	80071d2 <__swsetup_r+0x1e>
 80071fa:	4b24      	ldr	r3, [pc, #144]	; (800728c <__swsetup_r+0xd8>)
 80071fc:	429c      	cmp	r4, r3
 80071fe:	bf08      	it	eq
 8007200:	68ec      	ldreq	r4, [r5, #12]
 8007202:	e7e6      	b.n	80071d2 <__swsetup_r+0x1e>
 8007204:	0758      	lsls	r0, r3, #29
 8007206:	d512      	bpl.n	800722e <__swsetup_r+0x7a>
 8007208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800720a:	b141      	cbz	r1, 800721e <__swsetup_r+0x6a>
 800720c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007210:	4299      	cmp	r1, r3
 8007212:	d002      	beq.n	800721a <__swsetup_r+0x66>
 8007214:	4630      	mov	r0, r6
 8007216:	f7ff fb31 	bl	800687c <_free_r>
 800721a:	2300      	movs	r3, #0
 800721c:	6363      	str	r3, [r4, #52]	; 0x34
 800721e:	89a3      	ldrh	r3, [r4, #12]
 8007220:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007224:	81a3      	strh	r3, [r4, #12]
 8007226:	2300      	movs	r3, #0
 8007228:	6063      	str	r3, [r4, #4]
 800722a:	6923      	ldr	r3, [r4, #16]
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	89a3      	ldrh	r3, [r4, #12]
 8007230:	f043 0308 	orr.w	r3, r3, #8
 8007234:	81a3      	strh	r3, [r4, #12]
 8007236:	6923      	ldr	r3, [r4, #16]
 8007238:	b94b      	cbnz	r3, 800724e <__swsetup_r+0x9a>
 800723a:	89a3      	ldrh	r3, [r4, #12]
 800723c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007244:	d003      	beq.n	800724e <__swsetup_r+0x9a>
 8007246:	4621      	mov	r1, r4
 8007248:	4630      	mov	r0, r6
 800724a:	f000 fa09 	bl	8007660 <__smakebuf_r>
 800724e:	89a0      	ldrh	r0, [r4, #12]
 8007250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007254:	f010 0301 	ands.w	r3, r0, #1
 8007258:	d00a      	beq.n	8007270 <__swsetup_r+0xbc>
 800725a:	2300      	movs	r3, #0
 800725c:	60a3      	str	r3, [r4, #8]
 800725e:	6963      	ldr	r3, [r4, #20]
 8007260:	425b      	negs	r3, r3
 8007262:	61a3      	str	r3, [r4, #24]
 8007264:	6923      	ldr	r3, [r4, #16]
 8007266:	b943      	cbnz	r3, 800727a <__swsetup_r+0xc6>
 8007268:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800726c:	d1ba      	bne.n	80071e4 <__swsetup_r+0x30>
 800726e:	bd70      	pop	{r4, r5, r6, pc}
 8007270:	0781      	lsls	r1, r0, #30
 8007272:	bf58      	it	pl
 8007274:	6963      	ldrpl	r3, [r4, #20]
 8007276:	60a3      	str	r3, [r4, #8]
 8007278:	e7f4      	b.n	8007264 <__swsetup_r+0xb0>
 800727a:	2000      	movs	r0, #0
 800727c:	e7f7      	b.n	800726e <__swsetup_r+0xba>
 800727e:	bf00      	nop
 8007280:	20000014 	.word	0x20000014
 8007284:	08007d04 	.word	0x08007d04
 8007288:	08007d24 	.word	0x08007d24
 800728c:	08007ce4 	.word	0x08007ce4

08007290 <abort>:
 8007290:	b508      	push	{r3, lr}
 8007292:	2006      	movs	r0, #6
 8007294:	f000 fa54 	bl	8007740 <raise>
 8007298:	2001      	movs	r0, #1
 800729a:	f7fa f8e3 	bl	8001464 <_exit>
	...

080072a0 <__sflush_r>:
 80072a0:	898a      	ldrh	r2, [r1, #12]
 80072a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a6:	4605      	mov	r5, r0
 80072a8:	0710      	lsls	r0, r2, #28
 80072aa:	460c      	mov	r4, r1
 80072ac:	d458      	bmi.n	8007360 <__sflush_r+0xc0>
 80072ae:	684b      	ldr	r3, [r1, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	dc05      	bgt.n	80072c0 <__sflush_r+0x20>
 80072b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	dc02      	bgt.n	80072c0 <__sflush_r+0x20>
 80072ba:	2000      	movs	r0, #0
 80072bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072c2:	2e00      	cmp	r6, #0
 80072c4:	d0f9      	beq.n	80072ba <__sflush_r+0x1a>
 80072c6:	2300      	movs	r3, #0
 80072c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072cc:	682f      	ldr	r7, [r5, #0]
 80072ce:	602b      	str	r3, [r5, #0]
 80072d0:	d032      	beq.n	8007338 <__sflush_r+0x98>
 80072d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072d4:	89a3      	ldrh	r3, [r4, #12]
 80072d6:	075a      	lsls	r2, r3, #29
 80072d8:	d505      	bpl.n	80072e6 <__sflush_r+0x46>
 80072da:	6863      	ldr	r3, [r4, #4]
 80072dc:	1ac0      	subs	r0, r0, r3
 80072de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072e0:	b10b      	cbz	r3, 80072e6 <__sflush_r+0x46>
 80072e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072e4:	1ac0      	subs	r0, r0, r3
 80072e6:	2300      	movs	r3, #0
 80072e8:	4602      	mov	r2, r0
 80072ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072ec:	6a21      	ldr	r1, [r4, #32]
 80072ee:	4628      	mov	r0, r5
 80072f0:	47b0      	blx	r6
 80072f2:	1c43      	adds	r3, r0, #1
 80072f4:	89a3      	ldrh	r3, [r4, #12]
 80072f6:	d106      	bne.n	8007306 <__sflush_r+0x66>
 80072f8:	6829      	ldr	r1, [r5, #0]
 80072fa:	291d      	cmp	r1, #29
 80072fc:	d82c      	bhi.n	8007358 <__sflush_r+0xb8>
 80072fe:	4a2a      	ldr	r2, [pc, #168]	; (80073a8 <__sflush_r+0x108>)
 8007300:	40ca      	lsrs	r2, r1
 8007302:	07d6      	lsls	r6, r2, #31
 8007304:	d528      	bpl.n	8007358 <__sflush_r+0xb8>
 8007306:	2200      	movs	r2, #0
 8007308:	6062      	str	r2, [r4, #4]
 800730a:	04d9      	lsls	r1, r3, #19
 800730c:	6922      	ldr	r2, [r4, #16]
 800730e:	6022      	str	r2, [r4, #0]
 8007310:	d504      	bpl.n	800731c <__sflush_r+0x7c>
 8007312:	1c42      	adds	r2, r0, #1
 8007314:	d101      	bne.n	800731a <__sflush_r+0x7a>
 8007316:	682b      	ldr	r3, [r5, #0]
 8007318:	b903      	cbnz	r3, 800731c <__sflush_r+0x7c>
 800731a:	6560      	str	r0, [r4, #84]	; 0x54
 800731c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800731e:	602f      	str	r7, [r5, #0]
 8007320:	2900      	cmp	r1, #0
 8007322:	d0ca      	beq.n	80072ba <__sflush_r+0x1a>
 8007324:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007328:	4299      	cmp	r1, r3
 800732a:	d002      	beq.n	8007332 <__sflush_r+0x92>
 800732c:	4628      	mov	r0, r5
 800732e:	f7ff faa5 	bl	800687c <_free_r>
 8007332:	2000      	movs	r0, #0
 8007334:	6360      	str	r0, [r4, #52]	; 0x34
 8007336:	e7c1      	b.n	80072bc <__sflush_r+0x1c>
 8007338:	6a21      	ldr	r1, [r4, #32]
 800733a:	2301      	movs	r3, #1
 800733c:	4628      	mov	r0, r5
 800733e:	47b0      	blx	r6
 8007340:	1c41      	adds	r1, r0, #1
 8007342:	d1c7      	bne.n	80072d4 <__sflush_r+0x34>
 8007344:	682b      	ldr	r3, [r5, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d0c4      	beq.n	80072d4 <__sflush_r+0x34>
 800734a:	2b1d      	cmp	r3, #29
 800734c:	d001      	beq.n	8007352 <__sflush_r+0xb2>
 800734e:	2b16      	cmp	r3, #22
 8007350:	d101      	bne.n	8007356 <__sflush_r+0xb6>
 8007352:	602f      	str	r7, [r5, #0]
 8007354:	e7b1      	b.n	80072ba <__sflush_r+0x1a>
 8007356:	89a3      	ldrh	r3, [r4, #12]
 8007358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800735c:	81a3      	strh	r3, [r4, #12]
 800735e:	e7ad      	b.n	80072bc <__sflush_r+0x1c>
 8007360:	690f      	ldr	r7, [r1, #16]
 8007362:	2f00      	cmp	r7, #0
 8007364:	d0a9      	beq.n	80072ba <__sflush_r+0x1a>
 8007366:	0793      	lsls	r3, r2, #30
 8007368:	680e      	ldr	r6, [r1, #0]
 800736a:	bf08      	it	eq
 800736c:	694b      	ldreq	r3, [r1, #20]
 800736e:	600f      	str	r7, [r1, #0]
 8007370:	bf18      	it	ne
 8007372:	2300      	movne	r3, #0
 8007374:	eba6 0807 	sub.w	r8, r6, r7
 8007378:	608b      	str	r3, [r1, #8]
 800737a:	f1b8 0f00 	cmp.w	r8, #0
 800737e:	dd9c      	ble.n	80072ba <__sflush_r+0x1a>
 8007380:	6a21      	ldr	r1, [r4, #32]
 8007382:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007384:	4643      	mov	r3, r8
 8007386:	463a      	mov	r2, r7
 8007388:	4628      	mov	r0, r5
 800738a:	47b0      	blx	r6
 800738c:	2800      	cmp	r0, #0
 800738e:	dc06      	bgt.n	800739e <__sflush_r+0xfe>
 8007390:	89a3      	ldrh	r3, [r4, #12]
 8007392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007396:	81a3      	strh	r3, [r4, #12]
 8007398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800739c:	e78e      	b.n	80072bc <__sflush_r+0x1c>
 800739e:	4407      	add	r7, r0
 80073a0:	eba8 0800 	sub.w	r8, r8, r0
 80073a4:	e7e9      	b.n	800737a <__sflush_r+0xda>
 80073a6:	bf00      	nop
 80073a8:	20400001 	.word	0x20400001

080073ac <_fflush_r>:
 80073ac:	b538      	push	{r3, r4, r5, lr}
 80073ae:	690b      	ldr	r3, [r1, #16]
 80073b0:	4605      	mov	r5, r0
 80073b2:	460c      	mov	r4, r1
 80073b4:	b913      	cbnz	r3, 80073bc <_fflush_r+0x10>
 80073b6:	2500      	movs	r5, #0
 80073b8:	4628      	mov	r0, r5
 80073ba:	bd38      	pop	{r3, r4, r5, pc}
 80073bc:	b118      	cbz	r0, 80073c6 <_fflush_r+0x1a>
 80073be:	6983      	ldr	r3, [r0, #24]
 80073c0:	b90b      	cbnz	r3, 80073c6 <_fflush_r+0x1a>
 80073c2:	f000 f887 	bl	80074d4 <__sinit>
 80073c6:	4b14      	ldr	r3, [pc, #80]	; (8007418 <_fflush_r+0x6c>)
 80073c8:	429c      	cmp	r4, r3
 80073ca:	d11b      	bne.n	8007404 <_fflush_r+0x58>
 80073cc:	686c      	ldr	r4, [r5, #4]
 80073ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d0ef      	beq.n	80073b6 <_fflush_r+0xa>
 80073d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073d8:	07d0      	lsls	r0, r2, #31
 80073da:	d404      	bmi.n	80073e6 <_fflush_r+0x3a>
 80073dc:	0599      	lsls	r1, r3, #22
 80073de:	d402      	bmi.n	80073e6 <_fflush_r+0x3a>
 80073e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073e2:	f000 f915 	bl	8007610 <__retarget_lock_acquire_recursive>
 80073e6:	4628      	mov	r0, r5
 80073e8:	4621      	mov	r1, r4
 80073ea:	f7ff ff59 	bl	80072a0 <__sflush_r>
 80073ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073f0:	07da      	lsls	r2, r3, #31
 80073f2:	4605      	mov	r5, r0
 80073f4:	d4e0      	bmi.n	80073b8 <_fflush_r+0xc>
 80073f6:	89a3      	ldrh	r3, [r4, #12]
 80073f8:	059b      	lsls	r3, r3, #22
 80073fa:	d4dd      	bmi.n	80073b8 <_fflush_r+0xc>
 80073fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073fe:	f000 f908 	bl	8007612 <__retarget_lock_release_recursive>
 8007402:	e7d9      	b.n	80073b8 <_fflush_r+0xc>
 8007404:	4b05      	ldr	r3, [pc, #20]	; (800741c <_fflush_r+0x70>)
 8007406:	429c      	cmp	r4, r3
 8007408:	d101      	bne.n	800740e <_fflush_r+0x62>
 800740a:	68ac      	ldr	r4, [r5, #8]
 800740c:	e7df      	b.n	80073ce <_fflush_r+0x22>
 800740e:	4b04      	ldr	r3, [pc, #16]	; (8007420 <_fflush_r+0x74>)
 8007410:	429c      	cmp	r4, r3
 8007412:	bf08      	it	eq
 8007414:	68ec      	ldreq	r4, [r5, #12]
 8007416:	e7da      	b.n	80073ce <_fflush_r+0x22>
 8007418:	08007d04 	.word	0x08007d04
 800741c:	08007d24 	.word	0x08007d24
 8007420:	08007ce4 	.word	0x08007ce4

08007424 <std>:
 8007424:	2300      	movs	r3, #0
 8007426:	b510      	push	{r4, lr}
 8007428:	4604      	mov	r4, r0
 800742a:	e9c0 3300 	strd	r3, r3, [r0]
 800742e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007432:	6083      	str	r3, [r0, #8]
 8007434:	8181      	strh	r1, [r0, #12]
 8007436:	6643      	str	r3, [r0, #100]	; 0x64
 8007438:	81c2      	strh	r2, [r0, #14]
 800743a:	6183      	str	r3, [r0, #24]
 800743c:	4619      	mov	r1, r3
 800743e:	2208      	movs	r2, #8
 8007440:	305c      	adds	r0, #92	; 0x5c
 8007442:	f7fd fb59 	bl	8004af8 <memset>
 8007446:	4b05      	ldr	r3, [pc, #20]	; (800745c <std+0x38>)
 8007448:	6263      	str	r3, [r4, #36]	; 0x24
 800744a:	4b05      	ldr	r3, [pc, #20]	; (8007460 <std+0x3c>)
 800744c:	62a3      	str	r3, [r4, #40]	; 0x28
 800744e:	4b05      	ldr	r3, [pc, #20]	; (8007464 <std+0x40>)
 8007450:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007452:	4b05      	ldr	r3, [pc, #20]	; (8007468 <std+0x44>)
 8007454:	6224      	str	r4, [r4, #32]
 8007456:	6323      	str	r3, [r4, #48]	; 0x30
 8007458:	bd10      	pop	{r4, pc}
 800745a:	bf00      	nop
 800745c:	08007779 	.word	0x08007779
 8007460:	0800779b 	.word	0x0800779b
 8007464:	080077d3 	.word	0x080077d3
 8007468:	080077f7 	.word	0x080077f7

0800746c <_cleanup_r>:
 800746c:	4901      	ldr	r1, [pc, #4]	; (8007474 <_cleanup_r+0x8>)
 800746e:	f000 b8af 	b.w	80075d0 <_fwalk_reent>
 8007472:	bf00      	nop
 8007474:	080073ad 	.word	0x080073ad

08007478 <__sfmoreglue>:
 8007478:	b570      	push	{r4, r5, r6, lr}
 800747a:	2268      	movs	r2, #104	; 0x68
 800747c:	1e4d      	subs	r5, r1, #1
 800747e:	4355      	muls	r5, r2
 8007480:	460e      	mov	r6, r1
 8007482:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007486:	f7ff fa65 	bl	8006954 <_malloc_r>
 800748a:	4604      	mov	r4, r0
 800748c:	b140      	cbz	r0, 80074a0 <__sfmoreglue+0x28>
 800748e:	2100      	movs	r1, #0
 8007490:	e9c0 1600 	strd	r1, r6, [r0]
 8007494:	300c      	adds	r0, #12
 8007496:	60a0      	str	r0, [r4, #8]
 8007498:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800749c:	f7fd fb2c 	bl	8004af8 <memset>
 80074a0:	4620      	mov	r0, r4
 80074a2:	bd70      	pop	{r4, r5, r6, pc}

080074a4 <__sfp_lock_acquire>:
 80074a4:	4801      	ldr	r0, [pc, #4]	; (80074ac <__sfp_lock_acquire+0x8>)
 80074a6:	f000 b8b3 	b.w	8007610 <__retarget_lock_acquire_recursive>
 80074aa:	bf00      	nop
 80074ac:	20000379 	.word	0x20000379

080074b0 <__sfp_lock_release>:
 80074b0:	4801      	ldr	r0, [pc, #4]	; (80074b8 <__sfp_lock_release+0x8>)
 80074b2:	f000 b8ae 	b.w	8007612 <__retarget_lock_release_recursive>
 80074b6:	bf00      	nop
 80074b8:	20000379 	.word	0x20000379

080074bc <__sinit_lock_acquire>:
 80074bc:	4801      	ldr	r0, [pc, #4]	; (80074c4 <__sinit_lock_acquire+0x8>)
 80074be:	f000 b8a7 	b.w	8007610 <__retarget_lock_acquire_recursive>
 80074c2:	bf00      	nop
 80074c4:	2000037a 	.word	0x2000037a

080074c8 <__sinit_lock_release>:
 80074c8:	4801      	ldr	r0, [pc, #4]	; (80074d0 <__sinit_lock_release+0x8>)
 80074ca:	f000 b8a2 	b.w	8007612 <__retarget_lock_release_recursive>
 80074ce:	bf00      	nop
 80074d0:	2000037a 	.word	0x2000037a

080074d4 <__sinit>:
 80074d4:	b510      	push	{r4, lr}
 80074d6:	4604      	mov	r4, r0
 80074d8:	f7ff fff0 	bl	80074bc <__sinit_lock_acquire>
 80074dc:	69a3      	ldr	r3, [r4, #24]
 80074de:	b11b      	cbz	r3, 80074e8 <__sinit+0x14>
 80074e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074e4:	f7ff bff0 	b.w	80074c8 <__sinit_lock_release>
 80074e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80074ec:	6523      	str	r3, [r4, #80]	; 0x50
 80074ee:	4b13      	ldr	r3, [pc, #76]	; (800753c <__sinit+0x68>)
 80074f0:	4a13      	ldr	r2, [pc, #76]	; (8007540 <__sinit+0x6c>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80074f6:	42a3      	cmp	r3, r4
 80074f8:	bf04      	itt	eq
 80074fa:	2301      	moveq	r3, #1
 80074fc:	61a3      	streq	r3, [r4, #24]
 80074fe:	4620      	mov	r0, r4
 8007500:	f000 f820 	bl	8007544 <__sfp>
 8007504:	6060      	str	r0, [r4, #4]
 8007506:	4620      	mov	r0, r4
 8007508:	f000 f81c 	bl	8007544 <__sfp>
 800750c:	60a0      	str	r0, [r4, #8]
 800750e:	4620      	mov	r0, r4
 8007510:	f000 f818 	bl	8007544 <__sfp>
 8007514:	2200      	movs	r2, #0
 8007516:	60e0      	str	r0, [r4, #12]
 8007518:	2104      	movs	r1, #4
 800751a:	6860      	ldr	r0, [r4, #4]
 800751c:	f7ff ff82 	bl	8007424 <std>
 8007520:	68a0      	ldr	r0, [r4, #8]
 8007522:	2201      	movs	r2, #1
 8007524:	2109      	movs	r1, #9
 8007526:	f7ff ff7d 	bl	8007424 <std>
 800752a:	68e0      	ldr	r0, [r4, #12]
 800752c:	2202      	movs	r2, #2
 800752e:	2112      	movs	r1, #18
 8007530:	f7ff ff78 	bl	8007424 <std>
 8007534:	2301      	movs	r3, #1
 8007536:	61a3      	str	r3, [r4, #24]
 8007538:	e7d2      	b.n	80074e0 <__sinit+0xc>
 800753a:	bf00      	nop
 800753c:	08007968 	.word	0x08007968
 8007540:	0800746d 	.word	0x0800746d

08007544 <__sfp>:
 8007544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007546:	4607      	mov	r7, r0
 8007548:	f7ff ffac 	bl	80074a4 <__sfp_lock_acquire>
 800754c:	4b1e      	ldr	r3, [pc, #120]	; (80075c8 <__sfp+0x84>)
 800754e:	681e      	ldr	r6, [r3, #0]
 8007550:	69b3      	ldr	r3, [r6, #24]
 8007552:	b913      	cbnz	r3, 800755a <__sfp+0x16>
 8007554:	4630      	mov	r0, r6
 8007556:	f7ff ffbd 	bl	80074d4 <__sinit>
 800755a:	3648      	adds	r6, #72	; 0x48
 800755c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007560:	3b01      	subs	r3, #1
 8007562:	d503      	bpl.n	800756c <__sfp+0x28>
 8007564:	6833      	ldr	r3, [r6, #0]
 8007566:	b30b      	cbz	r3, 80075ac <__sfp+0x68>
 8007568:	6836      	ldr	r6, [r6, #0]
 800756a:	e7f7      	b.n	800755c <__sfp+0x18>
 800756c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007570:	b9d5      	cbnz	r5, 80075a8 <__sfp+0x64>
 8007572:	4b16      	ldr	r3, [pc, #88]	; (80075cc <__sfp+0x88>)
 8007574:	60e3      	str	r3, [r4, #12]
 8007576:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800757a:	6665      	str	r5, [r4, #100]	; 0x64
 800757c:	f000 f847 	bl	800760e <__retarget_lock_init_recursive>
 8007580:	f7ff ff96 	bl	80074b0 <__sfp_lock_release>
 8007584:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007588:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800758c:	6025      	str	r5, [r4, #0]
 800758e:	61a5      	str	r5, [r4, #24]
 8007590:	2208      	movs	r2, #8
 8007592:	4629      	mov	r1, r5
 8007594:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007598:	f7fd faae 	bl	8004af8 <memset>
 800759c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80075a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80075a4:	4620      	mov	r0, r4
 80075a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075a8:	3468      	adds	r4, #104	; 0x68
 80075aa:	e7d9      	b.n	8007560 <__sfp+0x1c>
 80075ac:	2104      	movs	r1, #4
 80075ae:	4638      	mov	r0, r7
 80075b0:	f7ff ff62 	bl	8007478 <__sfmoreglue>
 80075b4:	4604      	mov	r4, r0
 80075b6:	6030      	str	r0, [r6, #0]
 80075b8:	2800      	cmp	r0, #0
 80075ba:	d1d5      	bne.n	8007568 <__sfp+0x24>
 80075bc:	f7ff ff78 	bl	80074b0 <__sfp_lock_release>
 80075c0:	230c      	movs	r3, #12
 80075c2:	603b      	str	r3, [r7, #0]
 80075c4:	e7ee      	b.n	80075a4 <__sfp+0x60>
 80075c6:	bf00      	nop
 80075c8:	08007968 	.word	0x08007968
 80075cc:	ffff0001 	.word	0xffff0001

080075d0 <_fwalk_reent>:
 80075d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075d4:	4606      	mov	r6, r0
 80075d6:	4688      	mov	r8, r1
 80075d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80075dc:	2700      	movs	r7, #0
 80075de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075e2:	f1b9 0901 	subs.w	r9, r9, #1
 80075e6:	d505      	bpl.n	80075f4 <_fwalk_reent+0x24>
 80075e8:	6824      	ldr	r4, [r4, #0]
 80075ea:	2c00      	cmp	r4, #0
 80075ec:	d1f7      	bne.n	80075de <_fwalk_reent+0xe>
 80075ee:	4638      	mov	r0, r7
 80075f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075f4:	89ab      	ldrh	r3, [r5, #12]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d907      	bls.n	800760a <_fwalk_reent+0x3a>
 80075fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075fe:	3301      	adds	r3, #1
 8007600:	d003      	beq.n	800760a <_fwalk_reent+0x3a>
 8007602:	4629      	mov	r1, r5
 8007604:	4630      	mov	r0, r6
 8007606:	47c0      	blx	r8
 8007608:	4307      	orrs	r7, r0
 800760a:	3568      	adds	r5, #104	; 0x68
 800760c:	e7e9      	b.n	80075e2 <_fwalk_reent+0x12>

0800760e <__retarget_lock_init_recursive>:
 800760e:	4770      	bx	lr

08007610 <__retarget_lock_acquire_recursive>:
 8007610:	4770      	bx	lr

08007612 <__retarget_lock_release_recursive>:
 8007612:	4770      	bx	lr

08007614 <__swhatbuf_r>:
 8007614:	b570      	push	{r4, r5, r6, lr}
 8007616:	460e      	mov	r6, r1
 8007618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800761c:	2900      	cmp	r1, #0
 800761e:	b096      	sub	sp, #88	; 0x58
 8007620:	4614      	mov	r4, r2
 8007622:	461d      	mov	r5, r3
 8007624:	da08      	bge.n	8007638 <__swhatbuf_r+0x24>
 8007626:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	602a      	str	r2, [r5, #0]
 800762e:	061a      	lsls	r2, r3, #24
 8007630:	d410      	bmi.n	8007654 <__swhatbuf_r+0x40>
 8007632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007636:	e00e      	b.n	8007656 <__swhatbuf_r+0x42>
 8007638:	466a      	mov	r2, sp
 800763a:	f000 f903 	bl	8007844 <_fstat_r>
 800763e:	2800      	cmp	r0, #0
 8007640:	dbf1      	blt.n	8007626 <__swhatbuf_r+0x12>
 8007642:	9a01      	ldr	r2, [sp, #4]
 8007644:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007648:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800764c:	425a      	negs	r2, r3
 800764e:	415a      	adcs	r2, r3
 8007650:	602a      	str	r2, [r5, #0]
 8007652:	e7ee      	b.n	8007632 <__swhatbuf_r+0x1e>
 8007654:	2340      	movs	r3, #64	; 0x40
 8007656:	2000      	movs	r0, #0
 8007658:	6023      	str	r3, [r4, #0]
 800765a:	b016      	add	sp, #88	; 0x58
 800765c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007660 <__smakebuf_r>:
 8007660:	898b      	ldrh	r3, [r1, #12]
 8007662:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007664:	079d      	lsls	r5, r3, #30
 8007666:	4606      	mov	r6, r0
 8007668:	460c      	mov	r4, r1
 800766a:	d507      	bpl.n	800767c <__smakebuf_r+0x1c>
 800766c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007670:	6023      	str	r3, [r4, #0]
 8007672:	6123      	str	r3, [r4, #16]
 8007674:	2301      	movs	r3, #1
 8007676:	6163      	str	r3, [r4, #20]
 8007678:	b002      	add	sp, #8
 800767a:	bd70      	pop	{r4, r5, r6, pc}
 800767c:	ab01      	add	r3, sp, #4
 800767e:	466a      	mov	r2, sp
 8007680:	f7ff ffc8 	bl	8007614 <__swhatbuf_r>
 8007684:	9900      	ldr	r1, [sp, #0]
 8007686:	4605      	mov	r5, r0
 8007688:	4630      	mov	r0, r6
 800768a:	f7ff f963 	bl	8006954 <_malloc_r>
 800768e:	b948      	cbnz	r0, 80076a4 <__smakebuf_r+0x44>
 8007690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007694:	059a      	lsls	r2, r3, #22
 8007696:	d4ef      	bmi.n	8007678 <__smakebuf_r+0x18>
 8007698:	f023 0303 	bic.w	r3, r3, #3
 800769c:	f043 0302 	orr.w	r3, r3, #2
 80076a0:	81a3      	strh	r3, [r4, #12]
 80076a2:	e7e3      	b.n	800766c <__smakebuf_r+0xc>
 80076a4:	4b0d      	ldr	r3, [pc, #52]	; (80076dc <__smakebuf_r+0x7c>)
 80076a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80076a8:	89a3      	ldrh	r3, [r4, #12]
 80076aa:	6020      	str	r0, [r4, #0]
 80076ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076b0:	81a3      	strh	r3, [r4, #12]
 80076b2:	9b00      	ldr	r3, [sp, #0]
 80076b4:	6163      	str	r3, [r4, #20]
 80076b6:	9b01      	ldr	r3, [sp, #4]
 80076b8:	6120      	str	r0, [r4, #16]
 80076ba:	b15b      	cbz	r3, 80076d4 <__smakebuf_r+0x74>
 80076bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076c0:	4630      	mov	r0, r6
 80076c2:	f000 f8d1 	bl	8007868 <_isatty_r>
 80076c6:	b128      	cbz	r0, 80076d4 <__smakebuf_r+0x74>
 80076c8:	89a3      	ldrh	r3, [r4, #12]
 80076ca:	f023 0303 	bic.w	r3, r3, #3
 80076ce:	f043 0301 	orr.w	r3, r3, #1
 80076d2:	81a3      	strh	r3, [r4, #12]
 80076d4:	89a0      	ldrh	r0, [r4, #12]
 80076d6:	4305      	orrs	r5, r0
 80076d8:	81a5      	strh	r5, [r4, #12]
 80076da:	e7cd      	b.n	8007678 <__smakebuf_r+0x18>
 80076dc:	0800746d 	.word	0x0800746d

080076e0 <_malloc_usable_size_r>:
 80076e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076e4:	1f18      	subs	r0, r3, #4
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	bfbc      	itt	lt
 80076ea:	580b      	ldrlt	r3, [r1, r0]
 80076ec:	18c0      	addlt	r0, r0, r3
 80076ee:	4770      	bx	lr

080076f0 <_raise_r>:
 80076f0:	291f      	cmp	r1, #31
 80076f2:	b538      	push	{r3, r4, r5, lr}
 80076f4:	4604      	mov	r4, r0
 80076f6:	460d      	mov	r5, r1
 80076f8:	d904      	bls.n	8007704 <_raise_r+0x14>
 80076fa:	2316      	movs	r3, #22
 80076fc:	6003      	str	r3, [r0, #0]
 80076fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007702:	bd38      	pop	{r3, r4, r5, pc}
 8007704:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007706:	b112      	cbz	r2, 800770e <_raise_r+0x1e>
 8007708:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800770c:	b94b      	cbnz	r3, 8007722 <_raise_r+0x32>
 800770e:	4620      	mov	r0, r4
 8007710:	f000 f830 	bl	8007774 <_getpid_r>
 8007714:	462a      	mov	r2, r5
 8007716:	4601      	mov	r1, r0
 8007718:	4620      	mov	r0, r4
 800771a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800771e:	f000 b817 	b.w	8007750 <_kill_r>
 8007722:	2b01      	cmp	r3, #1
 8007724:	d00a      	beq.n	800773c <_raise_r+0x4c>
 8007726:	1c59      	adds	r1, r3, #1
 8007728:	d103      	bne.n	8007732 <_raise_r+0x42>
 800772a:	2316      	movs	r3, #22
 800772c:	6003      	str	r3, [r0, #0]
 800772e:	2001      	movs	r0, #1
 8007730:	e7e7      	b.n	8007702 <_raise_r+0x12>
 8007732:	2400      	movs	r4, #0
 8007734:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007738:	4628      	mov	r0, r5
 800773a:	4798      	blx	r3
 800773c:	2000      	movs	r0, #0
 800773e:	e7e0      	b.n	8007702 <_raise_r+0x12>

08007740 <raise>:
 8007740:	4b02      	ldr	r3, [pc, #8]	; (800774c <raise+0xc>)
 8007742:	4601      	mov	r1, r0
 8007744:	6818      	ldr	r0, [r3, #0]
 8007746:	f7ff bfd3 	b.w	80076f0 <_raise_r>
 800774a:	bf00      	nop
 800774c:	20000014 	.word	0x20000014

08007750 <_kill_r>:
 8007750:	b538      	push	{r3, r4, r5, lr}
 8007752:	4d07      	ldr	r5, [pc, #28]	; (8007770 <_kill_r+0x20>)
 8007754:	2300      	movs	r3, #0
 8007756:	4604      	mov	r4, r0
 8007758:	4608      	mov	r0, r1
 800775a:	4611      	mov	r1, r2
 800775c:	602b      	str	r3, [r5, #0]
 800775e:	f7f9 fe71 	bl	8001444 <_kill>
 8007762:	1c43      	adds	r3, r0, #1
 8007764:	d102      	bne.n	800776c <_kill_r+0x1c>
 8007766:	682b      	ldr	r3, [r5, #0]
 8007768:	b103      	cbz	r3, 800776c <_kill_r+0x1c>
 800776a:	6023      	str	r3, [r4, #0]
 800776c:	bd38      	pop	{r3, r4, r5, pc}
 800776e:	bf00      	nop
 8007770:	20000374 	.word	0x20000374

08007774 <_getpid_r>:
 8007774:	f7f9 be5e 	b.w	8001434 <_getpid>

08007778 <__sread>:
 8007778:	b510      	push	{r4, lr}
 800777a:	460c      	mov	r4, r1
 800777c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007780:	f000 f894 	bl	80078ac <_read_r>
 8007784:	2800      	cmp	r0, #0
 8007786:	bfab      	itete	ge
 8007788:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800778a:	89a3      	ldrhlt	r3, [r4, #12]
 800778c:	181b      	addge	r3, r3, r0
 800778e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007792:	bfac      	ite	ge
 8007794:	6563      	strge	r3, [r4, #84]	; 0x54
 8007796:	81a3      	strhlt	r3, [r4, #12]
 8007798:	bd10      	pop	{r4, pc}

0800779a <__swrite>:
 800779a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800779e:	461f      	mov	r7, r3
 80077a0:	898b      	ldrh	r3, [r1, #12]
 80077a2:	05db      	lsls	r3, r3, #23
 80077a4:	4605      	mov	r5, r0
 80077a6:	460c      	mov	r4, r1
 80077a8:	4616      	mov	r6, r2
 80077aa:	d505      	bpl.n	80077b8 <__swrite+0x1e>
 80077ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077b0:	2302      	movs	r3, #2
 80077b2:	2200      	movs	r2, #0
 80077b4:	f000 f868 	bl	8007888 <_lseek_r>
 80077b8:	89a3      	ldrh	r3, [r4, #12]
 80077ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077c2:	81a3      	strh	r3, [r4, #12]
 80077c4:	4632      	mov	r2, r6
 80077c6:	463b      	mov	r3, r7
 80077c8:	4628      	mov	r0, r5
 80077ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077ce:	f000 b817 	b.w	8007800 <_write_r>

080077d2 <__sseek>:
 80077d2:	b510      	push	{r4, lr}
 80077d4:	460c      	mov	r4, r1
 80077d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077da:	f000 f855 	bl	8007888 <_lseek_r>
 80077de:	1c43      	adds	r3, r0, #1
 80077e0:	89a3      	ldrh	r3, [r4, #12]
 80077e2:	bf15      	itete	ne
 80077e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80077e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077ee:	81a3      	strheq	r3, [r4, #12]
 80077f0:	bf18      	it	ne
 80077f2:	81a3      	strhne	r3, [r4, #12]
 80077f4:	bd10      	pop	{r4, pc}

080077f6 <__sclose>:
 80077f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077fa:	f000 b813 	b.w	8007824 <_close_r>
	...

08007800 <_write_r>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	4d07      	ldr	r5, [pc, #28]	; (8007820 <_write_r+0x20>)
 8007804:	4604      	mov	r4, r0
 8007806:	4608      	mov	r0, r1
 8007808:	4611      	mov	r1, r2
 800780a:	2200      	movs	r2, #0
 800780c:	602a      	str	r2, [r5, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	f7f9 fe4f 	bl	80014b2 <_write>
 8007814:	1c43      	adds	r3, r0, #1
 8007816:	d102      	bne.n	800781e <_write_r+0x1e>
 8007818:	682b      	ldr	r3, [r5, #0]
 800781a:	b103      	cbz	r3, 800781e <_write_r+0x1e>
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	bd38      	pop	{r3, r4, r5, pc}
 8007820:	20000374 	.word	0x20000374

08007824 <_close_r>:
 8007824:	b538      	push	{r3, r4, r5, lr}
 8007826:	4d06      	ldr	r5, [pc, #24]	; (8007840 <_close_r+0x1c>)
 8007828:	2300      	movs	r3, #0
 800782a:	4604      	mov	r4, r0
 800782c:	4608      	mov	r0, r1
 800782e:	602b      	str	r3, [r5, #0]
 8007830:	f7f9 fe5b 	bl	80014ea <_close>
 8007834:	1c43      	adds	r3, r0, #1
 8007836:	d102      	bne.n	800783e <_close_r+0x1a>
 8007838:	682b      	ldr	r3, [r5, #0]
 800783a:	b103      	cbz	r3, 800783e <_close_r+0x1a>
 800783c:	6023      	str	r3, [r4, #0]
 800783e:	bd38      	pop	{r3, r4, r5, pc}
 8007840:	20000374 	.word	0x20000374

08007844 <_fstat_r>:
 8007844:	b538      	push	{r3, r4, r5, lr}
 8007846:	4d07      	ldr	r5, [pc, #28]	; (8007864 <_fstat_r+0x20>)
 8007848:	2300      	movs	r3, #0
 800784a:	4604      	mov	r4, r0
 800784c:	4608      	mov	r0, r1
 800784e:	4611      	mov	r1, r2
 8007850:	602b      	str	r3, [r5, #0]
 8007852:	f7f9 fe56 	bl	8001502 <_fstat>
 8007856:	1c43      	adds	r3, r0, #1
 8007858:	d102      	bne.n	8007860 <_fstat_r+0x1c>
 800785a:	682b      	ldr	r3, [r5, #0]
 800785c:	b103      	cbz	r3, 8007860 <_fstat_r+0x1c>
 800785e:	6023      	str	r3, [r4, #0]
 8007860:	bd38      	pop	{r3, r4, r5, pc}
 8007862:	bf00      	nop
 8007864:	20000374 	.word	0x20000374

08007868 <_isatty_r>:
 8007868:	b538      	push	{r3, r4, r5, lr}
 800786a:	4d06      	ldr	r5, [pc, #24]	; (8007884 <_isatty_r+0x1c>)
 800786c:	2300      	movs	r3, #0
 800786e:	4604      	mov	r4, r0
 8007870:	4608      	mov	r0, r1
 8007872:	602b      	str	r3, [r5, #0]
 8007874:	f7f9 fe55 	bl	8001522 <_isatty>
 8007878:	1c43      	adds	r3, r0, #1
 800787a:	d102      	bne.n	8007882 <_isatty_r+0x1a>
 800787c:	682b      	ldr	r3, [r5, #0]
 800787e:	b103      	cbz	r3, 8007882 <_isatty_r+0x1a>
 8007880:	6023      	str	r3, [r4, #0]
 8007882:	bd38      	pop	{r3, r4, r5, pc}
 8007884:	20000374 	.word	0x20000374

08007888 <_lseek_r>:
 8007888:	b538      	push	{r3, r4, r5, lr}
 800788a:	4d07      	ldr	r5, [pc, #28]	; (80078a8 <_lseek_r+0x20>)
 800788c:	4604      	mov	r4, r0
 800788e:	4608      	mov	r0, r1
 8007890:	4611      	mov	r1, r2
 8007892:	2200      	movs	r2, #0
 8007894:	602a      	str	r2, [r5, #0]
 8007896:	461a      	mov	r2, r3
 8007898:	f7f9 fe4e 	bl	8001538 <_lseek>
 800789c:	1c43      	adds	r3, r0, #1
 800789e:	d102      	bne.n	80078a6 <_lseek_r+0x1e>
 80078a0:	682b      	ldr	r3, [r5, #0]
 80078a2:	b103      	cbz	r3, 80078a6 <_lseek_r+0x1e>
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	bd38      	pop	{r3, r4, r5, pc}
 80078a8:	20000374 	.word	0x20000374

080078ac <_read_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	4d07      	ldr	r5, [pc, #28]	; (80078cc <_read_r+0x20>)
 80078b0:	4604      	mov	r4, r0
 80078b2:	4608      	mov	r0, r1
 80078b4:	4611      	mov	r1, r2
 80078b6:	2200      	movs	r2, #0
 80078b8:	602a      	str	r2, [r5, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	f7f9 fddc 	bl	8001478 <_read>
 80078c0:	1c43      	adds	r3, r0, #1
 80078c2:	d102      	bne.n	80078ca <_read_r+0x1e>
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	b103      	cbz	r3, 80078ca <_read_r+0x1e>
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	bd38      	pop	{r3, r4, r5, pc}
 80078cc:	20000374 	.word	0x20000374

080078d0 <_init>:
 80078d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d2:	bf00      	nop
 80078d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078d6:	bc08      	pop	{r3}
 80078d8:	469e      	mov	lr, r3
 80078da:	4770      	bx	lr

080078dc <_fini>:
 80078dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078de:	bf00      	nop
 80078e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078e2:	bc08      	pop	{r3}
 80078e4:	469e      	mov	lr, r3
 80078e6:	4770      	bx	lr
